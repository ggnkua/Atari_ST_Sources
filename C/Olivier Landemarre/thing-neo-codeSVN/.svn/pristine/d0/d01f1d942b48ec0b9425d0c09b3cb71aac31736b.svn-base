## THINGICN.STG
## Help document for Thing Icon Manager
## Use hcp V(09.09.1966) compiler by H. Weets & C. Wempe

@database "Documentation for ThingIcn"
@hostname "THING   "
@default "%I"
@options "+g -i -s +y +zz -t4 -d4"
@author "Arno Welzel/TransAction (PW)/Ldv"
@help "%Hilfe"
@$VER: thingicn.hyp 1.11E
@subject "Documentation/Shells"
@width 75
@remark ST-Guide flags: $0000


@node "%I" "Documentation for ThingIcn 1.11 - Table of Contents"
@next "%I"
@xref "Index"
@xref "ST-GUIDE.HYP" "ST-Guide"
@xref "THING.HYP" "Thing"
@remark 192x64x2
@image "img18.img" 1
                         The Thing Icon Manager
                         Released as Freeware - OpenSource in 2012 (LGPL V3)
                         2023-2024 Olivier Landemarre - 2013 Gerhard Stoll
                         ½ 1995-2012 Arno Welzel & Thomas Binder

@line 1 75 0 0 7

@line 2 2 0 0 1
@line 4 0 1 0 1
@line 2 2 1 0 1
    General
     ù @{"Introduction" LINK "Introduction"}
     ù Main window
     ù Keyboard operation
     ù @{"Editing the assignments" LINK "%dedit"}
     ù ThingIcn FreeWare

@line 2 2 0 0 1
@line 4 0 1 0 1
@line 2 2 1 0 1
    Menu commands
     ù @{"File - Save" LINK "%msave"}
     ù @{"File - Last Version" LINK "%mrevert"}
     ù @{"File - Cycle Windows" LINK "%mnwin"}
     ù @{"File - Quit" LINK "%mquit"}
     ù @{"Edit - Edit Assignments..." LINK "%medit"}
     ù @{"Edit - Find Assignment..." LINK "%mfind"}
     ù @{"Edit - Find Icon..." LINK "%mfindic"}

@endnode


@node "%Hilfe" "Documentation for Thing - Help"
@next "%Hilfe"
@prev "%Hilfe"
@xref "%I" "Table of Contents"
@xref "Index"
@xref "ST-GUIDE.HYP" "ST-Guide"
@xref "THING.HYP" "Thing"
Help                                                               ThingIcn
@line 1 75 0 0 7

You are currently reading the hypertext documentation for ThinIcn 1.11, the
Icon Manager for Thing. Help for given functions can be requested in two 
ways:

@box 48 9 1 0
 1) Select a menu entry while holding down the  Control  key.

@box 29 6 1 0
 2) Within dialogs with the  Help  key, as long as these appear in windows.

In ST-Guide you can also browse from the keyboard. With the keys
@box 1 9 1 0
@box 11 3 1 0
@box 19 9 1 0
@box 29 3 1 0
 Control +   and  Control +   you can reach the previous or next page.
@box 53 5 1 0
To reach a cross-reference from the keyboard, press  Tab  (to select the
@box 49 8 1 0
first or next cross-reference present) and then  Return  (to call the 
@box 17 6 1 0
relevant page).  Undo  returns to the original page.

@endnode


@node "Introduction" "Documentation for ThingIcn 1.11 - Introduction"
@prev "Introduction"
Introduction                                                       ThingIcn
@line 1 75 0 0 7

Some of you may know the original ThingIcn that still came from Holger 
Weets. However, many people didn't like the user interface; in addition, 
that ThingIcn could not display coloured icons.

Hence the present ThingIcn was reconstructed from the ground up, based on 
the foundations set by Arno Welzel, the rest done by Thomas Binder and Dirk 
Klemmt. Initially, ThingIcn was @{U}not@{u} integrated into Thing, since there 
was not the requirement to modify the @{"ICONS.INF" LINK "thing.hyp/%DateiformateIC"} constantly and to reduce
the overall size of the distribution archive.

The first English translation of ThingIcn (both RSC and HYP document) was
provided by the Interactive translation crew.

In 2012, ThingIcn was released as FreeWare Open source (LGPL V3) and its
source code is now included in Thing repository.

In 2023, Olivier Landemarre restarted the Thing project. His repository of
the Thing project 'Thing Neo', forked from sources available at GitHub, is
now on SourceForge.

The new version of ThingIcn is now integrated in the Thing distribution 
along with the ThingFnd search tool.

What is new in ThingIcn 1.11:
- The ThingIcn manager shares the same system requirements of Thing. 
- ThingIcn is now integrated in the Thing distribution.
- The RSCs were moved inside the rsrc\thgicn Thing local directory. 
  Languages available are: English, German, French and Italian.
- Multilanguage support. When started, ThingIcn will use a localized RSC
  according to the language configured in the AES or the NVRAM.
  The AES language setting override the NVRAM. If no language is set or 
  no localized RSC is found, Thingicn defaults to English.  
- Icons are handled by the AES. The 'Thing Neo' icon sets will be displayed
  only if the AES supports 64 pts/256 colourd icons.
- ThingIcn automatically displays the ICONS.RSC and ICONS.INF assignments 
  of the 'active' icon set. For more informations on icons handling,
  see the @{"ICONS.INF" LINK "thing.hyp/%DateiformateIC"} and the @{"ICONS" LINK "thing.hyp/Icons"} pages of the Thing guide.
- The THINGDIR variable is no longer supported. The ICONS.RSC and ICONS.INF
  files are loaded from the local Thing directory \rsrc\icons\<active set>.  
  
So what can and cannot ThingIcn do?

  ù ThingIcn reads the files @{"ICONS.INF" LINK "thing.hyp/%DateiformateIC"} and ICONS.RSC from the directory 
    of the current icon set, and allows a simple way of editing the 
    assignments between files, folders, drives and the icons contained 
    therein.
    
  ù As before, ThingIcn supports the AV Protocol -- so in a multitasking 
    environment all keyboard shortcuts of Thing can continue to be used 
    (as long as these are not assigned in ThingIcn) and all windows will 
    be registered with the AV-Server (normally Thing).

  ù ThingIcn does @{I}not@{i} run as a desk accessory ! In return it offers 
    some new features, such as @{"keyboard operation" LINK "Keyboard operation"} and window dialogs.

  ù ThingIcn does not contain an icon editor ! It is also not possible to
    read in icons from other resource files, or to delete icons. If there 
    is sufficient demand, it is possible that at least the reading in and 
    deletion of icons could be added in future versions... It's up to you 
    to contact the authors and make your wishes known !

Altough ThingIcn is integrated in the Thing distribution archive, updates
might be distributed separately. 

@endnode


@node "Main window"
Main window                                                        ThingIcn
@line 1 75 0 0 7

@remark 353x239x2
@limage "img17.img" 2
The main window displays all icons from the ICONS.RSC file. If this window 
is closed , ThingIcn will be terminated. The icons will be positioned 
automatically, so there is no need for a horizontal slider.

A double-click on an icon opens the dialog for editing the assignment of
this icon.

With suitable operating systems there is an even easier way: You can drag 
files, folders or drives from within @{"Thing" LINK "THING.HYP"} (or another AV-Server) onto the 
@box 60 9 1 0
desired icon. If one holds down one of the 'special' keys ( Control , 
@box 1 11 1 0
@box 16 7 1 0
 Alternate  or  Shift ) while 'dropping' a file then the extension of the 
dropped file will -- as far as possible -- be ascertained and assigned to 
the icon prefixed by a '*.'; so 'README.TXT' would produce '*.TXT'.

@endnode


@node "Keyboard operation"
Keyboard operation                                                 ThingIcn
@line 1 75 0 0 7

@{U}'Normal' mode@{u}

No icon is selected. This is also the position immediately after starting 
ThingIcn. One can scroll the contents of the @{"main window" LINK "Main window"} with the cursor
@box 20 7 1 0
@box 67 9 1 0
keys. Holding down  Shift  during this scrolls page by page. With  ClrHome 
@box 5 7 1 0
@box 13 9 1 0
and  Shift + ClrHome  one moves to the start or end of the window contents 
respectively.

@box 1 8 1 0
 Insert  selects the first icon and switches over to the 'Cursor' mode.


@{U}'Cursor' mode@{u}

This mode becomes active as soon as an icon is selected. The cursor is 
@box 32 9 1 0
@box 45 7 1 0
@box 53 9 1 0
moved with the cursor keys and  ClrHome  or  Shift + ClrHome .

@box 1 8 1 0
 Return  allows the current icon to be edited -- this corresponds to a
double-click on the icon.

@box 1 8 1 0
 Insert  deselects the current icon and so switches back to the 'Normal'
mode.


@{U}General@{u}

@box 53 11 1 0
Some options in dialogs can be selected by pressing  Alternate  together 
with the key for the underlined letter.
@endnode


@node "%dedit" "Editing the assignments"
Editing the assignments                                            ThingIcn
@line 1 75 0 0 7

The assignments for an individual icon are edited in a dialog box.

@remark 467x358x2
@limage "img16.img" 2

'Icon' is the label of the icon in the resource file, which serves to 
identify the icon.
'Type' specifies the uses of the icon. Some icons are so-called 'Standard 
icons', meaning that they will also be used if no assignments are present.
One can, however, also assign given files, folders etc. to standard icons.

Below the name and type of the icon, all of its assignments are displayed 
in a list box. The format of this list box is:

  <Type> <Character> <Wildcard>

<Type> shows the type of the assignment:

   F = File, O = Folder, D = Drive

<Character> is the (optional) character that can be prefixed to files in 
the directory window in text mode. The character will not be used if the 
'Suppress mini-icons in text mode' option in the 'Window 1' page of the
'Extra' - 'Setup' menu in @{"Thing" LINK "thing.hyp/%mcf1"} is set!

@box 54 9 1 0
@box 64 3 1 0
The list box can also be operated from the keyboard:  Control +   and
@box 1 9 1 0
@box 11 3 1 0
 Control +   move the selection bar up and down respectively. In addition
@box 6 9 1 0
@box 16 9 1 0
@box 30 9 1 0
@box 40 7 1 0
@box 48 9 1 0
with  Control + ClrHome  and  Control + Shift + ClrHome  one can reach the
first and last entry of the list respectively.

Finally, the lower region of the dialog permits editing of the assignment
@box 40 7 1 0
that is selected in the list box. With  Alter  the input data are adopted,
@box 7 8 1 0
while  Delete  removes the selected assignment.

The colour for the display of an entry in the text or mini-icon mode of
@{"Thing" LINK "THING.HYP"} is shown also in the lower region of the dialog, and may be altered 
there; to change it, click on the number in the popup, not the small 
coloured field left of it. 'No colour' is represented by light stippling in 
the selection field.

To insert a new assignment, just select the last 'empty' entry in the list,
@box 40 7 1 0
enter the desired data and then select  Alter . The entry will be included
in the list and a new 'empty' entry will be created at the end of the list.

@endnode


@node "%msave" "File - Save"
File - Save                                                        ThingIcn
@line 1 75 0 0 7

With this command the icon assignments are saved to the file @{"ICONS.INF" LINK "thing.hyp/%DateiformateIC"}.
Invalid assignments that were recognised when reading in the file will be 
included as comments at the start. With a multitasking system, a parallel-
running @{"Thing" LINK "THING.HYP"} will be notified immediately that the icon assigments have 
changed, and after a safety query these will be loaded in.

During saving, ThingIcn sorts the assignments automatically so that the 
most common wildcards lie at the end of the file. This is necessary because 
@{"Thing" LINK "THING.HYP"} searches through the assignments in the order that they lie in 
@{"ICONS.INF" LINK "thing.hyp/%DateiformateIC"}. Without this sorting the icon for, say, 'DISKUS.APP' would 
never be used if an earlier assignment for '*.APP' was found.

@box 1 75 6 0

@remark 32x32x2
@image "img15.img" 2
      An @{"ICONS.INF" LINK "thing.hyp/%DateiformateIC"} saved by ThingIcn version 1.10 or higher requires at
      least @{"Thing" LINK "THING.HYP"} 1.20 in order to be read correctly. If one has assigned 
      a '*' to a standard icon, then at least Thing 1.25 is required to
      ensure correct results are obtained.


@endnode


@node "%mrevert" "File - Last Version"
File - Last Version                                                ThingIcn
@line 1 75 0 0 7

With this menu entry any changes made since the last save will be discarded 
after a safety query.

@endnode


@node "%mnwin" "File - Cycle Windows"
File - Cycle Windows                                               ThingIcn
@line 1 75 0 0 7

This function tops another window. If ThingIcn is running in a multitasking
OS (MagiC, MultiTOS) and @{"AVSERVER" LINK "thing.hyp/AVSERVER"} is set correctly, then if required 
@box 21 9 1 0
@box 31 3 1 0
the key combination  Control + W  is sent to the server (normally @{"Thing" LINK "THING.HYP"}) 
with @{"AV_SENDKEY" LINK "thing.hyp/AV_SENDKEY"}.

@endnode


@node "%mquit" "File - Quit"
File - Quit                                                        ThingIcn
@line 1 75 0 0 7

This -- as you might expect -- quits ThingIcn ;-)

If necessary, any changes will be saved after a safety query in @{"ICONS.INF" LINK "thing.hyp/%DateiformateIC"} 
and @{"Thing" LINK "THING.HYP"} informed about this (as long as ThingIcn is running in a 
multitasking envirnoment parallel to Thing).

@endnode


@node "%medit" "Edit - Edit Assignments"
Edit - Edit Assignments                                            ThingIcn
@line 1 75 0 0 7

@box 39 8 1 0
This menu entry -- just like pressing  Return  -- opens the dialog for
editing the assignments of the currently selected icon.

@endnode


@node "%mfind" "Edit - Find Assignment..."
Edit - Find Assignment...                                          ThingIcn
@line 1 75 0 0 7

This function is used to search for a given wildcard. A dialog box appears
listing all wildcards present. The desired entry can be found quickly via 
an 'Autolocator'.

@box 28 4 1 0
If the dialog is quit with  OK  , ThingIcn selects the associated icon in 
the @{"main window" LINK "Main window"}.

@endnode


@node "%mfindic" "Edit - Find Icon..."
@next "%mfindic"
Edit - Find Icon...                                                ThingIcn
@line 1 75 0 0 7

@remark 347x279x2
@limage "img14.img" 2
This function is used to search for a given icon. A dialog box appears
listing all icons present. The desired entry can be found quickly via an 
'Autolocator'.

@box 28 4 1 0
If the dialog is quit with  OK  , ThingIcn selects the associated icon in 
the @{"main window" LINK "Main window"}.

@endnode


@node "ThingIcn FreeWare"
@next "ThingIcn FreeWare"
ThingIcn FreeWare                                                  ThingIcn
@line 1 75 0 0 7

In 2012 ThingIcn was released as FreeWare OpenSource under a Lesser Gnu 
Public License V3. The full LGPL V3 text is included in the Thing desktop
distribution archive. 

ThingIcn is now integral part of the Thing desktop distribution. The source
code is available at the Thing SourceForge repository.




@endnode
