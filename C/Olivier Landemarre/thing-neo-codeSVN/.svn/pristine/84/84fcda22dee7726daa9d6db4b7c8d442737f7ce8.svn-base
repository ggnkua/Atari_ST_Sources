## ------------------------------------------------------------------------
## Protokolle
## ------------------------------------------------------------------------

@node Protocols "Thing Documentation - Protocols"
@prev Protocols
@include header.stg

@line 2 2 0
@line 4 0 1
@line 2 2 1
    Protocols
     ù @{"AV Protocol" link "AV Protocol"}
     ù @{"Font Protocol" link "Font Protocol"}
     ù @{"Drag&Drop" link "Drag&Drop"}
@endnode

## ------------------------------------------------------------------------

@node "AV Protocol"
@toc Protocols
@autorefoff
AV Protocol                                                           Thing
@line 1 75 0 0 7
@autorefon

The AV protocol was developed for use with the Gemini replacement desktop. 
Gemini comprised a desktop, Venus, and a command line called Mupfel. 
In order for Venus to communicate with desktop accessories the AV protocol
was developed and is widely supported today:

(AV ~ Accessory <-> Venus)

Thing supports most of the messages defined in the 11. Nov 1994 release
and consequently Thing works well as an 'AV Server' for accessories or
under a multitasking environment. Filename quoting is still not supported!

In the following description Thing acts as the 'Server' and accessories
and applications are 'Clients'.

In order to use Thing as an AV Server under a multitasking environment
you must set an environmental variable for Thing called AVSERVER. This is
done as follows:

  @{U}FreeMiNT@{0}
    MyAES: entry ' export AVSERVER="THING   " ' in the file DESKTOP.CNF;
    XaAES: entry ' setenv AVSERVER "THING   " ' in the file XAAES.CNF;
    N.AES: entry ' export AVSERVER=THING ' in the file NAES.CNF;

  @{U}MagiC@{0}
    Entry '#_ENV AVSERVER=THING' in the file MAGX.INF (must be added
    before '#_CTR'!)

  @{U}MultiTOS@{0}
    Entry 'setenv AVSERVER=THING' in the file MINT.CNF.

The following functions are supported by Thing:

@autorefon
  AV_PROTOKOLL        AV_SENDKEY             VA_PATH_UPDATE
  AV_ASKFILEFONT      AV_ASKCONFONT          VA_FONTCHANGED
  AV_OPENWIND         AV_STARTPROG
  AV_ACCWINDOPEN      AV_ACCWINDCLOSED
  AV_STATUS           AV_GETSTATUS
  AV_COPY_DRAGGED     AV_PATH_UPDATE
  AV_WHAT_IZIT        AV_DRAG_ON_WINDOW
  AV_EXIT             AV_STARTED
  AV_XWIND            AV_VIEW
  AV_FILEINFO         AV_COPYFILE
  AV_DELFILE          AV_SETWINDPOS
@autorefoff

@box 1 75 41

@image ictip.img 2
      @{U}Some hints for the implementation in your own programs:@{u}

      ù Under Single-TOS only the (main-)application 0 can act as
        AV server.
        In a multitasking environment, like MagiC or MultiTOS you have to
        check the presence of an AV server by checking the environmental
        varibale AVSERVER.

      ù Once a program used AV_PROTOKOLL, it must use AV_EXIT before
        terminating!

      ù A program should always wait for the return of VA_PROTOSTATUS
        before using any other AV_... messages! It may be, that the current
        server does not provide all messages of the AV protocol!

      ù @{B}All memory blocks, which are used to pass file names,
        parameters etc. MUST be allocated 'global' when running under
        MultiTOS!!! (hint: Mxalloc(<size>,0x42)). Otherwise memory
        violations will occur!@{b}

      ù All file names and folder names must be with complete path names.
        (e.g. 'I:\test.txt').

      ù If the server supports 'quoting' of file names, they can be
        enclosed in quotation marks. If a quotation mark is part of the
        file name, it has be repeated once:

          D:\Letter to Moni    becomes   'D:\Letter to Moni'
          D:\Peter's Picture   becomes   'D:\Peter''s Picture'

      ù If there is more than one file name (or folder name), the names
        are separated by a single space (ASCII 32).

      ù Folder names @{I}must@{0} be terminated by a backslash ('\' -
        - ASCII 92) - e.g. 'I:\Letters\' (even Gemini 1.a seems not do
        this)!

      ù To provide 'global' 'Window cycling', AV clients should send
@box 9 9 1
@box 19 3 1
         Control + W  to the server via AV_SENDKEY message.


@endnode

## ------------------------------------------------------------------------

@node AV_PROTOKOLL "AV Protocol, AV_PROTOKOLL"
@toc Protocols
@autorefoff
AV Protocol, AV_PROTOKOLL                                             Thing
@line 1 75 0 0 7
@autorefon

@{U}AV_PROTOKOLL (0x4700) Server <- Client (26. Jun 1995)@{0}

A client asks the server which functions of the AV protocol it
supports. The server replies by sending a VA_PROTOSTATUS message.

  Wort 3:   Bit 0: VA_SETSTATUS
            Bit 1: VA_START
            Bit 2: AV_STARTED
            Bit 3: VA_FONTCHANGED
            Bit 4: Provides and uses file name quoting
            Bit 5: VA_PATH_UPDATE
            Bit 6-15: Reserved, always 0
  Wort 4:   Reserved, always 0
  Wort 5:   Reserved, always 0
  Wort 6+7: Pointer to the name, which has to be used for appl_find()
            to get the AES ID of the client. (8 characters long and
            null terminated).
@endnode

## ------------------------------------------------------------------------

@node VA_PROTOSTATUS "AV Protocol, VA_PROTOSTATUS"
@toc Protocols
@autorefoff
AV Protocol, VA_PROTOSTATUS                                           Thing
@line 1 75 0 0 7
@autorefon

@{U}VA_PROTOSTATUS (0x4701) Server -> Client (26. Jun 1995)@{0}

Reply sent in answer to a AV_PROTOCOL enquiry from the client. The reply,
in the form of a status word, reports which functions of the AV protocol
Thing supports. Greyed out entries will never be supported by Thing.

  Wort 3:   Bit 0:  AV_SENDKEY
            Bit 1:  AV_ASKFILEFONT
            Bit 2:  AV_ASKCONFONT, @{G}AV_OPENCONSOLE@{0}
            Bit 3:  AV_ASKOBJECT
            Bit 4:  AV_OPENWIND
            Bit 5:  AV_STARTPROG
            Bit 6:  AV_ACCWINDOPEN, AV_ACCWINDCLOSED
            Bit 7:  AV_STATUS, AV_GETSTATUS
            Bit 8:  AV_COPY_DRAGGED
            Bit 9:  AV_PATH_UPDATE, AV_WHAT_IZIT, AV_DRAG_ON_WINDOW
            Bit 10: AV_EXIT
            Bit 11: AV_XWIND
            Bit 12: VA_FONTCHANGED
            Bit 13: AV_STARTED
            Bit 14: Provides and uses file name quoting
            Bit 15: AV_FILEINFO, VA_FILECHANGED
  Wort 4:   Bit 0:  AV_COPYFILE, VA_FILECOPIED
            Bit 1:  AV_DELFILE, VA_FILEDELETED
            Bit 2:  AV_VIEW, VA_VIEWED
            Bit 3:  AV_SETWINDPOS
            Bit 4-15: Reserved, always 0
  Wort 5:   Reserved, always 0
  Word 6+7: Pointer to the program names of the servers, prepared for
            appl_find() (8 characters long and null terminated).
@endnode

## --------------------------------------------------------------------

@node AV_GETSTATUS "AV Protocol, AV_GETSTATUS"
@toc Protocols
@autorefoff
AV Protocol, AV_GETSTATUS                                             Thing
@line 1 75 0 0 7
@autorefon

@{U}AV_GETSTATUS (0x4703) Server <- Client (11. Nov 1994)@{0}

Requests the status information saved using AV_STATUS. A VA_SETSTATUS
message is sent as a reply

  No parameters
@endnode

## --------------------------------------------------------------------

@node AV_STATUS "AV Protocol, AV_STATUS"
@toc Protocols
@autorefoff
AV Protocol, AV_STATUS                                                Thing
@line 1 75 0 0 7
@autorefon

@{U}AV_STATUS (0x4704) Server <- Client (11. Nov 1994)@{0}

Using this message a client can tell the server any status information
(presets etc) it might need again. Thing saves this information as a
component of its setup in THING.INF.

This function is primarily useful for Accessories because single TOS
is at best equipped with dodgey buffers!

  Word 3+4: Pointer to a string up to 256 characters long which may not
            contain any control characters.
@endnode

## --------------------------------------------------------------------

@node VA_SETSTATUS "AV Protocol, AV_SETSTATUS"
@toc Protocols
@autorefoff
AV Protocol, VA_SETSTATUS                                             Thing
@line 1 75 0 0 7
@autorefon

@{U}VA_SETSTATUS (0x4705) Server -> Client (11. Nov 1994)@{0}

Reply to a AV_GETSTATUS message. Thing shares the previously saved
status information with the client.

  Word 3+4: Pointer to the saved string or NULL if no information is
            available.
@endnode

## --------------------------------------------------------------------

@node AV_SENDKEY "AV Protocol, AV_SENDKEY"
@toc Protocols
@autorefoff
AV Protocol, AV_SENDKEY                                               Thing
@line 1 75 0 0 7
@autorefon

@{U}AV_SENDKEY (0x4710) Server <- Client (11. Nov 1994)@{0}

Using this message a client can send Thing any keys it doesn't use for
itself.

@box 31 9 1
@box 41 3 1
Note: Thing and Gemini accept  Control + W  to perform a 'global'
 'Window cycling', which takes windows of AV clients in account too.
 The key state (ev_mmokstate) is 0x0004, the scan code (ev_mkreturn) is
 0x1107.

  Word 3: Key state (ev_mmokstate)
  Word 4: Scan code of the pressed key (ev_mkreturn)
@endnode

## --------------------------------------------------------------------

@node VA_START "AV Protocol, VA_START"
@toc Protocols
@autorefoff
AV Protocol, VA_START                                                 Thing
@line 1 75 0 0 7
@autorefon

@{U}VA_START (0x4711) Server -> Client (11. Nov 1994)@{0}

Using this message a server pass parameters to accessories or parallel
running applications.

An exceptional feature: Thing can receive VA_START messages too. In the
command line an individual program or file can be passed. Installed
applications are also taken into account.

Command lines beginning with the ':' character must not be used because
they are interpreted as internal commands!

  Word 3+4: Pointer to the command line. Objects dragged to icons using
            Drag&Drop require the entire filename, i.e path, filename and
            trailing backslash '\' character.
@endnode

## --------------------------------------------------------------------

@node AV_ASKFILEFONT "AV Protocol, AV_ASKFILEFONT"
@toc Protocols
@autorefoff
AV Protocol, AV_ASKFILEFONT                                           Thing
@line 1 75 0 0 7
@autorefon

@{U}AV_ASKFILEFONT (0x4712) Server <- Client (11. Nov 1994)@{0}

Using this message the client can request the current font used for
filenames in directory windows. The server the ID and size (in points)
of the font with a VA_FILEFONT message.

See VA_FONTCHANGED too.

  No parameters
@endnode

## --------------------------------------------------------------------

@node VA_FILEFONT "AV Protocol, VA_FILEFONT"
@toc Protocols
@autorefoff
AV Protocol, VA_FILEFONT                                              Thing
@line 1 75 0 0 7
@autorefon

@{U}VA_FILEFONT (0x4713) Server -> Client (11. Nov 1994)@{0}

Reply to AV_ASKFILEFONT. The server returns the ID and size (in points)
of the current font used for filenames in directory windows.

See VA_FONTCHANGED too.

  Word 3: ID of font (vst_font)
  Word 4: Size in points (vst_point)
@endnode

## --------------------------------------------------------------------

@node AV_ASKCONFONT "AV Protocol, AV_ASKCONFONT"
@toc Protocols
@autorefoff
AV Protocol, AV_ASKCONFONT                                            Thing
@line 1 75 0 0 7
@autorefon

@{U}AV_ASKCONFONT (0x4714) Server <- Client (11. Nov 1994)@{0}

A client can request the current font used in the Console window. The
server replies using a VA_CONFONT message the ID and size (in points)
of the font.

See VA_FONTCHANGED too.

  No parameters
@endnode

## --------------------------------------------------------------------

@node VA_CONFONT "AV Protocol, VA_CONFONT"
@toc Protocols
@autorefoff
AV Protocol, VA_CONFONT                                               Thing
@line 1 75 0 0 7
@autorefon

@{U}VA_CONFONT (0x4715) Server -> Client (11. Nov 1994)@{0}

Thing uses this message to answer AV_ASKCONFONT. Thing reports the font
ID and size (in points) of the current font used in the Console window.

See VA_FONTCHANGED too.

  Word 3: ID of font (vst_font)
  Word 4: Size in points (vst_point)
@endnode

## --------------------------------------------------------------------

@node AV_OPENWIND "AV Protocol, AV_OPENWIND"
@toc Protocols
@autorefoff
AV Protocol, AV_OPENWIND                                              Thing
@line 1 75 0 0 7
@autorefon

@{U}AV_OPENWIND (0x4720) Server <- Client (11. Nov 1994)@{0}

Thing opens a new directory window.

  Word 3+4: Pointer to the path of the to open directories
  Word 5+6: Pointer to the file mask. '*.*' is intrepreted as '*' (all
            files) by Thing.
@endnode

## --------------------------------------------------------------------

@node VA_WINDOPEN "AV Protocol, VA_WINDOPEN"
@toc Protocols
@autorefoff
AV Protocol, VA_WINDOPEN                                              Thing
@line 1 75 0 0 7
@autorefon

@{U}VA_WINDOPEN (0x4721) Server -> Client (11. Nov 1994)@{0}

Thing answers client to AV_OPENWIND.

  Word 3: 0   = Error
          !=0 = Window opened and directory updated
@endnode

## --------------------------------------------------------------------

@node AV_STARTPROG "AV Protocol, AV_STARTPROG"
@toc Protocols
@autorefoff
AV Protocol, AV_STARTPROG                                             Thing
@line 1 75 0 0 7
@autorefon

@{U}AV_STARTPROG (0x4722) Server <- Client (11. Nov 1994)@{0}

Thing starts a program at the request of a client.

  Word 3+4: Program name with complete path - optionally including the
            filename. If the filename is included Thing searches for
            the application and the filename then passes the filename,
            as a parameter, to the application.
  Word 5+6: Command line or NULL, if no command line is passed.
  Word 7:   Any 16 Bit value, which VA_PROGSTART passes back
@endnode

## --------------------------------------------------------------------

@node VA_PROGSTART "AV Protocol, VA_PROGSTART"
@toc Protocols
@autorefoff
AV Protocol, VA_PROGSTART                                             Thing
@line 1 75 0 0 7
@autorefon

@{U}VA_PROGSTART (0x4723) Server -> Client (11. Nov 1994)@{0}

Reply to AV_STARTPROG enquiry. Thing always sends an answer immediately,
i.e. after the end of programs started under single TOS which are not
handled as accessories. Currently the Return code of started programs is
always 0.

If Thing ends before starting the program (e.g. Overlay mode under
single TOS or starting an application in single mode under MagiC) no
answer message is sent.

A client will always receive an error message if the program couldn't
be started.

  Word 3: 0   = Error
          !=0 = Program started
  Word 4: Return code of the program (where available)
  Word 7: 16 Bit word from AV_STARTPROG
@endnode

## --------------------------------------------------------------------

@node AV_ACCWINDOPEN "AV Protocol, AV_ACCWINDOPEN"
@toc Protocols
@autorefoff
AV Protocol, AV_ACCWINDOPEN                                           Thing
@line 1 75 0 0 7
@autorefon

@{U}AV_ACCWINDOPEN (0x4724)  Server <- Client (11. Nov 1994)@{0}

A client uses this message to share with Thing the information that it has
opened a window. Thing can then extend Drag&drop and cycle window support
to cover this window.

  Word 3: AES handle for window
@endnode

## --------------------------------------------------------------------

@node VA_DRAGACCWIND "AV Protocol, VA_DRAGACCWIND"
@toc Protocols
@autorefoff
AV Protocol, VA_DRAGACCWIND                                           Thing
@line 1 75 0 0 7
@autorefon

@{U}VA_DRAGACCWIND (0x4725) Server -> Client (11. Nov 1994)@{0}

Thing sends an AV_ACCWINDOPEN message to the client sharing the information
that one or more object/s have been dragged to its window.

See AV_COPY_DRAGGED too.

Note: Should the keyboard status for a further answer of the client (e.g.
 AV_COPY_DRAGGED) become neccessary, it should, on receipt of
 VA_DRAGACCWIND, check the value returned from evnt_multi().

 I.e. the EVENT-structure should be ascertained using EvntMulti() and
 not by sending the answer using graf_mkstate()!

  Word 3:   AES window handle
  Word 4:   X position of mouse
  Word 5:   Y position of mouse
  Word 6+7: Pointer to the string including the object names
@endnode

## --------------------------------------------------------------------

@node AV_ACCWINDCLOSED "AV Protocol, AV_ACCWINDCLOSED"
@toc Protocols
@autorefoff
AV Protocol, AV_ACCWINDCLOSED                                         Thing
@line 1 75 0 0 7
@autorefon

@{U}AV_ACCWINDCLOSED (0x4726) Server <- Client (11. Nov 1994)@{0}

A client shares information with Thing that it has closed one of its
windows. This only occurs if a client shuts its own window. Under
Single TOS accessory windows are automatically closed on starting
applications and this message is not neccessary.

  Word 3: AES window handle
@endnode

## --------------------------------------------------------------------

@node AV_COPY_DRAGGED "AV Protocol, AV_COPY_DRAGGED"
@toc Protocols
@autorefoff
AV Protocol, AV_COPY_DRAGGED                                          Thing
@line 1 75 0 0 7
@autorefon

@{U}AV_COPY_DRAGGED (0x4728) Server <- Client (11. Nov 1994)@{0}

A client informs Thing an object, or objects, have been delivered via
VA_DRAGACCWIND ready for copying. Thing send the client a VA_COPY_COMPLETE
reply.

  Word 3:   Keyboard status on receipt of VA_DRAGACCWIND
  Word 4+5: Pointer to the destination path
@endnode

## --------------------------------------------------------------------

@node VA_COPY_COMPLETE "AV Protocol, VA_COPY_COMPLETE"
@toc Protocols
@autorefoff
AV Protocol, VA_COPY_COMPLETE                                         Thing
@line 1 75 0 0 7
@autorefon

@{U}VA_COPY_COMPLETE (0x4729) Server -> Client (11. Nov 1994)@{0}

Reply to AV_COPY_DRAGGED from Thing to client.

  Word 3: 0   = Error or user initiated cancel
          !=0 = Objects are copied and the directory window is updated if
                neccessary.
@endnode

## --------------------------------------------------------------------

@node AV_PATH_UPDATE "AV Protocol, AV_PATH_UPDATE"
@toc Protocols
@autorefoff
AV Protocol, AV_PATH_UPDATE                                           Thing
@line 1 75 0 0 7
@autorefon

@{U}AV_PATH_UPDATE (0x4730) Server <- Client (11. Nov 1994)@{0}

A client informs Thing the contents of a directory have changed. Thing
then re-reads the appropriate directories, and any sub directories, in
the given path.

  Word 3+4: Pointer to the absolute path (e.g. C:\AUTO\).
@endnode

## --------------------------------------------------------------------

@node AV_WHAT_IZIT "AV Protocol, AV_WHAT_IZIT"
@toc Protocols
@autorefoff
AV Protocol, AV_WHAT_IZIT                                             Thing
@line 1 75 0 0 7
@autorefon

@{U}AV_WHAT_IZIT (0x4732) Server <- Client (11. Nov 1994)@{0}

A client requests details about what is located at a certain part of
the screen. Thing replies with a VA_THAT_IZIT message.

  Word 3: X-Coordinate
  Word 4: Y-Coordinate
@endnode

## --------------------------------------------------------------------

@node VA_THAT_IZIT "AV Protocol, VA_THAT_IZIT"
@toc Protocols
@autorefoff
AV Protocol, VA_THAT_IZIT                                             Thing
@line 1 75 0 0 7
@autorefon

@{U}VA_THAT_IZIT (0x4733) Server -> Client (11. Nov 1994)@{0}

Reply to a AV_WHAT_IZIT enquiry.

  Word 3:   AES ID for the appropriate application
  Word 4:   Object type
  Word 5+6: Pointer to the object names or NULL, if no names are available

The types are as follows:

@autorefoff
  VA_OB_UNKNOWN   (0)  Unknown (Console window, desktop etc)
  VA_OB_TRASHCAN  (1)  Gemini 'Trash Can' - not available using Thing
  VA_OB_SHREDDER  (2)  Trash Can (Gemini 'Shredder')
  VA_OB_CLIPBOARD (3)  Clipboard
  VA_OB_FILE      (4)  File
  VA_OB_FOLDER    (5)  Folder or directory window background
  VA_OB_DRIVE     (6)  Drive
  VA_OB_WINDOW    (7)  Window belonging to another application
@autorefon
@endnode

## --------------------------------------------------------------------

@node AV_DRAG_ON_WINDOW "AV Protocol, AV_DRAG_ON_WINDOW"
@toc Protocols
@autorefoff
AV Protocol, AV_DRAG_ON_WINDOW                                        Thing
@line 1 75 0 0 7
@autorefon

@{U}AV_DRAG_ON_WINDOW (0x4734) Server <- Client (11. Nov 1994)@{0}

A client informs Thing objects have been dropped somewhere. Thing sorts
out what's happening at the location supplied, then sends a
VA_DRAG_COMPLETE message.

  Word 3:   X position of the mouse
  Word 4:   Y position of the mouse
  Word 5:   Keyboard status
  Word 6+7: Pointer to the string containing the names of the objects
@endnode

## --------------------------------------------------------------------

@node VA_DRAG_COMPLETE "AV Protocol, VA_DRAG_COMPLETE"
@toc Protocols
@autorefoff
AV Protocol, VA_DRAG_COMPLETE                                         Thing
@line 1 75 0 0 7
@autorefon

@{U}VA_DRAG_COMPLETE (0x4735)  Server -> Client (11. Nov 1994)@{0}

Reply to AV_DRAG_ON_WINDOW message.

  Word 3: 0=Nothing changed after the Drag&drop
          1=The given objects were processed (copied, deleted etc.)
@endnode

## --------------------------------------------------------------------

@node AV_EXIT "AV Protocol, AV_EXIT"
@toc Protocols
@autorefoff
AV Protocol, AV_EXIT                                                  Thing
@line 1 75 0 0 7
@autorefon

@{U}AV_EXIT (0x4736) Server <- Client (11. Nov 1994)@{0}

A client informs Thing it no longer observing the AV protocol. This
cancels all AV_ACCWINDOPEN messages too.

This message must be used, before terminating a program if the
program did use AV_PROTOKOLL!

  Word 3: AES ID of the client
@endnode

## --------------------------------------------------------------------

@node AV_STARTED "AV Protocol, AV_STARTED"
@toc Protocols
@autorefoff
AV Protocol, AV_STARTED                                               Thing
@line 1 75 0 0 7
@autorefon

@{U}AV_STARTED (0x4738) Server <- Client (11. Nov 1994)@{0}

A client informs Thing it has received and understood the VA_START
message and the reserved memory for the command line can be released.

At the moment, this message is ignored because Thing does not reserve
any extra memory for VA_START messages.

  Word 3+4: Pointer to the command line, received by VA_START
@endnode

## --------------------------------------------------------------------

@node VA_FONTCHANGED "AV Protocol, VA_FONTCHANGED"
@toc Protocols
@autorefoff
AV Protocol, VA_FONTCHANGED                                           Thing
@line 1 75 0 0 7
@autorefon

@{U}VA_FONTCHANGED (0x4739) Server -> Client (11. Nov 1994)@{0}

If one of the fonts in Thing is changed all clients, which have already
requested the font via the AV_PROTOKOLL, are informed.

Note: Unfortunately TreeView 2.4, programmed by Stephan Gerle, does not
 react to this message so Thing explicitly sends TreeView (Applications
 named 'TREEVIEW') a VA_FILEFONT message. This is not the ideal solution
 but is a practical workaround.

  Word 3: ID of the font used for directories (vst_font)
  Word 4: Size in points for font used in directories (vst_point)
  Word 5: ID of the font used in the Console window (vst_font)
  Word 6: Size in points for font used in the Console window (vst_point)
@endnode

## --------------------------------------------------------------------

@node AV_XWIND "AV Protocol, AV_XWIND"
@toc Protocols
@autorefoff
AV Protocol, AV_XWIND                                                 Thing
@line 1 75 0 0 7
@autorefon

@{U}AV_XWIND (0x4740) Server <- Client (11. Nov 1994)@{0}

Thing opens a directory window, similar to AV_OPENWIND except
additional options are available:

  Word 3+4: Pointer to the path for opening directories
  Word 5+6: Pointer to the mask (Wildcard) for the available files
  Word 7:   Bit 0:    Use current top window, if available
            Bit 1:    Use wildcard for object selection
            Bit 2-15: Reserved, always 0
@endnode

## --------------------------------------------------------------------

@node VA_XOPEN "AV Protocol, VA_XOPEN"
@toc Protocols
@autorefoff
AV Protocol, VA_XOPEN                                                 Thing
@line 1 75 0 0 7
@autorefon

@{U}VA_XOPEN (0x4741) Server -> Client (11. Nov 1994)@{0}

Reply to AV_XWIND, similar to VA_WINDOPEN.

 Word 3: 0   = Error
         !=0 = Window opened and the directory completely read
               i.e. a available window could be topped.
@endnode

## --------------------------------------------------------------------

@node AV_VIEW "AV Protocol, AV_VIEW"
@toc Protocols
@autorefoff
AV Protocol, AV_VIEW                                                  Thing
@line 1 75 0 0 7
@autorefon

@{U}AV_VIEW (0x4751) Server <- Client (26th June 1995)@{0}

The server should call the viewer for a specific file. If no viewer is 
available an error message is returned to the user.

@{I}Note:@{i} In contrast to Gemini 1.a Thing knows which applications are 
installed for which file-types. With this message Thing can start the 
relevant application (e.g. a simple IMG viewer instead of a complete 
image editing graphics program for IMG files).

  Word 3+4: Pointer to the name of the file to be displayed (only a 
            @{I}single@{i} file is allowed!)
  Word 5-7: Reserved, always 0
  
@endnode

## --------------------------------------------------------------------

@node VA_VIEWED "AV Protocol, VA_VIEWED"
@toc Protocols
@autorefoff
AV Protocol, VA_VIEWED                                                Thing
@line 1 75 0 0 7
@autorefon

@{U}VA_VIEWED (0x4752) Server -> Client (26th June 1995)@{u}

Reply to AV_VIEW. The server informs the client whether the file will 
be displayed or not. The answer is immediate and always sent out if an 
error occurred. Otherwise, in a multitasking background, the answer is 
received as soon as the viewer is topped (made active); under Single-TOS
the answer is received after exiting the viewer, if the server had not 
already been ended (e.g. by unloading Thing from memory before starting 
the viewer -- overlay mode).

  Word 3:   0 = Error, 1 = All OK
  Word 4-7: Reserved, always 0
    
@endnode

## --------------------------------------------------------------------

@node AV_FILEINFO "AV Protocol, AV_FILEINFO"
@toc Protocols
@autorefoff
AV Protocol, AV_FILEINFO                                              Thing
@line 1 75 0 0 7
@autorefon

@{U}AV_FILEINFO (0x4753) Server <- Client (26th June 1995)@{u}

Display file/folder info.  VA_FILECHANGED is received in reply.

  Word 3+4: Pointer to file or folder name. Several files/folders 
            may be separated using space characters. Folders must 
            include a trailing backslash '\' character!
  Word 5-7: Reserved, always 0

@endnode

## --------------------------------------------------------------------

@node VA_FILECHANGED "AV Protocol, VA_FILECHANGED"
@toc Protocols
@autorefoff
AV Protocol, VA_FILECHANGED                                           Thing
@line 1 75 0 0 7
@autorefon

@{U}VA_FILECHANGED (0x4754) Server -> Client (26th June 1995)@{u}

Reply to AV_FILEINFO.

  Word 3+4: Pointer to the names of files/folders that were passed via 
            AV_FILEINFO, where naturally some files/folders may have 
            new names.

            @{I}Example:@{i} 'C:\ANNA.TXT C:\AUTO\' was passed.
                      The user changes 'ANNA.TXT' to 'ANNIE.TXT'.
                      As a result the message string changes to:
                      'C:\ANNIE.TXT C:\AUTO\'
  Word 5-7: Reserved, always 0
  
@endnode

## --------------------------------------------------------------------

@node AV_COPYFILE "AV Protocol, AV_COPYFILE"
@toc Protocols
@autorefoff
AV Protocol, AV_COPYFILE                                              Thing
@line 1 75 0 0 7
@autorefon

@{U}AV_COPYFILE (0x4755) Server <- Client (26th June 1995)@{u}

Copy/Move files/folders. VA_FILECOPIED is received in reply.

  Word 3+4: Pointer to the source file/s and folder/s, separated 
            using space characters. Folders must include a trailing 
            backslash '\' character.
  Word 5+6: Pointer to the destination folder
  Wort 7:   Bit 0:    Delete original (move)
            Bit 1:    Rename copy
            Bit 2:    Overwrite destination without comment
            Bit 3:    Only create symbolic links of the source/s
            Bit 4-15: Reserved, always 0
			
@endnode

## --------------------------------------------------------------------

@node VA_FILECOPIED "AV Protocol, VA_FILECOPIED"
@toc Protocols
@autorefoff
AV Protocol, VA_FILECOPIED                                            Thing
@line 1 75 0 0 7
@autorefon

@{U}VA_FILECOPIED (0x4756) Server -> Client (26th June 1995)@{u}

Reply to AV_COPYFILE.

  Word 3:   0 = Error, 1 = All OK
  Word 4-7: Reserved, always 0
  
@endnode

## --------------------------------------------------------------------

@node AV_DELFILE "AV Protocol, AV_DELFILE"
@toc Protocols
@autorefoff
AV Protocol, AV_DELFILE                                               Thing
@line 1 75 0 0 7
@autorefon

@{U}AV_DELFILE (0x4757) Server <- Client (26th June 1995)@{u}

Delete files/folders. VA_FILEDELETED received in reply.

  Word 3+4: Pointer to the files/folders to be deleted, separated using 
            space characters. Folders must include a trailing 
            backslash '\' character.
  Word 5-7: Reserved, always 0

@endnode

## --------------------------------------------------------------------

@node VA_FILEDELETED "AV Protocol, VA_FILEDELETED"
@toc Protocols
@autorefoff
AV Protocol, VA_FILEDELETED                                           Thing
@line 1 75 0 0 7
@autorefon

@{U}VA_FILEDELETED (0x4758) Server -> Client (26th June 1995)@{u}

Reply to AV_DELFILE.

  Word 3:   0 = Error, 1 = All OK
  Word 4-7: Reserved, always 0


@endnode

## --------------------------------------------------------------------

@node AV_SETWINDPOS "AV Protocol, AV_SETWINDPOS"
@toc Protocols
@autorefoff
AV Protocol, AV_SETWINDPOS                                            Thing
@line 1 75 0 0 7
@autorefon

@{U}AV_SETWINDPOS (0x4759) Server <- Client (26th June 1995)@{u}

Intended as an extension to AV_XWIND or AV_OPENWIND. With this the client 
can specify the position and size of the next directory window to be 
opened (with AV_XWIND or AV_OPENWIND). The co-ordinates are given in 
absolute co-ordinates.

If AV_XWIND does not open a new window but only tops an existing window, 
this message has no effect!

  Word 3:  Position X
  Word 4:  Position Y
  Word 5:  Width
  Word 6:  Height
  Word 7:  Reserved, always 0
  
@endnode

## --------------------------------------------------------------------

@node VA_PATH_UPDATE "AV Protocol, VA_PATH_UPDATE"
@toc Protocols
@autorefoff
AV Protocol, VA_PATH_UPDATE                                           Thing
@line 1 75 0 0 7
@autorefon

 @{U}VA_PATH_UPDATE (0x4760) Server -> Client (26th June 1995)@{u}

If the client has established with AV_PROTOKOLL that it accepts this 
message, then the server uses it to inform the client whenever the 
contents of a directory or sub-directory have changed. The client should 
then re-read all affected directories and sub-directories, if necessary 
closing any sub-directories that no longer exist.

 Word 3+4: Pointer to the directory, which must always include a 
           trailing backslash '\' character.
 Word 5-7: Reserved, always 0 
  
@endnode

## ------------------------------------------------------------------------

@node "Font Protocol"
@toc Protocols
@autorefoff
Font Protocol                                                         Thing
@line 1 75 0 0 7
@autorefon

From V 0.40 on Thing supports the most important functions of the Font 
Protocol, which was introduced by Christian Grunenberg.

Thing can also be installed as a font selector for other applications, 
although at present only @{"ST-Guide" LINK "ST-GUIDE.HYP"} (30/04/95 or later) as well as 
MultiStrip support this option. For successful operation the following 
criteria must be fulfilled:

 ù Thing must be running in parallel to the application -- either the 
   application runs as a desk accessory under Single-TOS or one is working 
   in a multitasking environment

 ù The environmental variable 'FONTSELECT' must be set to 'THING'

A brief description of the messages supported by Thing is given in: 

@autorefon
 FONT_SELECT, FONT_CHANGED
@autorefoff

@endnode

## ------------------------------------------------------------------------

@node FONT_SELECT "Font Protocol, FONT_SELECT"
@toc Protocols
@autorefoff
Font Protocol, FONT_SELECT                                            Thing
@line 1 75 0 0 7
@autorefon

@{U}FONT_SELECT (0x7A19)  Application -> Thing@{u}

An application calls the font selector and if a font is selected 
successfully by the user it receives the FONT_CHANGED reply.

  Word 3: Handle of the affected window, or negative value if the font 
          for all windows should be changed.
  Word 4: Font ID or 0
  Word 5: Font size in points
  Word 6: Font colour
  Word 7: Effects - Bit 0:    Bold
                    Bit 1:    Light
                    Bit 2:    Italics
                    Bit 3:    Underlined
                    Bit 4:    Outlined
                    Bit 5:    Shadowed
                    Bit 6:    Inverse
                    Bit 7-15: Reserved, always 0
@endnode

## ------------------------------------------------------------------------

@node FONT_CHANGED "Font Protocol, FONT_CHANGED"
@toc Protocols
@autorefoff
Font Protocol, FONT_CHANGED                                           Thing
@line 1 75 0 0 7
@autorefon

@{U}FONT_CHANGED (0x7A18)  Application <- Thing@{u}

Reply to FONT_SELECT. Thing informs the application of the new values. The 
makeup corresponds to that of FONT_SELECT, except that Word 1 of the 
message contains the Thing application ID.

This message is also sent out by Thing if a font is Drag&Dropped onto
the window of another application.

@box 1 75 4

@image ictip.img 2
      Install WINX under Single-TOS so that Thing can determine the owner
      of all windows.


Thing also accepts this message as a receiver and updates the window 
display if necessary.

@endnode

## ------------------------------------------------------------------------

@node Drag&Drop
@next Drag&Drop
@toc Protocols
@autorefoff
Drag&Drop                                                             Thing
@line 1 75 0 0 7
@autorefon

This protocol was introduced by Atari for MultiTOS and has since been 
supported by MagiC!3 amongst others.


@{U}Thing as sender@{0}

Thing automatically operates this protocol if one or more objects in a 
window are Drag&Dropped onto a window belonging to another application 
which doesn't belong to an AV client and hasn't registered its windows 
with AV_ACCWINDOPEN.

Thing can even 'convert' AV Drag&Drop messages (AV_DRAG_ON_WINDOW) to 
Drag&Drop Protocol messages! This makes it possible to, say, search for 
files using ParaFin and send the result to CoNnect via Drag&Drop...

If the receiver does not understand the Dra&Drop Protocol or the system 
(e.g. MagiC! v2/Single-TOS) does not support it, then Thing tries sending 
a VA_START message with the names of the Drag&Dropped objects as the 
command line, which usually works so long as the system supports querying 
of ownership of desktop windows (tip for Single-TOS users: Use WINX).


@{U}Thing as a receiver@{u}

If a '.xxx' block is Drag&Dropped on the desktop, Thing requests a path to 
save the file to. If a drive etc. is selected as the destination the 
corresponding path is displayed as a guideline. If the block is 
Drag&Dropped onto the clipboard, Thing automatically saves the data as 
'SCRAP.xxx' in the @{"GEM clipboard" LINK "%DesktopOCLP"}.

Drag&Dropping a block to the trashcan or the printer is answered by Thing 
with DD_TRASH or DD_PRINTER respectively -- it's then up to the sender to 
react to this in a sensible way.

If an application's dialog window is chosen as the destination, then the 
block, if it is a '.TXT' block, will be inserted into the current editable 
field (if this is sensible -- that's why it won't work with all dialogs).

'ARGS' blocks are handled as VA_START messages, i.e. they are passed 
via the command line and simply executed.

'PATH' blocks are still currently not supported and rejected with DD_NAK.


@endnode
