## ------------------------------------------------------------------------
## Dateiformate
## ------------------------------------------------------------------------

@node "File formats" "Thing Documentation - File formats"
@prev "File formats"
@include header.stg

@line 2 2 0
@line 4 0 1
@line 2 2 1
    File formats
     ˘ @{"Icon assignments (ICONS.INF)" link %DateiformateIC}
     ˘ @{"General configuration (THING.INF)" link %DateiformateT}
     ˘ @{"Desktop configuration (xxxxyyyy.INF)" link %DateiformateDSK}
##     ˘ @{"Colour settings (COLORxxx.INF)" link %DateiformateCOL}
     ˘ @{"Display Options (THING.IDX)" link %DateiformateIDX}
     ˘ @{"Object groups (*.GRP)" link %DateiformateGRP}
     ˘ @{"Resource files THINGx.RSC and THGTXTx.RSC" link %DateiformateRSC}
@endnode

## ------------------------------------------------------------------------

@node %DateiformateIC "File formats - ICONS.INF"
@symbol "ICONS.INF"
@toc "File formats"
@xref Icons
@xref thingicn.hyp "Thing Icon Manager"
@autorefoff
File formats, ICONS.INF                                               Thing
@line 1 75 0 0 7
@autorefon

ICONS.INF contains a list of icon assignments that determines which 
icons in ICONS.RSC are used for drives, files and folders. 
If no ICONS.INF is found, the standard icons, as described in 'Icons', 
are used by default.

Thing searches both ICONS.INF and ICONS.RSC files in subfolders inside the
rsrc/icons local directory (where THING.APP is located).
Both environmental variables HOME and THINGDIR are @{0I}NOT@{0} observed.

@{0U}ICONS.INF structure:@{0}

 - Blank lines are ignored by Thing
 - Lines preceded with a '#' character are ignored by Thing and can be 
   used for comments
 - The maximum line length must not exceed 510 characters
 - ICONS.INF is @{0I}not@{0} kept in memory! Instead the assignments are
   interpreted and set up in optimised internal structures (incidentally 
   this is why no internal function to change the assignments is available)

Each line in ICONS.INF has the following format:


   <Type> "<Icon>" <Wildcard>[,<Wildcard>...] [[<Character>][/<Colour>]]

   <Type>      IFIL - Assignment for files/programs
               IFLD - Assignment for folder/s
               IDRV - Assignment for drives

   <Icon>      Descriptive label used for icon in the RSC file

   <Wildcard>  One or several masks, separated by commas; the masks are
               not case sensitive, i.e. '*.Txt', '*.TXT' and '*.txt' are 
               handled exactly the same way.
               For drives one specifies the individual drive letters 
               here, for example:
               IDRV "FLOPPY" A,B)

   <Character> An optional character that must be specified @{0I}without@{0} a
               comma, and must be separated from the <Wildcard> by at 
               least one space character. In the text display mode this 
               is then displayed at the left in front of the file name, 
               so long as the file is not an executable program.
   <Colour>    One can also optionally specify a text colour for an 
               icon type which Thing then uses in the text or mini-icon 
               mode irrespective of the text colour selected for the 
               window. Assignment is by a number between 0 and 15 which 
               match the colour numbers of the AES system colours:
 
               0 - White  4 - Blue      8 - Light grey  12 - Dark blue
               1 - Black  5 - Cyan      9 - Dark grey   13 - Dark cyan
               2 - Red    6 - Yellow   10 - Dark red    14 - Dark yellow
               3 - Green  7 - Magenta  11 - Dark green  15 - Dark magenta

               If the colour specified is the same as the background 
               colour of the window in which it appears, Thing will 
               automatically use the standard text colour for the window 
               to prevent the entry becoming invisible.
 

To clarify matters, here are a few examples: 

  # Individual programs
  #
  IFIL "KOBOLD 2"   kobold_2.prg
  IFIL "PURE C"     pc.prg
  #
  # Files
  #
  IFIL "APP"        *.prg,*.app
  IFIL "TOS"        *.tos,*.ttp
  IFIL "RSC"        *.rsc r/2
  IFIL "TXT"        *.txt,*.doc t
  #
  # Folders
  #
  IFLD "AUTO DIR"   auto
  IFLD "GEMSYS DIR" gemsys
  #
  # Drives
  #
  IDRV "DONALD" c
  IDRV "FILESYSTEM" i,u


@image icwarn.img 2
      It's important to list all specific files, programs and folders 
      before the wildcard entries, e.g. 'PC.PRG' before '*.PRG', because 
      the file is read from the first line downwards and the first 
      suitable entry is used -- a more sophisticated check could be 
      implemented but it would waste a disproportional amount of time.

@endnode

## ------------------------------------------------------------------------

@node %DateiformateT "File formats - THING.INF"
@toc "File formats"
@autorefoff
File formats, THING.INF                                               Thing
@line 1 75 0 0 7
@autorefon

The THING.INF 'General configuration file' contains all the resolution
independent settings (apart the icon assignments). 

THING searches for the THING.INF file first in HOME (defaults/Thing.cnf), 
then in the THINGDIR path, and finally locally inside the CONFIG directory. 

The THINGDIR variable no longer overrides the HOME variable !

For additional informations, see the @{"environmental variables" LINK "Environmental variables"}
paragraph.


The following settings are saved THING.INF:
 - 'Window' settings (1 & 2)
 - 'TOS2GEM' settings
 - 'Copy' settings
 - 'System' settings
 - Installed applications
 - Position and size of the directory and Console windows
 - 3D effect, double right mouse click and icon snap status

@{0U}THING.INF structure:@{0}

 - Blank lines are ignored by Thing
 - Lines preceded with a '#' character are ignored by Thing
 - The maximum line length must not exceed 510 characters
 - Each entry consists of a four character keyword followed by the 
   relevant details.

Each line of this file consists of a four-character identifier and the 
actual content starting at the sixth character. As Thing develops the 
structure of this file is constantly changing, so the 'VERS' entry at 
the start of the file is a handy check to ascertain which version of 
Thing created the file; thus any peculiarities of older versions can 
be accommodated when read into later ones. An example:

VERS 100

100 stands for 'v1.00'. Version 1.21 enters 121 here, etc.

@box 1 75 8

@image icwarn.img 2
      The version number is generated by Thing and may not be changed 
      manually in any circumstances! If 'VERS' is missing Thing defaults 
      to the format of v0.24 (where this feature was introduced) which 
      will certainly lead to major problems. Also too low a version 
      number of THING.INF may well lead to parts of the configuration 
      being misinterpreted or completely ignored!

Entries should generally not be edited directly. However if you experience 
problems the following entries may be edited:

 WIXY ...  Position/size of the directory window -- converted to 
           10000/10000

 VTXY ...  Ditto -- for the @{"Console window" LINK "%EinfÅhrungCON"}

 AVST ...  Status-information of AV clients that were set with AV_STATUS.
           These lines should only be deleted, @{0I}not@{0} edited!

 UDEF ...  Set to 1 if Thing should generate its own G_USERDEF-objects
           on starting. Editing to 'UDEF 0' instead of 'UDEF 1' 
           suppresses these and leaves this up to any AES-extension, 
           for example the 3D-look of MultiTOS or MagiC!3 take effect

           If 'UDEF' is missing completely, Thing defaults to 'UDEF 1'

  NICE ... Specifies whether Thing is to use its own 'Nicelines' in the 
           menus to draw 'prettier' separator lines between related groups 
           of entries. As several system extensions and newer operating 
           systems already offer something similar, users preferring the 
           system nicelines or not liking Thing's version for any reason 
           can switch the latter off with 'NICE 0'
 
           If 'NICE' is missing completely, Thing defaults to 'NICE 1'

 OKBD ...  If one is still using Kobold 2, one can use 'OKBD 1' to ensure 
           that Thing produces 'adapted' jobs that should also work with 
           the old Kobold.

           If 'OKBD' is missing completely, Thing defaults to 'OKBD 0'

Lines with a leading '#' are ignored and can be used for commenting. Blank 
lines are also ignored. The line length must not exceed 510 characters.

The exact structure of the individual lines can be requested from the 
author. But you shouldn't try to write any tools that change THING.INF! 

The content of the individual lines depends directly on the version 
number of Thing and can change at any time!

@endnode

## ------------------------------------------------------------------------

@node %DateiformateDSK "File formats - Desktop configuration"
@toc "File formats"
@autorefoff
File formats, Desktop configuration                                   Thing
@line 1 75 0 0 7
@autorefon

The resolution and colour-depth dependent desktop configuration is saved
in a file which denotes the current resolution and colour-depth, using 
the filename format:

  xxxxyyyy.Icc

where 'xxxx' is the horizontal resolution and 'yyyy' is the vertical 
resolution in pixels, while 'cc' is the number of bitplanes.
For example, at 640x400 resolution in two colours (1 bitplane) the 
filename created is

  06400400.I01
 
and at 1024x768 resolution in 256 colours (8 bitplanes) the filename 
created is:

  10240768.I08

Thing searches for the desktop configuration file first in HOME 
(defaults/Thing.cnf directory), then inside the CONFIG folder in 
the THINGDIR path, and finally locally inside a CONFIG directory. 

The THINGDIR variable no longer overrides the HOME variable !

For additional informations, see the @{"environmental variables" LINK "Environmental variables"}
paragraph.

Old Thing INF files (before Thing 1.09 there were separate resolution and 
colour-depth dependent files) can continue to be used, and at the next 
saving will be converted into a new format file automatically (the old 
files remain intact). It's possible future Thing versions will be able to 
read/write both file formats because in certain situations separate 
files are more flexible.

@endnode

## ------------------------------------------------------------------------
##
@node %DateiformateIDX "File formats, Display options"
@toc "File formats"
@autorefoff
File formats, Display options                                         Thing
@line 1 75 0 0 7
@autorefon

The 'display options' file 'THING.IDX' contains the Icon display mode 
(text/mini icons/icons), the sort order and the mask settings of the 
current directory window. The settings saved in THING.IDX will apply 
also to lower-lying directories -- as long as they haven't their own 
IDX file.

@box 1 75 4 0

@remark 32x32x2
@image "ictip.img" 2
      To get rid of the saved display options, simply delete the file 
      'THING.IDX' in the relevant directory.

@endnode

## ------------------------------------------------------------------------
##
@node %DateiformateGRP "File formats - Object groups"
@symbol "Group files"
@toc "File formats"
@autorefoff
File formats, Object groups                                           Thing
@line 1 75 0 0 7
@autorefon

For each object group a separate file with the extender '.GRP' is created. 
Besides the objects contained in the group the following information is 
stored:

 - A descriptive title for the group window
 - The position and size of the group window
 - Display as icon or text
 - Options and parent object

The contents of a group file is built up in a similar manner to other 
Thing configuration files.

Group file (*.GRP) structure: 
 - Blank lines are ignored by Thing
 - Lines preceded with a '#' character are ignored by Thing
 - The maximum line length must not exceed 510 characters
 - Each entry consists of a four character keyword at the start of the 
   line followed by the relevant details.

In contrast to the other THING configuration files, one can rely on the 
structure of the group files remaining compatible with future Thing 
versions. However extensions (new entries) are possible and in Version 
1.2x compared to 1.0x are in fact present! If groups created by a newer 
Thing version are opened in an older version and then saved again then 
those extensions that the Thing version that opens the file does not know 
about will be lost. If on the other hand an older group file is opened 
with a newer Thing version, then saving with this will update the file 
with the new entries if appropriate.
 
The first entry must contain the group title, window position etc:

   INFO "<Title>" <x> <y> <w> <h> <Display> <autosave>

   <Title>             Group title, up to 32 characters
   <x>, <y>, <w>, <h>  Position and size of the window converted to a
                       co-ordinate system between 0/0 to 10000/10000
   <Display>           Display:
                        0 = Display as icons
                        1 = Display as text
   <autosave>          Save changes automatically:
                        0 = No
                        1 = Yes
 
From Thing 1.20 onwards two further settings follow:


   IGTA <getattr>

   <getattr>  Get attributes during opening
                0 = No
                1 = Yes

and

   IACL <autoclose>

   <autoclose> Close group window automatically after opening an object
                 0 = No
                 1 = Yes

Also from Thing 1.20 onwards one can optionally specify a parent object 
to be opened when the group is closed via the 'Closer' button or the 
corresponding menu entry:


   PRNT <parent>

   <parent>  Parent object, which can be:
               - A file, that is opened paying regard to installed
                 applications
               - A program, that is started with optional following
                 parameters
               - A directory, that is opened with optional following 
                 file mask

Then follow (optionally) specifications of the desired fonts and the 
colours higher than the 16 available system colours (older Thing versions 
use the colours specified here at all colour-depths):


   FONT <ID> <Size> <Text> <Background>

   <ID>            Font-ID (system font is always 1)
   <Size>          Font-size in points (system font is 10 by default)
   <Text>          Text colour (above the 16 available system colours)
   <Background>    Background colour (also applies to icon display) 

The colours to be used when fewer than 16 system colours are available 
are specified as follows (only supported from Thing 1.20 onwards):


   FCOL <Text> <Backgound>

   <Text>          Text colour (for less than 16 system colours)
   <Background>    Background colour (also applies to icon display) 

From Thing 1.20 onwards a background pattern is also supported:


   BPAT <pattern> <pattern16>

   <pattern>    Background pattern for less than 16 available system 
                colours
                  0 = Empty (clear)
                  ...
                  7 = Full (solid)
   <pattern16>  Ditto, from 16 available system colours upwards


File objects follow this format:


   OFIL "<Title>" <file> "<Parameter>"

   <Title>      Descriptive title, up to 32 characters
   <File>       Filename
   <Parameter>  Command line parameter/s for program

Folder objects follow this format:


   OFLD "<Title>" <Path> "<Wildcard>"

   <Title>      Descriptive title, up to 32 characters
   <Path>       Folder name - must be terminated with a trailing '\'!
   <Wildcard>   File mask, or '*' for 'all files'

From Thing 1.25 onwards an object entry can be followed by a line with 
object options:


   OOPT <Drag&Drop> 0 0 0 0 0 0 0 0 0

   <Drag&Drop>  Corresponds to the 'Pass also with Drag&Drop' setting 
                for (executable) files in a group, and has no meaning
                for folders.
                  0 = No
                  1 = Yes

   All other values are reserved for future options and must be set to
   zero at present.

If a group entry is not followed by an 'OOPT' line, Thing behaves as if 
one completely filled with zeros was present.

@{"Objects" LINK "%DesktopO"} are displayed in the group window in the order they are listed 
in the '*.GRP' file. Unless an absolute path is specified for file and 
folder names Thing uses the group file path.
Some 'special' options are possible, for example '..\readme' and similar
are allowed, and the file mask can be dropped, i.e. for <Wildcard> one
can specify "".


      To enable saving of 'special' characters (not letters or numbers) 
      and quotation marks in titles and parameters, certain ASCII values 
      are coded in a particular way. Special control sequences are used 
      instead of individual characters (these are @{0I}not@{0} valid for file or 
      path names, which have to be 'quote'd following the usual rules!:)

        ASCII 1 ... 31        as "@@01" ... "@@31"
        Quotation marks (")   as "@@34"
        At character    (@@)   as "@@64"

      One should take note of this when creating one's own programs that 
      generate group files!

      Thing can also open group files if the name of the group file is 
      passed via an AV_START or AV_STARTPROG message. This means other 
      programs could also build groups and pass them on to Thing.

@endnode

## ------------------------------------------------------------------------

@node %DateiformateRSC "File formats - THINGx.RSC and THGTXTx.RSC"
@next %DateiformateRSC
@symbol "THING.RSC"
@toc "File formats"
@autorefoff
File formats, THINGx.RSC and THGTXTx.RSC                              Thing
@line 1 75 0 0 7
@autorefon

Thing currently uses two RSC files for each language. When available, Thing
will load the localized RSCs for the language set in NVRAM  or in the AES. 
If no system language or no localized RSCs are available, Thing will load 
the default RSCs : THING.RSC and THGTXT.RSC.

Localized RSCs are named THINGx.RSC and THGTXTx.RSC, where x stands for 
the language code set in NVRAM or configured via AES.

Languages currently supported are: English (0), German (1), French (2)
and Italian (5). 

The RSCs are normal GEM resource files that can be edited using most RSC 
editors, such as Interface (preferred), ORCS, RSM, etc. 
The THINGx.RSCs contain a few colour icons objects (256 colours, NVDI 
palette) and are suited for platforms running OSs that support this
feature. For legacy platforms, inside the LEGACY folder is available a
THING.RSC (English) file, with B&W icons and a size < 64K.

THING.RSC contains all dialogs, default @{"icons" LINK "Icons"} and the menu bar, while 
THINGTXT.RSC contains all alert boxes, error messages and other free 
strings.

@{B}If you attempt to edit the thing.rsc file, bear in mind the following:@{b}

 ˘ Thing calculates the co-ordinates when loading the resource file not 
   on the basis of the system font but rather the 'cell size' of the 
   system font. The first object tree in the THING.RSC contains this 
   statement as a string (object number 1) in the first object tree:

     ' 8 16' ... means that the font during @{I}design@{i} of the file was based 
                 on a cell size of 8*16 pixels. This statement must be 
                 changed if during @{I}alteration@{i} of the file one is working 
                 with a replacement system font (which may, for example, 
                 be 7*12 or 8*8 pixels etc.)!

 ˘ @{B}Edited RSC files shall NOT be distributed under any circumstances!@{b} 
   If you've created a new language version please send me a copy to the
   project coordinator, who will push it to the main repository and include
   it to the official distribution. 

 ˘ The resource file size is already above the 64Kb size. Thus, if you're 
   editing it with Interface be careful not to save the file in RSX format 
   as the file will be too big!
 
   The RSX format cannot be read by Thing at present and leads to a crash!

 ˘ All keyboard shortcuts are MagiC compatible -- i.e. the shortcuts can 
   be seen and edited directly under MagiC. Using the 'Card index' style 
   paged dialogs the shortcuts for some buttons are not directly visible 
   but the definitions are MagiC compatible.

 ˘ Menu shortcuts are evaluated and can be changed as desired. However,
   only  Control  (^X) and  Shift  +  Control  (^X) combinations should 
   be assigned, if possible.

   The shortcut  Shift  +  Delete  for 'Delete' is hard coded into Thing 
   and cannot be turned off, but @{I}additional@{i} 'Delete' shortcuts may be 
   assigned.

 ˘ The RCS must be able to read the top eight bytes of the object type 
   correctly (as I recall the old Digital Research RCS doesn't handle 
   these bytes correctly -- but please do check for yourselves!).

 ˘ Some Thing dialogs employ tabbed 'card index' style layouts where 
   individual 'pages' are simply stored as object trees overlaying one 
   another. Check that your RCS doesn't automatically combine these into 
   'Parent-child' relationships! To edit the underlying parts of the 
   dialogs one has to hide the 'obscuring' page to reach the next 'lower' 
   page. Make sure that you unhide all the hidden pages at the end (with 
   Interface you can hold down  Control  when clicking on 'Unhide' to 
   select the parent object) as otherwise you will get a partly blank 
   display!
   
@endnode
