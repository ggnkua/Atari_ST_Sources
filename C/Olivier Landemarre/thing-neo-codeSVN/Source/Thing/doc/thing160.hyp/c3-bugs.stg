## ------------------------------------------------------------------------
## Bekannte Probleme
## ------------------------------------------------------------------------

@node Bugs
@prev Bugs
@next Bugs
@autorefoff
Bugs                                                                  Thing
@line 1 75 0 0 7
@autorefon

"... it can only get better..." ;-)

Unfortunately for both financial and time reasons I can't test every 
conceivable configuration on all possible machines! Thing was developed 
originally on a 1040STe with a monochrome monitor, which is why there were 
problems testing anything to do with colour displays. [Note by Thomas 
Binder: Currently Thing development takes place on a Falcon030 with 4Mb 
memory. I have access to MagiC, MultiTOS, N.AES, TOS 4.04 as well as 
-- much less often -- MagiC PC and STONX. Other equipment is available via 
the beta testers.]

The following list may contain problems which do not necessarily occur in 
the current Thing release version.

 ˘ On the FireBee, when a window is scrolled in Mini-icons display mode,
   the icons are partially redrawn beyond the lower edge of the working
   area.   
 
 ˘ For technical reason the adoption of local environments with MultiTOS
   and Co. only works with GEM applications. TOS/TTP programs executed in 
   parallel via MINIWIN.APP @{0I}always@{0} receive a global environment. 

   Incidentally -- this works fine under MagiC -- even when the TOS/TTP 
   programs are executed via VT52.PRG...

 ˘ Freedom up to Version 1.14a inclusive has a bug in connection with 
   the AV Protocol:

   If one or more files/folders are placed on the desktop background or a 
   group window of Thing, Freedom sends an @{0I}unnecessary@{0} VA_STARTmessage.
   Following the saying 'The cleverer one gives way' this message is 
   ignored therefore by Thing when the sender is FREEDOM and it's running 
   as a client.

 ˘ For reasons unknown to me to date, 'non-modal' operation of Freedom 
   1.14 only works properly at the second attempt. It can happen that 
   even though the Freedom window is 'topped', Thing does not recognise 
   its presence or that it is active. Remedy: Use Freedom v1.15 or v2.x!

 ˘ Important: The LogiTech mouse accelerator that used to be provided with 
   the LogiTech Pilot mouse should not be used!
   MACCEL3 from Atari performs the same function and works! Many problems 
   (crashes before/after running programs such as CAT, Kandinsky, Rufus 
   etc. under Single-TOS) are caused by the LogiTech accelerator, which 
   seems to use some rather 'dirty' programming.

 ˘ Shaded windows under WINX v2.3 cause minor redraw problems. I know 
   how to fix this -- I've just been too lazy to implement it.

 ˘ Using @{"Kobold" LINK "%EinfÅhrungK"} 2 together with Minix file systems will cause problems!
   This is a Kobold problem because it is not able to handle long and/or 
   case-sensitive filenames :-/  From Thing 1.25 onwards there is therefore 
   an option that Kobold is only used if both the source and destination 
   drives contain an 8+3 file system.
 
 ˘ Under Single-TOS the first mouse click after terminating a GEM 
   application is not recognised if no Thing windows are open. This is 
   not a Thing error but the fault of TOS, and also affects other 
   alternative desktops such as Gemini, for instance.

 ˘ Older versions of the utility ParaFin by Hartwig zur Nieden 
   unfortunately only look for the application 'GEMINI  ' and ignore the 
   environmental variable AVSERVER. For this reason cooperation with Thing 
   does not work in the desired manner, unfortunately. Remedy: Get hold of 
   a newer version of ParaFin.

 ˘ PacShell 2.58 has a small bug Drag&Dropping objects PacShell  Thing: 
   Folder names are passed to Thing without the final '\', so that 
   Thing (and also Gemini) interpret these, logically, as files.

   Remedy: Get PacShell 2.59 or newer, where the bug was removed.
     
   
@endnode

## ------------------------------------------------------------------------
@node "ThingImg" "ThingImg by Thomas KÅnneth"
@next "ThingImg"
@prev "ThingImg"
ThingImg - A user-defined module                                      Thing
@line 1 75 0 0 7

By: Thomas KÅnneth

@{B}Operation@{b}

This module reads GEM images with between 1 and 8 bitplanes and displays 
the image, provided video hardware for a matching number of bitplanes is 
available.

ThingIMG looks for an editable ASCII file called THINGIMG.INF in the user 
Home directory which understands the following keywords:

Cachetyp=[off|readonly|on]

CacheDir=[path, where the cache files are saved]


The cache enables images to be created in device-dependent format which 
accelerates the loading process, especially with large images.

[off] switches this function off

[readonly] allows images already in the cache-directory to be used but 
no new images will be created.

[on] allows new images to be created as required.

If no THINGIMG.INF is found the cache will not be available.

@{B}Legal@{b}

ThingIMG distribution is only allowed with Thing. Neither Thomas KÅnneth, 
Arno Welzel, Thomas Binder nor Joe Connor accept any liability or 
responsibility for any direct or indirect damage that may arise, either 
financial, material or any other kind from either the use or misuse of 
ThingIMG and its associated applications, utilities and documentation.
Please report any problems with ThingIMG, or suggestions for improvements, 
to Thomas KÅnneth.

All trademarks mentioned in the ThingIMG documentation are acknowledged 
and recognised.

@endnode

## ------------------------------------------------------------------------

@node "%symlink" "What are symbolic links?"
@next "%symlink"
@prev "%symlink"
What are symbolic links?                                              Thing
@line 1 75 0 0 7

A symbolic link (@{"*" LINK "%alias"}) is like a file whose contents are a list of files or 
folders. If a symbolic link is accessed (be it as a file or as a portion of
a path) its destination will be read internally and its filename replaced 
with this one.

For instance, if the entry C:\GEMSYS\ASSIGN.SYS is a symbolic link to 
..\NVDI\ASSIGN.SYS, then on accessing C:\GEMSYS\ASSIGN.SYS the contents 
of the link is read and substituted for ASSIGN.SYS, thus creating the 
access path C:\GEMSYS\..\NVDI\ASSIGN.SYS, which is synonymous with 
C:\NVDI\ASSIGN.SYS.

An @{I}absolute@{i} symbolic link is one in which the destination starts with 
a backslash or a drive letter. In that case after the operating system 
reads the link contents the complete previous path is replaced by the 
destination. So if, say, U:\etc is a symbolic link to the directory D:\etc, 
then accessing U:\etc in reality always refers to D:\etc.

Some notes and tips for handling symbolic links:

 ˘ The only thing a symbolic link knows about its destination is the path 
   specification, which may well point nowhere (i.e. to a non-existing 
   file or a non-existing directory).

 ˘ The destination of a symbolic link does not know that such a link 
   exists. As a result a symbolic link cannot be automatically altered 
   if the destination file is renamed, moved or deleted. In such cases 
   it just points nowhere.

 ˘ Symbolic links can be nested, i.e. a symbolic link can point to 
   another symbolic link, but one has to take care that one doesn't
   create endless loops (a is a symbolic link to b, b a symbolic link to 
   a), which are punished by an error message (ELOOP, -80) when accessed.

 ˘ If one lets a symbolic link point to an application then it will not 
   find its resource and other supplementary files as a rule when started 
   via the link. This is due to the fact that outwardly it was started 
   with the link's path specification and the required files are not 
   present in this directory.

   So if, say, C:\programs\qed.app is a symbolic link to D:\qed\qed.app,
   when qed is started via the symbolic link it will look for the file 
   default.qed (among others) in the directory C:\programs. Naturally no 
   such file exists there, so qed complains.

   This problem may be overcome by creating symbolic links for the required 
   supplementary files as well, or by working with links to directories. 
   In the above example it would be better to create a symbolic link 
   C:\programs\qed that points to D:\qed; with that one can start qed 
   without problems as C:\programs\qed\qed.app.

   Another possibility would be for Thing to check before starting programs
   whether the path specification is a symbolic link, and then to start the
   destination if appropriate. However this is not yet available and to 
   some extent contradicts the philosophy of symbolic links.

 ˘ Symbolic links with relative path specifications should only be moved 
   together with their destinations (and vice versa), as otherwise they 
   will point nowhere and will have to be adapted to the new path.

   Absolute path specifications, on the other hand, have the disadvantage 
   that the links, but not the destinations, may be moved. Furthermore 
   they are difficult to distribute in tar archives (the only archive 
   format I know that can store symbolic links as such) unless the 
   recipient has exactly the same directory and drive structure.

 ˘ In icon display mode, Thing identify symbolic links with a check symbol.
   If the destination does not exist, the link symbol is turned in a cross.
   In text and mini-icon mode links filenames are in italics in order to 
   identify its special properties. Symbolic links whose destination does 
   not exist are drawn by Thing greyed out, but are still selectable.
 
   The '@{"File - Show Info... (Files/Folders)" LINK "%ddfinf"}' also displays the destination
   for symbolic links , though they cannot be altered there (yet?).


 ˘ Thing basically deletes only the symbolic links themselves and never
@box 55 13 1 0
   their destinations. When copying files one can use  right Shift  or the
   @{"confirmation dialog" LINK "%dcopy"} to specify whether the links or their destinations 
   are to be duplicated.

## ------------------------------------------------------------------------
