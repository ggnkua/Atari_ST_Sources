# Makefile for public domain tar program.
# @(#)Makefile 1.30	87/11/11

## GNU version
#DEFS = -DBSD42
#LOCAL_SRC = 
#LOCAL_OBJ = 
#LDFLAGS =
#LIBS =  -lutils
#LINT = lint
#LINTFLAGS = -abchx
#DEF_AR_FILE = \"/dev/rmt8\"
#DEFBLOCKING = 20
#O = o

## Berserkeley version
#DEFS = -DBSD42
#LOCAL_SRC = getdate.y  rtape_lib.c
#LOCAL_OBJ = getdate.$O rtape_lib.$O
#LDFLAGS =
#LIBS =
#LINT = lint
#LINTFLAGS = -abchx
#DEF_AR_FILE = \"/dev/rmt8\"
#DEFBLOCKING = 20
#O = o

# USG version
#DEFS = -DUSG
#LOCAL_SRC =  getdate.y rtape_lib.c
#LOCAL_OBJ =  getdate.$O rtape_lib.$O
#LDFLAGS =
#LIBS = -lndir -lPW
#LINT = lint
#LINTFLAGS = -p
#DEF_AR_FILE = \"/dev/rmt8\"
#DEFBLOCKING = 20
#O = o

# UniSoft's Uniplus SVR2 with NFS
#DEFS = -DUSG -DUNIPLUS -DNFS -DSVR2
#LOCAL_SRC =  getdate.y rtape_lib.c
#LOCAL_OBJ =  getdate.$O rtape_lib.$O
#LDFLAGS =
#LIBS = -lndir
#LINT = lint
#LINTFLAGS = -bx
#DEF_AR_FILE = \"/dev/rmt8\"
#DEFBLOCKING = 20
#O = o

# MASSCOMP version
#CC = ucb cc
#DEFS = -DBSD42
#LOCAL_SRC =  getdate.y rtape_lib.c
#LOCAL_OBJ =  getdate.$O rtape_lib.$O
#LDFLAGS =
#LIBS = 
#LINT = lint
#LINTFLAGS = -bx
#DEF_AR_FILE = \"/dev/rmt0\"
#DEFBLOCKING = 20
#O = o

# (yuk) MS-DOS (Microsoft C) version
#MODEL = S
#DEFS = -DNONAMES -A$(MODEL) -nologo
#LOCAL_SRC =  getdate.y rtape_lib.c
#LOCAL_OBJ =  getdate.$O rtape_lib.$O
#LDFLAGS =
#LIBS = $(MODEL)dir.lib
#LINT =	$(CC)
#LINTFLAGS = -W3
#DEF_AR_FILE = \"tar.out\"
#DEFBLOCKING = 20
#O = obj

# V7 version
# Pick open3 emulation or nonexistence.  See open3.h, port.c.
##DEFS = -DV7 -DEMUL_OPEN3 -Dvoid=int
##DEFS = -DV7 -DNO_OPEN3 -Dvoid=int
#LOCAL_SRC =  getdate.y rtape_lib.c
#LOCAL_OBJ =  getdate.$O rtape_lib.$O
#LDFLAGS =
#LIBS = -lndir
#LINT = lint
#LINTFLAGS = -abchx
#DEF_AR_FILE = \"/dev/rmt8\"
#DEFBLOCKING = 20
#O = o

# Minix version
# No lint, so no lintflags.  Default file is stdin/out.  (Minix "tar"
# doesn't even take an "f" flag, it assumes argv[2] is the archive name!)
# Minix "make" doesn't expand macros right, so Minix users will have
# to expand CFLAGS, SRCS, O, etc by hand, or fix your make.  Not my problem!
# You'll also need to come up with getopt() and ctime(), the directory
# library, and a fixed doprintf() that handles %*s.  Put this stuff in
# the "SUBSRC/SUBOBJ" macro below if you didn't put it in your C library.
# Note that Minix "cc" produces ".s" files, not .o's, so O = s should be
# set (except on Atari ST, of course -- why do we have all this trouble
# with "portable" operating systems?? -- ERS).
#
# Pick open3 emulation or nonexistence.  See open3.h, port.c.
#DEFS = -DV7 -DMINIX -DEMUL_OPEN3
##DEFS = -DV7 -DMINIX -DNO_OPEN3
#LOCAL_SRC =  getdate.y rtape_lib.c
#LOCAL_OBJ =  getdate.$O rtape_lib.$O
#LDFLAGS =
#LIBS =
#DEF_AR_FILE = \"-\"
#DEFBLOCKING = 8	/* No good reason for this, change at will */
#O = o
#YACC = /usr/local/bin/bison -y 

# Xenix version
#DEFS = -DUSG -DXENIX
#LOCAL_SRC =  getdate.y rtape_lib.c
#LOCAL_OBJ =  getdate.$O rtape_lib.$O
#LDFLAGS = 
#LIBS = -lx
#LINT = lint
#LINTFLAGS = -p
#DEF_AR_FILE = \"/dev/rmt8\"
#DEFBLOCKING = 20
#O = o

# Atari ST GEMDOS version (GCC v1.34, with new library)
# Mostly, GEMDOS is like MSDOS, so that's what we pretend to be.
# Also, for simplicity's sake the dumb getdate in port.c is used
# instead of the fancy one (I hacked the dumb one up a bit, so it
# isn't quite as bad as it used to be -- ERS).
#
CC = cgcc
DEFS = -DNONAMES -DMSDOS -DNO_REMOTE
#LOCAL_SRC =  getdate.y rtape_lib.c
#LOCAL_OBJ =  getdate.$O rtape_lib.$O
LOCAL_SRC =
LOCAL_OBJ =
LDFLAGS = -s
LIBS = 
LINT =	$(CC)
LINTFLAGS = -Wall
DEF_AR_FILE = 0		# This means take name from argv[2].
DEFBLOCKING = 2
O = o

CFLAGS = $(COPTS) $(ALLDEFS)
ALLDEFS = $(DEFS) \
	-DDEF_AR_FILE=$(DEF_AR_FILE) \
	-DDEFBLOCKING=$(DEFBLOCKING)
# next line for Debugging
#COPTS = -g
# next line for Production
COPTS = -O

# Add things here like getopt, readdir, etc that aren't in your
# standard libraries.  (E.g. MSDOS needs getopt, msd_dir.c, msd_dir.obj)
SUBSRC=
SUBOBJ=	

# Destination directory and installation program for make install
DESTDIR = /usr/local
INSTALL = cp
RM = rm -f

SRC1 =	tar.c create.c extract.c buffer.c getoldopt.c update.c
SRC2 =  version.c list.c names.c diffarch.c port.c wildmat.c
SRC3 =  $(LOCAL_SRC) $(SUBSRC)
SRCS =	$(SRC1) $(SRC2) $(SRC3)
OBJ1 =	tar.$O create.$O extract.$O buffer.$O getoldopt.$O list.$O update.$O
OBJ2 =	version.$O names.$O diffarch.$O port.$O wildmat.$O
OBJ3 =  $(LOCAL_OBJ) $(SUBOBJ)
OBJS =	$(OBJ1) $(OBJ2) $(OBJ3)
# AUX =	README PORTING Makefile TODO tar.h port.h open3.h \
#	msd_dir.h msd_dir.c
AUX =   README COPYING Makefile tar.texinfo tar.h port.h open3.h rmt.h \
	msd_dir.h msd_dir.c rtape_server.c rtape_lib.c getdate.y

# rmt is no good on the ST
# all:	tar rmt
all:	tar

tar: $(OBJS)
	$(CC) $(LDFLAGS) -o tar $(COPTS) $(OBJS) $(LIBS)

rmt:	rtape_server.c
	$(CC) $(CFLAGS) -o rmt rtape_server.c

# command is too long for Messy-Dos (128 char line length limit) so
# this kludge is used...
#	@echo $(OBJ1) + > command
#	@echo $(OBJ2) >> command
#	link @command, $@,,$(LIBS) /NOI;
#	@$(RM) command

install: all
	$(RM) $(DESTDIR)/bin/tar
	$(INSTALL) tar   $(DESTDIR)/bin/tar
	$(INSTALL) tar.texinfo $(DESTDIR)/man/tar.texinfo
	$(INSTALL) rmt /etc/rmt

lint:	$(SRCS)
	$(LINT) $(LINTFLAGS) $(ALLDEFS) $(SRCS)

clean:
	$(RM) errs $(OBJS) tar rmt

tar.shar: $(SRCS) $(AUX)
	shar >tar.shar1 $(AUX)
	shar >tar.shar2 $(SRC1)
	shar >tar.shar3 $(SRC2)

dist: tar.tar tar.tar.Z

tar.tar: $(SRCS) $(AUX)
	/bin/tar cf tar.tar $(AUX) $(SRCS)

tar.tar.Z: tar.tar
	compress < tar.tar > tar.tar.Z
#	/bin/tar cf - $(AUX) $(SRCS) | compress -v >tar.tar.Z

tar.zoo: $(SRCS) $(AUX)
	zoo a tar $(AUX) $(SRCS)

$(OBJS): tar.h port.h
