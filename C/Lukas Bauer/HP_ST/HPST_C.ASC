/* ------------------------------------------- */
/*   Hewlett-Packard an ST:  "Bitte kommen!"   */
/*   Minimalsoftware zum Datenempfang vom HP   */
/*          C-Quelltext  "HP_TO_ST.C"          */
/*  (C) 1990 Lukas Bauer und Dirk Schwarzhans  */
/*       Ausgabe auf dem  Bildschirm und       */
/*    in die Protokolldatei  "HP_PRINT.PRN"    */
/* ------------------------------------------- */

#include <stdio.h>
#include <string.h>
#include <stdlib.h>
#include <tos.h>
#include <linea.h>
#include <ext.h>

#define BUFLEN 1000   /* LÑnge Empfangspuffer  */
#define SCALE 2       /* Grafik Vergrîûerung   */
#define LIST 0        /* Flag Textbildschirm   */
#define GRAF 1        /* Flag Grafikbildschirm */
#define FILENAME "HP_PRINT.PRN"   /* Protokoll */
#define PRNSIZE 200000L     /* max. Dateigrîûe */
                         /* der Protokolldatei */

/* Maschinensprache-Routinen */
extern void buf_init(int *, int *);
                    /* Pufferbereich festlegen */
extern int  buf_get(void);  
                 /* Datenwort aus Puffer holen */

/* nÑchste Zeile lîschen bei                   */ 
/* Turbo C Version kleiner 2.0 !!!!!!!!!!!     */
#define TURBO_C_2_0 true 

#ifdef TURBO_C_2_0
   extern long install(void);  
        /* Spannung an, Interrupt installieren */
   extern long i_remove(void); 
        /* Spannung aus, Interrupt entfernen   */
#else
   extern void install(void);
   extern void i_remove(void);
#endif

/* Funktionsprototypen */
int   meminit(void);
void  graf_out(int);
int   char_wait(void);
void  screen(int);
void  plot(int, int);
void  end_prog(void);
void  prn(char *);
void  prnc(char);

int   *memptr;  /* Speicher fÅr Empfangspuffer */
char  *ts, *gs,  
      /* Zeiger auf Text- und Grafikbildschirm */
      *gmem;  /* Speicher fÅr Grafikbildschirm */
int   pattern = 0xFFFF; /* Linientyp fÅr LINEA */
char  *prnbufs,   /* Zeiger auf Start und      */
      *prnbufe,   /* Ende des Protokollpuffers */ 
      *prnbuf;/* Eingabezeiger Protokollpuffer */

/* ------------------------------------------- */
/* Hauptprogramm                               */
/* ------------------------------------------- */

int main(void)
   {
   int   data,       /* Empfangenes Datenwort  */
         gflag;      /* Flag fÅr Grafikausgabe */

   if (meminit())    /* Speicher reservieren   */
      {
      puts("Nicht genÅgend Speicher frei !");
      return -1;
      }
      
   puts("\033p EMPFANGSBEREIT \33q");

   do
      {
      data = char_wait(); /* auf Zeich. warten */
      switch (data)
         {
      case 27:                /* Grafikdaten ? */
         data = char_wait();
         if (data > 0 && data <= 166)  /* Anz. */
               {
            graf_out(data); /* Grafik ausgeben */
            gflag = 1;
               }
         break;
      case 4:     /* cariage return & linefeed */
         if (!gflag)
            {
            puts("");
            prn("\r\n");
            }
         break;
      default:                  /* Textausgabe */
         screen(LIST);                    
         gflag = 0;
         switch (data) /* einige Sonderzeichen */
            {          /* umwandeln            */
         case 146:
            putch(174);    /* Doppelklammer << */
            prnc(174);
            break;
         case 147:
            putch(175);    /* Doppelklammer >> */
            prnc(175);
            break;
         case 141:
            putch('-');            /* Pfeil -> */
            putch('>');
            prn("-\010>");
            break;
         default:          /* sonstige Zeichen */
            putch(data);   /* nicht umwandeln  */ 
            prnc(data);
            }
         }     
      }
   while (1);
   }

/* ------------------------------------------- */
/* Reserviert Speicher, initialisiert die      */
/* Interrupts und LINEA-Routinen               */
/*                                             */
/* RÅckgabe int: Null bedeutet kein Fehler     */
/* ------------------------------------------- */

int meminit(void)
   {
   /* LINEA Einstellungen */
   linea_init();   
   set_fg_bp(1);
   set_ln_mask(0xFFFF);
   set_wrt_mode(0);
   set_pattern(&pattern, 0, 0);
   set_clip(0, 0, 0, 0, 0);
   hide_mouse();

   ts = Logbase();  /* Bildschirmadresse holen */

   if ((memptr = Malloc(BUFLEN*sizeof(int))) < 0)
      return -1;
   if ((gmem = Malloc(32256)) < 0)
      {
      Mfree(memptr);
      return -1;
      }
   if ((prnbuf = prnbufs = Malloc(PRNSIZE)) < 0)
      {
      Mfree(memptr);
      Mfree(gmem);
      return -1;
      }
   prnbufe = prnbufs + PRNSIZE;
       
   /* Bildschirmadr. auf 256Byte-Grenze runden */
   gs = (char *)((long)(gmem+256) & 0xFFFFFF00L);

   /* Puffer setzen, Interrupt installieren,   */
   /* Abbruch-Routine festlegen                */
   buf_init(memptr, memptr + BUFLEN);
   Supexec(install);
   atexit(end_prog);
   
   /* Text- und Grafikbildschirm lîschen */
   Setscreen((char *)-1L, gs, -1);
   puts("\033E");
   Setscreen((char *)-1L, ts, -1);
   puts("\033E\033v");

   return 0;
   }

/* ------------------------------------------- */
/* Setzt einen Grafikpunkt der Grîûe "SCALE"   */
/*                                             */
/* int x,y:  Koordinaten des Punktes           */
/* ------------------------------------------- */

void plot(int x,int y)
   {
   filled_rect(x * SCALE, y * SCALE,
      (x + 1) * SCALE - 1,(y + 1) * SCALE - 1); 
   }

/* ------------------------------------------- */
/* Wartet auf ein Zeichen vom HP.              */
/* Fehler werden ignoriert.                    */
/* ESC-Taste des ST beendet das Programm.      */
/*                                             */
/* RÅckgabe int: vom HP gesendetes Zeichen     */
/* ------------------------------------------- */

int char_wait(void)
   {
   int temp;               /* empfangenes Wort */
   
   do
      {
      temp = buf_get();  /* auf Zeichen warten */
      if ((char)Crawio(0xFF) == 27)   
         exit(0);      /* ESC-Taste, dann Ende */
      }
   while (temp & 0xFF00);  /* Fehler ignoriren */

   return temp;
   }

/* ------------------------------------------- */
/* schaltet Text- oder Grafik-Bildschirm ein   */
/*                                             */
/* int which:      LIST = Textbildschirm       */
/*            oder GRAF = Grafikbildschirm     */
/* ------------------------------------------- */

void screen(int which)
   {
   if (which == LIST)
      Setscreen(ts, ts, -1); /* Textbildschirm */
   else
      Setscreen(gs, gs ,-1); /* Grafikbildsch. */
   }

/* ------------------------------------------- */
/* Beim Programmende mit exit() wird diese     */
/* Routine aufgerufen, die die Interrupts      */
/* lîscht und den Speicher freigibt            */
/* ------------------------------------------- */

void end_prog(void)
   {
   int handle;
   
   Supexec(i_remove);    /* Interrupts lîschen */
   screen(LIST);  /* alten Bildsch. einstellen */
   
   /* Protokollpuffer Speichern */
   if ((handle = Fcreate(FILENAME, 0)) > 0)
      {
      Fwrite(handle, prnbuf - prnbufs, prnbufs);
      Fclose(handle);
      }
   
   Mfree(gmem);          /* Speicher freigeben */
   Mfree(memptr);
   Mfree(prnbufs);
   show_mouse(1);            /* Maus wieder an */
   }

/* ------------------------------------------- */
/* EmpfÑngt Grafikdaten und stellt sie dar     */
/*                                             */
/* int anz: Anzahl der erwarteten Grafikdaten  */
/* ------------------------------------------- */

void graf_out(int anz)
   {
   static int  y = 0; /* y-Koord. Grafikcursor */
   int         x,     /* x-Koord. Grafikcursor */
               b,     /* BitzÑhler             */
               db,    /* Druckerbyte           */
               i,     /* Schleifenvariable     */
               data;  /* Datenwort vom HP      */


   screen(GRAF);      /* Grafikbildschirm an   */
   prn("\033K");      /* Drucker-Grafik 60 dpi */
   prnc(anz);
   prnc(0);
   
   if (y * SCALE >= 384)   
      {
      set_fg_bp(0);   /* Bildschirm lîschen    */
      filled_rect(0 ,0 ,639 ,399 );
      set_fg_bp(1);
      y = 0;
      }
      
   for (x = 1; x <= anz; x++) /* Empfangsschl. */
      {
      data = char_wait(); /* Grafikbyte warten */
      db = 0;
      for (b = 1, i = 0; i < 8; b <<= 1, i++)
         if (data & b)   /* Grafikbit gesetzt? */
            {
            db |= (1 << (7-i));
            plot(x, y + i);    /* Punkt setzen */
            }
      prnc(db);
      }
   y += 8;                   /* Zeilenvorschub */
   prn("\015\033J\030");        /* 24/180 Zoll */
   }

/* ------------------------------------------- */
/* Schreibt String in den Protokollpuffer      */
/*                                             */
/* char *string: Zeiger auf den String         */
/* ------------------------------------------- */

void prn(char *string)
   {
      if (prnbuf + strlen(string) < prnbufe) 
      strcpy(prnbuf, string);
      prnbuf += strlen(string);
   }
   
/* ------------------------------------------- */
/* Schreibt ein Zeichen in den Protokollpuffer */
/*                                             */
/* char byte: Zu schreibendes Zeichen          */
/* ------------------------------------------- */

void prnc(char byte)
   {
      if (prnbuf < prnbufe - 1)
         *(prnbuf++) = byte;
   }


