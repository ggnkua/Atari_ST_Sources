; -----------------------------------------------------------------------
;                 Hewlett-Packard an ST:  "Bitte kommen!"   
;                 Minimalsoftware zum Datenempfang vom HP   
;                     MAS 68K-Quelltext  "HP_INTER.S"
;                (C) 1990 Lukas Bauer und Dirk Schwarzhans 
; -----------------------------------------------------------------------

             export buf_init ; Puffer Start- und Endadresse festlegen
             export install  ; Spannung an, Interrupts installieren
             export buf_get  ; Datenwort aus Puffer holen
             export i_remove ; Spannung aus, Interrupts entfernen

dummy        equ $DEADFACE
iv_acia      equ $00000118   ; Interrupt-Vektor fÅr MIDI und Tastatur
iv_ring      equ $00000138   ; Interrupt-Vektor fÅr Ring Indicator
iv_timer     equ $00000134   ; Interrupt-Vektor fÅr Timer A
aer          equ $FFFFFA03   ; Aktive Edge Register
iera         equ $FFFFFA07   ; Interrupt Enable Register A
ierb         equ $FFFFFA09   ; B
imra         equ $FFFFFA13   ; Interrupt Mask Register A
imrb         equ $FFFFFA15   ; B
isra         equ $FFFFFA0F   ; Interrupt In Service Register A
gpip         equ $FFFFFA01   ; Datenport des MFP
tacr         equ $FFFFFA19   ; Timer A Control Register
tadr         equ $FFFFFA1F   ; Timer A Data Register
psgregsel    equ $FFFF8800   ; Soundchip Register Select
psgrd        equ $FFFF8800   ; Soundchip Register Read
psgwr        equ $FFFF8802   ; Soundchip Register Write

; Installiert den Timer-A- und den Ring-Indicator-(RI)-Interrupt
install:     MOVE    SR,D0                  ; Status merken
             ORI     #$0700,SR              ; alle Interrupts sperren
             BSR     power_on               ; Versorgungsspannung an
             MOVE.L  #ring_irq,iv_ring.w    ; RI-Int-Routine installieren
             BCLR    #6,aer.w               ; Interrupt bei steig. Flanke
             MOVE.L  #timer_irq,iv_timer.w  ; Timer-IRoutine installieren
             MOVE.B  #0,tacr.w              ; Timer A stoppen
             MOVE.W  #$FF00,timer_hi        ; High-Byte des Timer lîschen
             MOVE.B  #$FF,tadr.w            ; Timer A mit Startwert laden
             MOVE.B  #%00000011,tacr.w      ; Timer Start, Vorteiler 1:16
             ORI.B   #%01100000,iera.w      ; RI- und Timer-A-
             ORI.B   #%01100000,imra.w      ;  Interrupts freigeben
             MOVE.L  $00000118.w,nijmp+2    ; Tastatur-Int.-Vektor merken
             MOVE.L  #newirq,$00000118.w    ; neuen installieren
             BCLR    #5,imrb.w              ; 200Hz Systemtimer sperren
             BCLR    #5,ierb.w
             CLR.W   pulsnum
             CLR.W   timeplus
             MOVE    D0,SR
             RTS

; Interrupts wieder lîschen
i_remove:    MOVE    SR,D0                  ; Status merken
             ORI     #$0700,SR              ; alle Interrupts sperren
             ANDI.B  #%10011111,imra.w      ; RI- und Timer-A-
             ANDI.B  #%10011111,iera.w      ;  Interrupt sperren
             BSET    #5,imrb.w              ; 200Hz Systemtimer freigeben
             BSET    #5,ierb.w
             CLR.L   iv_ring.w              ; RI-Interrupt-Vektor lîschen
             CLR.L   iv_timer.w             ; Timer-A-Int.-Vektor lîschen
             MOVE.L  nijmp+2,$00000118.w
             BSR     power_off              ; Versorgungsspannung aus
             MOVE    D0,SR                  ; Int-Status wiederherstellen
             RTS

; Versorgungsspannung anschalten
power_on:    MOVE.B  #14,psgregsel.w        ; Port A selektieren
             MOVE.B  psgrd.w,D1             ; Zustand lesen
             AND.B   #%11100111,D1          ; RTS und DTR lîschen
             OR.B    #16,D1                 ; DTR auf Hi setzen
             MOVE.B  D1,psgwr.w
             RTS

; Versorgungsspannung ausschalten
power_off:   MOVE.B  #14,psgregsel.w        ; Port A selektieren
             MOVE.B  psgrd.w,D1             ; Zustand lesen
             AND.B   #%11100111,D1          ; RTS und DTR lîschen
             MOVE.B  D1,psgwr.w
             RTS

; Datenpuffer initialisieren
buf_init:    MOVE.L  A0,buf_start           ; öbergabe A0=Pufferstart
             MOVE.L  A0,next_in
             MOVE.L  A1,buf_end             ; öbergabe A1=Pufferende
             MOVE.L  A1,next_out
             RTS

; Datenwort aus D0 in den Puffer schreiben
buf_put:     MOVEA.L next_in,A0
             CMPA.L  next_out,A0            ; Puffer voll ?
             BEQ     buf_full               ; ja, Fehler
             MOVE.W  D0,(A0)+               ; nein, dann Wort ablegen
             CMPA.L  buf_end,A0             ; Puffer-Obergrenze erreicht?
             BNE     lab1
             MOVEA.L buf_start,A0           ; ja, dann Zeiger auf Anfang
lab1:        MOVE.L  A0,next_in             ; und Zeiger zurÅckschreiben
             RTS
buf_full:    CMPA.L  buf_start,A0           ; Zeiger auf Pufferanfang ?
             BNE     lab2
             MOVEA.L buf_end+2,A0           ; letztes Wort am Pufferende
lab2:        MOVE.W  #$0400,-2(A0)          ; letztes Wort im Puffer mit
             RTS                            ;  Fehlernummer Åberschreiben

; Datenwort aus Puffer lesen
buf_get:     MOVEA.L next_out,A0
             ADDQ.L  #2,A0                  ; Ausgabezeiger erhîhen
             CMPA.L  buf_end,A0             ; Pufferende erreicht?
             BLT     lab3
             MOVEA.L buf_start,A0           ; ja, wrap around
lab3:        CMPA.L  next_in,A0             ; Puffer leer ?
             BEQ     buf_empty              ; ja
             MOVE.W  (A0),D0                ; nein, Wort aus Puffer holen
             MOVE.L  A0,next_out            ; Ausgabezeiger rÅckschreiben
             RTS
buf_empty:   MOVE.W  #$0100,D0              ; Puffer leer, #$0100 zurÅck
             RTS

; wird bei einem Low-High-Wechsel an der RI-Leitung aufgerufen
ring_irq:    CLR.B   tacr.w                 ; Timer A stoppen
             BCLR    #5,iera.w              ; Timer A Interr. ignorieren
             MOVEM.L D0-D3/A0-A1,-(SP)
             MOVE.W  timer_hi,D0            ; High-Byte des Timers
             MOVE.B  tadr.w,D0              ; Low-Byte eintragen
             MOVEQ   #-1,D1
             MOVE.B  D1,timer_hi            ; Timer High-Byte lîschen
             MOVE.B  D1,tadr.w              ; Timer Low-Byte lîschen
             MOVE.B  #%00000011,tacr.w      ; Timer wieder starten
             SUB.W   D0,D1                  ; D1= Zeit seit letztem Int.
             ADDQ.W  #4,D1                  ; + Zeit bis Timer Neustart
             ADD.W   timeplus,D1            ; um KurzpulslÑnge verlÑngern
             CLR.W   timeplus
             CMPI.W  #40,D1                 ; MindestpulslÑnge
             BHI     lab4                   ; PulslÑnge ausreichend ?
             MOVE.W  D1,timeplus            ; Nein, Kurzpuls-LÑnge merken
             BRA     endri                  ; und Puls ignorieren
lab4:        MOVE.W  pulsnum,D2
             ADDQ.W  #1,pulsnum             ; Pulsnummer erhîhen
             TST.W   D2                     ; erster Startpuls,nichts tun
             BNE     lab5
             CMPI.W  #$0100,D1              ; Zwischenbyte-Pause zu kurz?
             BHI     endri                  ; nein, Puls 1 war OK, Ende
             CLR.W   pulsnum                ; ja,weiter auf Puls 1 warten
             BRA     endri                  ; und Ende
lab5:        CMP.W   #2,D2                  ; 2. oder 3. Startpuls ?
             BLE     startbits              ; ja, timebase ermitteln

datenbits:   LEA     bitbuf,A0              ; Speicher empfangene Bits
             LEA     bittab0,A1             ; Tabelle fÅr lastbit=0
             TST.B   lastbit                ; war lastbit wirklich 0?
             BEQ     lab6                   ; ja, Tabellenzeiger OK
             LEA     bittab1,A1             ; nein, Tabelle fÅr lastbit=1
lab6:        MOVE.W  timebase,D0            ; T in 6.51us
             MOVE.W  D0,D3
             LSR.W   #1,D0
             ADD.W   D0,D1                  ; D1 alt: Pulsabstd in 6.51us
             EXT.L   D1                     ; D1 neu: Pulsabstand in T
             DIVU    D3,D1                  ; "D1=INT(t/timebase+.5)"
             CMPI.W  #5,D1                  ; Pulspause grîûer 5*timebase
             BGT     err5                   ; dann Åbler Fehler
             MOVE.B  0(A1,D1.w),D0          ; Bit aus Tabelle holen
             MOVE.B  D0,lastbit             ; Bit merken
             MOVE.B  D0,-3(A0,D2.w)         ; Bit speichern in Bitpuffer
             BMI     err5                   ; $FF in Tabelle, dann Fehler
             CMP.W   #14,D2                 ; letztes Bit?
             BEQ     endbit                 ; ja, Bits in Byte umwandeln

endri:       MOVEM.L (SP)+,D0-D3/A0-A1      ; Register wiederherstellen
             BSET    #5,iera.w              ; Timer A Interrupt freigeben
             BCLR    #6,isra.w              ; Interrupt beendet
             RTE                            ; Ende und aus.

startbits:   CMP.W   #52,D1                 ; Zeit < 430us - 25%
             BLT     err5                   ; dann Zeitunterschreitung
             CMP.W   #82,D1                 ; Zeit > 430us + 25%
             BGT     err5                   ; dann ZeitÅberschreitung
             CMP.W   #2,D2                  ; 3. Startpuls?
             BNE     lab7                   ; nein
             ADD.W   timebase,D1            ; ja, Zeiten addieren
             LSR.W   #1,D1                  ; und Mittelwert bilden
             CLR.B   lastbit                ; erstes Bit wie nach 0-Bit
lab7:        MOVE.W  D1,timebase            ; LÑnge von T in 6.51us
             BRA     endri

; Fehler $0500: Illegaler Pulsabstand bei Startpulsen oder Datenbits
err5:        MOVE.W  #$0500,D0              ; Fehlernummer nach D0
             MOVE.W  #1,pulsnum             ; nÑchster Puls ist 2
initnext:    BSR     buf_put                ; D0 in den Puffer schreiben
             BRA     endri

; berechnet aus empf. Bitmuster das Byte und korrigiert nach Hamming-EDC
endbit:      MOVEQ   #11,D0                 ; 12 EDC- und Datenbits
loop_roxr:   MOVE.B  0(A0,D0.w),D2          ; Bit aus Bitpuffer
             ROXR.B  #1,D2                  ; ins X-Flag rollen
             ROXR.W  #1,D1                  ; und in D1 einrollen
             DBRA    D0,loop_roxr           ; Schleife Åber 12 Bit
             LSR.W   #4,D1                  ; D1= 0000eeeedddddddd
             LEA     hamming,A1             ; EOR-Maskentabelle EDC
             MOVEQ   #0,D2                  ; Vorbelegung fÅr EDC
             MOVEQ   #7,D3                  ; EDC Åber 8 Datenbits
loop_edc:    MOVE.B  0(A1,D3.w),D0          ; Maske fÅr EDC-EOR
             BTST    D3,D1                  ; Datenbit prÅfen
             BEQ     skip_eor               ; Bit 0, kein EOR
             EOR.B   D0,D2                  ; Bit 1, dann EOR durchfÅhren
skip_eor:    DBRA    D3,loop_edc            ; Schleife Åber 8 Datenbits
             MOVE.W  D1,D3                  ; empfang. EDC-Bits abtrennen
             LSR.W   #8,D3                  ; D3= 000000000000eeee
             ANDI.W  #$00FF,D1              ; D1= 00000000dddddddd
             EOR.B   D3,D2                  ; Vergleich mit berechn. EDC
             ASL.W   #1,D2                  ; Zeiger = Syndromwort * 2
             LEA     edctab,A0              ; A0 auf Korrekturtabelle
             MOVE.W  0(A0,D2.w),D0          ; Korrekturwort aus Tabelle
             EOR.W   D1,D0                  ; EOR korrigiert das Bit
             CLR.W   pulsnum                ; NÑchster Puls 1. Startpuls
             BRA     initnext               ; Wort ablegen und Ende

; erzeugt Hi-Byte fÅr Timer-A, indem NulldurchgÑnge gezÑhlt werden
timer_irq:   BCLR    #6,imra.w              ; sperrt RI-Interrupt
             TST.B   timer_hi               ; schon auf 0 gezÑhlt, dann
             BEQ     skip_count             ;  nicht mehr weiterzÑhlen
             SUBQ.B  #1,timer_hi            ; Timer Hi-Byte weiterzÑhlen
skip_count:  BCLR    #5,isra.w              ; Ende Interruptbehandlung
             BSET    #6,imra.w              ; RI-Interrupt freigeben
             RTE

; neuer Tastatur-Interrupt, Adresse dummy wird Åberschrieben
newirq:      ORI     #$0700,SR
             ANDI    #$F5FF,SR              ; IPL=5 setzen
nijmp:       JMP     dummy                  ; alten Interrupt ausfÅhren

             data
bittab1:     dc.b $FF,$FF,1,0,1,0           ; Tabelle bei lastbit=1
bittab0:     dc.b $FF,1,0,1,0,$FF           ; Tabelle bei lastbit=0

hamming:     dc.b %00000011,%00000101,%00000110,%00001001
             dc.b %00001010,%00001100,%00001110,%00000111

; Tabelle fÅr die Fehlerkorrektur, Zeiger ist Syndromwort
edctab:      dc.w $0000,$0200,$0200,$0201   ; Lo-Byte: Korrekturmaske, zu
             dc.w $0200,$0202,$0204,$0280   ;    invertierendes Bit ist 1
             dc.w $0200,$0208,$0210,$0300   ; Hi-Byte: Fehlernummer, wird
             dc.w $0220,$0300,$0240,$0300   ;    d. EOR ins Wort gemischt

             bss
buf_start:   ds.l 1          ; physikalische Pufferstartadresse
buf_end:     ds.l 1          ; physikalische Pufferendadresse +2
next_in:     ds.l 1          ; nÑchste freie Stelle im Puffer
next_out:    ds.l 1          ; Adresse des letzten ausgelesenen Wortes
timer_hi:    ds.w 1          ; Hi-Byte ZeitzÑhler zwischen zwei Pulsen
timebase:    ds.w 1          ; LÑnge einer halben Bitbreite T in 6.51us
timeplus:    ds.w 1          ; Zeit-Offset nach zu kurzem Pulsabstand
pulsnum:     ds.w 1          ; Nummer des erwarteten Pulses minus 1, 0-14
lastbit:     ds.b 1          ; Wert des letzten Bit
bitbuf:      ds.b 12         ; Puffer fÅr die 12 seriell kommenden Bits
             end

