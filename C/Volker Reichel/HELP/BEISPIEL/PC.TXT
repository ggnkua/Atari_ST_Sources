PC.HLP wurde Åbersetzt am 13.August 1991.

(c) 1990 Borland International, Inc.Index der verfÅgbaren SchlÅsselwîrter:

     EA..F       EB..F       EC..F      ED..F

     EE..F       EF..F       EG..F      EH..F

     EI..F       EJ..F       EK..F      EL..F

     EM..F       EN..F       EO..F      EP..F

     EQ..F       ER..F       ES..F      ET..F

     EU..F       EV..F       EW..F      EX..F

     EY..F       EZ..F

     ESonstigesFDie MenÅleiste
----------------------------------------------------------------------

EPure CF EFileF EEditF ESearchF ECompileF EProjectF EOptionsF EHelpFDer MenÅtitel 'Pure C'
----------------------------------------------------------------------

Hier gelangt man zum  Eintrag Åber das Copyright, in dem sich die
Versionsnummer Ihres Compilers befindet, und zu den Accessories.Besondere Features der Dateiauswahlbox von Pure C
----------------------------------------------------------------------

'Open'       îffnet eine im Auswahlfenster selektierte Datei.
             Ein Doppelklick auf den Dateinamen tut dasselbe.
             Aufruf Åber die Tastatur mit RETURN.
'New'        legt eine neue Datei an; dabei wird nach dem neuen Namen
             gefragt.
             Aufruf Åber die Tastatur mit INSERT.
'Cancel'     schlieût die Dateiauswahlbox, ohne eine Datei zu îffnen.
             Aufruf Åber die Tastatur mit CONTROL-U.
'New Folder' legt einen neuen Ordner an; dabei wird nach dem neuen
             Namen gefragt.
'Delete'     lîscht eine im Auswahlfenster selektierte Datei.
             Aufruf Åber die Tastatur mit DELETE.
'Touch'      Schreibt Systemzeit und Systemdatum als Dateidatum
             einer im Auswahlfenster selektierten Datei.
             (entspricht dem gleichnamigen UNIX-Befehl).
'Copy'       kopiert die im Auswahlfenster selektierte Datei; dabei
             wird nach dem neuen Namen gefragt. Mit '..' wird die
             Datei mit gleichen Namen in den Åbergeordneten Ordner
             kopiert.
'Info'       zeigt Name, Grîûe, Datum und Uhrzeit der im Auswahl-
             fenster selektierten Datei an. Dabei kann der Dateiname
             ediert werden.
'*.*'        wechselt zwischen der Anzeige der gewÅnschten Datei-
             erweiterung und der Anzeige aller Dateierweiterungen.
             Die Extension des untersten Extensionsbuttons lÑût sich
             mit einem Doppelklick durch den Benutzer definieren.
Hinweis:     Durch DrÅcken eines Buchstabens werden alle Dateien
             mit nachfolgendem Anfangsbuchstaben angezeigt. Mit den
             Cursortasten  und  kînnen Sie scrollen. Die Taste
             UNDO bewirkt dasselbe wie das Schlieûfeld. Mit
             ALTERNATE-Laufwerksbuchstabe kînnen Sie das Lauf-
             werk selektieren. Der Aufruf der Standarddatei-
             erweiterungen erfolgt Åber folgende Tasten:

                CONTROL-A     *.*
                CONTROL-C     *.C
                CONTROL-H     *.H
                CONTROL-S     *.S
                CONTROL-P     *.PRJ
                CONTROL-F     *.CFG
                CONTROL-R     *.PRG
                CONTROL-D     *.???Der MenÅtitel 'File'
----------------------------------------------------------------------

        EOpen .CF
        EOpen .HF
        EOpen .SF
        EOpen .PRJF

        EPrintF
        EPrint SelectionF

        ECloseF
        EAbandonF

        ESaveF
        ESave as...F

        ETOS ShellF

        EQuitFDer MenÅtitel 'Edit'
----------------------------------------------------------------------

        EUndoF

        ECutF
        ECopyF
        EPasteF

        ESelect AllF

        EShift LeftF
        EShift RightF

        ECycle WindowsF
        EUser ScreenFDer MenÅtitel 'Search'
----------------------------------------------------------------------

        EFind...F
        EFind SameF
        EFind SelectionF

        EReplace...F
        EReplace SameF

        ECheck BracesF
        EFind ErrorF
        EGoto Line...FDer MenÅtitel 'Compile'
----------------------------------------------------------------------

        ECompile...F
        ECompile ''F
        EAssemble...F
        EAssemble ''F

        EExecute...FDer MenÅtitel 'Project'
----------------------------------------------------------------------

        ESelect...F

        EDebug ''F
        ERun ''F
        EMake ''F

        EMake all ''F
        ELink ''FDer MenÅtitel 'Options'
----------------------------------------------------------------------

        EShell...F
        ECompiler...F
        EAssembler...F
        ELinker...F

        ELoad...F
        ESave ''FHelp
----------------------------------------------------------------------

Nach Auswahl der gewÅnschten Hilfestellung erscheint ein Fenster mit
informativem Text, wobei einige Stichwîrter in Fettschrift und unter-
strichen dargestellt sind. Wenn man diese mit der Maus doppelklickt,
oder einfachklickt bzw. den Cursor darauf positioniert und die 'Help'-
Taste drÅckt, erscheint ein neues Fenster, das noch detailliertere
Informationen zum jeweiligen Stichwort enthÑlt. Mit der 'Undo'-Taste
gelangen Sie zum vohergehenden Stichwort zurÅck. Beenden lÑût sich die
Help-Funktion entweder durch Anklicken des Schlieûfeldes oben links im
Fenster oder durch DrÅcken der Tastenkombination ECONTROLF-U.

    EMenuF         enthÑlt  Informationen zur Bedienung der
                 integrierten Entwicklungsumgebung.
    EEditorF       enthÑlt eine vollstÑndige Beschreibung
                 der Editorfunktionen.
    EC LanguageF   enthÑlt Informationen Åber die Syntax
                 der Programmiersprache C.
    ELibrariesF    enthÑlt ausfÅhrliche ErlÑuterungen Åber alle
                 verfÅgbaren Funktionen der Pure-C-Bibliotheken.
    EOptionsF      enthÑlt alle Optionen zur Konfiguration des Editors,
                 Compilers, Assemblers und Linkers behandelt.
    EIndexF        enthÑlt ein alphabetisches Inhaltsverzeichnis
                 aller Keywords, zu denen Informationen abgerufen
                 werden kînnen.EFileF/Open  .C                                                ECONTROLF-O
----------------------------------------------------------------------

... îffnet die EDateiauswahlboxF und setzt die Extension '.C', wobei
'.C' fÅr Pure-C-Quelltextdateien steht.EFileF/Open  .H
----------------------------------------------------------------------

... îffnet die EDateiauswahlboxF und setzt die Extension '.H', wobei
'.H' fÅr Headerdateien steht.EFileF/Open  .S
----------------------------------------------------------------------

... îffnet die EDateiauswahlboxF und setzt die Extension '.S', wobei
'.S' fÅr Assembler-Quelltextdateien steht.EFileF/Open  .PRJ
----------------------------------------------------------------------

... îffnet die EDateiauswahlboxF und setzt die Extension '.PRJ', wobei
'.PRJ' fÅr Project-Dateien steht.EFileF/Print                                                   ECONTROLF-P
----------------------------------------------------------------------

... gibt die Datei des aktiven Fensters auf dem Drucker aus.EFileF/Print Selection                                         ECONTROLF-D
----------------------------------------------------------------------

Nachdem ein Textabschnitt EselektiertF wurde, kann er mit
'Print Selection' auf dem Drucker ausgegeben werden.EFileF/Close                                                   ECONTROLF-U
----------------------------------------------------------------------

... schlieût das aktive Fenster. Falls Sie die Datei verÑndert
haben, erscheint zuvor eine Abfrage, ob Sie sie speichern wollen,
oder nicht.EFileF/Abandon                                                 ECONTROLF-H
----------------------------------------------------------------------

... ersetzt den im aktuellen Fenster befindlichen Text durch die
zuletzt gespeicherte Version. Damit kînnen noch nicht gespeicherte
VerÑnderungen wieder rÅckgÑngig gemacht werden.EFileF/Save                                                    ECONTROLF-S
----------------------------------------------------------------------

... speichert den Text des aktiven Fensters unter dem Pfad-
namen im Titelbalken ab.EFileF/Save as...                                              ECONTROLF-M
----------------------------------------------------------------------

... speichert den Text des aktiven Fensters unter einem anderen, als
im aktuellen Fenster angegebenen Namen ab. Dieser Name wird Åber die
EDateiauswahlboxF ausgewÑhlt.EFileF/TOS Shell                                               ECONTROLF-Z
----------------------------------------------------------------------

Mit dieser Funktion kann eine Subshell gestartet werden. Diese
Funktion ist nÅtzlich, um z.B. schnell mal ein Direktory zu lîschen.

Vorausetzung fÅr die Benutzung dieser Funktion ist, daû Sie eine Shell
verwenden, die die Systemvariable _shell_p oder das Setzen von
Environmentvariablen unterstÅtzt.

_shell_p enthÑlt die Adresse einer Routine, die eine Shell starten
kann. Die Environmentvariable "SHELL" spezifiziert den Pfadnamen
einer Shell.EFileF/Quit                                                    ECONTROLF-Q
----------------------------------------------------------------------

Nach Auswahl von 'Quit' wird die Pure-C-Entwicklungsumgebung verlas-
sen. Wenn énderungen vorgenommen wurden, die noch nicht abgespeichert
worden sind, wird man gefragt, ob die Datei(en) zuvor gesichert wer-
den sollen.EEditF/Undo                                                         UNDO
----------------------------------------------------------------------

...  macht die letzte Editieraktion rÅckgÑngig.

Im Einzelnen sieht das so aus:

Eine EBlockoperationF wird rÅckgÑngig gemacht, dh. ein versehentlich
gelîschter Block wird 'entlîscht', oder ein an eine beliebige Text-
stelle verschobener oder kopierter Block wird wieder entfernt.
Bei Zeichenoperationen, also der Eingabe einzelner Zeichen oder dem
Lîschen von Zeichen mit BACKSPACE oder DELETE, wird das jeweils
zuletzt editierte Zeichen gelîscht bzw. 'entlîscht'.
Besonders sinnvoll erweist sich die 'Undo'-Funktion also im Zusammen-
hang mit grîûeren, unabsichtlich gelîschten Textabschnitten.EEditF/Cut                                                     ECONTROLF-X
----------------------------------------------------------------------

Nachdem ein Textabschnitt EselektiertF wurde kann er mit 'Cut' in
einen Zwischenspeicher kopiert und aus dem Quelltext entfernt werden.

Der Inhalt des Zwischenspeichers kann dann mit 'EPasteF' an anderer
oder gleicher Stelle wieder eingefÅgt werden.EEditF/Copy                                                    ECONTROLF-C
----------------------------------------------------------------------

Nachdem ein Textabschnitt EselektiertF wurde kann er mit 'Copy' in
einen Zwischenspeicher kopiert werden. Dabei wird der Text nicht
gelîscht (siehe 'ECutF').
Der Inhalt des Zwischenspeichers kann dann mit 'EPasteF' an anderer
oder gleicher Stelle wieder eingefÅgt werden.EEditF/Paste                                       INSERT oder ECONTROLF-V
----------------------------------------------------------------------

Nachdem ein Textabschnitt EselektiertF und mittels 'ECopyF' oder 'ECutF'
in einen Zwischenspeicher kopiert wurde, kann er mit 'Paste' an die
aktuelle Cursorposition angehÑngt werden.
Auch kann mit 'Paste' ein selektierter Textabschnitt durch den im
Zwischenspeicher befindlichen Text ersetzt werden.EEditF/Select All                                              ECONTROLF-N
----------------------------------------------------------------------

... EselektiertF die gesamte Datei. Dies ist vor allem dann interessant,
wenn man den Inhalt einer ganzen Datei in einer anderen Datei einfÅgen
will. Mit ( EEditF/ECopyF ) kann die Datei dann in einen Zwischenspeicher
kopiert werden, und in einer anderen Datei mit ( EEditF/EPasteF ) ein-
gefÅgt werden.EEditF/Shift Left                                              ECONTROLF-J
----------------------------------------------------------------------

Nachdem ein Textabschnitt EselektiertF wurde, kann er mit 'Shift Left'
um eine Tabulatorstelle nach links verschoben werden.EEditF/Shift Right                                             ECONTROLF-K
----------------------------------------------------------------------

Nachdem ein Textabschnitt EselektiertF wurde, kann er mit 'Shift Right'
um eine Tabulatorstelle nach rechts verschoben werden.EEditF/Cycle Windows                                           ECONTROLF-W
----------------------------------------------------------------------

... springt zum nÑchsten geîffneten Fenster. Das nÑchste Fenster ist
immer das darunterliegende Fenster. Wenn nur ein Fenster geîffnet ist,
hat der Befehl keine Wirkung.EEditF/User Screen                                                   ESC
----------------------------------------------------------------------

... schaltet vom Bildschirm des Entwicklungssystems auf den
Ausgabebildschirm um. Mit dem nÑchsten Tastendruck kehrt man wieder
zur Pure-C-Entwicklungsumgebung zurÅck. Damit lassen sich Bildschirm-
ausgaben von Programmen kontrollieren.ESearchF/Find...                                               ECONTROLF-F
----------------------------------------------------------------------

... sucht einen Strings in einem Text. 'Find...' kann auch rÅckwÑrts
(Backwards), ohne Beachtung von Groû- und Kleinschreibung (Ignore
Case) und der Maûgabe, daû der String als ganzes Wort vorliegen muû
(Whole Word), durchgefÅhrt werden. Diese Optionen sind in einer Dia-
logbox per Mausklick schaltbar.ESearchF/Find Same                                             ECONTROLF-G
----------------------------------------------------------------------

... wiederholt die Suche nach einem String, nachdem zuvor schon der
Befehl ( ESearchF/EFind...F ) oder ( ESearchF/EFind SelectionF )
ausgefÅhrt wurde.ESearchF/Find Selection                                        ECONTROLF-I
----------------------------------------------------------------------

...sucht nach einem String in einem Text. Dazu EselektiertF man einen
Textabschnitt mit der Maus und ruft 'Find Selection' auf. Falls beim
Aufruf kein Text selektiert ist, so wird ein unter dem Cursor befind-
liches Wort markiert. Um nach diesem zu suchen, ist ein weiterer
Aufruf dieses Befehls erforderlich.

Wenn man z.B. den Funktionsaufruf 'printf' selektiert und dann 'Find
Selection' aufruft, dann springt der Cursor an die nÑchste Stelle mit
'printf'. Mit dem nÑchsten Aufruf von (ESearchF/EFind SameF) kann
nochmals nach 'printf' gesucht werden.ESearchF/Replace...                                            ECONTROLF-R
----------------------------------------------------------------------

... ersetzt einen String in einem Text. 'Replace...' kann auch rÅck-
wÑrts (Backwards), ohne Beachtung von Groû- und Kleinschreibung
(Ignore Case) und der Maûgabe, daû der String als ganzes Wort vorlie-
gen muû (Whole Word), durchgefÅhrt werden. Zudem kann man vorgeben,
daû alle gesuchten Strings in einem Text automatisch ersetzt werden
sollen (All). Diese Optionen sind in einer Dialogbox per Mausklick
schaltbar.ESearchF/Replace Same                                          ECONTROLF-T
----------------------------------------------------------------------

... wiederholt eine Textersetzung, wie sie zuvor im Befehl
( ESearchF/EReplace...F ) vorgenommen wurde.ESearchF/Check Braces                                          ECONTROLF-B
----------------------------------------------------------------------

... prÅft den *.C Quelltext im aktuellen Fenster auf offene
Klammerebenen und springt zu der Klammer, zu der keine
Korrespondierende gefunden werden konnte. Mit einem Doppelklick in
eine Klammerebene kann diese selektiert werden. Der Cursor springt
dann zur schlieûenden Klammer '}'.ESearchF/Find Error                                            ECONTROLF-E
----------------------------------------------------------------------

... automatisiert die Fehlersuche. Dazu EselektiertF man im Fenster
'EMessagesF' mit der Maus die Fehlermeldung des Fehlers, den man kor-
rigieren will, und ruft "Find Error" auf. Automatisch îffnet sich das
Fenster mit dem fehlerhaften Programm und der Cursor springt an die
jeweilige Stelle.

Am schnellsten erreicht man die Fehlerstelle mit einem Doppelklick auf
die Fehlermeldung.ESearchF/Goto Line...                                          ECONTROLF-L
----------------------------------------------------------------------

... ist eine Mîglichkeit sehr schnell zu einer bestimmten Zeile im
aktiven Fenster zu gelangen. Nach Aufruf dieses Befehls erscheint eine
Dialogbox mit der aktellen Zeilennummer. Hier kînnen Sie die Nummer
der Zeile eingeben kînnen, die Sie anspringen wollen.ECompileF/Compile...                                         EALTERNATEF-V
----------------------------------------------------------------------

... compiliert einen C-Quelltext. Es erscheint zunÑchst die
EDateiauswahlboxF, mit der man Dateien zum Compilieren auswÑhlen kann.
Nach einem Doppelklick auf den Dateinamen wird die Datei compiliert.
Da die Verwaltung Åber eine EProjektdateiF sehr viel eleganter ist,
erweist sich 'Compile...' nur dann als sinnvoll, wenn man compilieren,
aber nicht linken will.ECompileF/Compile ''                                         EALTERNATEF-C
----------------------------------------------------------------------

... compiliert nur den C-Quelltext aus dem aktiven Fenster.
'Compile '' ' ist nur dann sinnvoll, wenn man die Datei wegen eines
Syntax-Checks compilieren, aber nicht linken will.ECompileF/Assemble...                                        EALTERNATEF-S
----------------------------------------------------------------------

... assembliert einen Assembler-Quelltext. Es erscheint zunÑchst die
EDateiauswahlboxF, mit der man Dateien zum Assemblieren auswÑhlen kann.
Nach einem Doppelklick auf den Dateinamen wird die Datei assembliert.
Da die Verwaltung Åber eine EProjektdateiF sehr viel eleganter ist,
erweist sich "Assemble..." nur dann als sinnvoll, wenn man assemblie-
ren, aber nicht linken will.ECompileF/Assemble ''                                        EALTERNATEF-A
----------------------------------------------------------------------

... assembliert den Assembler-Quelltext aus dem aktiven Fenster.
'Assemble '' ' ist nur dann sinnvoll, wenn man die Datei wegen eines
Syntax-Checks assemblieren, aber nicht linken will.ECompileF/Execute...                                         EALTERNATEF-E
----------------------------------------------------------------------

... lÑdt und startet fertig gelinkte Programme. 'Execute...' eignet
sich auch zum Aufruf beliebiger Utility-Programme aus Pure C heraus.
Es erscheint zunÑchst die EDateiauswahlboxF, mit der man Programme
zum Starten auswÑhlen kann.

Hinweis: Mit der Option ( EProjectF/ERun ''F ) kann man ein C-Programm
         erst compileren, linken und dann ebenfalls ausfÅhren lassen.EProjectF/Select...                                          EALTERNATEF-P
----------------------------------------------------------------------

... selektiert eine EProjektdateiF in der EDateiauswahlboxF.EProjectF/Debug ''                    SHIFT-EALTERNATEF-D oder EALTERNATEF-D
----------------------------------------------------------------------

... compiliert und linkt alle in der aktuellen EProjektdateiF angege-
benen und verÑnderten Dateien. Anschlieûend wird Pure Debugger
gestartet und das in in der aktuellen EProjektdateiF angegebene,
frisch Åbersetzte Programm geladen.

Um auch mit wenig Arbeitsspeicher trotzdem die Mîglichkeit zum
bequemen Aufruf von Pure Debugger zu nutzen, existiert auch die
Startbefehl SHIFT-ALTERNATE-D. Hierbei wird Pure C zunÑchst aus dem
Speicher entfernt und dann Pure Debugger gestartet. Nach dem
Verlassen von Pure Debugger wird dann dieser zu Gunsten von Pure C
entfernt. Statt SHIFT-ALTERNATE-D kînnen Sie auch mit gedrÅckter
SHIFT-Taste den MenÅeintrag EProjectF/Debug '' anklicken.EProjectF/Run ''                                             EALTERNATEF-R
----------------------------------------------------------------------

... compiliert und linkt alle in der EProjektdateiF angegebenen und ver-
Ñnderten Dateien. Wenn keine Fehler auftraten, wird das Programm
direkt im Anschluû daran ausgefÅhrt.EProjectF/Make ''                                            EALTERNATEF-M
----------------------------------------------------------------------

... compiliert und linkt alle in der aktuellen EProjektdateiF angege-
benen und verÑnderten Dateien.EProjectF/Make all ''                                        EALTERNATEF-X
----------------------------------------------------------------------

... compiliert und linkt alle in der aktuellen EProjektdateiF angege-
benen Dateien.EProjectF/Link ''                                            EALTERNATEF-L
----------------------------------------------------------------------

... linkt alle in der aktuellen EProjektdateiF angegebenen Dateien.Shelloptionen                                              EALTERNATEF-Z
----------------------------------------------------------------------

Mit EOptionsF/Shell... kann man die Tabulatorschrittweite des Editors
einstellen (Tabsize) und festlegen, ob man mit automatischer
EinrÅckung arbeiten will oder nicht (Auto indent). Ist die Autosave-
Option gesetzt, so werden vor jedem EExecute...F , jedem ERun ''F und
vor dem Wechsel einer Konfigurations-Datei, die Konfigurations-Datei
und alle im Speicher befindlichen und geÑnderten Texte automatisch
gesichert.

Ist die Option 'Break make on warnings of' gesetzt, wird der
Compile- bzw. Link-Vorgang bei Compiler- bzw. Linker-Warnungen
abgebrochen, jenachdem ob der Schalter compiler oder linker
selektiert ist. Der Schalter EProject helpF aktiviert die
Erzeugung einer projektabhÑngigen Hilfefunktion zum finden von
Deklarationen.

Das EObject- und Header-File CachingF wird mittels der Optionen
Cache/Header files und Cache/Object files eingeschaltet. Soll der
Cache vor der AusfÅhrung eines Programms gelîscht werden, so
mÅssen die Schalter Clear before run/execute gesetzt werden,
jenachdem, welcher Cache (fÅr Object- oder Header-Files) gelîscht
werden soll.

Querverweis    EWarnungenF  EEditorfunktionenF im öberblickDie Projekt-Datenbank: Project Help
----------------------------------------------------------------------

Mit dem Project-Help kînnen Sie sich die Deklarationen von Daten-
strukturen, Konstanten, Variablen und Funktionen schnell ansehen.
Das Åbliche Suchen mittels ESearch/Find...F entfÑllt. Zumal das
Suchen den Nachteil hat, da· man wissen mu·, in welcher Datei die
Deklaration steht, was besonders in gro·en Projekten sehr lÑstig
sein kann. Verwechseln Sie das Project-Help darf nicht mit dem
Ebenutzerdefiniertem HelpF.
Das Project-Help  bezieht sich stets auf das aktuelle Projekt
beziehungsweise bei verschachtelten Projekten auf das éu·erste.
Die Informationen fÅr das Project-Help werden beim öbersetzen
eines Programmes erzeugt. Dazu mu· unter EShell/Options/ProjectF
der Schalter Project Help gesetzt werden. Der Compiler legt dann
beim öbersetzen eine Datei mit dem Namen des aktuelle Projekts
und der Extension .PDB an. Diese Projekt-Datenbank-Datei enthÑlt
alle Informationen, die der Editor zum Finden von Deklarationen
benîtigt.
Nachdem Sie Ihr Projekt Åbersetzt haben, kînnen Sie den Cursor
auf einen Bezeichner in einer Quelltextdatei setzen. Wenn Sie nun
die EHelpF-Taste drÅcken, prÅft Pure C zunÑchst, ob in den Help-
Dateien ein Eintrag zu dem betreffenden Bezeichner vorhanden ist.
Wenn dies nicht der Fall ist, dann wird in der Projekt-Datenbank
nach dessen Deklaration gesucht und diese im Quelltext angezeigt.
Durch Undo gelangt man wieder an die urspÅngliche Editierposition.File Caching
----------------------------------------------------------------------

Um die öbersetzungzeiten weiter zu verringern, kann Pure C Include-
und Object-Dateien cachen. Cachen bedeutet, da· eine Datei in den
Arbeitsspeicher geladen wird und alle weiteren lesenden Zugriffe auf
die Kopie der Datei im Speicher stattfinden. Caching ist schneller
als die Benutzung einer RAM-Disk.
Ein Chache benîtigt je nach Grî·e Ihrer Projekte entsprechend viel
Arbeitsspeicher. Sollte Ihnen der Speicher ausgehen, so kînnen Sie
den Cache deaktivieren. Das Caching fÅr Include- und Object-Dateien
kann unabhÑngig voneinander ausgeschaltet werden, so da· Sie Sich
schrittweise mehr freien Speicher verschaffen kînnen. Die Schalter
hierzu finden Sie unter EOptions/Shell/CacheF. Wenn Sie Header files
selektieren, werden die Include-Dateien gecachet, bei Selektion von
Object file die Object-Dateien.
Erzeugt Pure C eine neue Object-Datei, so wird diese auch bei
aktiviertem Cache auf Diskette beziehungsweise Festplatte geschrieben.
Wenn Ihnen der Speicher beim Testen beziehungsweise AusfÅhren Ihrer
Programme ausgeht, so mÅssen Sie nicht auf das Caching verzichten.
In solchen FÑllen kînnen Sie Pure C anweisen, den Cache-Speicher vor
AusfÅhrung eines Programmes freizugeben. Hierzu dienen die beiden
Schalter Clear before run/execute unter Options/Shell/Cache, die
jeweils getrennt fÅr Include- und Object-Dateien vorhanden sind.
Diese Schalter sollten Sie ebenfalls Setzen, wenn das auszufÅhrende
Programm den Inhalt einer gecacheten Datei verÑndert. Pure C kann
die AktualitÑt des Caches nur dann gewÑhren, wenn es das einzige
Programm ist, das Zugriff auf die gecacheten Dateien hat.Compileroptionen                                           EALTERNATEF-U
----------------------------------------------------------------------

Mit ( EOptionsF/ Compiler ) kann man den Compiler konfigurieren. In
diesem UntermenÅ kînnen zehn Schalter zur Steuerung des öbersetzungs-
vorgangs gesetzt werden:

     -A   Keine Erweiterungen des ANSI-Standard zulassen
          (ANSI keywords only)
     -C   Verschachtelte Kommentare zulassen
          (Allow nested comments)
     -Y   Informationen fÅr Pure Debugger erzeugen
          (Add debug Information)
     -T   Stack zur Laufzeit ÅberprÅfen
          (Stack checking)
     -B   DRI-Object Format erzeugen (keine Debug-Information mîglich)
          (Generate DRI Object-Format)
     -X   Vor jedem Symbol einen '_' setzen
          (Generate underbars)
     -H   Alle Funktionen erhalten ihre Parameter auf dem Stack und
          geben ihr Ergebnis in D0 zurÅck
          (Use cdecl calling)
     -Q   Alle Funktionen erhalten ihre Parameter von links nach
          rechts auf dem Stack und geben ihr Ergebnis in D0 zurÅck
          (Use pascal calling)
     -K   Standard-Datentyp fÅr char ist unsigned
          (Default char is unsigned)
     -J   ProgrammsprÅnge nicht optimieren
          (No jump optimization)
     -Z   bereits geladene Register-Werte nicht berÅcksichtigen
          (No register optimization)
     -M   Doppelte Strings nicht zusammenlegen
          (No string merging)
     -R   Keine Register-Variablen
          (No register variables)
     -G   Grîûenoptimierung
          (Size optimization)
     -P   absolute Unterprogrammaufrufe
          (Use absolute calls)
     -S   LINK- und UNLINK-Anweisungen verwenden
          (Standard stack frames)
     -2   Code fÅr 68020 Prozessor erzeugen
          (Generate 68020 Code)
     -8   Code fÅr 68881 Coprozessor erzeugen
          (Generate 68881 Code)

Anmerkung:  Wenn Sie Ihre Programme mit dem Schalter -8 Åbersetzen
            und auf Ihrem Rechner eine FPU vom Typ MC68881 oder
            MC68882 installiert ist, sollten Sie die Bibliothek
            PC881LIB.LIB statt PCFLTLIB.LIB in Ihrer Projektdatei
            angeben. Beachten Sie, da· dies nicht fÅr die Coprozessor-
            Karte SFP004 von Atari gilt, da diese nicht Åber den
            Line-F-Emulator angesteuert wird.

Im Eingabefeld (Include directory) wird der Pfad angegeben, unter
dem die Headerdateien (*.H) zu finden sind, beispielsweise

include          ... wenn sich der Ordner 'INCLUDE' mit den Headers
                 neben PC.PRG befindet.
d:\pc\include    ... wenn sich der Ordner auf einem anderen Laufwerk
                 (z.B. Ramdisk) befindet.

Unter (Output directory) wird der Pfad definiert, unter dem die
erzeugten Objekt-Dateien (*.O) abgelegt werden sollen. DarÅberhinaus
kann man Makros vorgeben (Define Macros) und festlegen, nach
wievielen EFehlerFn (Stop after ... errors) und EWarnungenF
( Stop after ... warnings) der Compilerlauf abgebrochen werden soll.
Die maximale LÑnge fÅr Bezeichner, die noch unterschieden werden
kînnen, kann von 1 bis 255 eingestellt werden (Maximum identifier
length), und die Warnstufe kann von 0 bis 2 vorgegeben werden
(Warning level).Warnungen
----------------------------------------------------------------------

... des Compilers kînnen Åber die ECompileroptionenF oder Åber
E#pragma warnF eingestellt werden.

Die Warnungen der Compilers kînnen in 4 Gruppen eingeteilt werden:

EVerletzung des ANSI-StandardsF
EHÑufig auftretende FehlerF
EWeniger hÑufige FehlerF
EWarnungen vor PortabilitÑtsproblemenFVerletzung des ANSI-Standards
-----------------------------

KÅrzel fÅr E#pragma warnF
|    EWarninglevelF, ab dem diese Warnung eingeschaltet ist
|    |  
dup [1] Redefinition of 'XXXXXX' is not identical.
        Ein bereits bestehendes Makro wurde umdefiniert. Abhilfe
        durch E#undefF.
ret [1] Both return and return of a value used.
        Die return-Anweisungen der Funktion liefern im einen Fall
        einen  Wert, im anderen nicht.
str [1] 'XXXXXX' not part of structure.
        'XXXXXX' ist kein Mitglied einer Struktur.
stu [1] Undefined structure 'XXXXXX'.
        Struktur 'XXXXXX' nicht definiert.
sus [1] Suspicious pointer conversion.
        VerdÑchtige Zeigerumwandlung.
voi [1] Void functions may not return a value. 
        void-Funktionen dÅrfen kein Ergebnis zurÅckliefern.
zst [1] Zero length structure.
        Struktur hat LÑnge Null.

        EWarnungenFHÑufig auftretende Fehler
-------------------------

KÅrzel fÅr E#pragma warnF
|    EWarninglevelF, ab dem diese Warnung eingeschaltet ist
|    |  
aus [1] 'XXXXXX' is assigned a value which is never used.
        'XXXXXX' erhÑlt einen Wert zugewiesen, der nicht weiter verwendet
        wird.
def [1] Possible use of 'XXXXXX' before definition.
        'XXXXXX' wird vor der Zuweisung eines Wertes verwendet.
eff [1] Code has no effect.
        Wirkungsloser Code.
par [1] Parameter 'XXXXXX' is never used.
        Parameter 'XXXXXX' wird nicht verwendet.
pia [1] Possible incorrect assignment.
        Zuweisung in einem if-statement mîglicherweise falsch.
rch [1] Unreachable code.
        Programm-Code unerreichbar.
rvl [1] Function should return a value.
        Funktion sollte einen Wert zurÅckliefern.

        EWarnungenFWeniger hÑufige Fehler
----------------------

KÅrzel fÅr E#pragma warnF
|    EWarninglevelF, ab dem diese Warnung eingeschaltet ist
|    |  
amb [2] Ambiguous operators need parentheses.
        Zweideutige Operatoren sollten in Klammern aufgegliedert
        werden. Der ANSI-Standard schreibt zwar eine eindeutige
        Rangfolge der Operatoren vor, jedoch sind manchmal allein
        wegen der Lesbarkeit Klammern angebracht.
amp [2] Superfluous & with function or array.
        öberflÅssiger Adress-Operator vor Funktion oder Array.
mlt [2] Hexadecimal constant too large.
        Die Hexadezimale Konstante in Ihrem String ist zu groû, so daû
        sie nicht mehr in einem Byte abgelegt werden kann.
nod [2] No deklaration for function 'XXXXXX'.
        Funktion 'XXXXXX' nicht deklariert.
pro [1] Call to function 'XXXXXX' with no prototype.
        Funktionsaufruf ohne Prototyp. Erzeugen Sie bitte einen Proto-
        typ bzw. prÅfen Sie, ob Sie alle notwendigen Headers einge-
        bunden haben. EPrototypenF sind sehr wichig, das sonst der 
        Compiler unter UmstÑnden falsche öbergabe- bzw. RÅckgabe-
        register verwendet (EParameterÅbergabeF).
stv [2] Structure passed by value.
        Struktur als Wert Åbergeben. Dies ist zwar nach ANSI erlaubt,
        nicht jedoch im K&R-Standard.
use [2] 'XXXXXX' declared but never used.
        'XXXXXX' deklariert aber nicht verwendet.

        EWarnungenFWarnungen vor PortabilitÑtsproblemen
------------------------------------

apt [1] Non portable pointer conversion.
        Nicht portable Zeigerumwandlung.
cln [2] Constant is long.
        long-Konstante. Geben Sie den expliziten Zusatz L bzw. l an.
cpt [1] Non portable pointer comparision.
        Nicht portabler Zeigervergleich.
rng [1] Constant out of range in comparision.
        Konstante zu groû in Vergleichsaudruck. Die Warnung erhalten 
        Sie, wenn Sie z.B. eine als unsigned deklarierte Variable auf
        NegativitÑt ÅberprÅfen.
sig [2] Conversion may lose significant digits.
        Verlust signifikanter Ziffern bei Umwandlung.
ucp [2] Mixing pointers to signed and unsigned char.
        Gemischte Zeiger auf signed und unsigned char.
rpt [1] Non portable pointer assignement.
        Nicht portable Umwandlung bei Ergebnis-RÅckgabe.

        EWarnungenFFehlermeldungen des Compilers
-----------------------------

Im Gegensatz zu den EWarnungenF wird bei Fehlermelungen des 
Compilers der Projektlauf IMMER abgebrochen.

EFehlermeldungen des PrÑprozessorsF
EFehlermeldungen bei FunktionsdeklarationenF
EFehlermeldungen bei FunktionsaufrufenF
EFehlermeldungen bei DeklarationenF
EFehlermeldungen bei SchleifenF
EFehlermeldungen bei If-/Switch-statementsF
EFehlermeldungen in StatementsF
EFehlermeldungen bei KonstantenF
EDiverse FehlermeldungenFFehlermeldungen des PrÑprozessors
---------------------------------

- # operator not followed by macro argument name
  Dem #-operator folgt kein Macroargument (EFunktionen-MakrosF). 

- Bad file name format in include directive
  Das Format des Dateinamens fÅr die E#includeF-direktive ist falsch.

- Bad ifdef directive syntax
- Bad ifndef directive syntax
- Bad undef directive syntax
  Nach diesen Direktiven folgt eine MACRO-name und sonst nichts.

- Define directive needs an identifier
  Die haben bei der E#defineF-direktive den Bezeichner vergessen.

- Error directive: 'XXXXXX'
  Fehlermeldung auf Grund einer E#errorF-direktive.

- File name too long
  Der Dateiname fÅr die E#includeF-direktive ist zu lang.

- Invalid macro argument seperator
  Makroargumente mÅssen durch Kommata (,) getrennt werden. 

- Macro argument syntax error

- Macro expansion too long
  Die Makroerweiterung erzeugt mehr als 4096 Zeichen, prÅfen Sie, ob eine
  rekursive Definition vorliegt.

- Misplaced elif directive
- Misplaced else directive
- Misplaced endif directive
  Der Compiler erwartet die Direktive an dieser Stelle nicht. Wahrschein-
  lich haben Sie die zugehîrige E#ifF-direktive vergessen.

- No file name ending
  Dateiname fÅr die E#includeF-direktive muû mit " oder > abgeschlossen
  sein.

- Unable to open include file 'XXXXXX'
  Die Datei fÅr die E#includeF-direktive konnte nicht geîffnet werden.

- Unexpected end of file in comment started at line #
  Kommentare mÅssen abgeschlossen sein. "Dateiende" innerhalb eines 
  Kommentars ist unzulÑssig.

- Unexpected end of file in conditional started at line #
  PrÑprozessorbedingungen mÅssen durch E#endifF nicht durch Dateiende
  beendet werden.

- Unknown preprocessor directive 'XXXXXX'
  Es gibt zwar eine ganze Reihe von PrÑprozessordirektiven, aber das geht 
  zu weit.

- Wrong number of arguments in call of 'XXXXXX'
  Wie bei Funktionsaufrufen, mÅssen auch bei EFunktionen-MakrosF die
  Anzahl der Parameter genau stimmen. PrÅfen Sie den "Aufruf" oder die
  Definition des Makros.Fehlermeldungen bei Funktionsdeklarationen
------------------------------------------

- 'XXXXXX' not an argument
  Sie geben den Datentyp eines Parameters an, der aber in der Parameter-
  liste nicht erscheint. (Nur bei der klassischen Deklaration).

- Argument # missing name
  Ein Formalparameter muû immer einen Namen haben.

- Argument list syntax error
  Allgemeiner Fehler in der Formalarameterliste.

- Conflicting type modifiers
  EunsignedF und EsignedF bzw. EcdeclF und EpascalF dÅrfen nicht
  gemeinsam benutzt werden.

- Function definition out of place
  An dieser Stelle wurde keine Funktionsdefinition erwartet. Haben Sie 
  vieleicht ein Semicolon vergessen?

- Incompatible storage class
  Funktionsdefinitionen dÅrfen nicht EexternF sein.
  
- Mismatched number of parameters in definition
  Unterschiedliche Parameteranzahl in Prototyp und Definition.

- Not an allowed type
  Funktionen oder Array dÅrfen nicht zurÅckgeliefert werden.

- Two consecutive dots
  Es gibt zwar einen Punkt (bei Structuren) und drei Punkte (varaiable 
  Anzahl von Parametern) aber nicht zwei Punkte. Also ist entweder einer 
  zuviel oder einer zu wenig.

- Type mismatch in redeclaration of 'XXXXXX'
  Sie defineren die Funktion anders als sie deklaraiert wurde. Die kann 
  auch dann passieren, wenn Sie eine Funktionen definieren, die bereits 
  ohne Prototyp aufgerufen wurde. Dann nimmt nÑmlich der Compiler an es 
  wÑre eine EintF-funktion.Fehlermeldungen bei Funktionsaufrufen
-------------------------------------

- Call of non-function
  Der Bezeichner ist zwar bekannt, aber KEINE Funktion.

- Extra parameter in call to 'XXXXXX'
  Sie Åbergeben einer Funktion zu viele Paramter. PrÅfen Sie den Aufruf 
  oder den Prototypen.

- Function call missing )
  Die abschlieûene Klammer fehlt.

- Not an allowed type
  Von einer als EvoidF deklarierten Funktion dÅrfen Sie keine RÅckgabe-
  werte erwarten.

- Too few parameters in call to 'XXXXXX'
  Es fehlt ein Parameter. PrÅfen Sie den Aufruf oder den Prototypen.

- Type mismatch in parameter 'XXXXXX' in call to function 'XXXXXX'
  Sie Åbergeben einen falschen Parameter, der beim besten Willen nicht 
  konvertiert werden kann.Fehlermeldungen bei Deklarationen
---------------------------------

- Array bounds missing ]
  Die abschlieûene Klammer konnte nicht entdeckt werden.

- Bit field size syntax
  Bitfields dÅrfen nicht grîûer als 32 Bit groû sein.

- Conflicting type modifiers
  EunsignedF und EsignedF bzw. EcdeclF und EpascalF dÅrfen nicht
  gemeinsam benutzt werden.

- Declaration missing ;
  Das abschlieûende Semicolon fehlt.

- Declaration needs type or storage class
  Ein Bezeichner muû nÑher bestimmt sein, also zumindest der Typ und/oder
  die Speicherklasse muû angegeben sein.

- Declaration syntax error
  Allgemeiner Fehler bei der Deklaration.

- Enum syntax error
  Irgendwas beim EenumF ist Falsch.

- Illegal initialization
  Eine Variable muû mit einer Konstanten oder der Addresse einer globalen
  Variablen ( EstaticF oder EexternF) +/- einer Konstandte initiali-
  siert werden.

- Initializer syntax error
  Die Werte, mit denen eine Variable initalisiert werden soll, sind kein
  gÅltiger C-Ausdruck.

- Redeclaration of 'XXXXXX'
  Eine Variable darf nur einmal deklariert sein.

- Structure or union syntax error
  Weder ein Bezeichner noch die îffnende geschweifte Klammer konnte
  entdeckt werden.

- Too many initializers
  Ein Array bzw. eine Struktur kann nicht mit mehr Werten initialisiert
  werden, als Speicherplatz zur VerfÅgung gestellt wird.

- Too many storage classes in declaration
  Entweder EexternF oder EstaticF, beides geht nicht.

- Too many types in declaration
  Eine Variable kann nicht mehrer Typen besitzen, dafÅr gibt es EunionF.

- Too much auto memory
  Lokale Variablen dÅrfen nicht mehr als 32kb beanspruchen. Beachten Sie,
  daû der Compiler nicht die TATSéCHLICHE Stacksize ÅberprÅft.

- Two consecutive dots
  Es gibt zwar einen Punkt (bei Structuren) und drei Punkte (varaiable 
  Anzahl von Parametern) aber nicht zwei Punkte. Also ist entweder einer 
  zuviel oder einer zu wenig.Fehlermeldungen bei Schleifen
-----------------------------

- Do statement must have while
  EdoF ohne while gibt es nicht.

- Do-while statement missing (
- Do-while statement missing )
- Do-while statement missing ;
  Das angegeben Zeichen konnt nicht entdeckt werden.

- For statement missing (
- For statement missing )
- For statement missing ;
  Das angegeben Zeichen konnt nicht entdeckt werden.
  
- Misplaced break
  EbreakF an dieser Stelle nicht erwartet. PrÅfen Sie die geschweiften
  Klammern.

- Misplaced continue
  EcontinueF an dieser Stelle nicht erwartet. PrÅfen Sie die geschweiften
  Klammern.

- while statement missing (
- while statement missing )
  Die Klammer im EwhileF-statement wurde nicht gefunden.Fehlermeldungen bei If-/Switch-statements
-----------------------------------------

- Case outside of switch
  EcaseF an dieser Stelle nicht erwartet. PrÅfen Sie die geschweiften
  Klammern.

- Case statement missing :
  Der Doppelpukt fehlt.

- Constant expression required
  Bei EcaseF dÅrfen nur Konstanten geprÅft werden.

- Default outside of switch
  EdefaultF an dieser Stelle nicht erwartet. PrÅfen Sie die geschweiften
  Klammern.

- Duplicate case
  Eine Konstante darrf nur einmal geprÅft werden.

- If statement missing (
- If statement missing )
  Die Klammer im EifF-statement wurde nicht gefunden.
  
- Incorrect use of default
  Das Semicolon wurde nicht gefunden.

- Misplaced break
  EbreakF an dieser Stelle nicht erwartet. PrÅfen Sie die geschweiften
  Klammern.

- Misplaced else
  EelseF an dieser Stelle nicht erwartet. PrÅfen Sie die geschweiften
  Klammern oder die Semicolons.


- Switch statement missing (
- Switch statement missing )
  Die Klammer im EswitchF-statement wurde nicht gefunden.

- Too many cases
  Zuviele EcaseF-anweisungen.

- Too many default cases
  Es ist nur ein EdefaultF-fall erlaubt.Fehlermeldungen in Statements
-----------------------------

- Ambiguous symbol 'XXXXXX'
  Sie haben in zwei oder mehreren verschiedenen Strukturen jeweils
  den gleichen Namen fÅr ein Element vergeben. Das ist nicht weiter 
  schlimm, aber wenn Sie Åber diesen Namen einen nicht nÑher bestimm-
  ten Zeiger dereferenzieren wollen, weiû der Compiler nicht mehr
  weiter, sie mÅssen also den Zeiger nÑher bestimmen (casten).

- Array bounds missing ]
  Die abschlieûende, eckige Klammer fehlt.

- Cannot modify a const object
  Als EconstF deklarierte Objekte dÅrfen nicht verÑndert werden.

- Cast syntax error
  Beim Casten haben Sie was falsch gemacht. PrÅfen Sie alle Klammern.

- Compound statement missing }
  Ein Anweisungsblock muû mit } abgeschlossen werden.

- Expression syntax
  Irgendwas ist falsch. PrÅfen Sie die richtige Anwendung der 
  Operatoren.

- Function doesn't take variable number of arguments
  Sie benutzen Eva_startF, Eva_argF oder Eva_endF, aber Ihre
  Funktion will nur eine fixe Anzahl Parameter.

- Goto statement missing label
  Das Sprungziel fÅr das EgotoF-statement konnte nicht gefunden 
  werden. Ist es auch wirklich in der gleichen Funktion?

- Illegal character 'C' (0xXX)
  Dieses Zeichen wurde nicht erwartet.

- Illegal pointer substraction
  Pointer nur gleichen Typs dÅrfen substrahiert werden.

- Illegal structure operation
  Sie verwenden den . oder -> Operator nicht auf eine Struktur oder
  auf einen Zeiger auf eine Struktur.

- Illegal use of floating point
  An dieser Stelle ist eine Flieûkommazahl nicht erlaubt.

- Illegal use of pointer
  An dieser Stelle ist ein Zeiger nicht erlaubt.

- Improper use of typedef symbol
  Sie haben einen mit EtypedefF definierten Bezeichner wie eine 
  Variable verwendet.

- Incompatible type conversion
  Folgene Typumwandungen sind in beiden Richtungen NICHT erlaubt:
  Funktion        <-->           Variable
  Struktur/Array  <-->  einfache Variable
  Zeiger          <-->     Flieûkommazahl

- Invalid indirection
  Es kînnen nur Zeiger, die nicht als void * deklariert sind, 
  dereferenziert werden.

- Invalid pointer addition
  Pointer nur gleichen Typs dÅrfen substrahiert werden.

- Invalid use of arrow
- Invalid use of dot
  Auf den -> bzw. . Operator muû der Name eines Strukturelements 
  folgen.

- Lvalue required
  Sie versuchen eine Konstante zu modifizieren. Vieleicht haben Sie
  die Addresse eines Arrays auf del linken Seite des = Operators.

- Must be addressable
- Must take address of memory location
  Dieses Object steht nicht im Arbeitsspeicher und demnach auch keine
  Adresse.

- Pointer required on left side of ->
  Der -> operator ist nur auf Zeigern erlaubt.

- Size of structure or array not known
  Die Grîûe eine Struktur bzw. eines Array ist notwendig aber zu 
  diesem Zeitpunkt (noch) nicht bekannt.

- Statement missing ;
  Jede Anweisung muû mit einem Semicolon abgeschloûen werden.

- Undefined label 'XXXXXX'
- Undefined structure 'XXXXXX'
- Undefined symbol 'XXXXXX'
  Diese Bezeichner sind (noch) nicht bekannt.Fehlermeldungen bei Konstanten
------------------------------

- Character constant too long
  Eine Zeichenkonstante darf nur ein oder 2 Zeichen enthalten.

- Division by zero
  Eine Division durch 0 ist beim besten Willen nicht erlaubt.

- Enumeration constant syntax error
  Der angegeben Wert ist KEINE Konstante (EenumF).

- Hexadecimal constant too large
  Die hexadezimale Konstante ist zu groû.

- Illegal octal digit
  Oktalziffern gehen von 0 bis 7. Mîglicherweise haben Sie unbeabsichtigt
  (oder nicht wissend) eine fÅhrende 0 in Ihrer Konstante.

- Incorrect number format
  Integerkonstanten dÅrfen keinen Dezimalpunkt enthalten. 

- Misplaced decimal point
  Dezimalpunkt im Exponenten von Flieûkommazahlen ist nicht erlaubt.

- Numeric constant too large
  Numerische Konstante ist zu groû.

- Too many decimal points
  Ein Dezimalpunkt bei Flieûkommazahlen ist nur erlaubt.

- Too many exponents
  Nur ein Exponent darf angegeben werden.

- Unterminated character constant
- Unterminated string
- Unterminated string or character constant
  String- und Zeichenkonstanten mÅssen mit dem gleichen Zeichen ab-
  geschlossen werden, mit dem sie anfangen (" oder ').Diverse Fehlermeldungen
-----------------------

- Error writing output file
  Es konnte keine weiteren Daten in die Objektdatei geschrieben werden,
  ist die Diskette voll?

- Incorrect ... option
  Sie haben in Ihrer Projektdatei eine Option angegeben, die der 
  Compiler nicht kennt.

- Out of memory
  Entfernen Sie alle residenten Programme, die nicht unbedingt 
  notwendig sind und/oder verkleinern Sie Ihre Module.

- Too many error or warning messages
  Die bei den ECompileroptionenF eingestellte, maximale Anzahl von
  Fehlermeldungen  oder Warnungen wurde erreicht.

- Unable to create output file 'XXXXXX'
  Die Objektdatei konnte nicht angelegt werden. Ist die Diskette/Datei 
  schreibgeschÅtzt? Existiert der Pfad?Assembleroptionen                                          EALTERNATEF-I
----------------------------------------------------------------------

Mit ( EOptionsF/Assembler ) kann man den Assembler konfigurieren. Die
folgenden Schalter regeln die Assemblierung:

    -1   68010-Befehle zulassen.          (MC68010 insruction set)
    -2   68020-Befehle zulassen.          (MC68020 insruction set)
    -3   68030-Befehle zulassen.          (MC68030 insruction set)
    -4   68040-Befehle zulassen.          (MC68040 insruction set)
    -5   68851-Befehle zulassen.          (MC68851 insruction set)
    -8   68881-Befehle zulassen.          (MC68881 insruction set)
    -S   Supervisor-befehle zulassen.     (Privileged instructions)
    -Y   Informationen fÅr Pure Debugger erzeugen
                                          (Add debug information)
    -B   DRI-Object Format erzeugen (keine Debug-Information mîglich)
                                          (Generate DRI Object-Format)
    -C   Include-Dateien nicht ausgeben.  (No include line listing)
    -F   Nichtzutreffende Teile bei der bedingten Assemblierung
         nicht ausgeben.                  (No false condition listing)
    -M   Keine Makro-Zeilen ausgeben.     (No macro line listing)
    -A   Alle Makros expandiert ausgeben. (List all macro lines)
    -P   Listing ausgeben                 (Print a listing)
    -U   Nicht definierte Labels und Symbole werden als extern
         deklariert betrachtet.           (Undefined symbols external)
    -V   AusfÅhrlichen Bericht ausgeben.  (Verbose message output)

Im Eingabefeld (Include directory) wird der Pfad angegeben, unter
dem Includedateien zu finden sind. Unter (Output directory) wird
der Pfad definiert, unter dem die erzeugten Objekt-Dateien (*.O)
abgelegt werden sollen. DarÅberhinaus kann man unter (Define macro)
ein Makro definieren.Linkeroptionen                                             EALTERNATEF-O
----------------------------------------------------------------------

Mit ( EOptionsF/Linker ) kann man dan Linker konfigurieren. Die folgen-
den Schalter regeln den Linkvorgang:

     -G   Globale Symbole in Symboltabelle einfÅgen.
          (Add global symbols to the symbol table)
     -L   Lokale Symbole in Symboltabelle einfÅgen.
          (Add local symbols to the symbol table)
     -Y   Informationen fÅr Pure Debugger hinzufÅgen.
          (Add debug information)
     -J   Neue Objektdatei (*.O) erzeugen.
          (Generate new object file)
     -F   Fastload-Bit nicht setzen (Fastload-Bit ab TOS 1.4).
          (Don't set fastload bit)
     -R   Das Programm wird in ST-RAM geladen (nur auf Atari TT).
          (Load program to ST-RAM)
     -M   Malloc-Aufrufe reservieren ST-RAM (nur auf Atari TT).
          (Mallocs for ST-RAM)
     -V   AusfÅhrliche Mitteilungen im Fenster 'EMessagesF'.
          (Verbose message output)

In den Eingabefeldern (Text segement address), (Data segement
address) und (BSS segement address), kann man die Startadresse
fÅr das TEXT-, DATA- und BSS-Segment festlegen, um ROM-fÑhigen
Code zu erzeugen. DarÅberhinaus kann man die Stack-Grîûe in
Bytes (Stacksize: ______ bytes) und die Heapgrîûe in KBytes
einstellen (Heapsize: ______ K bytes). Die Heapgrîûe wird
jedoch nur auf TT-Rechnern beachtet. Der Pfad unter dem der
Linker die Bibliotheksdateien finden kann, wird unter (Library
directory) angegeben.

Der Linker verarbeitet sowohl das neue Pure-Objektformat, als
auch das DRI-Objektformat. Das Format einer Objektdatei erkennt
er automatisch.
Das Pure-Objektformat ist so kompakt, daû es kein seperates
Bibliotheksformat gibt. Wenn Sie eine Bibliothek erstellen wollen,
linken Sie die Objektdateien einfach zu einer neuen Objektdatei
zusammen.EOptionsF/Load...                                            EALTERNATEF-J
----------------------------------------------------------------------

... lÑdt die Parameter der integrierten Entwicklungsumgebung (fÅr
Editor, Compiler, Linker und Assembler) aus einer Datei, die mittels
EOptionsF/ESave ''F gespeichert wurde und per EDateiauswahlboxF
geawÑhlt werden kann. In der Voreistellung heiût sie PC.CFG. Pure C
lÑdt diese Datei beim Start automatisch. Falls Sie einige Optionen
vorÅbergehend verÑndert haben, kînnen Sie mit 'Load...' den
ursprÅnglichen Zustand wieder herstellen.EOptionsF/Save ''                                            EALTERNATEF-H
----------------------------------------------------------------------

... speichert die eingestellten Parameter der integrierten Entwick-
lungsumgebung (fÅr Editor, Compiler, Linker und Assembler) in der
aktuellen Konfigurationsdatei. Sie trÑgt den Namen 'PC.CFG', falls
nicht mittels ( EOptionsF/Load...) eine andere *.CFG-Datei
ausgewÑhlt wurde. Ist die Editoroption 'Auto Save' aktiv, so wird
beim Verlasen von Pure C diese Datei automatisch gesichert.

In einer *.CFG Datei wird die Gesamtkonfiguration von Pure C
gespeichert, d.h.: Wird Pure C verlassen und neu gestartet, so hat
sich NICHTS verÑndert! Lediglich Help-Windows werden geschlossen.'Alternate Codes' in Pure C (Project Kommandos)
----------------------------------------------------------------------

  Taste(n)      Funktion
----------------------------------------------------------------------

  ALTERNATE-A   *.S-Datei des aktuellen Fensters assemblieren
                ( ECompileF/ EAssemble ''F )
  ALTERNATE-C   *.C-Datei des aktuellen Fensters compilieren
                ( ECompileF/ ECompile ''F )
  ALTERNATE-D   EMake ''F ausfÅhren und Debugger starten
                ( EProjectF/ EDebug ''F )
  ALTERNATE-E   externes Programm ausfÅhren ( ECompileF/ EExecute...F )
  ALTERNATE-I   Assembleroptionen einstellen ( EOptionsF/ EAssemblerF )
  ALTERNATE-J   Konfigurationsdatei laden ( EOptionsF/ ELoad...F )
  ALTERNATE-H   Konfigurationsdatei spechern ( EOptionsF/ ESave ''F )
  ALTERNATE-L   link aktuelles Project ( EProjectF/ ELink ''F )
  ALTERNATE-M   make aktuelles Project ( EProjectF/ EMake ''F )
  ALTERNATE-O   Linkeroptionen einstellen ( EOptionsF/ ELinkerF )
  ALTERNATE-R   run aktuelles Project ( EProjectF/ ERun ''F )
  ALTERNATE-S   externe Datei assemblieren ( ECompileF/ EAssemble...F )
  ALTERNATE-U   Compileroptionen einstellen ( EOptionsF/ ECompilerF )
  ALTERNATE-V   externe Datei assemblieren ( ECompileF/ ECompile...F )
  ALTERNATE-X   make all aktuelles Project ( EProjectF/ EMake all ''F )
  ALTERNATE-Z   Shelloptionen einstellen ( EOptionsF/ EShellF )Der Editor von Pure C
----------------------------------------------------------------------

Da der Editor fÅr den Atari-Benutzer ungewohnt sein dÅrfte, bedarf er
einer ausfÅhrlicheren ErklÑrung.
Zu den Besonderheiten dieses Editors zÑhlen die EBlockoperationenF,
wobei zuvor ein Textabschnitt EselektiertF werden muû.
Es kînnen bis zu sechs Editorfenster geîffnet, und auf diese Weise
mehrere Programmtexte gleichzeitig bearbeitet werden. Allerdings
benîtigt das 'EHelpF' und der Compiler fÅr seine EMessagesF auch jeweils
ein Fenster, so daû Ihnen im ungÅnstigsten Fall vier Fenster zum
Editieren Åbrig bleiben.
Die Bedienung der GEM-Fenster wird Ihnen vom Desktop her bekannt sein.
Im 'EMessagesF'- und 'Help'-Fenster kann nicht editiert werden, ein mar-
kierter EBlockF kann aber vom 'Help'-Fenster in ein Quelltextfenster
kopiert werden.

Querverweis   EEditorfunktionenF im öberblick'Messages'
----------------------------------------------------------------------

Das 'Messages'-Fenster wird von Compiler, Assembler und Linker ge-
îffnet, um Fehler oder EWarnungenF auszugeben.
Nachdem eine Zeile in diesem Fenster EselektiertF wurde, kann mittels
der EFind ErrorF-Funktion der Fehler (oder die Warnung) direkt im
entsprechenden Quelltext angesprungen werden. Falls nîtig wird dazu
der Quelltext in den Speicher geladen.Liste der Editor-Funktionen:
----------------------------------------------------------------------

Tastenkombination   | ErklÑrung
--------------------+-------------------------------------------------
Return              | Neue Zeile wird eingefÅgt.
Backspace           | Lîscht ein Zeichen bzw. eine Tabulatorstelle
                    | vor dem Cursor.
                    | Steht der Cursor am Zeilenanfang, springt.
                    | er an das Ende der vorherigen Zeile.
Delete              | Lîscht ein Zeichen bzw. eine Tabulatorstelle
                    | nach dem Cursor.
                    | Steht der Cursor am Zeilenende, rÅckt die
                    | nachfolgende Zeile auf.
Tab                 | Cursor springt zur nÑchsten Tabulatorstelle
                    | Diese kann Åber die Editoroptionen
                    | eingestellt werden.
Home                | Cursor springt an den Textanfang.
Shift-Home          | Cursor springt an das Textende.
Arrow-up            | Cursor springt eine Zeile nach oben.
Arrow-down          | Cursor springt um eine Zeile nach unten.
Arrow-left          | Cursor springt um ein Zeichen (bzw. eine
                    | Tabulatorstelle) nach links.
Arrow-right         | Cursor springt um ein Zeichen (bzw. eine
                    | Tabulatorstelle) nach rechts.
Shift-arrow-up      | Cursor springt um eine Seite nach oben.
Shift-arrow-down    | Cursor springt um eine Seite nach unten.
Shift-arrow-left    | Cursor springt an den Zeilenanfang.
Shift-arrow-right   | Cursor springt an das Zeilenende.
Control-arrow-left  | Cursor springt ein Wort nach links.
Control-arrow-right | Cursor springt ein Wort nach rechts.Die Blockoperationen des EEditorsF
----------------------------------------------------------------------

... lassen sich in drei Abschnitte aufteilen.

- zuerst wird ein Textabschnitt EselektiertF.
- Dann wird er durch 'ECopyF' oder 'ECutF' in einen Zwischenspeicher
  kopiert und bleibt dort bis zum nÑchsten 'Copy'- bzw. 'Cut'-Befehl.
  WÑhrend 'Copy' nur den selektierten Textabschnitt kopiert, wird er
  durch 'Cut' anschlieûend im Text gelîscht.
  Hinweis: ECONTROLF-Y (Zeile lîschen) kopiert die gelîschte Zeile
           auch in den Zwischenspeicher.
- Nun kann mit 'EPasteF' der im Zwischenspeicher befindliche Text-
  abschnitt an die aktuelle Cursorposition angehÑngt werden, oder
  ein selektierter Textabschnitt durch den im Zwischenspeicher
  befindlichen Text ersetzt werden.

Mit EShift RightF bzw. EShift LeftF unter dem MenÅpunkt EEditF kann
ein Block um eine Tabulatorstelle nach rechts bzw. links verschoben
werden.
Mit EUndoF lassen sich Blockoperationen rÅckgÑngig machen.Blockselektierung
----------------------------------------------------------------------

Zur Blockselektierung stehen mehrere Mîglichkeiten zur Auswahl:

- Mit gedrÅckter linker Maustaste wird Åber den gewÅnschten Text-
   abschnitt gefahren.
- Mit gedrÅckter SHIFT-Taste und einem Klick auf die linke Maus-
   taste wird der Textabschnitt zwischen Cursor- und Maus-Position
   selektiert.
   Hinweis: Der Cursor bleibt durch Textscrollen mit der Maus
            (z.B. durch verschieben der Scrollbalken) an seiner
            alten Position. So kînnen auch Textabschnitte, die grîûer
            sind als das Fenster selektiert werden.
- Ein Doppelklick selektiert ein einzelnes Wort.
- Durch SHIFT und 'Doppelklick' wird eine Zeile selektiert.
- ECONTROLF-N selektiert den gesammten Text.
- Ein Doppelklick auf eine Klammer ( '(', ')', '[', ']', '{' oder
  '}' ) selektiert den durch îffnende und schlieûende Klammer umge-
  benen Textausschnitt (Verschachtelungen werden berÅcksichtigt).

Querverweis   EBlockoperationenF'Control Codes' in Pure C (Editor Kommandos)
----------------------------------------------------------------------

  Taste(n)      Funktion
----------------------------------------------------------------------
  ESC           Umschalten von Editorbildschirm auf Ausgabebildschirm
                und zurÅck.
  SHIFT/SHIFT   Unterbrechen des Compilers wÑhrend eines öbersetzungs-
                vorgangs (bzw. wÑhrend des Linkens).
  CONTROL-B     Klammerebenen prÅfen (ESearchF/ECheck BracesF)
  CONTROL-C     Selektierten Text in Zwischenspeicher kopieren.
                ( EEditF/ ECopyF ).
  CONTROL-D     Selektierten Text ausdrucken.
  CONTROL-E     Steht der Cursor auf einer Fehlermeldung, wird nach
                dem Fehler im Quelltext gesucht(ESearchF/EFind ErrorF)
  CONTROL-F     Der Text wird nach einem String durchsucht.
                ( ESearchF/ EFind...F ).
  CONTROL-G     Die Suche nach dem String wird fortgesetzt.
                ( ESearchF/ EFind SameF ).
  CONTROL-H     Text Åberladen ( EFileF/ EAbandonF )
  CONTROL-I     Nach selektiertem Text suchen.
                ( ESearchF/ EFind SelectionF )
  CONTROL-J     Selektierten Text um eine Tabulatorposition nach
                links verschieben. ( EEditF/ EShift LeftF )
  CONTROL-K     Selektierten Text um eine Tabulatorposition nach
                rechts verschieben. ( EEditF/ EShift RightF )
  CONTROL-L     Anspringen von Zeile Nummer ... im aktiven Fenster.
                ( ESearchF/ EGoto Line...F ).
  CONTROL-M     Quelltext des aktiven Fensters speichern als...
                ( EFileF/ ESave as...F ).
  CONTROL-N     Gesammten Text selektieren ( EEditF/ ESelect AllF ).
  CONTROL-O     C-Quelldatei îffnen ( EFileF/ EOpen .CF ).
  CONTROL-P     Datei ausdrucken ( EFileF/ EPrintF ).
  CONTROL-Q     Pure C verlassen.
  CONTROL-R     Einen String duch einen anderen ersetzen.
                ( ESearchF/ EReplace...F ).
  CONTROL-S     Quelltext des aktiven Fensters speichern.
                ( EFileF/ ESaveF ).
  CONTROL-T     Stringersetzen fortfÅhren ( ESearchF/ EReplace SameF).
  CONTROL-U     Schlieûen des aktiven Fensters ( EFileF/ ECloseF ).
  CONTROL-V     Text aus Zwischenspeicher kopieren ( EEditF/ EPasteF ).
  CONTROL-W     Das Fenster wechseln ( EEditF/ ECycle WindowsF ).
  CONTROL-X     Selektierten Text in den Zwischenspeicher kopieren.
                und im Fenster lîschen ( EEditF/ ECutF ).
  CONTROL-Y     Eine Zeile lîschen und in Zwischenspeicher kopieren.Projektdateien
----------------------------------------------------------------------

Eine Projektdatei ist eine einfache Liste von Quelltext- und Objekt-
dateien, sowie Bibliotheken, die an einem Programmprojekt beteiligt
sind.
In der ersten Zeile der Projektdatei steht der spÑtere Programmname.
Als Voreinstellung dient der Name der Projektdatei mit der Dateier-
weiterung '.PRG'. Wenn als Ausgabedatei die aktuelle Datei durch das
Zeichen '*' angegeben wurde, dann wird der Name der Datei im aktiven
Editorfenster verwendet. Die Dateierweiterung kann man jedoch auch ex-
plizit vorgeben, z.B. '*.TTP'. Auch Wildcards  im Programmnamen
in Kombination  mit einer Pfadangabe sind erlaubt. Ein Beispiel:

       \tools\special\*.ttp =
       ...

Die  Projektverwaltung  holt  sich  vom  Top-Window  nur den
Dateinamen nicht jedoch den Zugriffspfad.

Ab der zweiten Zeile kînnen globale Optionen fÅr Linker, Assembler und
Compiler angegeben werden. Diese mÅssen die Form haben
               '.L[<Liste der Optionen>]'.
Hierbei steht der Buchstabe L fÅr Linker, C fÅr Compiler und S fÅr den
Assembler.
Bevor nun die AufzÑhlung der Dateien, die compiliert und gelinkt werden
sollen, folgen kann, muû aus syntaktischen GrÅnden eine Zeile mit dem
'='-Zeichen eingefÅgt werden.
FÅr die darauf folgende Auflistung, der am Projekt beteiligten
Dateien, sind nur bestimmte Dateierweiterungen erlaubt:

                 .C              C-Quelltexte
                 .S              Assemblerquelltexte
                 .O bzw. .OO     Objektdateien
                 .PRJ            Projektdatei
                 .LIB            Bibliotheken

Falls keine Erweiterung angegeben wurde, wird angenommen, daû es sich
um eine C-Quelldatei handelt. Wenn als Dateiname nur der '*' vorhanden
ist, so wird an dieser Stelle die Datei des aktiven Fensters benutzt
(dh. als Dateiname wird der Name im Titelbalken des aktuellen Fensters
genommen). Diese Standardvorgabe ist natÅrlich nur fÅr eine Datei
mîglich.
Hinter einem Dateinamen kînnen dann nochmals lokale Optionen fÅr Com-
piler und Assembler in der Form '[<Liste der Optionen>]' kommen.
Mit dem Zeichen ';' werden Kommentare eingeleitet. SÑmtliche Zeichen
einer Zeile, die dem ';' folgen, werden daraufhin ignoriert.
Projektdateien kînnen mit dem EEditorF erstellt werden.
Alle Dateien werden zunÑchst im Projektverzeichnis gesucht und dann im
aktuellen Verzeichnis. 'DEFAULT.PRJ ist als Standard-Projektdatei
eingestellt.

Die Projektverwaltung berÅcksichtigt auch File Dependencies. Die
Syntax der Projektdatei lautet:

       ModName [ ( FileName [, ...] )] [ >[< ModOptions >]< ]

Das Modul ModName wird auch dann neu Åbersetzt, wenn eine der durch
FileName spezifizierten Dateien geÑndert wurde.

Innerhalb einer Projektdatei kînnen Sie Bezug auf weitere ØUnterÆ-
Projektdateien nehmen, indem Sie deren Namen angeben. Dies ermîglicht
es Ihnen, eignene Bibliotheken als Teilprojekte zu erzeugen und
automatisch in das Hauptprogramm einzubinden.
Bibliotheken, die als Unterprojekte definiert sind, lassen sich somit
entweder einzeln oder in einem Durchlauf mittels der Åbergreifenden
Projektdatei erzeugen.

HINWEIS:  Da der Projektmanager das Datum und die Uhrzeit der Dateien
          ÅberprÅft und entsprechend compiliert, assembliert, und
          linkt ist es wichtig die Systemzeit vorher einzustellen.Der Help-Compiler
----------------------------------------------------------------------

Mit dem Help-Compiler kînnen Sie eine eigene Help-Datei erzeugen,
auf deren Inhalt Sie aus Pure Debugger und der integrierten
Entwicklungsumgebung von Pure C zugreifen konnen.
Der Aufruf des Help-Compilers geschieht mit der Kommandozeile

    HC commandfile

Als einziges Argument wird der Name einer EBefehlsdateiF Åbergeben.
Diese enthÑlt die Optionen, den Namen der zu erzeugenden Help-
Datei und eine Liste der EQuelldateienF.Befehlsdateien fÅr den Help-Compiler
----------------------------------------------------------------------

Am Anfang einer Befehlsdatei werden die Optionen angegeben, wobei
jede Option in eine neue Zeile geschrieben werden muû:

--------------------------------------------------------------
Option        Beschreibung
--------------------------------------------------------------
L           Diese Option fÅhrt zum Anlegen einer Log-Datei.
            Diese enthÑlt alle wahrend der Ubersetzung aus-
            gegebenen Meldungen, so auch Warnungen und
            Fehler.
N           Wenn Sie diesen Schalter setzen, prÅft der Help-
            Compiler die Quelltexte auf syntaktische Korrekt-
            heit und AusfÅhrbarkeit von Querverweisen. Eine
            Help-Datei wird nicht erzeugt.
T=n         Der Help-Compiler expandiert alle Tabulatoren
            in Leerzeichenfolgen. Die Zahl n gibt an,
            wieviel Leerzeichen fur einen Tabulator erzeugt
            werden sollen. Voreingestellt sind 4 Leerzeichen.
            FÅr n gilt: 0 < n <= 9.
V           Diese Option fÅhrt zur Ausgabe von Meldungen zum 
            jeweiligen Stand der öbersetzung.
W           Dieser Schalter veranlaût den Help-Compiler die 
            öbersetzung beim Auftreten von Warnungen
            abzubrechen.
--------------------------------------------------------------

Danach folgt der Name der zu erzeugenden Help-Datei. Schlieûlich
werden die Namen der Quelltextdateien aufgefÅhrt. Auch diese
Angaben mÅssen in separaten Zeilen stehen. Kommantare in 
Befehlsdateien werden durch ein Semikolon (;) eingeleitet und
hîren am Zeilenende auf. Eine mîgliche Befehlsdatei fÅr ein
benutzerdefiniertes Help kînnte wie folgt aussehen:

; -----------------------------------------
; Beispiel fur benutzerdefiniertes Help
; -----------------------------------------

-LT=8V          ; Log-File anlegen
                ; Ablauf kommentieren
                ; Tabs werden durch 8 statt 4 Blanks ersetzt

USR.HLP         ; Name der Help-Datei

USR1.TXT        ; Liste der Quelltexte
USR2.TXT

; usw.

Hinweis: Der Name der benutzerdefinierten Help-Datei muû USR.HLP
         lauten und im selben Verzeichnis abgelegt werden, wie
         die anderen Help-Dateien, die im Pure-C-Paket enthalten
         sind.Aufbau eines Help-Quelltextes
----------------------------------------------------------------------

Ein Help-Quelltext besteht aus einer Folge von Help-Screen-
Beschreibungen. Ein Help-Screen ist ein mit einem oder mehreren
Namen versehenes StÅck Text, das im Help-Fenster nach Anfordern
einer Hilfestellung ausgegeben wird.

Help-Screens
Eine Help-Screen-Beschreibung beginnt mit dem reservierten Wort
screen und endet mit dem reservierten Wort end. Um end von der
Silbe "end" zu unterscheiden, muû allen reservierten Worten, die
innerhalb einer Screen-Beschreibung vorkommen, ein Backslash (\)
vorangestellt werden. Um im Åbersetzten Help-Screen einen Backslash
darzustellen, mÅssen in der Quelle zwei unmittelbar aufeinander-
folgende Backslashes geschrieben werden:

screen( "name1", "name2" )
Damit auch nach tausend Screens nicht Schluû ist,
sondern erst nach \\end!\end

Wie Sie dem Beispiel entnehmen kînnen, folgt auf screen eine
in Klammern eingeschlossene und durch Kommata getrennte Liste
von Screennamen. Ein Screenname wird durch doppelte AnfÅhrungs-
zeichen begrenzt. Ein Screen muû mindestens einen Namen haben,
beispielsweise screen( "Single name" ). 
Alle Namen eines Screens werden in den automatisch generierten
Index der Help-Datei aufgenommen. Der Inhalt des Screens beginnt
in der auf die schlieûende Klammer folgenden Zeile.

Damit ein Screen kontextsensitiv, das heiût durch Textselektion
und anschlieûendem DrÅcken der Help-Taste erreichbar wird, muû
der entsprechende Screenname mit einem Attribut versehen werden.
Falls gewÅnscht, kann zwischen Groû- und Kleinschreibung unter-
schieden werden. Anhand des folgenden Beispiels soll der Gebrauch
der Attribute erklÑrt werden:

screen(    "Normaler Name",
            sensitive( "Gro?/Klein ist egal" ),
            capsensitive( "GROSS" ),
            capsensitive( "Gross" ))
...
\end

Das Attribut sensitive besagt, daû der Screen Åber den durch
das Attribut festgelegten Namen kontextsensitiv abrufbar ist,
dabei aber nicht zwischen Groû- und Kleinschreibung unterschieden
wird. Diese Unterscheidung findet statt, wenn der Name mit
capsensitive vereinbart wurde. Beachten Sie, daû die Attribute
keine Namenslisten zulassen, sondern fÅr jeden Namen einzeln
gesetzt werden mÅssen. Wird kein Attribut angegeben, ist der
Screen nur Åber Querverweise anderer Screens zu erreichen.

Querverweise zwischen Help-Screens
Es gibt zwei verschiedene Arten von Querverweisen zwischen Help-
Screens. Bei der ersten Form stimmt eine Textstelle mit dem
referenzierten Screennamen Åberein. HÑufig jedoch gibt es
Unterschiede zwischen der Textstellen und dem Screennamen,
beispielsweise weil im Text eine Beugung des Screennamens
verwendet wird.
Eine normale Referenz (d.h. die Textstelle stimmt mit dem
Screennamen Åberein) wird erzeugt, indem die Textstelle mit
\# eingeschlossen wird. ZeilenumbrÅche innerhalb von Querver-
weisen sind nicht gestattet:

screen( "Querverweis" )
...\end

screen( "NoName" )
So sieht ein \#Querverweis\# aus,
der Sie zum Screen "Querverweis" fÅhrt!\end

Die andere Form von Querverweisen gestattet die VerknÅpfung
eines beliebigen StÅck Textes mit einem Screen:

screen( "Querverweis" )
...\end

screen( "NoName" )
\link( "Querverweis" )Alle Wege\# fÅhren zum Screen 
"Querverweis"!\end

Hier ist eine Referenz fÅr den Text "Alle Wege" auf den Screen
"Querverweis" hergestellt worden. Ein solcher Querverweis wird
durch das reservierte Wort \link eingeleitet, das als Argument
den Namen des referenzierten Screens erhÑlt. Direkt nach der
schlieûenden Klammer des Arguments steht der Text, der den 
Querverweis reprÑsentiert. Dieser wird durch \# beendet.
Querverweise mit link auf Screens aus anderen Help-Dateien sind
nicht mîglich.Fehlermeldungen und Warnungen des Help Compilers
----------------------------------------------------------------------

Die Fehler sind gemÑû ihrer Wichtigkeit in Kategorien geordnet
und innerhalb dieser alphabetisch sortiert.

Warnungen
Warnungen weisen auf mîgliche Fehler innerhalb von Quelltexten
hin. Eine Help-Datei wird trotzdem erzeugt und diese wird in
aller Regel auch durchaus benutzbar sein.

Reference to unknown screen
Sie erhalten diese Warnung, falls ein Querverweis auf einen nicht
existierenden Help-Screen erzeugt werden sollte. Wenn ein kon-
textsensitiver Screen in einer anderen Help-Datei vorhanden ist,
kînnen Sie diese Warnung ignorieren. link-Querverweise auf Screens
anderer Help-Dateien sind nicht mîglich!

Missing parameter
Missing parameter list
In einem screen-Befehl wurde am Ende einer Liste von Screennamen
ein einzelnes Komma gefunden, nach dem kein Parameter mehr folgte.


Fehler
Fehler kînnen in der Befehlsdatei oder in Quelltexten auftreten.
Bei Fehlern in der Befehlsdatei wird die öbersetzung erst gar nicht
gestartet. Handelt es sich um Fehler in einem Quelltext, wird mit
der öbersetzung fortgefahren, jedoch keine Help-Datei erzeugt.

'=' expected in option
Nach der Option wird ein Gleichheitszeichen erwartet.

Can't break keyword
Pending keyword delimiter
Querverweise durfen ZeilenumbrÅche nicht Åberschreiten. Schreiben
Sie den gesamten Querverweis in eine Zeile.

Doubly defined screen name
Ein Screen mit demselben Namen existiert bereits. Benennen Sie
einen der beiden Screens um.

Illegal option character
Die angegebene EOptionF existiert nicht.

Missing end of screen
Fur einen Screen wurde kein \end gefunden. Dieser Fehler wird erst
am Ende eines Quelltextes erkannt.

Pending end of string
Strings, also beispielsweise Screennamen, mÅssen in einer Zeile
stehen und kînnen nicht umgebrochen werden. Es kînnte auch sein,
daû Sie die doppelten AnfÅhrungszeichen zur Markierung des
Stringendes vergessen haben.

Screen too long
Screen-Inhalte dÅrfen nicht langer als 32 KByte sein. Teilen Sie
den Inhalt des Screens auf mehrere Screens auf. Dieser Fehler kann
auch auftreten, wenn Sie am Ende eines Screens \end vergessen haben.

Too many parameters
Der link-Befehl darf nur auf einen Screen verweisen.

Too many source files in command file
Die maximale Anzahl an Quelltexten ist auf 64 Dateien beschrÑnkt.

Unknown statement
Der gelesene Befehl existiert nicht. Innerhalb einer Screen-
Beschreibung kann dieser Fehler auftreten, wenn Sie eine Backslash
schreiben wollten. Dieser leitet jedoch Befehle ein. Schreiben Sie
stattdessen zwei Backslashes.

Use of illegal character
Der ASCII-Character 29 darf in Quelltexten nicht benutzt werden.

Wrong parameter type
Der angegebene Parameter muû ein String sein.

Wrong scope for statement
Der angegebene Befehl darf an dieser Stelle nicht benÅtzt werden.
Kommentare und screen dÅrfen ausschlieûlich auûerhalb von Screen-
Beschreibungen verwendet werden, \link, \# und \end innerhalb.


Fatale Fehler
Tritt ein Fehler aus dieser Kategorie auf, wird die öbersetzung
sofort abgebrochen.

Out of memory
Sie haben zu wenig Arbeitsspeicher frei. Entfernen Sie alle
residenten Programme und Accessories. Starten Sie den Help-
Compiler dann vom Desktop und unternehmen einen neuen Versuch.

Read error
Aus der angegebenen Datei konnte nicht gelesen werden. Mîglicher-
weise ist sie defekt.

Too many screens
Ihre Quelltexte enthalten zu viele Screen-Beschreibungen. In
einer Help-Datei sind maximal 4096 Help-Screens erlaubt.

Unable to open output file
Die Ziel-Datei kann nicht angelegt werden. Entweder ist auf dem
Ziellaufwerk nicht genÅgend Platz vorhanden oder es ist schreib-
geschÅtzt bzw. eine gleichnamige schreibgeschÅtzte Datei
existiert bereits.

Unable to open command file
Der Help-Compiler kann die Befehlsdatei nicht finden. Entweder
ist Ihnen ein Schreibfehler unterlaufen oder der Pfadname
stimmt nicht.

Unable to open source file
Der Help-Compiler kann die angegebene Quelltextdatei nicht
finden. Entweder ist Ihnen ein Schreibfehler unterlaufen oder
der Pfadname stimmt nicht.

Write error
In die Zieldatei konnte nicht geschrieben werden. Mîglicherweise
ist auf dem Ziellaufwerk kein Platz mehr vorhanden.