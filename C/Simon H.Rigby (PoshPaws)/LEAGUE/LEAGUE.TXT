            A Solution to the League Problem set by Martyn Armitage
                                 by Simon Rigby

     LEAGUE PROBLEM
     ==============
     The following is an outline of how I got from the league problem given
     in last month's issue to a solution  and outline program. I will start
     by reprinting the problem as given.  This  is the specification of the
     problem and should  include  as  much  detail  as  possible  about the
     problem and any other relevant information.

     SPECIFICATION
     =============
     I'm wanting to write a program to produce fixtures for a league.
     The problem:
       The number of teams is  variable   between  4  and 24, but always an
     even number as one  of  the teams  can  be  'No Game'. Each team has a
     fixture every week, even if  they   are  playing 'No game'.  Each team
     plays every other team   twice,  once  at  home  and  once away. There
     should be the maximum amount of time  between reverse fixtures (A vs B
     and B vs A);
     the second half of  the season  can be a complete reverse of the first
     half ( 1st game of 1st  half  =  1st  game  of  2nd half etc). No team
     plays  more  than  two  consecutive   games   at  home  or  away,  and
     consideration needs  to  be  given  to   teams   that  share  the same
     ground/pitch (they both can't  play  at  home  at the same time).  The
     number  of  divisions  is  variable   between   1   and  4  but  again
     consideration needs to be given to  teams in  different divisions that
     share the same pitch/ground.

     The  teams are to be referenced  by  number  rather than name in order
     to comply with the League Update program that I have written.

     ANALYSE
     =======
     We now need  to  sort  out  all  of  the  above statements, discarding
     obviously irrelevant information and expanding anything that needs it.
     You will start to find that some  questions will appear at this stage.
     You will need to answer these now; either make an assumption AND STATE
     THE ASSUMPTION (as it  will  form  a  restriction  on  the  use of the
     program) or go back to the  person  who  posed the problem and resolve
     all outstanding questions.

     1] There is obviously an object called a Team.
     We will need to fill in the Properties of this object as we go through
     the problem. We can add now the  property  that  it will have - a team
     number.
     TEAM: TEAM_NUM

     2] Limits: Team_Min = 4 & Team_Max=24
     It is always good to have limits in mind, if we don't need limits then
     we are laughing. If we need a limit and don't have one, then we have a
     problem. I would tend to  set  a  limit  of  2  as that is the minimum
     number required to play a game!
     TEAM_MAX=24

     *] Always an even number of teams as 'No Game' is a team.
     This should not  be  in  the  specification  as  it  is  an artificial
     condition created to  solve  a  programming  problem.  It  will create
     problems later to think of  'No  Game'  as  having the properties of a
     Team!
     (e.g. A 'No Game' must only play two matches with each team, etc).

     3] Games are played once a week.
     This raises two points to note: There  is an object called Game and it
     has a property, which is the week it is played in.
     i.e. GAME: WEEK_NUM
     (we shall not actually use this but it's here to remind us)

     4] Each team plays every other team twice, once at home and once away.
     This can be made much clearer if it is rewritten as:
     EACH HOME TEAM PLAYS EVERY OTHER TEAM ONCE.
     THE OTHER TEAM IS CLASSED AS AN AWAY TEAM.
     This now makes it easier to notice that we have two new objects:
     Home_Team & Away_Team, both of which are Teams with other properties.
     i.e. HOME_TEAM: {TEAM}
          AWAY_TEAM: {TEAM}
     This line from the original spec should strike you as an obvious loop.

     FOR HOME_TEAM = 1 TO TOP_TEAM
             FOR AWAY_TEAM = 1 TO TOP_TEAM
                     IF HOME_TEAM <> AWAY_TEAM
                     THEN .....
             NEXT AWAY_TEAM
     NEXT HOME_TEAM

     A good start I think!

     5] There should be the maximum amount of time between reverse fixtures
     (A vs B and B vs A); the second half of  the season  can be a complete
     reverse of the first half ( 1st  game  of  1st  half = 1st game of 2nd
     half etc).

     Be wary of the word  CAN,  as  in  MAY:  it  is suggesting a potential
     solution to part of the problem,  which  is  not  the job of the spec.
     This line is a hard one to code because we want the maximum difference
     between two week numbers with (as we shall see later) no limit on what
     the top limit on week numbers is.
     Since we know that each home_team  plays  one less game than there are
     teams, then the away match must be at least TOP_TEAM-1 weeks away from
     the home match.
     This means we need a function that  returns the week the match between
     home_team and away_team was played.
     i.e. WEEK=WEEK_OF(home_team,away_team) or zero if not allocated

     IF ABS(WEEK_OF(HOME_TEAM,AWAY_TEAM)-WEEK_OF(AWAY_TEAM,HOME_TEAM))
          < (TOP_TEAM-1) THEN reallocate match to later week number

     6] No team plays more than two consecutive games at home or away.
     This requires a function that is  given  a  team and a week number and
     returns the status of the match HOME  or AWAY. We will now define home
     as 1, away as 2 and none as 0. i.e.
     DEFINE NONE=0
     DEFINE HOME=1
     DEFINE AWAY=2

     STATUS=PLAY_STATUS(TEAM,WEEK) where status is HOME,AWAY or NONE

     IF (PLAY_STATUS(HOME_TEAM,current_week-1)=HOME) AND
        (PLAY_STATUS(HOME_TEAM,current_week-2)=HOME)
     THEN reallocate match to later week number
     IF (PLAY_STATUS(AWAY_TEAM,current_week-1)=AWAY) AND
        (PLAY_STATUS(AWAY_TEAM,current_week-2)=AWAY)
     THEN reallocate match to later week number

     7] Consideration needs to be given to  teams that share the same pitch
     (they both can't  play at home at the same time).
     This means that we need to  book  each  pitch  for the week a match is
     being played on it. This gives us  an  object called PITCH which has a
     property called BOOKED for each week in  which we might play. There is
     at most one pitch per team, but may  be less if teams share one pitch.

     This means that each team  must  have  the  property of which pitch it
     plays on.
     It does not  state  how  many  teams  may  share  one  pitch, but this
     question is avoided by booking the pitch out.
     PITCH[1-TOP_TEAM]: BOOKED[1-MAX_WEEKS]
     TEAM[1-TOP_TEAM]: TEAM_NUM PITCH_NUM

     8] The number of divisions is variable between 1 and 4.
     This is a bit nasty to drop in at the end; each team has a property of
     a division number in which it  plays.  We  ASSUME that this means that
     each team only plays teams in the same division.
     TEAM[1-TOP_TEAM]: TEAM_NUM  PITCH_NUM    DIV_NUM
                                [1-TOP_TEAM] [1-TOP_DIV]

     FOR HOME_TEAM = 1 TO TOP_TEAM
             FOR AWAY_TEAM = 1 TO TOP_TEAM
                     IF (HOME_TEAM <> AWAY_TEAM)
                     AND HOME_TEAM.DIVISION == AWAY_TEAM.DIVISION
                     THEN .....
             NEXT AWAY_TEAM
     NEXT HOME_TEAM

     9] The teams are to be referenced  by number rather than name in order
     to comply with the League Update program that I have written.
     Note that there is no mention  of  whether team numbers are sequential
     or not. We will have to have the team number as a property of the team
     and search for the team number as a result of this.

     *] We  have  now  gleaned  all  the  information  we  can  out  of the
     specification and should now collate it into something like a program.
     I will choose to go into something like C, due to its ease of use with
     structures.  SEE LEAGUE.C

