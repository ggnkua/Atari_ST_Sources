#include <portab.h>
#include <aes.h>
#include <vdi.h>
#include <stdio.h>
#include "windows.h"

extern	TEDINFO rs_tedinfo[];
extern	OBJECT rs_object[];
extern	OBJECT *rs_trindex[];

extern	struct	WIN_TAB
		{
			int		handle;
			OBJECT	*form;
			int		xcoord;
			int		ycoord;
			int		width;
			int		height;
			int		startob;
		}	wind_tab[255];


/*
****************************************************************************
** Kill window passed in handle
****************************************************************************
*/
void	kill_window (int handle)
{
	mouse_off();
	wind_close(handle);
	wind_delete(handle);
	wind_tab[handle].handle=0;
	mouse_on();
}
/*
****************************************************************************
** Redraw a window
****************************************************************************
*/
void redraw_window( int handle , int object)
{
	GRECT     box,work;
	if( handle <= 0 )
		return;  
      
	mouse_off( );

	wind_get( handle, WF_WORKXYWH, &work.g_x, &work.g_y, &work.g_w, &work.g_h );
	wind_get( handle, WF_FIRSTXYWH, &box.g_x, &box.g_y, &box.g_w, &box.g_h );
/*
** Calculate width if off the edge of the screen
*/
	work.g_w = minimum( work.g_w, max_x - work.g_x + 1 );
	work.g_h = minimum( work.g_h, max_y - work.g_y + 1 );
/*
** Until no more rectangles
*/
	while ( box.g_w > 0 && box.g_h > 0 )
	{
		if( rc_intersect( &work, &box ) )
				objc_draw(wind_tab[handle].form,object,MAX_DEPTH,box.g_x,box.g_y,box.g_w,box.g_h);
		wind_get(handle, WF_NEXTXYWH, &box.g_x, &box.g_y, &box.g_w, &box.g_h );
	}
	mouse_on( );
}
/*
****************************************************************************
** Calculate clipping 
****************************************************************************
*/
int rc_intersect( GRECT *r1, GRECT *r2 )
{
   register int x, y, w, h;

   x = maximum( r2->g_x, r1->g_x );
   y = maximum( r2->g_y, r1->g_y );
   w = minimum( r2->g_x + r2->g_w, r1->g_x + r1->g_w );
   h = minimum( r2->g_y + r2->g_h, r1->g_y + r1->g_h );

   r2->g_x = x;
   r2->g_y = y;
   r2->g_w = w - x;
   r2->g_h = h - y;

   return ( ((w > x) && (h > y) ) );
}
/*
****************************************************************************
** Open the window
****************************************************************************
*/
int open_window(OBJECT *tree)
{
	int	x,y,w,h,hand;

	GRECT	desk;

	wind_get(0, WF_WORKXYWH, &desk.g_x, &desk.g_y, &desk.g_w, &desk.g_h);
	hand = wind_create(NAME|CLOSER|MOVER,desk.g_x,desk.g_y,desk.g_w,desk.g_h);

	if ( hand <= 0 )
		return(0);

	wind_set( hand, WF_NAME, title );

	form_center(tree, &x, &y, &w, &h);
	wind_tab[hand].handle=hand;
	wind_tab[hand].form=tree;
	wind_tab[hand].xcoord=x;
	wind_tab[hand].ycoord=y;
	wind_tab[hand].width=w;
	wind_tab[hand].height=h;
	wind_calc(0,NAME|CLOSER|MOVER,x,y,w,h,&x,&y,&w,&h);
	wind_calc(1,NAME|CLOSER|MOVER,x,y,w,h,&x,&y,&w,&h);
	wind_calc(0,NAME|CLOSER|MOVER,x,y,w,h,&x,&y,&w,&h);
	wind_calc(1,NAME|CLOSER|MOVER,x,y,w,h,&x,&y,&w,&h);
	wind_calc(0,NAME|CLOSER|MOVER,x,y,w,h,&x,&y,&w,&h);
	wind_open(hand, x, y, w, h);
	return	(hand);
}
void mouse_on( void )

{
   graf_mouse( M_ON, (void *)0 );
}

void mouse_off( void )
{
   graf_mouse( M_OFF, (void *)0 );
}

