Es folg eine Beschreibung der neuen Technik fÅr die Nutzung der 
Programmschnittstelle von MIDI_COM.

Fuer PURE-C und HM2 finden Sie auf der beileigenden Diskette bereits 
vorgefertigete Bibliotheken. FÅr andere Programmiersprachen mÅssen 
Sie sich die passenden Aufrufe noch selbst erstellen. Ausser unter 
MTOS ist die Zentrale Funktion GEMDOS 111.

Im folgenden finden Sie eine beschreibung der Funktionen und die 
benîtigten Parameter. Falls Sie bereits fÅr frÅhere MIDI_COM- 
Versionen Programme geschrieben haben, finden Sie ausserdem ein 
Vergleich der Funktionen und Parameter, die MIDI_COM bis zur Version 
3.9 verwendete.

WICHTIG:
      Zeichenketten (z.B.: "name") sind definiert als C-Strings. Sie beginnen 
      direkt beim ersten Byte und enden mit einem 0-Byte
      eine leere Zeichenkette enthÑlt an erster Stelle ein 0-Byte

      Die Kontrollbits haben kaum noch Bedeutung. Insbesondere die TOKEN-Bits 
      sind praktisch nicht mehr existent, da MIDI_COM nun keine Kontrolle mehr 
      Åber den TOKEN ausÅbt. Diese Kontrolle wurde in den Treiber ausgelagert. 
      SpÑtere Versionen werden eventuell ganz auf den Token verzichten.

      Statt APP_FIND/APP_WRITE nun nur noch TRAP111. Damit wird die GEMDOS-
      Funktion 111 angesprungen. Ist MIDI_COM nicht installiert, liefert diese 
      einen negativen Fehlerwert, da diese im GEMDOS nicht existiert.

      öbergeben wird die Anfangsadresse des MSG-Puffers (frÅher der ganze 
      Puffer). Dieser hat sich NICHT geÑndert, wohl aber etwas die Verwendung 
      der Parameter.

Auûerdem sollte im letzten Eintrag (msg.fill) nun immer die durch ANMELDUNG 
zurÅckgelieferte ID eingetragen werden. FrÅher war dieser Eintrag unbenutzt.

Die Adressierungen haben sich ebenfalls etwas geÑndert (s.u.)
FrÅher: Name gesetzt, dann wurde an alle mit dem gleichen Namen verschickt
jetzt : msg.an=-1, Name gesetzt

FrÅher: Name NICHT gesetzt, msg.an wird ausgewÑhlt
Jetzt : msg.an und Name werden benîtigt

ZusÑtzlich sind noch andere Adressierungsoptionen hinzugekommen die weiter 
unten beschrieben sind.


trap 111
========

öbergabe:
=========
Zeiger auf
^^^^^^

typedef struct 
{ 
    int   what;         /*    2 Byte      */
    int   size;         /*    2 Byte      */
    char  *ptr;         /*    4 Byte => Adresse des ersten Zeichens */
    char  *name;        /*      "           "   "      "      "     */
    int   an;           /*    2 Byte      */
    int   fill;         /*    2 Byte      */
} msg_typ;


FÅr "what" ist definiert:
-------------------------
#define _ASSIGN       6000  /* Appl meldet sich an   */

  mc_msg.what     = _ASSIGN;
  mc_msg.size     =     0;
  mc_msg.ptr      =     io_ptr; /* adresse der io-Struktur */
  mc_msg.name     =     name;   /* zeiger auf Appl-Namen   */
  mc_msg.an       =     0;
  mc_msg.fill     =     0;

RETURN (Register D0)
 eindeutige ID der Applikation
 (kann von anderen Applikationen zur Adressierung verwendet
  werden)

 Oder eine Zahl <=0 wenn Anmeldung nicht mîglich.

#define _GOOD_BYE     6001  /* Appl meldet sich ab   */

  mc_msg.what     = _GOOD_BYE;
  mc_msg.size     =     0;
  mc_msg.ptr      =     NULL;
  mc_msg.name     =     NULL;
  mc_msg.an       =     0;
  mc_msg.fill     =     apl_num;    /* Welche Appl wird abgemeldet */


#define _SEND_DATA    6002  /* Nutznachricht senden  */

  mc_msg.what     =     _SEND_DATA;
  mc_msg.size     =     size;       /* LÑngeder daten (2..4000 Bytes) */
  mc_msg.ptr      =     daten;      /* Zeiger auf Daten  */
  mc_msg.name     =     name;       /* Zeiger auf einen Appl-Namen   */
  mc_msg.an       =     Adresse;
  mc_msg.fill     =     apl_num;    /* Absender       */

RETURN (Register D0)
 1 <=> öbertragung erfolgt
-1 <=> öbertragung TIME-OUT

Adressierung:
-------------
1.    an = apl_num einer anderen Applikation (Adressierung Åber ID)

2a.   an          =     Rechnernummer (wie bisher 0 < an < 7 )
      name        =     '' (Leerstring) 1. Byte ist eine 0
            
            => Sendung geht an alle Applikationen auf dem adressierten 
               Rechner 

2b.   an          =     Rechnernummer (wie bisher 0 < an < 7 )
            name  =     'xxxxx' 
            
            => Sendung geht an alle Applikationen auf dem adressierten 
               Rechner angemeldet mit dem Namen 'xxxxx'

3a.   an          =     -1
            name  =     '' (Leerstring) 1. Byte ist eine 0

            => Sendung geht an alle Applikationen auf allen Rechnern

3b.   an          =     -1
            name  =     'xxxxx' 
            
            => Sendung geht an alle Applikationen im Netz die
               angemeldet sind mit dem Namen 'xxxxx'

#define _GET_VERW     6009  /* Ring-Karte */

typedef struct
{
  char      my_name[6][10];   /* 6 Appl. Namen (a 10 Byte)  */
  char      r_name[10];             /* Rechnername im Direktorie  */
  bit_test  status;                       /* integer; { Status-Bits }   */
  int       disk_st;                      /* integer;                                     */
} verwaltung;

liefert wie bisher die Verwaltungsstruktur: (74 Bytes) 
-------------------------------------------
Der erste Eintrag ist der eigene Rechner, 
der zweite Eintrag die realtive Adresse 1
...


STATUS-BITS:
============
Wie bisher, allerdings ist keine TOKEN-Kontrolle mehr mîglich. 
Dies zielt insbesondere auf neue Treiberkonzepte (CCN-Light/LAN/ETHERNET/ ...)
fÅr MIDI-COM die vorraussichtlich keine Token mehr verwenden
werden.



Der EMPFANGSPUFFER
==================
typedef struct
{
  char  *ibuf;  /* Zeiger auf den buffer */
  int   size;    /* groesse des Buffers   */
  int   nw;    /* naechste Leseposition    */
  int   nl;    /* naechste Schreibposition */
  int   blow;    /* untere Wassermarke       */
  int   bhig;    /* obere Wassermarke        */
} io_rec;

Eine Applikation legt die obige Struktur an und muû diese auch 
initialisieren.

Bei der Anmeldung wird die Adresse der Struktur an MIDI_COM Åbergeben.

Alle ankommenden Nachrichten werden von MIDI_COM in dieser Struktur abgelegt.


Auslesen von Nachrichten:
=========================

Bemerkung zur Schreibweise:

Der Befehl
 help.aschar[0]=io_ptr.ibuf[io_ptr.nl++];

ist identisch mit
 help.aschar[0]=io_ptr.ibuf[io_ptr.nl];
 io_ptr.nl=io_ptr.nl+1;


typedef     union
{
      int asint;
      char  aschar[2];
}konv1;
Zugriff auf zwei Bytes entweder als zwei Zeichen oder als eine Integer-Zahl

--------------------------------------------------------------------
int lese(char *bufa1,int *esc,int *len)
{
 int i;
 konv1      help;
 
 *esc=0;

/* Die ersten zwei Bytes sind entweder die LÑnge der Nachricht oder eine
  ESC-Kennung. Zur Zeit gibt es davon nur eine einzige: _GET_VERW  */

/* Lese-Index = Schreibindex => Puffer LEER */
 if (io_ptr.nl==io_ptr.nw) return(FALSE); /* Fertig */

/* kopiere 1. Byte */
 help.aschar[0]=io_ptr.ibuf[io_ptr.nl++]; 

/* Ist das Puffer-Ende erreicht, geht's wieder bei 0 weiter */
 if (io_ptr.nl==io_ptr.size) io_ptr.nl=0;

/* kopiere 2. Byte */
 help.aschar[1]=io_ptr.ibuf[io_ptr.nl++];

/* Ist das Puffer-Ende erreicht, geht's wieder bei 0 weiter */
 if (io_ptr.nl==io_ptr.size) io_ptr.nl=0;


 if (help.asint>4000)
 { /* Falls ESC-Kennung, dann kommt jetzt erst die LÑnge der Nachricht */
      *esc=help.asint;

      help.aschar[0]=io_ptr.ibuf[io_ptr.nl++];
      if (io_ptr.nl==io_ptr.size) io_ptr.nl=0;
      help.aschar[1]=io_ptr.ibuf[io_ptr.nl++];
      if (io_ptr.nl==io_ptr.size) io_ptr.nl=0;
      *len=help.asint-2;
 }


/* Nun den eigentlichen Inhalt der Nachricht kopieren */
/* Die LÑnge enthÑlt auch die beiden Bytes fÅr die LÑngenangabe 
   daher (-2) */
 for (i=0;i<help.asint-2;i++)
 {
      bufa1[i]=io_ptr.ibuf[io_ptr.nl++];
      if (io_ptr.nl==io_ptr.size) io_ptr.nl=0;
 }
 return(TRUE);
}
