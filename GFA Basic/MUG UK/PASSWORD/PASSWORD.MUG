
Protecting Your Hard Drives From Prying Eyes - The Easy Way !!
--------------------------------------------------------------

Article by: MUG U.K¿
--------------------

Welcome to a short article showing you how, with the help of GFA BASIC,
you can protect your hard-drive from prying eyes if you take it along to
your local club or even a coding conference - which I originally wrote this
program for (I went to the Ripped Off Conference held in Bradford, England).

Anyway, I propose to show you a quickly written Password Protector program
that you shove into your AUTO folder on your hard-drive.  I suggest that
it is made the first program in the loading sequence of your hard-drive so
that no possible access can be made by all but the most determined nosey
gits !!

I have done two listings, which the GFA BASIC source code is on this
disk.  The first listing stores the password in the program whilst the
second opens a file which contains the password.

Neither of the passwords are encrypted because that is up to you.  The two
listings are pure examples of a quick and easy method to make up a password
program without any frills included.

On with the first listing:-

'
' Hard-Drive Password Program by MUG U.K¿ for DBA Magazine #6
'
INLINE h_reset%,68
'
SPOKE &H484,BCLR(PEEK(&H484),0)                 ! Key Click Off
CLS
PRINT "MUG U.K¿ Password Entry Prog"            ! Print Entry Text
PRINT "----------------------------"
PRINT
PRINT "Password:- ";

This is the standard set-up procedure I use.  I hate the keyboard click so
I always turn it off !!  I also love to see my moniker on the screen (OK, so
I'm an ego-tistical sod !!), so this is displayed along with the prompt for
the user to enter the password.

FOR f|=1 TO 8                                   ! Get 8 Characters
redo:
  KEYTEST key|
  IF key|=0
    GOTO redo
  ELSE
    pass$=pass$+CHR$(key|)
    PRINT AT(10+f|,4);"*"
  ENDIF
NEXT f|

The above bit repeats a simple loop testing the keyboard 8 times and
converting the key pressed into a string.  You can input a password containing
the ASCII characters as well as TAB and ENTER (if you want to be a real
sadist !!).  Although you can alter the number of characters to enter for
the password, I find that 8 characters is enough to put off most people !!
The PRINT line is printing a '*' every time the user presses a key so that
it acknowledges the key-press.  I could of used INPUT or LINE-INPUT but then
someone who watched you enter your password would know what to enter as well !!

IF pass$<>"LETMEIN!"                    ! Password length is 8 characters
  PRINT "INVALID PASSWORD!!"            ! Nosey Git trying to gain access
  DELAY 2                               ! Wait 2 seconds
  CALL h_reset%                         ! Force a Hard Reset !!
ELSE
  PRINT "PASSWORD OK !!"                ! Correct user gained access
ENDIF
SPOKE &H484,BSET(PEEK(&H484),0)         ! Restore key-click
EDIT                                    ! Quit to rest of AUTO folder/Desktop

This is where we check the password that has been typed in against the
one stored in the program.  If the wrong password was entered then the
person trying to gain access to your hard-drive is told that they got it
wrong and then they have got 2 seconds to find a way to stop a hardware
reset that cancels all reset-proof programs and also clears the hard-drive
vectors thus erasing the hard-drive software in memory !!

If you got the password correct then the key-click status is restored and
the program quits so that the rest of the AUTO folder contents can be
accessed and also the desktop.

This program could quite easily be converted to any other language but
you won't be able to get it any smaller unless you used 68000 or C (which
I haven't got a clue how to program !!).  I don't think any of the other
interpreted languages could compile a similar program as small as GFA BASIC
but I don't wish to start a war of BASIC languages and their owners so I
will stop now.

The second listing is exactly the same as the first except a file is
searched for which contains the password.  There are no error checks if the
file is missing so there is something that you can add to my program along
with some form of encryption.

To create a file containing your password, run this from GFA BASIC:

OPEN "O",#1,"PASSWORD.DAT"
WRITE #1,"LETMEIN!"
CLOSE #1

With the second listing it does not matter what length the password is except
that you have to remember it exactly otherwise you'll have to use your hard
drive software on floppy disk to gain access to your hard-drive !!


On a totally different note I am publishing my home address for anyone in
the world to write to me because due to the recession going on in this
country (and also the rest of the world!) my mates computer shop has had to
close down.  Therefore I do not have a postal address where I can check
the incoming mail and ignore the letters from total arseholes or people I
don't want to continually write to me/ring me up !!

So for the first time, here is my home address:-

"Anncott"
Hylas Lane
Rhuddlan
Clwyd
LL18 5AG
Wales
United Kingdom

As usual with the old Broadsword Computers address - if any arseholes
write to me asking for pirated software or contacts to swap pirated software
I will forward their letter onto FAST as quick as I can.

My interests are GFA programming (mainly utilities), learning 68000 and
writing routines in 68000 for GFA, swapping the latest demos and other Public
Domain stuff.  I am a member of The Source Demo CD group, so if you have any
demos you want us to pack or release on a menu then please send them in files
to the above address as well.

I think that is all for now.  See you all - until the next naff GFA article
I write !!


MUG U.K¿ - 16/9/1992

