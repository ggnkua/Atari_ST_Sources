
         ***      *** **** ****  ******      **** ****   ***  ***  TM
          ***    ***   **   **  **    **      **   **     ** ***
          ****  ****   **   **  **            **   **     ****
          ** **** **   **   **  ***  ***      **   **     ** ***
         **** ** ****   *****    ******        *****  *  ***  ***


                                 Presents .....


                              GFA Link-Filer v2.2


                          Release Date:  24/02/1995


                      Released into the Public Domain as

                         'Computer Car Boot Sale'-Ware



Introduction
------------

This is a program aimed solely at GFA BASIC coders.  It allows authors
of programs (especially games and demos) to incorporate all their
external data files in 1 large file.

This large file ('linkfile' here on) can be accessed using very simple
procedures, included with this program as example listings, which replace
your original loading routines for your external files.


Advantages/Disadvantages
------------------------

The advantages to using this routine are:

- All files are kept together - no clusters wasted by having files littered
  about your hard drive or floppy disk.

- The data files may be packed before linking, unpacking source can be
  provided if requested upon small donation being sent to the author.  For
  types of donation (anything except MONEY!) see end of document !

- If the end user has enough RAM available, the ENTIRE linkfile can be
  loaded into RAM and the files can be accessed immediately (give or take
  a few clock-cycles!).

- Easy to incorporate routines, possibly install routines alongside normal
  loading routines and before you release your product, bring my routines
  into line and away you go.

- Helpful person to write to with your problems, or, if requested, install
  link-file into your own programs should you come across any problems.
  Again, this facility is only open to those who include a donation with
  their letter/disk !!


Some disadvantages ....

- Some knowledge of packers may be required as well as memory management
  in GFA BASIC (mainly using MALLOC - stop using DIM arrays !!)

- Impossible to write to link file.  Ie. High Score tables etc.

- Binary files only - no string/numeric arrays etc.


File List
---------

FILE_ID.DIZ     -  BBS / Internet brief description file

GFA_LINK.PRG    -  GFA Link File Generator program
GFA_LINK.DOC    -  You are reading it now !

EXAMPLE1.GFA    -  Example #1, reading files from disk
EXAMPLE2.GFA    -  Example #2, reading files direct from RAM
EXAMPLE3.GFA    -  Example #3, reading from disk/RAM depending on free RAM

EXAMPLE1.LST    -  Example #1, reading files from disk (ASCII)
EXAMPLE2.LST    -  Example #2, reading files direct from RAM (ASCII)
EXAMPLE3.LST    -  Example #3, reading from disk/RAM depending on RAM (ASCII)


Getting started
---------------

This brief document is to allow you to get GFA Linkfiler working for you
as quickly and painlessly as is possible.  As I mentioned before, this has
been beta-tested only by myself and is based on similar 68000 code used
by many of the Atari hackers and crackers of yester-year !  Except this
version is pure GFA BASIC - except for the depacking routines !


Order of play
-------------

a) Develop your demo/game as per normal

b) Before you release it, as in the very last stage before you finally
   compile (and pack?) the code, run my GFA_LINK.PRG !

c) Once running, select the option required for my program to locate all
   your data files.  If they are spread out all over the place, in seperate
   folders, then select the 'Single' option.  If the files are all kept
   in a single directory (usually for demos) then click on 'Whole'.

   NB:  Be warned that 'Whole' option will do EVERYTHING - including your
   original source files, DESKTOP.INF and anything else it finds in the
   same directory.  Ensure your source directory only contains the files
   you require for your game / demo.

d) Once you have 'linked' all the required external files, click on
   'Cancel' from the file-selector.  You will asked if you require to add
   any more single files/whole directories.  This choice is up to you !
   Just select 'Cancel' when you are ready to create the link file.

e) You will now be given the option to print out the file contents.  This
   option only comes into play when you are developing game/demos with more
   than 10 files.  More details later.

f) The contents of the link-file will be displayed on screen, with each
   files:  File Number, Name, Size, Executable Status and Pack Status.

   NB:  Pack Status can recognise the majority of file packers available.
        eg. Atomik v3.3/v3.5, Speed Packer v2.0/v3.0, Ice v2.4 & Fire v2.01

g) Pressing a key will present you with a file-selector to select the
   filename and destination of the linkfile.

h) The linkfile is generated.  It will be 40 bytes longer than you expect
   due to the fact I add a little bit of text onto the end of the link-file.

i) Another file-selector will appear requiring the destination where to
   place the GFA source code required to access the files inside the
   linkfile from within your code.

j) Once this is written to the destination, GFA_LINK has finished doing
   its now your job to incorporate the result into your program.

k) If you used to have 6 Degas Elite Compressed PC1 files, and they are
   linked, you will have to replace the file loading routines like this.

Original:

   BLOAD "FILE_1.PC1",address%

New version using GFA_LINK output

   get_link(file_number|,address%)      ! From link-file on disk

   or

   get_memory(file_number|,address%)    ! From link-file copied to RAM

   or

   get_file(file_number|, address%)     ! Using best of both worlds depending
                                        ! users amount of free RAM

'file_number' variable is according to the position in the linkfile.  It
              has been given byte width, because I doubt you will be needing
              more than 255 files in your program.

'address%'    variable is for the address of the MALLOC or DIM array where 
              the external file is to be loaded from disk/moved from RAM to.
              You should always use MALLOC arrays as they are created 
              cleanly - unlike DIM arrays !

All these 3 examples can be found in the accompanying source files with
(much?) better documentation.

Admittably, these source files contain documentation which I admit isn't
exactly brilliant, but if you want some proper working examples, just send
me a letter and a disk for a few examples of working linkfile loaders.

Please use an SAE as I am currently unemployed and enjoying the benefits -
 - if there are any - of the Jobclub !!


Coming soon
-----------

I may just write these routines if they are required for users of STOS !

Although, if I remember, similar routines were incorporated into some
extension written under the moniker of 'The Missing Link'.  If someone
can confirm this, please write to me.

These routines, in their original 68000 variants were supposed to be released
commercially approxiumately 2 years ago !  If anyone knows the address of
MSD of POV, maybe he can get back in touch to see what he wants to do with
them !


Contact Address
---------------

Yep, I am still at the same address in deepest, darkest North Wales.  Although
I spend most of my spare time using my 486 DX33 and playing around in various
Windows Multimedia Authoring packages, I still have a bit of time to answer
answer any related problems/requests to do with my programs.

I would also like to hear from 8-Bit freaks around the globe.  People who
still have a ZX Spectrum, Commodore 64 or Amstrad 464/664/6128 and have got
fair sized collections of software to swap on these 8-bit wonders.

I use the above mentioned 486 PC to emulate all three machines and I recently
helped compile a CD-ROM full of emulators and their associated files !

* Blatant Advert *

For the 'cheap at half the price' cost of œ40 per CD-ROM, you will gain
access to over 25000 ZX Spectrum games, demos and utilities.  Plus there
is also some 2000+ C64 games and demos, a fair wad of Amstrad, Atari 8-Bit,
Apple II, Dragon, MSX, Psion and other emulators on this same CD-ROM.

The version number is currently v1.0 and the next update will contain even
more software, plus emulation software for the Atari ST and Amiga to
emulate the ZX Spectrum & Commodore 64.

* End Of Blatant Advert *


So, bung your correspondence to the usual MUG U.K¿ address, which is:

"Anncott"
Hylas Lane
Rhuddlan
Clwyd
LL18 5AG
United Kingdom


I also welcome letters from other GFA coders who wish to correspond regarding
writing GFA BASIC programs, games, demos or anything which takes their fancy !


Sending donations
-----------------

I am always open to offers regarding donations, be it a selection of:

- first class stamps
- ZX Spectrum Disciple/+D disks, preferably with software on !
- C64 disks you might have lying around doing nothing !
- Original software or books for the above 8-bit machines, Atari ST or PC
  PC which you no longer need.

As the above needs a new description in the tradition of shareware, freeware,
postcard-ware, chocolate ware etc.  

I think the term 'Computer Car Boot Sale Ware' should about cover it !


End Bit
-------

The last bit before you start playing around is that ......

GFA LINK FILER is (c) Mike Mee - alias MUG U.K(tm) - 1994-95.

This software is for distribution via all the normal shareware channels
available to the Atari.  Please ensure all accompanying files are distributed
intact and as per the file listing contained at the beginning at this document.

Other than that - I hope you find this program useful.


Mike Mee/aka MUG U.K(tm), 24th February 1994


