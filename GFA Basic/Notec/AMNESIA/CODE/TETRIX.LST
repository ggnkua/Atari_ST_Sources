.############################
.### TETRIX by GAIA/NOTEC ###
.############################
.
CLEAR
CLS
@init
@make_grp
@make_brik
@make_tab
SGET e$
@game
@fin
.
> PROCEDURE init
  .
  .### Variable & DIM ###
  .
  OUT 4,18
  HIDEM
  SPOKE &H484,2
  xb%=XBIOS(2)
  .
  .Tab%() = Grille de jeu
  DIM tab%(21,26)
  @actualise_tab
  .Brik%() = Stockage des piäces
  .6  = nombre de piäces max
  .16 = Longueur... ( car il y a 4 rotation par piäces )
  .4  = Hauteur d'une piäce...
  DIM brik%(6,16,4)
  .DÇpart de la grille
  dx%=84
  dy%=0
  .Nombre de piäces
  nb_p%=0
  .
  .### Palette ###
  .
  .Fond noir
  VSETCOLOR 0,0
  .Gris
  VSETCOLOR 1,12,12,12
  VSETCOLOR 2,7,7,7
  VSETCOLOR 3,3,3,3
  .Bleu
  VSETCOLOR 4,12,12,15
  VSETCOLOR 5,7,7,10
  VSETCOLOR 6,3,3,6
  .
RETURN
> PROCEDURE actualise_tab
  .
  FOR x%=1 TO 20
    tab%(x%,26)=1
  NEXT x%
  FOR y%=1 TO 25
    tab%(0,y%)=1
    tab%(21,y%)=1
  NEXT y%
  .
RETURN
> PROCEDURE make_grp
  .
  .### CrÇation des blocs 8*8 ###
  .
  RESTORE grp
  FOR ny%=0 TO 7
    FOR nx%=0 TO 7
      READ couleur%
      COLOR couleur%
      PLOT nx%,ny%
      COLOR couleur%+3
      PLOT nx%+8,ny%
    NEXT nx%
  NEXT ny%
  DEFFILL 3
  PBOX 17,1,22,6
  .
  .### CrÇation du tableau de jeu ###
  .
  x1%=76
  x2%=244
  FOR y%=0 TO 199 STEP 8
    RC_COPY xb%,8,0,8,8 TO xb%,x1%,y%
    RC_COPY xb%,8,0,8,8 TO xb%,x2%,y%
    FOR x%=84 TO 236 STEP 8
      RC_COPY xb%,16,0,8,8 TO xb%,x%,y%
    NEXT x%
  NEXT y%
  .
grp:
  DATA 1,1,1,1,1,1,1,3
  DATA 1,2,2,2,2,2,2,3
  DATA 1,2,2,2,2,2,2,3
  DATA 1,2,2,2,2,2,2,3
  DATA 1,2,2,2,2,2,2,3
  DATA 1,2,2,2,2,2,2,3
  DATA 1,2,2,2,2,2,2,3
  DATA 3,3,3,3,3,3,3,3
  .
RETURN
> PROCEDURE make_brik
  .
  .### Lecture des BRIQUES ###
  .
  RESTORE dat
  .Nombre de piäce
  READ nb_p%
  .
  FOR nb%=1 TO nb_p%
    .
    .NumÇro de la piäce
    READ num_p%
    .Nombre de blocs pour la piäce
    READ num_b%
    .On a 4 rotations par piäce
    .
    FOR rotation%=0 TO 3
      .
      .On lit x puis y cela pendant num_b%/2 fois
      FOR nb_read%=1 TO num_b%
        .
        .CoordonnÇes par rapport Ö O(x,y) = O(1,1)
        READ x%,y%
        brik%(num_p%,x%+(rotation%)*4,y%)=1
        .
      NEXT nb_read%
      .
    NEXT rotation%
    .
  NEXT nb%
  .
RETURN
> PROCEDURE make_tab
  .
  .### CrÇation d'un tableau de jeu ###
  .
  FOR y%=15 TO 25
    FOR x%=1 TO 20
      n%=RANDOM(5)
      IF n%>0
        RC_COPY xb%,0,0,8,8 TO xb%,dx%+(x%-1)*8,(y%-1)*8
        tab%(x%,y%)=1
      ENDIF
    NEXT x%
  NEXT y%
  .
RETURN
.
> PROCEDURE game
  .
  @tirage_piece
  .
  .### Attente avant que la piece avance ###
  .
  time_fall%=0
  .DifficultÇ
  speed%=10
  .
  .### Options... ###
  .
  .Time
  time=999
  .Time ON ?
  time_opt%=1
  perdu%=0
  .
  DO
    .
    key%=PEEK(&HFFFFFC02)
    EXIT IF key%=1 OR time=0 AND time_opt%=1 OR perdu%=1
    LOCATE 1,2
    PRINT INT(time);" "
    PRINT "DX:";dx%
    PRINT "DY:";dy%
    PRINT "TX:";tx%
    PRINT "TY:";ty%
    IF time_opt%=1
      SUB time,0.05
    ENDIF
    @aff_piece
    INC time_fall%
    IF time_fall%=speed%
      time_fall%=0
      @fall_ok
    ENDIF
    .
    .#############################
    .###### Test de touches ######
    .#############################
    .
    .### Pause
    .
    IF key%=25
      @pause
    ENDIF
    .
    .### Rotation Ö gauche [Insert] ###
    .
    IF key%=82
      @rotation_gauche
    ENDIF
    .
    .### Rotation Ö droite [Clr Home] ###
    .
    IF key%=71
      @rotation_droite
    ENDIF
    .
    .### Gauche <- ###
    .
    IF key%=75
      @gauche
    ENDIF
    .
    .### Droite -> ###
    .
    IF key%=77
      @droite
    ENDIF
    .
    .### Bas (accÇlÇrer la descente de la piäce) ###
    .
    IF key%=80
      @bas
    ENDIF
    .
  LOOP
  .
RETURN
> PROCEDURE tirage_piece
  .
  .### On tire une piäce au hasard ###
  .
  num_p%=RANDOM(nb_p%)
  dx%=140
  dy%=0
  tx%=8
  ty%=1
  num_r%=0
  .
RETURN
> PROCEDURE pause
  .
  SPUT e$
  TEXT (319-(LEN("- PAUSE -")*8))/2,100,"- PAUSE -"
  PAUSE 10
  DO
  LOOP UNTIL PEEK(&HFFFFFC02)=25
  PAUSE 10
  SPUT e$
  .
RETURN
> PROCEDURE rotation_gauche
  .
  DEC num_r%
  IF num_r%=-1
    num_r%=3
  ENDIF
  PAUSE 1
  VSYNC
  .
RETURN
> PROCEDURE rotation_droite
  .
  INC num_r%
  IF num_r%=4
    num_r%=0
  ENDIF
  PAUSE 1
  VSYNC
  .
RETURN
> PROCEDURE gauche
  .
  .### On teste si la piäce peut aller Ö gauche ###
  .
  heurte%=0
  .
  FOR x%=0 TO 3
    .
    FOR y%=0 TO 3
      IF tx%+x%<22
        IF tab%(tx%+x%-1,ty%+y%)<>0 AND brik%(num_p%,x%+1+(num_r%)*4,y%+1)=1
          heurte%=1
        ENDIF
      ENDIF
      EXIT IF heurte%=1
    NEXT y%
    .
    EXIT IF heurte%=1
  NEXT x%
  .
  IF heurte%=0
    .### Ok on a rien touchÇ ###
    .
    DEC tx%
    SUB dx%,8
    .
  ENDIF
  .
RETURN
> PROCEDURE droite
  .
  .### On teste si la piäce peut aller Ö droite ###
  .
  heurte%=0
  .
  FOR y%=0 TO 3
    .
    FOR x%=0 TO 3
      IF tx%+x%+1<22
        IF tab%(tx%+x%+1,ty%+y%)<>0 AND brik%(num_p%,x%+1+(num_r%)*4,y%+1)=1
          heurte%=1
        ENDIF
      ENDIF
      EXIT IF heurte%=1
    NEXT x%
    .
    EXIT IF heurte%=1
  NEXT y%
  .
  IF heurte%=0
    .### Ok on a rien touchÇ ###
    .
    INC tx%
    ADD dx%,8
    @aff_piece
    .
  ENDIF
  .
RETURN
> PROCEDURE bas
  .
  @fall_ok
  .
RETURN
> PROCEDURE aff_piece
  .
  SPUT e$
  FOR y%=1 TO 4
    FOR x%=1 TO 4
      IF brik%(num_p%,(num_r%)*4+x%,y%)=1
        RC_COPY xb%,0,0,8,8 TO xb%,dx%+(x%-1)*8,dy%+(y%-1)*8
      ENDIF
    NEXT x%
  NEXT y%
  .
RETURN
> PROCEDURE fall_ok
  .
  .### On teste si la piäce peut tomber ou si elle se 'heurte' ###
  .
  heurte%=0
  .
  FOR y%=3 TO 0 STEP -1
    .
    FOR x%=0 TO 3
      IF tx%+x%<22 AND ty%+y%+1<27
        IF tab%(tx%+x%,ty%+y%+1)<>0 AND brik%(num_p%,x%+1+(num_r%)*4,y%+1)=1
          heurte%=1
        ENDIF
      ENDIF
      EXIT IF heurte%=1
    NEXT x%
    .
    EXIT IF heurte%=1
  NEXT y%
  .
  IF heurte%=1
    .### Elle a touchÇ quelque chose ! ###
    .### On Çcrit la piäce dans le tableau ###
    .
    FOR y2%=0 TO 3
      FOR x2%=0 TO 3
        IF x2%+tx%<22 AND ty%+y2%<27
          IF brik%(num_p%,x2%+1+(num_r%)*4,y2%+1)=1
            RC_COPY xb%,0,0,8,8 TO xb%,84+(x2%+tx%-1)*8,(y2%+ty%-1)*8
            tab%(x2%+tx%,y2%+ty%)=1
          ENDIF
        ENDIF
      NEXT x2%
    NEXT y2%
    IF ty%=1
      perdu%=1
    ENDIF
    .
    .### On regarde si la piäce Ö engendrer une ligne ###
    .
    FOR y2%=ty% TO ty%+3
      nb%=0
      FOR x2%=1 TO 20
        IF tab%(x2%,y2%)<>0
          INC nb%
        ENDIF
      NEXT x2%
      IF nb%=20
        FOR x2%=1 TO 20
          RC_COPY xb%,16,0,8,8 TO xb%,84+(x2%-1)*8,(y2%-1)*8
          tab%(x2%,y2%)=0
        NEXT x2%
        SGET e$
      ENDIF
    NEXT y2%
    .
    @tirage_piece
    SGET e$
    .
  ELSE
    .### Sinon on fait tombÇ la piäce d'un cran vers le bas ###
    .
    INC ty%
    ADD dy%,8
    .
  ENDIF
  .
RETURN
.
> PROCEDURE fin
  .
  SPOKE &H484,3
  SHOWM
  OUT 4,8
  EDIT
  .
RETURN
> PROCEDURE data
  .
  .### Data des Piäces originales du TETRIS ###
  .
dat:
  .
  .### Nombre total de piäces ###
  .
  DATA 7
  .
  REM -#-- ---- ##-- ----
  REM -#-- #--- #--- ###-
  REM ##-- ###- #--- --#-
  REM ---- ---- ---- ----
  .NumÇro de la piäce
  DATA 0
  .Nombre de blocs qui composent la piäce
  DATA 4
  .4 lignes pour la position des blocs
  DATA 1,1,1,2,1,3,2,3
  DATA 1,2,1,3,2,3,3,3
  DATA 1,1,1,2,1,3,2,1
  DATA 1,2,2,2,3,2,3,3
  .
  REM #--- ---- ##-- ----
  REM #--- ###- -#-- --#-
  REM ##-- #--- -#-- ###-
  REM ---- ---- ---- ----
  DATA 1
  DATA 4
  DATA 1,1,1,2,1,3,2,3
  DATA 1,2,1,3,2,2,3,2
  DATA 1,1,2,1,2,2,2,3
  DATA 1,3,2,3,3,2,3,3
  .
  REM -#-- -#-- ---- -#--
  REM ###- -##- ###- ##--
  REM ---- -#-- -#-- -#--
  REM ---- ---- ---- ----
  DATA 2
  DATA 4
  DATA 1,2,2,1,2,2,3,2
  DATA 2,1,2,2,2,3,3,2
  DATA 1,2,2,2,2,3,3,2
  DATA 1,2,2,1,2,2,2,3
  .
  REM ##-- ##-- ##-- ##--
  REM ##-- ##-- ##-- ##--
  REM ---- ---- ---- ----
  REM ---- ---- ---- ----
  DATA 3
  DATA 4
  DATA 1,1,1,2,2,1,2,2
  DATA 1,1,1,2,2,1,2,2
  DATA 1,1,1,2,2,1,2,2
  DATA 1,1,1,2,2,1,2,2
  .
  REM #--- #### #--- ####
  REM #--- ---- #--- ----
  REM #--- ---- #--- ----
  REM #--- ---- #--- ----
  DATA 4
  DATA 4
  DATA 1,1,1,2,1,3,1,4
  DATA 1,1,2,1,3,1,4,1
  DATA 1,1,1,2,1,3,1,4
  DATA 1,1,2,1,3,1,4,1
  .
  REM #--- ---- #--- ----
  REM ##-- -##- ##-- -##-
  REM -#-- ##-- -#-- ##--
  REM ---- ---- ---- ----
  DATA 5
  DATA 4
  DATA 1,1,1,2,2,2,2,3
  DATA 1,3,2,2,2,3,3,2
  DATA 1,1,1,2,2,2,2,3
  DATA 1,3,2,2,2,3,3,2
  .
  REM -#-- ---- -#-- ----
  REM ##-- ##-- ##-- ##--
  REM #--- -##- #--- -##-
  REM ---- ---- ---- ----
  DATA 6
  DATA 4
  DATA 1,2,1,3,2,1,2,2
  DATA 1,2,2,2,2,3,3,3
  DATA 1,2,1,3,2,1,2,2
  DATA 1,2,2,2,2,3,3,3
  .
RETURN
.
REM tab%() = 0 : vide
REM          1 : briques
REM        > 1 : bonus
