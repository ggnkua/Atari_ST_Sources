.
.Proc‚dures pour afficher des objets en 3D
.Programmmes par Laurent Noyrigat
.
@init_espace
virtuel$=SPACE$(32256)
virt%=((V:virtuel$)+256) AND NOT 255
norm%=XBIOS(3)
@vecteur_normaux(nf%(trav%))
@centre(190,90)
@3d(0,45,25,200)
@demo(5)
.
> PROCEDURE 3d(obj%,horiz%,vert%,zoom%)
  theta=horiz%
  phi=vert%
  rho=zoom%
  trav%=obj%
  face%=nf%(trav%)
  @rotations
  @visibilite(face%)
RETURN
.
> PROCEDURE centre(x%,y%)
  vx%=x%
  vy%=y%
RETURN
.
> PROCEDURE init_espace
  DIM xe%(2,250),ye%(2,250),ze%(2,250),face%(2,300),nlf%(2,300),l1%(2,300),l2%(2,300),nl%(2),np%(2)
  DIM alg%(2),nf%(2)
  DIM xpf%(100),ypf%(100),cf%(1,300) ! Coo polygones + coul faces
  DIM tdf%(2*250),df%(2*250) ! vect face tri ou non
  DIM nx%(2,250),ny%(2,250),nz%(2,250) ! vect normaux
  DIM cr(15)
  visu%=1
  alg%=1
  trav%=0
  @donnees
  @define_espace
  @define_couleurs
  @rotations
RETURN
.
> PROCEDURE define_espace
  vx=100
  vy=100
  theta=0
  phi=0
  rho=0
  d=500
RETURN
.
> PROCEDURE donnees
  np%(trav%)=8
  nl%(trav%)=20
  nf%(trav%)=5
  FOR i%=0 TO np%(trav%)
    READ xe%(trav%,i%),ye%(trav%,i%),ze%(trav%,i%)
  NEXT i%
  .
  DATA 0,-10,10,0,-10,-10
  DATA 0,10,-10,0,10,10
  DATA -20,10,-10,-20,10,10
  DATA -20,-10,-10,-20,-10,10
  DATA -20,-10,10
  .
  FOR i%=0 TO nl%(trav%)-1
    READ l1%(trav%,i%),l2%(trav%,i%)
  NEXT i%
  .
  DATA 0,1,1,2,2,3,3,0
  DATA 3,2,2,4,4,5,5,3
  DATA 5,4,4,6,6,7,7,5
  DATA 7,6,6,1,1,0,0,7
  DATA 7,0,0,3,3,5,5,7
  .
  FOR i%=0 TO nf%(trav%)
    READ face%(trav%,i%),nlf%(trav%,i%),cf%(trav%,i%)
  NEXT i%
  .
  DATA 0,3,11,4,7,1
  DATA 8,11,2,12,15,3
  DATA 16,19,8,20,0,8
RETURN
.
> PROCEDURE trivecteur(n%)
  LOCAL i%,j%,h%,lim%,l%
  FOR i%=0 TO n%
    tdf%(i%)=df%(i%)
  NEXT i%
  h%=n%
  WHILE h%>1
    h%=h% DIV 2
    FOR i%=0 TO h%
      l%=n%
      REPEAT
        j%=i%
        lim%=l%
        l%=0
        WHILE j%+h%<=lim%
          IF tdf%(j%)>tdf%(j%+h%)
            SWAP tdf%(j%),tdf%(j%+h%)
            l%=j%
          ENDIF
          j%=j%+h%
        WEND
      UNTIL l%=0
    NEXT i%
  WEND
  FOR i%=0 TO n%
    IF i%+1<n%
      IF tdf%(i%)=tdf%(i%+1)
        FOR j%=i%+2 TO n%
          tdf%(i%+1+(j%-(i%+2)))=tdf%(j%)
        NEXT j%
        DEC n%
        i%=-1
      ENDIF
    ENDIF
    EXIT IF i%>=n%
  NEXT i%
  ndf%=n%
RETURN
.
> PROCEDURE rotations
  st=SIN(theta*PI/180)
  sp=SIN(phi*PI/180)
  tc=COS(theta*PI/180)
  cp=COS(phi*PI/180)
  cs=tc*sp
  ss=st*sp
  zz=tc*cp
  sc=st*cp
  o1=rho*zz
  o2=rho*sc
  o3=rho*sp
RETURN
.
> PROCEDURE face(nface%)
  LOCAL j%,count%,fdf%
  count%=0
  FOR j%=face%(trav%,nface%) TO nlf%(trav%,nface%)
    @conv32(xe%(trav%,l1%(trav%,j%)),ye%(trav%,l1%(trav%,j%)),ze%(trav%,l1%(trav%,j%)))
    xpf%(count%)=xp%
    ypf%(count%)=yp%
    INC count%
  NEXT j%
  DEFFILL cr(cf%(trav%,nface%)),1,1
  IF visu%=3 OR visu%=4 OR visu%=5
    xpf%(count%)=xpf%(0)
    ypf%(count%)=ypf%(0)
    INC count%
    POLYLINE count%,xpf%(),ypf%()
  ELSE
    POLYFILL count%,xpf%(),ypf%()
  ENDIF
  IF visu%=6
    xpf%(count%)=xpf%(0)
    ypf%(count%)=ypf%(0)
    INC count%
    POLYLINE count%,xpf%(),ypf%()
  ENDIF
RETURN
.
> PROCEDURE vecteur_normaux(nbf%)
  FOR i%=0 TO nbf%
    h1=l1%(trav%,face%(trav%,i%)+0)
    h2=l1%(trav%,face%(trav%,i%)+1)
    h3=l1%(trav%,face%(trav%,i%)+2)
    t1=xe%(trav%,h2)-xe%(trav%,h1)
    t2=ye%(trav%,h2)-ye%(trav%,h1)
    t3=ze%(trav%,h2)-ze%(trav%,h1)
    s1=xe%(trav%,h3)-xe%(trav%,h1)
    s2=ye%(trav%,h3)-ye%(trav%,h1)
    s3=ze%(trav%,h3)-ze%(trav%,h1)
    nx%(trav%,i%)=t2*s3-s2*t3
    ny%(trav%,i%)=t3*s1-s3*t1
    nz%(trav%,i%)=t1*s2-s1*t2
  NEXT i%
RETURN
.
> PROCEDURE visibilite(nbf%)
  LOCAL i%,j%
  FOR i%=0 TO nbf%
    b1=o1-xe%(trav%,l1%(trav%,face%(trav%,i%)))
    b2=o2-ye%(trav%,l1%(trav%,face%(trav%,i%)))
    b3=o3-ze%(trav%,l1%(trav%,face%(trav%,i%)))
    df%(i%)=b1*nx%(trav%,i%)+b2*ny%(trav%,i%)+b3*nz%(trav%,i%)
  NEXT i%
  IF alg%=1
    @trivecteur(nbf%)
    IF visu%=1 OR visu%=3 OR visu%=6
      FOR i%=0 TO ndf%
        FOR j%=0 TO nbf%
          IF df%(j%)=tdf%(i%)
            @face(j%)
          ENDIF
        NEXT j%
      NEXT i%
    ENDIF
    IF visu%=2 OR visu%=5
      FOR i%=0 TO ndf%
        IF tdf%(i%)<=0
          FOR j%=0 TO nbf%
            IF df%(j%)=tdf%(i%)
              @face(j%)
            ENDIF
          NEXT j%
        ENDIF
      NEXT i%
    ENDIF
    IF visu%=4
      FOR i%=0 TO ndf%
        IF tdf%(i%)>0
          FOR j%=0 TO nbf%
            IF df%(j%)=tdf%(i%)
              @face(j%)
            ENDIF
          NEXT j%
        ENDIF
      NEXT i%
    ENDIF
  ENDIF
  IF alg%=2
    IF visu%<>4
      FOR i%=0 TO nbf%
        IF (df%(i%)<=0)
          @face(ji%)
        ENDIF
      NEXT i%
    ENDIF
    IF visu%=1 OR visu%=3 OR visu%=4 OR visu%=6
      FOR i%=0 TO nbf%
        IF (df%(i%)>0)
          @face(i%)
        ENDIF
      NEXT i%
    ENDIF
  ENDIF
RETURN
.
> PROCEDURE conv32(x%,y%,z%)
  xo=-x%*st+y%*tc
  yo=-x%*cs-y%*ss+z%*cp
  zo=-x%*zz-y%*sc-z%*sp+rho
  xp%=vx+(d*xo)/zo
  yp%=vy-(d*yo)/zo
RETURN
.
> PROCEDURE define_couleurs
  RESTORE corresp
  FOR i%=0 TO 15
    READ cr(i%)
  NEXT i%
  FOR i%=0 TO 15
    READ couleur
    SETCOLOR cr(i%),couleur
  NEXT i%
corresp:
  DATA 0,2,3,6,4,7,5,8,9,10,11,14,12,15,13,1
  DATA 1365,1330,1313,119,626,1638,1140,1092,819,1364,1875,855,823,0,851,1347
RETURN
.
> PROCEDURE demo(valeur%)
  . @virt_norm
  REPEAT
    clav$=INKEY$
    clav%=ASC(RIGHT$(clav$))
    IF clav%=&H4B
      SUB theta,valeur%
    ELSE IF clav%=&H4D
      ADD theta,valeur%
    ELSE IF clav%=&H48
      SUB phi,valeur%
    ELSE IF clav%=&H50
      ADD phi,valeur%
    ENDIF
    IF clav$="+"
      SUB rho,valeur%*2
    ELSE IF clav$="-"
      ADD rho,valeur%*2
    ENDIF
    IF clav%>=49 AND clav%<=54
      visu%=clav%-48
    ENDIF
    IF clav%<>0
      CLS
      @3d(0,theta,phi,rho)
      .  BMOVE virt+320,norm%+320,31680
    ENDIF
  UNTIL MOUSEK=1
  . @normal
RETURN
.
> PROCEDURE virt_norm
  . VOID XBIOS(5,L:virt%,L:norm%,W:-1)
RETURN
.
> PROCEDURE normal
  . VOID XBIOS(5,L:norm%,L:norm%,W:-1)
RETURN
