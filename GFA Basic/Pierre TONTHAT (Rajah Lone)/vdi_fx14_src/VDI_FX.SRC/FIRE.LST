$M 128000 $S> $F< $P< $%0 $*% $O3 $A2 $E$
'
REM #KEY ColdFire v4e|Classic 68K
REM #IFK 0
REM #BRK MA
REM #EIK 1 ! ColdFire v4e
REM #LIB ColdFire
REM #EXT prx
REM #EIK 2 ! Classic 68K
REM #LIB 68000
REM #EXT prg
REM #FIK
'
IF FATAL
  ~FORM_ALERT(1,"[1][ This version is not suited | for this CPU. Please get | the correct archive. ][ Ok ]")
  @leave
ENDIF
IF ERR=8
  ~FORM_ALERT(1,"[1][ Insuffisant or fragmented | memory ][ Ok ]")
  @leave
ELSE
  init1
  init2
  main
ENDIF
'
> PROCEDURE leave
  @restore_colors
  @close_win
  IF gdos!
    ~VST_UNLOAD_FONTS(0)
  ENDIF
  @mxfree(palette%)
  @mxfree(index_colors_adr%)
  IF ressource!
    ~MENU_BAR(ressource_menu%,0)
    ~RSRC_FREE()
  ENDIF
  QUIT
RETURN
'
> PROCEDURE init1
  '
  IF A~I<0 ! appl_init() failed?
    @leave
  ENDIF
  '
  IF _B<8
    ~FORM_ALERT(1,"[1][ Need at least 256 colors ][ Quit ]")
    @leave
  ENDIF
  '
  gdos!=GDOS?
  '
  mx_mask%=@mx_mask
  mxalloc!=(_GEMDOS>=&H19)
  '
  magic!=GETCOOKIE(CVL("MagX"))
  mint!=(_MINT<>0) ! GETCOOKIE(CVL("MiNT"))
  '
  IF magic! OR mint!
    naes!=TRUE
  ELSE IF _AES>=&H399
    naes!=TRUE
  ELSE
    naes!=FALSE
  ENDIF
  '
  multi!=MULTITASK?
  '
  @declare
  @declare_effect
  IF mint!=FALSE
    RESERVE 32000
  ENDIF
  @allocate
  '
  ~RSRC_FREE()
  IF EXIST(ressource_file$)
    IF RSRC_LOAD(ressource_file$)<>0
      ~RSRC_GADDR(0,0,ressource_menu%)
      ressource!=TRUE
    ENDIF
  ENDIF
  '
RETURN
> PROCEDURE declare
  general_path$=CURDIR$
  '
  ressource_file$=general_path$+"FIRE.RSC"
  ressource!=FALSE
  ressource_menu%=0
  '
  preferences_file$=general_path$+"VDI_FX.INF"
  '
  DIM boolean$(2)
  boolean$(0)="FALSE"
  boolean$(1)="TRUE"
  '
  bitplane_number&=_B
  '
  hand_win&=0
  xd&=0
  yd&=0
  ld&=0
  hd&=0
  wx&=_DX
  wy&=_DY
  wl&=_DW
  wh&=_DH
  win!=FALSE
  aff!=FALSE
  '
RETURN
> PROCEDURE allocate
  '
  palette%=@mxalloc(1536,3)
  '
  vtxt_buf%=@mxalloc(256,3)
  '
  index_colors_adr%=0
  '
RETURN
> PROCEDURE init2
  '
  IF gdos!
    font_nb&=VST_LOAD_FONTS(0)
    ADD font_nb&,WORK_OUT(10)
  ELSE
    font_nb&=1
  ENDIF
  '
  font_selected&=-1
  '
  FOR i&=0 TO PRED(font_nb&)
    IF font_id&=VQT_NAME(i&,font_rname$)
      font_selected&=font_id&
    ENDIF
  NEXT i&
  IF font_selected&=-1
    FOR i&=0 TO PRED(font_nb&)
      font_id&=VQT_NAME(i&,font_rname$)
      IF UPPER$(font_rname$)=UPPER$(font_name$)
        font_selected&=font_id&
      ENDIF
    NEXT i&
  ENDIF
  IF font_selected&=-1
    font_selected&=0
  ENDIF
  '
  ~VSF_INTERIOR(1)
  ~VSF_STYLE(0)
  ~VSF_COLOR(1)
  ~VSF_PERIMETER(0)
  '
  ~VSWR_MODE(2)
  ~VST_ALIGNMENT(0,5)
  ~VST_COLOR(64)
  ~VST_FONT(font_selected&)
  '
  ~VST_HEIGHT(font_height&,dummy&,dummy&,dummy&,cell_height&)
  ht&=ADD(cell_height&,11)
  '
  index_colors_len%=MUL(_DW,ht&)
  index_colors_adr%=@mxalloc(ADD(index_colors_len%,128),3)
  IF index_colors_adr%<1
    ~FORM_ALERT(1,"[1][ Need more memory ][ Quit ]")
    leave
  ENDIF
  '
  @save_colors
  @set_colors
  '
  IF ressource!
    ~MENU_IENABLE(ressource_menu%,3,0)
    ~MENU_BAR(ressource_menu%,1)
  ENDIF
  IF multi!=FALSE
    ~FORM_DIAL(3,0,0,0,0,_DX,_DY,_DW,_DH)
  ENDIF
  '
RETURN
'
> PROCEDURE declare_effect
  LOCAL pref_len%,str$
  '
  line_nb&=0
  DIM line$(100)
  '
  IF EXIST(preferences_file$)
    '
    mem_pos%=0
    '
    file_handle&=FOPEN(preferences_file$,0)
    IF file_handle&>0
      '
      pref_len%=FSEEK(0,file_handle&,2)
      ~FSEEK(0,file_handle&,0)
      '
      IF pref_len%>0
        mem_pos%=@mem_init(pref_len%)
        '
        IF mem_pos%>0
          IF FREAD(file_handle&,pref_len%,mem_pos%)<>pref_len%
            mem_pos%=@mem_close
          ENDIF
        ENDIF
      ENDIF
      ~FCLOSE(file_handle&)
    ENDIF
    '
    IF mem_pos%>0
      '
      mem_start_ptr%=mem_pos%
      mem_end_ptr%=ADD(mem_pos%,pref_len%)
      DO
        IF BYTE{mem_start_ptr%}=13 OR BYTE{mem_start_ptr%}=10
          BYTE{mem_start_ptr%}=0
        ENDIF
        INC mem_start_ptr%
      LOOP UNTIL mem_start_ptr%>mem_end_ptr%
      mem_start_ptr%=mem_pos%
      '
      font_id_found$=@mem_find$("FIRE_FONT_ID")
      IF font_id_found$=""
        font_id&=-1
      ELSE
        font_id&=VAL(font_id_found$)
      ENDIF
      font_name$=@mem_find$("FIRE_FONT_NAME")
      font_height&=MAX(6,MIN(VAL(@mem_find$("FIRE_FONT_HEIGHT")),128))
      '
      exit!=FALSE
      i&=1
      DO
        str$=LEFT$(@mem_find$("FIRE_LINE_"+STR$(i&)),255)
        IF LEN(str$)>0
          INC line_nb&
          INC i&
          line$(line_nb&)=str$
        ELSE
          exit!=TRUE
        ENDIF
      LOOP UNTIL exit!
      '
    ENDIF
    '
    ~@mem_close
    '
  ELSE
    '
    font_id&=1
    font_name$="System font"
    font_height&=13
    '
    line_nb&=4
    line$(1)="O for a Muse of fire, that would ascend"
    line$(2)="The brightest heaven of invention,"
    line$(3)="..."
    line$(4)="½ Shakespeare"
    '
  ENDIF
  '
  il&=0
  xt&=0
  yt&=0
  '
RETURN
'
> FUNCTION mem_init(mem_wished_len%)
  $F%
  ~@mem_close
  mem_len%=MAX(16000,SHL(SHR(ADD(mem_wished_len%,31),4),4))
  mem_start_adr%=@mxalloc(mem_len%,3)
  IF mem_start_adr%<0
    ' alert ?
    mem_start_adr%=0
  ENDIF
  RETURN mem_start_adr%
ENDFUNC
> FUNCTION mem_close
  $F%
  IF mem_start_adr%>0
    @mxfree(mem_start_adr%)
    mem_start_adr%=0
    mem_len%=0
  ENDIF
  RETURN 0
ENDFUNC
> FUNCTION mem_find$(mem_key$)
  LOCAL mem_find_line$,mem_find_ptr%
  IF mem_start_ptr%>0 AND mem_end_ptr%>mem_start_ptr%
    mem_find_ptr%=mem_start_ptr%
    DO
      mem_find_line$=CHAR{mem_find_ptr%}
      ADD mem_find_ptr%,SUCC(LEN(mem_find_line$))
      '
      IF INSTR(mem_find_line$,mem_key$+"=")=1
        mem_str$=MID$(mem_find_line$,ADD(LEN(mem_key$),2))
        mem_pos&=INSTR(mem_str$,"#")
        IF mem_pos&>0
          RETURN TRIM$(LEFT$(mem_str$,PRED(mem_pos&)))
        ENDIF
        RETURN TRIM$(mem_str$)
      ENDIF
      '
    LOOP UNTIL mem_find_ptr%>=mem_end_ptr%
  ENDIF
  RETURN ""
ENDFUNC
> FUNCTION mem_get_flag(find_str$,default_flag!)
  $F%
  '
  IF @mem_find$(find_str$)=boolean$(ABS(NOT default_flag!))
    RETURN NOT default_flag!
  ENDIF
  RETURN default_flag!
ENDFUNC
'
> PROCEDURE main
  @create_win
  @v_hide_c
  @clear_win
  ~VS_CLIP(1,xd&,yd&,ADD(xd&,PRED(ld&)),ADD(yd&,PRED(hd&)))
  exit!=FALSE
  DO
    @draw_win
  LOOP UNTIL exit!
  ~VS_CLIP(0,xd&,yd&,ADD(xd&,PRED(ld&)),ADD(yd&,PRED(hd&)))
  @v_show_c
  @leave
RETURN
'
> PROCEDURE create_win
  hand_win&=WIND_CREATE(&X0,30,30,30,30)
  IF hand_win&>0
    wx&=_DX
    wy&=_DY
    wl&=_DW
    wh&=_DH
    win!=TRUE
    IF WIND_OPEN(hand_win&,wx&,wy&,wl&,wh&)=0
      ~FORM_ALERT(1,"[1][ Can't open window ][ Quit ]")
      @leave
    ELSE
      ~WIND_GET(hand_win&,4,xd&,yd&,ld&,hd&)
      xd2&=ADD(xd&,PRED(ld&))
      yd2&=ADD(yd&,PRED(hd&))
      ld2&=DIV(ld&,2)
      hd2&=DIV(hd&,2)
    ENDIF
  ELSE
    ~FORM_ALERT(1,"[1][ No window available ][ Quit ]")
    @leave
  ENDIF
  aff!=win!
RETURN
> PROCEDURE close_win
  IF win!
    ~WIND_CLOSE(hand_win&)
    ~WIND_DELETE(hand_win&)
    win!=FALSE
    aff!=FALSE
  ENDIF
RETURN
> PROCEDURE clear_win
  ~VSF_COLOR(1)
  ~VS_CLIP(1,xd&,yd&,ADD(xd&,PRED(ld&)),ADD(yd&,PRED(hd&)))
  ~V_BAR(xd&,yd&,ADD(xd&,PRED(ld&)),ADD(yd&,PRED(hd&)))
  ~VS_CLIP(0,xd&,yd&,ADD(xd&,PRED(ld&)),ADD(yd&,PRED(hd&)))
RETURN
> PROCEDURE draw_win
  '
  INC il&
  IF il&>line_nb&
    il&=1
  ENDIF
  '
  ~VQT_EXTENT(line$(il&))
  vx1&=PTSOUT(0)
  vy1&=PTSOUT(1)
  vx2&=PTSOUT(2)
  vy2&=PTSOUT(3)
  vx3&=PTSOUT(4)
  vy3&=PTSOUT(5)
  vx4&=PTSOUT(6)
  vy4&=PTSOUT(7)
  '
  lt&=ABS(SUB(vx2&,vx1&))
  ht&=ADD(ABS(SUB(vy1&,vy4&)),2)
  xt&=@get_new_x
  yt&=@get_new_y
  '
  ~V_GTEXT(xt&,yt&,line$(il&))
  get_first_pixels
  '
  if&=1
  REPEAT
    FOR py&=0 TO PRED(hht&)
      pyy&=ADD(yt&,py&)
      FOR px&=0 TO llt&
        color&=SUB(@get_average_pixel_color(px&,py&),INT(5*RND))
        color&=MAX(2,color&)
        set_pixel_color(px&,py&,color&)
        ~VSF_COLOR(color&)
        v_point(color&,ADD(xt&,px&),pyy&)
        IF BCONSTAT(2)
          exit!=TRUE
        ENDIF
      NEXT px&
      EXIT IF exit!
    NEXT py&
    INC if&
  UNTIL exit! OR if&>8
  '
  ~VSF_COLOR(1)
  ~V_BAR(MAX(xd&,SUB(vx4&,30)),MAX(yd&,SUB(vy4&,30)),MAX(ADD(vx2&,30),ADD(xd&,ld&)),MAX(ADD(vy2&,30),ADD(yd&,hd&)))
  '
  ~GRAF_MKSTATE(gm_x&,gm_y&,gm_s&,gk_s&)
  IF BCONSTAT(2) OR gm_s&>0 OR gk_s&>0
    exit!=TRUE
  ENDIF
  '
RETURN
'
> FUNCTION get_new_x
  $F%
  RETURN ADD(xd&,MAX(5,RND*SUB(ld&,ADD(lt&,5))))
ENDFUNC
> FUNCTION get_new_y
  $F%
  RETURN ADD(yd&,MAX(0,RND*SUB(hd&,ht&)))
ENDFUNC
> PROCEDURE get_first_pixels
  LOCAL tmp_y&,tmp_p&,tmp_i&
  '
  llt&=PRED(lt&)
  hht&=PRED(ht&)
  '
  SELECT bitplane_number&
  CASE 8
    '
    FOR vy&=0 TO hht&
      tmp_y&=ADD(yt&,vy&)
      FOR vx&=0 TO llt&
        '
        ~V_GET_PIXEL(ADD(xt&,vx&),tmp_y&,tmp_p&,tmp_i&)
        '
        IF tmp_i&<>1
          set_pixel_color(vx&,vy&,64)
        ELSE
          set_pixel_color(vx&,vy&,2)
        ENDIF
      NEXT vx&
      IF BCONSTAT(2)
        exit!=TRUE
      ENDIF
      EXIT IF exit!
    NEXT vy&
  CASE 15,16
    '
    FOR vy&=0 TO hht&
      tmp_y&=ADD(yt&,vy&)
      FOR vx&=0 TO llt&
        '
        ~V_GET_PIXEL(ADD(xt&,vx&),tmp_y&,tmp_p&,tmp_i&)
        '
        IF tmp_p&<>0
          set_pixel_color(vx&,vy&,64)
        ELSE
          set_pixel_color(vx&,vy&,2)
        ENDIF
      NEXT vx&
      IF BCONSTAT(2)
        exit!=TRUE
      ENDIF
      EXIT IF exit!
    NEXT vy&
  CASE 24,32
    '
    FOR vy&=0 TO hht&
      tmp_y&=ADD(yt&,vy&)
      FOR vx&=0 TO llt&
        '
        ~V_GET_PIXEL(ADD(xt&,vx&),tmp_y&,tmp_p&,tmp_i&)
        '
        IF tmp_p&<>0 OR tmp_i&<>0
          set_pixel_color(vx&,vy&,64)
        ELSE
          set_pixel_color(vx&,vy&,2)
        ENDIF
      NEXT vx&
      IF BCONSTAT(2)
        exit!=TRUE
      ENDIF
      EXIT IF exit!
    NEXT vy&
  ENDSELECT
  '
RETURN
> PROCEDURE set_pixel_color(sx&,sy&,sid|)
  BYTE{ADD(index_colors_adr%,ADD(MUL(lt&,sy&),sx&))}=sid|
RETURN
> FUNCTION get_pixel_color(sx&,sy&)
  $F%
  IF sx&>-1
    RETURN BYTE{ADD(index_colors_adr%,ADD(MUL(lt&,sy&),sx&))}
  ENDIF
  RETURN 2
ENDFUNC
> FUNCTION get_average_pixel_color(sx&,sy&)
  $F%
  '
  color_ptr%=ADD(index_colors_adr%,ADD(MUL(lt&,sy&),PRED(sx&)))
  IF sx&>0
    color1&=BYTE{color_ptr%}
  ELSE
    color1&=2
  ENDIF
  color2&=BYTE{ADD(color_ptr%,SUCC(lt&))}
  '
  RETURN SHR&(ADD(color1&,color2&),1)
ENDFUNC
'
> PROCEDURE restore_colors
  LOCAL tmp_c&,tmp_d&,col_r&,col_g&,col_b&
  '
  IF palette%>0
    FOR tmp_c&=0 TO 255
      tmp_d&=MUL(tmp_c&,6)
      col_r&=INT{ADD(palette%,tmp_d&)}
      col_g&=INT{ADD(palette%,ADD(tmp_d&,2))}
      col_b&=INT{ADD(palette%,ADD(tmp_d&,4))}
      ~VS_COLOR(tmp_c&,col_r&,col_g&,col_b&)
    NEXT tmp_c&
  ENDIF
RETURN
> PROCEDURE save_colors
  LOCAL tmp_c&,tmp_d&,col_r&,col_g&,col_b&
  '
  IF palette%>0
    FOR tmp_c&=0 TO 255
      ~VQ_COLOR(tmp_c&,0,col_r&,col_g&,col_b&)
      tmp_d&=MUL(tmp_c&,6)
      INT{ADD(palette%,tmp_d&)}=col_r&
      INT{ADD(palette%,ADD(tmp_d&,2))}=col_g&
      INT{ADD(palette%,ADD(tmp_d&,4))}=col_b&
    NEXT tmp_c&
  ENDIF
RETURN
> PROCEDURE set_colors
  '
  ~VS_COLOR(2,0,0,0)
  ~VS_COLOR(3,47,0,0)
  ~VS_COLOR(3,94,0,0)
  ~VS_COLOR(4,140,0,0)
  ~VS_COLOR(5,186,0,0)
  ~VS_COLOR(6,234,0,0)
  ~VS_COLOR(7,281,0,0)
  ~VS_COLOR(8,328,0,0)
  ~VS_COLOR(9,375,0,0)
  ~VS_COLOR(10,422,0,0)
  ~VS_COLOR(11,469,0,0)
  ~VS_COLOR(12,516,0,0)
  ~VS_COLOR(13,563,0,0)
  ~VS_COLOR(14,609,0,0)
  ~VS_COLOR(15,656,0,0)
  ~VS_COLOR(16,703,0,0)
  ~VS_COLOR(17,750,0,0)
  ~VS_COLOR(18,797,0,0)
  ~VS_COLOR(19,844,0,0)
  ~VS_COLOR(20,891,0,0)
  ~VS_COLOR(21,938,0,0)
  ~VS_COLOR(22,974,0,0)
  ~VS_COLOR(23,974,47,0)
  ~VS_COLOR(24,974,94,0)
  ~VS_COLOR(25,974,141,0)
  ~VS_COLOR(26,974,188,0)
  ~VS_COLOR(27,974,234,0)
  ~VS_COLOR(28,974,281,0)
  ~VS_COLOR(29,974,328,0)
  ~VS_COLOR(30,974,375,0)
  ~VS_COLOR(31,974,422,0)
  ~VS_COLOR(32,974,469,0)
  ~VS_COLOR(33,974,516,0)
  ~VS_COLOR(34,974,563,0)
  ~VS_COLOR(35,974,609,0)
  ~VS_COLOR(36,974,656,0)
  ~VS_COLOR(37,974,703,0)
  ~VS_COLOR(38,974,750,0)
  ~VS_COLOR(39,974,797,0)
  ~VS_COLOR(40,974,844,0)
  ~VS_COLOR(41,974,891,0)
  ~VS_COLOR(42,974,937,0)
  ~VS_COLOR(43,974,974,0)
  ~VS_COLOR(44,974,974,47)
  ~VS_COLOR(45,974,974,94)
  ~VS_COLOR(46,974,974,140)
  ~VS_COLOR(47,974,974,188)
  ~VS_COLOR(48,974,974,234)
  ~VS_COLOR(49,974,974,281)
  ~VS_COLOR(50,974,974,344)
  ~VS_COLOR(51,974,974,391)
  ~VS_COLOR(52,974,974,438)
  ~VS_COLOR(53,974,974,484)
  ~VS_COLOR(54,974,974,531)
  ~VS_COLOR(55,974,974,578)
  ~VS_COLOR(56,974,974,625)
  ~VS_COLOR(57,974,974,688)
  ~VS_COLOR(58,974,974,734)
  ~VS_COLOR(59,974,974,781)
  ~VS_COLOR(60,974,974,828)
  ~VS_COLOR(61,974,974,875)
  ~VS_COLOR(62,974,974,921)
  ~VS_COLOR(63,974,974,974)
  ~VS_COLOR(64,974,974,974)
  '
RETURN
'
> PROCEDURE v_point(cc&,cx&,cy&)
  ~VSM_COLOR(cc&)
  '
  PTSIN(0)=cx&
  PTSIN(1)=cy&
  ~V_PMARKER(1)
RETURN
'
> PROCEDURE mem_fill(vide_adr%,size%,type%)
  LOCAL nombre%
  IF type%>0
    IF NOT EVEN(vide_adr%)                  ! recalage sur une adresse paire
      BYTE{vide_adr%}=0                     ! Efface 1 octet
      INC vide_adr%                         ! adresse graphique suivante
      DEC size%                             ! diminue bien sur la longueur
    ENDIF
    '                   si la taille est suprieure ou gale  256 octets
    IF AND(size%,&HFF00)
      FOR nombre%=1 TO SHR(size%,8)         ! autant de fois que ncessaire
        BMOVE type%,vide_adr%,256           ! Remplir
        ADD vide_adr%,256                   ! Avancer dans la zone mmoire
      NEXT nombre%
    ENDIF
    BMOVE type%,vide_adr%,AND(size%,&HFF) ! on finit de recopier les donnes
  ENDIF
RETURN
> PROCEDURE mem_fill_init(value|)
  mxfree(precalcul%)
  precalcul%=@mxalloc(272,3)
  IF precalcul%>0
    FOR i&=0 TO 255
      BYTE{ADD(precalcul%,i&)}=value|
    NEXT i&
  ENDIF
RETURN
'
> PROCEDURE v_hide_c
  IF naes!
    GHIDEM
  ELSE
    ~V_HIDE_C()
  ENDIF
RETURN
> PROCEDURE v_show_c
  IF naes!
    GSHOWM
  ELSE
    ~V_SHOW_C()
  ENDIF
RETURN
'
> FUNCTION mx_mask
  $F%
  IF MXALLOC(-1,0)=-32
    RETURN 0
  ELSE IF SYSCONF(-1)=-32
    RETURN 3
  ELSE
    RETURN -1
  ENDIF
ENDFUNC
> FUNCTION mxalloc(mxlen%,mxmode&)
  $F%
  IF mxalloc!
    RETURN MXALLOC(mxlen%,mxmode&)
  ENDIF
  RETURN MALLOC(mxlen%)
ENDFUNC
> FUNCTION mxalloc_global(mx_len%,mx_mode&)
  $F%
  '
  IF mx_mask%<>0
    mx_mode&=OR(mx_mode&,&X100000)
    RETURN MXALLOC(mx_len%,mx_mode& AND mx_mask%)
  ELSE
    RETURN MALLOC(mx_len%)
  ENDIF
ENDFUNC
> PROCEDURE mxfree(mx_adr%)
  IF mx_adr%>0
    ~MFREE(mx_adr%)
  ENDIF
RETURN
