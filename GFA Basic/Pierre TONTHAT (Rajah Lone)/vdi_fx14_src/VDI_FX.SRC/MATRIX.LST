$M 128000 $S> $F< $P< $%0 $*% $O3 $A2 $E$
'
REM #KEY ColdFire v4e|Classic 68K
REM #IFK 0
REM #BRK MA
REM #EIK 1 ! ColdFire v4e
REM #LIB ColdFire
REM #EXT prx
REM #EIK 2 ! Classic 68K
REM #LIB 68000
REM #EXT prg
REM #FIK
'
IF FATAL
  ~FORM_ALERT(1,"[1][ This version is not suited | for this CPU. Please get | the correct archive. ][ Ok ]")
  @leave
ENDIF
IF ERR=8
  ~FORM_ALERT(1,"[1][ Insuffisant or fragmented | memory ][ Ok ]")
  @leave
ELSE
  init1
  init2
  main
ENDIF
'
> PROCEDURE leave
  @restore_colors
  @close_win
  @mxfree(palette%)
  @mxfree(scr_mfdb%)
  IF ressource!
    ~MENU_BAR(ressource_menu%,0)
    ~RSRC_FREE()
  ENDIF
  QUIT
RETURN
'
> PROCEDURE init1
  '
  IF A~I<0 ! appl_init() failed?
    @leave
  ENDIF
  '
  IF _B=0
    ~FORM_ALERT(1,"[1][ AES not initialized ][ Quit ]")
    @leave
  ENDIF
  '
  mx_mask%=@mx_mask
  mxalloc!=(_GEMDOS>=&H19)
  '
  magic!=GETCOOKIE(CVL("MagX"))
  mint!=(_MINT<>0) ! GETCOOKIE(CVL("MiNT"))
  '
  IF magic! OR mint!
    naes!=TRUE
  ELSE IF _AES>=&H399
    naes!=TRUE
  ELSE
    naes!=FALSE
  ENDIF
  '
  multi!=MULTITASK?
  '
  @declare
  @declare_effect
  IF mint!=FALSE
    RESERVE 32000
  ENDIF
  @allocate
  '
  ~RSRC_FREE()
  IF EXIST(ressource_file$)
    IF RSRC_LOAD(ressource_file$)<>0
      ~RSRC_GADDR(0,0,ressource_menu%)
      ressource!=TRUE
    ENDIF
  ENDIF
  '
RETURN
> PROCEDURE declare
  general_path$=CURDIR$
  '
  ressource_file$=general_path$+"MATRIX.RSC"
  ressource!=FALSE
  ressource_menu%=0
  '
  preferences_file$=general_path$+"VDI_FX.INF"
  '
  DIM boolean$(2)
  boolean$(0)="FALSE"
  boolean$(1)="TRUE"
  '
  hand_win&=0
  xd&=0
  yd&=0
  ld&=0
  hd&=0
  wx&=_DX
  wy&=_DY
  wl&=_DW
  wh&=_DH
  win!=FALSE
  aff!=FALSE
  '
RETURN
> PROCEDURE allocate
  '
  palette%=@mxalloc(1536,3)
  '
  ' MFDB : memory form data block for the screen
  '
  scr_mfdb%=@mxalloc(32,3)
  '
  IF scr_mfdb%>0
    LONG{scr_mfdb%}=0 ! pointer to memory (if 0 : to screen)
    INT{ADD(scr_mfdb%,4)}=ADD(_DX,_DW) ! width in pixels
    INT{ADD(scr_mfdb%,6)}=ADD(_DY,_DH) ! height in pixels
    INT{ADD(scr_mfdb%,8)}=DIV(ADD(INT{ADD(scr_mfdb%,4)},15),16) ! width in words
    INT{ADD(scr_mfdb%,10)}=0  ! format (0: screen, 1 : VDI standard)
    INT{ADD(scr_mfdb%,12)}=_B ! bitplane number
    INT{ADD(scr_mfdb%,14)}=0  ! reserved
    INT{ADD(scr_mfdb%,16)}=0  ! reserved
    INT{ADD(scr_mfdb%,18)}=0  ! reserved
  ENDIF
  '
RETURN
> PROCEDURE init2
  '
  ~VSF_INTERIOR(1)
  ~VSF_STYLE(0)
  ~VSF_COLOR(1)
  ~VSF_PERIMETER(0)
  @save_colors
  '
  ~VST_ALIGNMENT(0,5)
  ~VSWR_MODE(2)
  ~VST_FONT(0)
  ~VST_HEIGHT(font_height&,dummy&,dummy&,cell_width&,cell_height&)
  ~VST_EFFECTS(0)
  '
  IF ressource!
    ~MENU_IENABLE(ressource_menu%,3,0)
    ~MENU_BAR(ressource_menu%,1)
  ENDIF
  IF multi!=FALSE
    ~FORM_DIAL(3,0,0,0,0,_DX,_DY,_DW,_DH)
  ENDIF
  '
RETURN
'
> PROCEDURE declare_effect
  LOCAL pref_len%
  '
  column_nb_max&=400
  '
  IF EXIST(preferences_file$)
    '
    mem_pos%=0
    '
    file_handle&=FOPEN(preferences_file$,0)
    IF file_handle&>0
      '
      pref_len%=FSEEK(0,file_handle&,2)
      ~FSEEK(0,file_handle&,0)
      '
      IF pref_len%>0
        mem_pos%=@mem_init(pref_len%)
        '
        IF mem_pos%>0
          IF FREAD(file_handle&,pref_len%,mem_pos%)<>pref_len%
            mem_pos%=@mem_close
          ENDIF
        ENDIF
      ENDIF
      ~FCLOSE(file_handle&)
    ENDIF
    '
    IF mem_pos%>0
      '
      mem_start_ptr%=mem_pos%
      mem_end_ptr%=ADD(mem_pos%,pref_len%)
      DO
        IF BYTE{mem_start_ptr%}=13 OR BYTE{mem_start_ptr%}=10
          BYTE{mem_start_ptr%}=0
        ENDIF
        INC mem_start_ptr%
      LOOP UNTIL mem_start_ptr%>mem_end_ptr%
      mem_start_ptr%=mem_pos%
      '
      dummy$=@mem_find$("MATRIX_COLUMNS_NUMBER")
      IF INSTR(dummy$,"%")>0
        column_percent!=TRUE
      ELSE
        column_percent!=FALSE
      ENDIF
      column_active_nb&=VAL(dummy$)
      IF column_active_nb&<1 OR column_active_nb&>column_nb_max& OR (column_active_nb&>100 AND column_percent!)
        column_active_nb&=0
      ENDIF
      '
      dummy$=UPPER$(@mem_find$("MATRIX_CHARSET"))
      IF dummy$="HEXA"
        charset&=1
      ELSE IF dummy$="LATIN"
        charset&=2
      ELSE IF dummy$="GREEK"
        charset&=3
      ELSE IF dummy$="HEBREW"
        charset&=4
      ELSE
        charset&=0 ! binary by default
      ENDIF
      '
      dummy$=UPPER$(@mem_find$("MATRIX_COLOR"))
      IF dummy$="BLUE"
        color&=1
      ELSE IF dummy$="RED"
        color&=2
      ELSE IF dummy$="GRAY"
        color&=3
      ELSE
        color&=0 ! green by default
      ENDIF
      '
      dummy$=UPPER$(@mem_find$("MATRIX_FONT_SIZE"))
      IF dummy$="SMALL"
        IF charset&=4
          font_height&=9
        ELSE
          font_height&=8
        ENDIF
      ELSE IF dummy$="MEDIUM"
        font_height&=9
      ELSE
        font_height&=13 ! big by default
      ENDIF
      '
    ENDIF
    '
    ~@mem_close
    '
  ELSE
    '
    column_active_nb&=0
    charset&=0
    color&=0
    font_height&=13
    '
  ENDIF
  '
  DIM column_x&(column_nb_max&),column_color&(column_nb_max&)
  DIM column_active!(column_nb_max&),column_color_add&(column_nb_max&)
  column_y&=0
  column_i&=0
  '
RETURN
'
> FUNCTION mem_init(mem_wished_len%)
  $F%
  ~@mem_close
  mem_len%=MAX(16000,SHL(SHR(ADD(mem_wished_len%,31),4),4))
  mem_start_adr%=@mxalloc(mem_len%,3)
  IF mem_start_adr%<0
    ' alert ?
    mem_start_adr%=0
  ENDIF
  RETURN mem_start_adr%
ENDFUNC
> FUNCTION mem_close
  $F%
  IF mem_start_adr%>0
    @mxfree(mem_start_adr%)
    mem_start_adr%=0
    mem_len%=0
  ENDIF
  RETURN 0
ENDFUNC
> FUNCTION mem_find$(mem_key$)
  LOCAL mem_find_line$,mem_find_ptr%
  IF mem_start_ptr%>0 AND mem_end_ptr%>mem_start_ptr%
    mem_find_ptr%=mem_start_ptr%
    DO
      mem_find_line$=CHAR{mem_find_ptr%}
      ADD mem_find_ptr%,SUCC(LEN(mem_find_line$))
      '
      IF INSTR(mem_find_line$,mem_key$+"=")=1
        mem_str$=MID$(mem_find_line$,ADD(LEN(mem_key$),2))
        mem_pos&=INSTR(mem_str$,"#")
        IF mem_pos&>0
          RETURN TRIM$(LEFT$(mem_str$,PRED(mem_pos&)))
        ENDIF
        RETURN TRIM$(mem_str$)
      ENDIF
      '
    LOOP UNTIL mem_find_ptr%>=mem_end_ptr%
  ENDIF
  RETURN ""
ENDFUNC
> FUNCTION mem_get_flag(find_str$,default_flag!)
  $F%
  '
  IF @mem_find$(find_str$)=boolean$(ABS(NOT default_flag!))
    RETURN NOT default_flag!
  ENDIF
  RETURN default_flag!
ENDFUNC
'
> PROCEDURE main
  @create_win
  @set_values
  @set_colors
  @v_hide_c
  @clear_win
  ~VS_CLIP(1,xd&,yd&,ADD(xd&,PRED(ld&)),ADD(yd&,PRED(hd&)))
  exit!=FALSE
  DO
    @draw_win
  LOOP UNTIL exit!
  ~VS_CLIP(0,xd&,yd&,ADD(xd&,PRED(ld&)),ADD(yd&,PRED(hd&)))
  @v_show_c
  @leave
RETURN
'
> PROCEDURE create_win
  hand_win&=WIND_CREATE(&X0,30,30,30,30)
  IF hand_win&>0
    wx&=_DX
    wy&=_DY
    wl&=_DW
    wh&=_DH
    win!=TRUE
    IF WIND_OPEN(hand_win&,wx&,wy&,wl&,wh&)=0
      ~FORM_ALERT(1,"[1][ Can't open window ][ Quit ]")
      @leave
    ELSE
      ~WIND_GET(hand_win&,4,xd&,yd&,ld&,hd&)
    ENDIF
  ELSE
    ~FORM_ALERT(1,"[1][ No window available ][ Quit ]")
    @leave
  ENDIF
  aff!=win!
RETURN
> PROCEDURE set_values
  LOCAL left&,cpt&,col&
  '
  column_nb&=MIN(DIV(ld&,cell_width&),column_nb_max&)
  '
  left&=DIV(SUB(ld&,MUL(column_nb&,cell_width&)),2)
  FOR i&=1 TO column_nb&
    column_x&(i&)=ADD(ADD(xd&,left&),MUL(PRED(i&),cell_width&))
    IF _B=4
      column_color&(i&)=15
    ELSE IF _B>0
      column_color&(i&)=78
    ELSE
      column_color&(i&)=1
    ENDIF
    column_color_add&(i&)=-1
  NEXT i&
  '
  IF column_percent! AND column_active_nb&>0
    column_active_nb&=INT(DIV(MUL(column_active_nb&,column_nb&),100))
  ENDIF
  '
  IF column_active_nb&=0
    FOR i&=1 TO column_nb&
      column_active!(i&)=TRUE
    NEXT i&
  ELSE
    cpt&=0
    WHILE cpt&<column_active_nb&
      col&=@get_random_column
      IF column_active!(col&)=FALSE
        column_active!(col&)=TRUE
        INC cpt&
      ENDIF
    WEND
  ENDIF
  '
  row_h&=SUB(hd&,SUCC(cell_height&))
  '
RETURN
> PROCEDURE close_win
  IF win!
    ~WIND_CLOSE(hand_win&)
    ~WIND_DELETE(hand_win&)
    win!=FALSE
    aff!=FALSE
  ENDIF
RETURN
> PROCEDURE clear_win
  ~VSF_COLOR(1)
  ~VS_CLIP(1,xd&,yd&,ADD(xd&,PRED(ld&)),ADD(yd&,PRED(hd&)))
  ~V_BAR(xd&,yd&,ADD(xd&,PRED(ld&)),ADD(yd&,PRED(hd&)))
  ~VS_CLIP(0,xd&,yd&,ADD(xd&,PRED(ld&)),ADD(yd&,PRED(hd&)))
RETURN
> PROCEDURE draw_win
  '
  column_i&=@get_random_activated_column
  '
  work_c&=column_x&(column_i&)
  work_x&=ADD(work_c&,PRED(cell_width&))
  work_y&=ADD(yd&,row_h&)
  '
  SET.SXYXY work_c&,yd&,work_x&,work_y&
  SET.DXYXY work_c&,ADD(yd&,cell_height&),work_x&,ADD(work_y&,cell_height&)
  ~VRO_CPYFM(3,scr_mfdb%,scr_mfdb%)
  '
  ~V_BAR(work_c&,yd&,ADD(work_c&,PRED(cell_width&)),ADD(yd&,PRED(cell_height&)))
  '
  ~VST_COLOR(@get_next_color(column_i&))
  ~V_GTEXT(work_c&,yd&,CHR$(@get_char))
  '
  ~GRAF_MKSTATE(gm_x&,gm_y&,gm_s&,gk_s&)
  IF BCONSTAT(2) OR gm_s&>0 OR gk_s&>0
    exit!=TRUE
  ENDIF
  '
RETURN
'
> FUNCTION get_random_column
  $F%
  RETURN MAX(1,MIN(SUCC(INT(RND*column_nb&)),column_nb_max&))
ENDFUNC
> FUNCTION get_random_activated_column
  $F%
  '
  rnd_col&=@get_random_column
  WHILE column_active!(rnd_col&)=FALSE
    rnd_col&=@get_random_column
  WEND
  '
  RETURN rnd_col&
ENDFUNC
> FUNCTION get_next_color(col_i&)
  $F%
  LOCAL col_n&
  '
  current_color&=column_color&(col_i&)
  IF @is_to_change
    IF column_color_add&(col_i&)<0
      column_color_add&(col_i&)=1
    ELSE
      column_color_add&(col_i&)=-1
    ENDIF
  ENDIF
  '
  IF _B=4
    ADD current_color&,column_color_add&(col_i&)
    IF current_color&=2
      column_color_add&(col_i&)=1
    ENDIF
    IF current_color&=15
      column_color_add&(col_i&)=-1
    ENDIF
    current_color&=MAX(2,MIN(current_color&,15))
  ELSE IF _B>4
    ADD current_color&,column_color_add&(col_i&)
    IF current_color&=16
      column_color_add&(col_i&)=1
    ENDIF
    IF current_color&=78
      column_color_add&(col_i&)=-1
    ENDIF
    current_color&=MAX(16,MIN(current_color&,78))
  ELSE
    IF column_color_add&(col_i&)<0
      current_color&=0
    ELSE
      current_color&=1
    ENDIF
  ENDIF
  column_color&(col_i&)=current_color&
  '
  RETURN current_color&
ENDFUNC
> FUNCTION is_to_change
  $F%
  IF INT(RND*20)=9
    RETURN TRUE
  ENDIF
  RETURN FALSE
ENDFUNC
> FUNCTION get_char
  $F%
  LOCAL char|,value&
  '
  SELECT charset&
  CASE 0
    IF ODD(INT(RND*10))
      char|=48
    ELSE
      char|=49
    ENDIF
  CASE 1
    value&=INT(RND*16)
    IF value&<10
      char|=BYTE(ADD(value&,16))
    ELSE
      char|=BYTE(ADD(value&,55))
    ENDIF
  CASE 2
    value&=INT(RND*26)
    char|=BYTE(ADD(value&,65))
  CASE 3
    value&=INT(RND*16)
    char|=BYTE(ADD(value&,224))
  CASE 4
    value&=INT(RND*27)
    char|=BYTE(ADD(value&,194))
  ENDSELECT
  RETURN char|
ENDFUNC
'
> PROCEDURE restore_colors
  LOCAL tmp_c&,tmp_d&,col_r&,col_g&,col_b&
  '
  IF palette%>0
    FOR tmp_c&=0 TO 255
      tmp_d&=MUL(tmp_c&,6)
      col_r&=INT{ADD(palette%,tmp_d&)}
      col_g&=INT{ADD(palette%,ADD(tmp_d&,2))}
      col_b&=INT{ADD(palette%,ADD(tmp_d&,4))}
      ~VS_COLOR(tmp_c&,col_r&,col_g&,col_b&)
    NEXT tmp_c&
  ENDIF
RETURN
> PROCEDURE save_colors
  LOCAL tmp_c&,tmp_d&,col_r&,col_g&,col_b&
  '
  IF palette%>0
    FOR tmp_c&=0 TO 255
      ~VQ_COLOR(tmp_c&,0,col_r&,col_g&,col_b&)
      tmp_d&=MUL(tmp_c&,6)
      INT{ADD(palette%,tmp_d&)}=col_r&
      INT{ADD(palette%,ADD(tmp_d&,2))}=col_g&
      INT{ADD(palette%,ADD(tmp_d&,4))}=col_b&
    NEXT tmp_c&
  ENDIF
RETURN
> PROCEDURE set_colors
  LOCAL tmp_l&,tmp_n&
  '
  IF _B>4
    FOR tmp_n&=1 TO 63
      tmp_l&=MUL(SUB(63,tmp_n&),15)
      SELECT color&
      CASE 0
        ~VS_COLOR(ADD(15,tmp_n&),0,tmp_l&,0)
      CASE 1
        ~VS_COLOR(ADD(15,tmp_n&),0,0,tmp_l&)
      CASE 2
        ~VS_COLOR(ADD(15,tmp_n&),tmp_l&,0,0)
      CASE 3
        ~VS_COLOR(ADD(15,tmp_n&),tmp_l&,tmp_l&,tmp_l&)
      ENDSELECT
    NEXT tmp_n&
  ELSE IF _B=4
    FOR tmp_n&=1 TO 14
      tmp_l&=MUL(SUB(15,tmp_n&),60)
      SELECT color&
      CASE 0
        ~VS_COLOR(SUCC(tmp_n&),0,tmp_l&,0)
      CASE 1
        ~VS_COLOR(SUCC(tmp_n&),0,0,tmp_l&)
      CASE 2
        ~VS_COLOR(SUCC(tmp_n&),tmp_l&,0,0)
      CASE 3
        ~VS_COLOR(SUCC(tmp_n&),tmp_l&,tmp_l&,tmp_l&)
      ENDSELECT
    NEXT tmp_n&
  ENDIF
RETURN
'
> PROCEDURE v_hide_c
  IF naes!
    GHIDEM
  ELSE
    ~V_HIDE_C()
  ENDIF
RETURN
> PROCEDURE v_show_c
  IF naes!
    GSHOWM
  ELSE
    ~V_SHOW_C()
  ENDIF
RETURN
'
> FUNCTION mx_mask
  $F%
  IF MXALLOC(-1,0)=-32
    RETURN 0
  ELSE IF SYSCONF(-1)=-32
    RETURN 3
  ELSE
    RETURN -1
  ENDIF
ENDFUNC
> FUNCTION mxalloc(mxlen%,mxmode&)
  $F%
  IF mxalloc!
    RETURN MXALLOC(mxlen%,mxmode&)
  ENDIF
  RETURN MALLOC(mxlen%)
ENDFUNC
> PROCEDURE mxfree(mx_adr%)
  IF mx_adr%>0
    ~MFREE(mx_adr%)
  ENDIF
RETURN
