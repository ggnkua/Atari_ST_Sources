@database "CRESUS"
@options "+g -i -s +z -t2 -d12"
@author "Pierre TONTHAT"
@$VER: 1.2I
@subject "Cr‚sus documentation"

@node "cresus_start"
@title "Cr‚sus documentation"

@image CRESUS.IMG 1











          @{"Pr‚sentation" LINK "cresus_presentation"}
          @{"Aspects l‚gaux" LINK "cresus_legal"}

          @{"Installation and requis" LINK "cresus_install"}
          @{"Pr‚f‚rences" LINK "cresus_preferences"}
          @{"Raccourcis-clavier" LINK "cresus_key_shortcuts"}

        @{0U}Tutoriel :@{0}
          @{"Cr‚ation d'une base" LINK "cresus_creation"}
          @{"Outils" LINK "cresus_utils"}
          @{"Archivage" LINK "cresus_backup"}

          @{"Limitations" LINK "cresus_bogues"}
          @{"Historique" LINK "cresus_versions"}

          @{"Greetings" LINK "cresus_merci"}

          @{"Dev-doc" LINK "cresus_dev"} (English)



@endnode

@node "cresus_presentation"
@title "Cr‚sus documentation"
@{0U}                                                           Pr‚sentation@{0}

    Cr‚sus est un programme permettant de suivre vos comptes bancaires
    et de maŒtriser ainsi vos d‚penses. L'applicatif peut g‚rer plusieurs
    comptes, de plusieurs titulaires, sur une ou plusieurs banques,
    avec une monnaie de votre choix.

    Ce programme offre quelques facilit‚s, comme :
    ú une interface moderne et l'utilisation de fontes vectorielles
    ú la colorisation des mouvements, des montants et des affectations
    ú l'utilisation d'une monnaie annexe pour les conversions/‚quivalences
    ú les ‚critures automatiques d'op‚rations
    ú un calendrier (avec double-clic sur les champs date)
    ú etc
@image RENAISSA.IMG 50

    Ce programme est fourni par Renaissance, cod‚
    en GFA Basic par Rajah Lone, avec l'aide de
    Daroou.

@endnode


@node "cresus_legal"
@title "Cr‚sus documentation"
@{0U}                                                         Aspects l‚gaux@{0}

    Cr‚sus est maintenant un freeware.  
    
    Il est conseill‚ de faire autant de sauvegardes que possible, et de
    v‚rifier r‚guliŠrement la coh‚rence des donn‚es avec les comptes
    r‚els dans votre ou vos banques.

    Comme d'usage, nous d‚nions toute responsabilit‚ concernant les
    dysfonctionnements du programme sur vos donn‚es personnelles et,
    plus g‚n‚ralement, sur votre ordinateur. Nous faisons un maximum
    pour trouver et corriger tout bug, mais l'erreur reste humaine.

@endnode

@node "cresus_install"
@title "Cr‚sus documentation"
@{0U}                                             Installation and pr‚requis@{0}

    @{0U}Pr‚-requis :@{0}

    ú 2 Mo de RAM ou plus (la TT-RAM est exploit‚e)
    ú un disque dur est fortement conseill‚
    ú NVDI ou une autre VDI moderne est conseill‚e

    @{0U}Installation :@{0}

    > Si vous utilisez d‚j… Cr‚sus, ne remplacez que le PRG et RSC. Ajoutez
      … c“t‚ du fichier PRG, les fichiers BUB et HYP.
      Param‚trez le chemin pour le fichier ST-Guide et sauvez les options
      (mauvais nom de variable dans les anciens fichiers de configuration).

    Sinon :

    > Copiez l'ensemble de l'archive dans un dossier, sur la partition de
      votre choix.

    > R‚cup‚rez le fichier CRES_ICN.RSC dans le dossier GOODIES et
      utilisez cette icone pour votre bureau. Effacez ensuite le dossier
      GOODIES et son contenu.

    > Veillez … ce que la variable d'environnement $HOME soit d‚clar‚e
      dans votre systŠme d'exploitation. Par exemple, dans MAGX.INF :

      #_ENV HOME=C:\GEMSYS\HOME

    > Lancez Cr‚sus et allez dans les Options pour param‚trer les chemins,
      l'affichage, les fontes, le comportement de l'application...
      Vous pouvez visualiser les exemples de comptes, avec le mot de passe
      "atari"

      Vous pouvez enlever les exemples, en effa‡ant progressivement et dans
      l'ordre : les comptes, les mouvements et affectations, les titulaires
      et les banques. Il est conseill‚ de garder la table des monnaies.

      Pour aller plus vite, vous pouvez quitter Cr‚sus, et aller dans
      le dossier ACCOUNTS, effacer tous les fichiers, puis dans le dossier
      SHARED, effacer tous les fichiers sauf le CURRENCY.CDB.

    > Relancez Cr‚sus, et personnalisez les comptes … votre besoin.

      Cr‚ez dans l'ordre : monnaie, banque(s), titulaire(s) de compte,
      compte(s), mouvements, affectations. Vous pouvez ensuite entrer
      des op‚rations aprŠs cela.

    > Pour avoir documentation de Cr‚sus et bulles d'aide, il faut installer
      ST-Guide et BubbleGEM. PriŠre de se r‚f‚rer … leur documentations.
      Il faut aussi d‚clarer leurs variables d'environnement, par exemple
      dans MAGX.INF :

      #_ENV BUBBLEGEM=C:\GEMSYS\BUBBLE\BUBBLE.APP
      #_ENV STGUIDE=C:\ST-GUIDE.ACX


    > Pour archiver les fichiers de la base, le programme a besoin
      d'une librairie nomm‚e DEFLATE.LDG et du cookie LDGM pour la
      trouver dans le systŠme.

      T‚l‚chargez DEFLATE.ZIP et installer les fichiers :

      C:\AUTO\LDG.PRG (ou dans votre dossier AUTO)
      C:\GEMSYS\LDG\DEFLATE.LDG (ou votre dossier LDG)

@endnode

@node "cresus_preferences"
@title "Cr‚sus documentation"
@{0U}                                                            Pr‚f‚rences@{0}

    Les pr‚f‚rences sont regroup‚es dans le menu Options.
    On distingue plusieurs types :

    ú @{"Chemins" LINK "cresus_pref_path"}
    ú @{"Date et heure" LINK "cresus_pref_clock"}
    ú @{"Fontes" LINK "cresus_pref_font"}
    ú @{"Affichage" LINK "cresus_pref_display"}
    ú @{"Divers" LINK "cresus_pref_misc"}

    A noter que la position, taille et ouverture des fenˆtres,
    ainsi que les choix de l'aide (alertes et bulles d'aide)
    sont sauv‚s, avec toutes ces options, dans le fichier
    de configuration, si possible dans le r‚pertoire $HOME.

@endnode

@node "cresus_pref_path"
@title "Cr‚sus documentation"
@{0U}                                                            Pr‚f‚rences@{0}

    @{0U}Doumentation@{0}
      Indiquez chemin et nom complet de la doc ST-Guide

    @{0U}Fichiers communs@{0}
      Le chemin doit correspondre au dossier SHARED, dans lequel seront
      stock‚s les fichiers JOB.CDB, CURRENCY.CDB, BANK.CDB, ACCOUNT.CDB,
      PEOPLE.CDB, STREAM.CDB, BUDGET.CDB, etc.

    @{0U}Fichiers de compte@{0}
      Le chemin doit correspondre au dossier ACCOUNTS, dans lequel
      seront plac‚s les fichiers de comptes.

    @{0U}Dossier d'archivage@{0}
      La fonction Control+B regroupe les fichiers et les comprime via
      un utilitaire fourni dans le dossier HELPERS.
      Le dossier d'archivage correspond au dossier o— seront plac‚s
      les back-up au format *.ZIP.

    @{0U}Groupes de filtres@{0}
      Le chemin doit correspondre au dossier FILTERS, dans lequel
      seront plac‚s les filtres sauv‚s et … recharger selon les
      besoins.

@endnode

@node "cresus_pref_clock"
@title "Cr‚sus documentation"
@{0U}                                                            Pr‚f‚rences@{0}

    @{0U}Aujourd'hui le...@{0}
      La date du jour est propos‚e par d‚faut lors de l'entr‚e d'une
      nouvelle op‚ration sur un compte. Vous pouvez entrer la date
      si celle-ci est erron‚e.
      Comme dans tous les champs date, un double-clic sur le champ
      permet l'ouverture d'un calendrier, et le choix d'une date.

    @{0U}Fixer … chaque d‚marrage@{0}
      Si votre ordinateur ne conserve pas l'heure (pas d'horloge
      sauv‚e lors de l'extinction de la machine), alors est donn‚e
      la possibilit‚ de corriger la date et heure … chaque lancement
      de Cr‚sus.

@endnode

@node "cresus_pref_font"
@title "Cr‚sus documentation"
@{0U}                                                            Pr‚f‚rences@{0}

    Cr‚sus permet d'utiliser une fonte vectorielle (NVDI requis)
    et/ou une … espacement fixe (GDOS au minimum) au lieu de la
    fonte systŠme.

    Vous pouvez ‚galement r‚gler la taille de cette fonte, qui
    sera utilis‚e dans pour l'affichage dans les diff‚rentes tables.

@endnode

@node "cresus_pref_display"
@title "Cr‚sus documentation"
@{0U}                                                            Pr‚f‚rences@{0}

    Le formulaire est divis‚ en diff‚rentes rubriques, qui concernent
    l'aspect g‚n‚ral et l'affichage des champs dans les diff‚rentes
    tables.

    A noter que pour la table des op‚rations, l'option List‚ inversement
    (les derniŠres op‚rations sont plac‚es en haut) n'est effectif
    qu'au prochain red‚marrage de Cr‚sus. Cette option n‚cessite, de
    plus, une machine puissante (des blocs m‚moire entiers doivent
    ˆtre d‚plac‚s).

@endnode

@node "cresus_pref_misc"
@title "Cr‚sus documentation"
@{0U}                                                            Pr‚f‚rences@{0}

    Sont regroup‚es ici certaines options permettant de modifier
    le comportement du programme.

    @{0U}Ouvrir le dernier compte au d‚marrage@{0}
      Si un compte ‚tait ouvert lorsque Cr‚sus a ‚t‚ quitt‚, alors
      ce compte sera automatiquement ouvert au prochain lancement.

    @{0U}Ajouter des op‚rations en continue@{0}
      La fenˆtre d'‚dition d'une op‚ration ne sera pas ferm‚e aprŠs
      l'ajout d'une op‚ration pr‚c‚dente, mais restera en premier
      plan, avec mes champs remis … z‚ro.

    @{0U}Sauver la configuration en quittant@{0}
      Toutes les options, ainsi que le type d'Aide, et les
      position/taille/ouverture des fenˆtres sont automatiquement
      sauv‚s dans le fichier de configuration lorsque Cr‚sus est
      quitt‚.

    @{0U}Imprimer via GDOS ou compatible@{0} (type NVDI)
      Le programme utilisera l'impression de qualit‚ au lieu d'envoyer
      des caractŠres bruts vers l'imprimante (mode GEMDOS).
      Le format utilise une feuille A4 (europ‚en) ou Lettre (am‚ricain)

    @{0U}Alerte si la m‚moire devient rare@{0}
      Le programme surveille toutes les dizaines de secondes ce qu'il
      reste de RAM et affiche une alerte s'il juge qu'il n'y en aura
      plus assez pour travailler en toute s‚curit‚.

@endnode

@node "cresus_key_shortcuts"
@title "Cr‚sus documentation"
@{0U}                                                    Raccourcis-clavier @{0}

  @{0U}Partout@{0}

    Control+I : informations sur le programme ou modifier une op‚ration
    Control+Q : quitter le programme
    Control+U : ferme la fenˆtre

    sauf si une fenˆtre d'‚dition est ouverte en avant plan :

    Control+S : sauver les modifications
    Control+B : faire un bakcup des donn‚es
    Control+J : fenˆtre des automatismes
    Control+F : fenˆtre de recherche d'une op‚ration

    Help : ouvrir la documentation ST-Guide

    F1 : table des monnaies
    F2 : table des banques
    F3 : table des titulaires de comptes
    F4 : table des comptes
    F5 : table des mouvements
    F6 : table des affectations
    F7 : table des op‚rations

  @{0U}Dans une fenˆtre affichant une table@{0}

    Control+W : faire un full sur la fenˆtre ou l'inverse
    Insert : ajouter un enregistrement
    Control+Del : effacer l'enregistrement s‚lectionn‚
    ClrHome : aller en haut de la liste
    Shift+ClrHome : aller en bas de la liste
    FlŠches haut ou bas : se d‚placer dans les enregistrements, un par un
    Shift+flŠches haut ou bas : se d‚placer page par page

  @{0U}Dans la fenˆtre d'enregistrement des op‚rations@{0}

    Control+Return : enregistrer l'op‚ration
    Control+P : pointer ou d‚pointer l'op‚ration
    Control+(F1 … F10) : s‚lectionner le mouvement parmi les 10 premiŠres
    Shift+Control+(F1 … F10) : s‚lectionner le compte destinataire si virement
    Alternate+(F1 … F10) : s‚lectionner l'affectation parmi les 9 premiŠres
    Shift+Alertnate+(F1 … F10) : s‚lectionner parmi les affectations suivantes

@endnode

@node "cresus_creation"
@title "Cr‚sus documentation"
@{0U}                                             Cr‚ation d'une base Cr‚sus@{0}

    Une base Cr‚sus est regroupement de diff‚rentes tables qui
    correspondent elles-mˆmes … des fichiers de type *.CDB.

    Dans le menu "Tables" :
    - les monnaies
    - les banques
    - les titulaires (personnes poss‚dant au moins un compte)
    - les comptes
    - les mouvements (ou types d'op‚rations)
    - les affectations
    - les op‚rations

    Il y a une hi‚rarchie : les ‚l‚ments doivent ˆtre cr‚‚s d'abord
    dans la table des monnaies, puis des banques, puis des titulaires,
    etc.

    Chaque table correspond … une fenˆtre. L'insertion d'un nouvel ‚l‚ment
    dans une table se fait avec le bouton '+'. La modification ou la
    suppression de cet ‚l‚ment avec le bouton '?'. Les ‚l‚ments peuvent
    ˆtre tri‚s et ordonn‚s : un ‚l‚ment en haut de la liste sera trouv‚
    plus rapidement. Cela peut am‚liorer la vitesse d'affichage si les
    ‚l‚ments les plus fr‚quents se trouvent en haut.

    @{0U}1) Les monnaies@{0}

      La premiŠre monnaie est obligatoirement celle de r‚f‚rence. Les
      monnaies suivantes devront ˆtre d‚clar‚es avec un taux de conversion
      par rapport … celle de r‚f‚rence.
      Par exemple, l'Euro pour r‚f‚rence, et les anciens Nouveaux Francs
      Fran‡ais, avec un taux fixe d'environ 6.56.
      Si la monnaie varie par rapport … celle de r‚f‚rence, alors il faudra
      indiquer 'flottant'. Ce taux variable sera demand‚ pour r‚glage …
      chaque ouverture d'une table d'op‚rations.

      La monnaie de r‚f‚rence doit ˆtre obligatoirement cr‚‚e.

    @{0U}2) Les banques@{0}

      Indiquer les coordonn‚es de la banque.
      Une banque doit ˆtre cr‚‚e au minimum.

    @{0U}3) Les titulaires@{0}

      Indiquer la personne physique, susceptible de poss‚der un ou
      plusieurs comptes bancaires.
      A moins un titulaire doit ˆtre cr‚‚.

    @{0U}4) Les comptes@{0}

      Il est n‚cessaire d'avoir au moins une monnaie de r‚f‚rence, une
      banque et un titulaire pour pouvoir cr‚er un compte en banque.

      Il est possible d'avoir un compte avec double monnaies, une
      principale et une annexe : l'utilisateur pourra entrer le montant
      de chaque op‚ration selon l'une ou l'autre monnaie, le tout sera
      calcul‚ selon des taux de conversions pr‚alablement indiqu‚s.

      Une alerte peut ˆtre d‚clench‚e si le solde du compte est en
      dessous d'une valeur critique.

      Un nom de fichier est obligatoire : il servira … ‚crire un fichier
      contenant toutes les op‚rations de ce compte, dans le dossier
      ACCOUNTS, au lieu de SHARED.

    @{0U}5) Les mouvements@{0}

      Ou types d'op‚rations. Indiquer s'ils sont d‚biteurs (en n‚gatif
      sur le compte) ou cr‚diteurs (en positif sur le compte).
      La couleur permet d'afficher le libell‚s ou les codes des mouvements
      dans la table des op‚rations, et d'am‚liorer ainsi la lisibilit‚.

      Si le mouvement est une ‚mission de chŠque, le programme g‚rera
      un champ sp‚cial correspondant au num‚ro de chŠque, et calculera
      automatiquement le num‚ro, en fonction du dernier chŠque ‚mis.

      Si le mouvement est un virement de compte … compte, le programme
      donnera la possibilit‚ d'indiquer le compte destinataire, pour
      ‚crire automatiquement l'op‚ration inverse.
      Vous devrez aussi indiquer un mouvement inverse (mouvement
      cr‚diteur) via le s‚lecteur.

      @{0B}Attention :@{0} les op‚rations de compte … compte sont ensuite
      totalement ind‚pendantes. Modifier l'une ne modifie pas l'autre
      automatiquement.

    @{0U}6) Les affectations@{0}

      A titre indicatif, une affectation servira … cat‚goriser une
      op‚ration et permettre de faire des statistiques.
      La couleur sera employ‚e au niveau de l'affichage des op‚rations.

    @{0U}7) Les op‚rations@{0}

      Date, mouvement, montant sont n‚cessaires … l'insertion d'une
      op‚ration. L'affectation et les notes (commentaires) ne sont
      pas obligatoires, mais conseill‚s.
      Le pointage correspond au fait que la banque (en vrai) a enregistr‚
      et connait l'op‚ration. Ceci permet de rapprocher le montant du
      solde point‚ vers le solde r‚el.

      La table des op‚rations permet quelques manipulations suppl‚mentaires
      par rapport aux autres tables :
      - le s‚lection multiple (clic souris et shift)
      - le pointage/d‚pointage … la vol‚e
      - la suppression sans passer par la fenˆtre de modifications
      - la modification … la vol‚e, sur plusieurs op‚rations s'il y a
      eu s‚lection multiple.
      - l'affichage des soldes
      - l'ouverture des op‚rations selon les diff‚rents comptes : une
      sauvegarde ‚ventuelle et un chargement sur disque se fait.

@endnode

@node "cresus_utils"
@title "Cr‚sus documentation"
@{0U}                                                                 Outils@{0}

    @{0U}1) Filtres@{0}

      Un certain nombre de filtres peuvent ˆtre cr‚‚s et modifi‚s, voire
      activ‚s et d‚sactiv‚s.
      Pour activer le filtrage sur les op‚rations, cliquer sur le bouton
      ''. Les op‚rations ne r‚pondant pas aux critŠre de filtrage seront
      affich‚es en gris‚. Le solde correspondant … la somme des montants
      non rejet‚s sera affich‚ en bas de la fenˆtre des filtres.

      On peut ainsi, par exemple, calculer le solde de toutes les
      op‚rations pour une affectation pr‚cise, comme le budget essence
      ou le poste t‚l‚communications.

      Astuce : tout s‚lectionner lorsque le filtrage est activ‚
      s‚lectionne toutes les op‚rations qui n'ont pas ‚t‚ rejet‚es.

      Attention : il n'est pas possible de modifier les filtres pendant
      que le filtrage est actif.

      L'ensemble des filtres peut ˆtre sauvegard‚ dans un fichier *.FIL
      puis recharg‚ ensuite.

    @{0U}2) Automatismes@{0}

      Les op‚rations automatiques sont d‚clar‚es … ce niveau, avec
      diff‚rentes options comme la confirmation avant insertion,
      sa d‚sactivation ou sa suppression aprŠs effet, la r‚p‚titivit‚...

      Astuce : la cr‚ation d'un nouvel automatisme se fera selon les
      caract‚ristiques de celui d‚j… s‚lectionn‚.

    @{0U}3) Recherche@{0}

      La recherche se fait sur les op‚ration du compte ouvert, selon
      les critŠres indiqu‚s. Si une op‚ration a ‚t‚ trouv‚e, elle sera
      s‚lectionn‚e. On peut passer … l'op‚ration suivante, l'ancienne
      ne sera pas d‚selectionn‚e.

@endnode

@node "cresus_backup"
@title "Cr‚sus documentation"
@{0U}                                                              Archivage@{0}

    Le programme utilise maintenant une librairie LDG nomm‚e DEFLATE.LDG

    Le cookie LDGM doit ˆtre pr‚sent, donc LDG.PRG lanc‚ en AUTO, et
    DEFLATE.LDG dans le dossier LDG.

    Il est n‚cessaire d'avoir valid‚ la base, c'est … dire, sauvegard‚
    les derniers changements.

    Le fichier d'archive produit est un zip dont le nom comporte la
    date du jour.

@endnode

@node "cresus_bogues"
@title "Cr‚sus documentation"
@{0U}                                                    bugs et limitations@{0}

  ú Si Deflate Error pendant l'archivage, veillez bien … ce qu'il y
    ait suffisemment de m‚moire disponible (environ 800 Ko de libre).
    Sinon, il faut zipper … la main.

  Merci de rapporter tout bug … ptonthat@club-internet.fr

@endnode

@node "cresus_versions"
@title "Cr‚sus documentation"
@{0U}                                                             Historique@{0}

  ú @{0U}1.2I@{0}
  - fix: index d'array manquant lors de l'allocation m‚moire de larges blocs.

  ú @{0U}1.2H@{0}
  - fix: les montants totaux n'‚taient pas  jour au d‚marrage si les
         op‚rations automatiques ont ‚t‚ ‚crites au lancement.
  - add: r‚ordonnement manuel dans la liste des op‚rations automatiques.
  - fix: s‚lection automatique sur la nouvelle op‚ration automatique.
  - fix: modifications esth‚tiques sur l'interface (dont les op‚ration auto).
  - fix: validation/sauvegarde depuis n'importe quelle fenˆtre.
  - add: pop-up d'action sur les op‚rations ouvert proche du curseur si
         clic droit.
  - fix: les montants totaux en monnaie annexe ne sont plus affich‚s dans
         la toolbar si la colonne est masqu‚e.
  - fix: les d‚tails d'une op‚ration n'‚tait pas updat‚s aprŠs un (d‚)pointage
         via le menu pop-up sur la liste des op‚rations.
  - fix: recalcul du montant total en monnaie annexe lors du chargement pour
         supprimer certaines erreurs de calcul accumul‚es.

  ú @{0U}1.2G@{0}
   Correctifs :
   - Control+Pav‚ num‚rique causait certaines effet comme Quitter.
   - TT-RAM+ST-RAM libre dans la fenˆtre d'informations.
   - les montants totaux dans la table des op‚rations n'‚taient parfois 
     pas actualis‚s.
   - erreurs si CRESUS.RSC n'est pas trouv‚.

  ú @{0U}1.2F@{0}
   - Toolbar dans la table des op‚rations, le bouton '?' est chang‚ en 
     'Modifier' dans le menu pop-up '~'.
   - Control+I : si une ou plusieurs op‚rations sont s‚lectionn‚es alors
                 ouvre la fenˆtre de modification, sinon informations sur 
                 le programme.

  ú @{0U}1.2E@{0}
   Correctifs :
   - possible plantage au d‚marrage, … la lecture du fichier de pr‚f‚rences.
   - masquage/affichage du curseur souris avec les fonctions AES plut“t que VDI.

  ú @{0U}1.2D@{0}
   - utilise pr‚f‚rentiellement Ssystem() pour retrouver les cookies.
   - DEFLATE.LDG est externalis‚, merci de le r‚cup‚rer … part, dans
      sa propre archive.

  ú @{0U}1.2C@{0}
   - correctif pour l'affichage en fenˆtre iconifi‚e sous MyAES.
   - r‚glage de l'heure : la touche Return fonctionne.
   - corrections visuelles dans le RSC pour XaAES.

  ú @{0U}1.2B@{0}
   - adaptations pour le DEFLATE.LDG version 1.2.7
   - modifications visuelles dans le RSC pour XaAES.

  ú @{0U}1.2@{0}
   - compil‚ avec la librairie GFA de Lonny Pursell, avec cibles 68000 
     et ColdFire.
   - composants flŠches des fenˆtres maintenant actifs sous XaAES.
   - r‚‚criture de la fonction de chargement du fichier de pr‚f‚rences 
     et de chargement du presse-papier.
   - nom d'application plus joli pour les barres de tƒches.

  ú @{0U}1.1B@{0}
   + passage du status shareware au freeware : la boŒte de dialogue bloquante
     pour les non enregistr‚s est supprim‚e au d‚marrage.
   - correctifs :
     - au d‚marrage, du lancemement de BubbleGEM, qui pouvait planter sous MiNT.
     - plantage sous MiNT ('chemin non trouv‚') aprŠs l'appel … la documentation ST-Guide.
     - lors de la validation des op‚rations : les fichiers de base ‚taient bien sauv‚s, mais
        un des fichiers n'‚tait pas topp‚ comme tel, d'o— un rappel inutile … la validation
        au moment de quitter.

  ú @{0U}1.1@{0}
    - correction de la corruption au niveau des mouvements
      (d‚synchronisation entre STREAM.CDB et STREAM2.CDB si l'on
      cr‚ait/effa‡ait un mouvement, ou que l'on le d‚pla‡ait dans
      la liste)
    - correction d'un possible crash lors de la cr‚ation d'un mouvement
    + $F% au lieu de $F& : vitesse am‚lior‚e (visible sur ST et Falcon)
    + archivage utilisant DEFLATE.LDG et MEM.LDG au lieu des zippeurs
      habituellement fournis dans le dossier HELPERS.
      - plus de problŠme de chemins trop longs
      - plus de crash de ZIPJR.TTP sur 060
      - les filtres sont aussi sauv‚s
      - utiliser le unzip de InfoZIP ou KK Commander pour d‚zipper
      - n‚cessite environ 800 Ko de libre (sinon une Deflate Error)
      - les fichiers n‚cessaires pour l'installation se trouvent
        dans le dossier GOODIES

  ú @{0U}1.0C@{0}
    - correction du crash au lancement sous MiNT quand le mode
      Protection M‚moire est activ‚.

  ú @{0U}1.0B@{0}
    - ajustements :
      - des fichiers avec nom bizarre dans le dossier ACCOUNTS ne
        sont plus g‚n‚r‚s par erreur. S'ils existent, merci de les
        effacer.
      - pour les mouvements avec virement, veuillez indiquer le
        mouvement inverse (si virement d‚biteur, alors s‚lectionner
        virement cr‚diteur). Les libell‚s seront ainsi corrects et
        l'affichage modifi‚ ("<- CODE" dans les notes).
      - si modification des caract‚ristiques d'un compte, les montants
        ‚taient effac‚s, ce n'est plus le cas, mais attention, ces
        montants ne sont qu'indicatifs : ils sont remis … jour
        en chargeant la table des op‚rations correspondante.

  ú @{0U}1.0@{0} (crau04 party release)
    - correction bug : plantage si NVDI ou GDOS compatible absent.
    + gestion de ZIP.TTP possible … la place du ZIPJR.TTP incompatible 060.
    + m‚moire libre restante, et alerte possible si la m‚moire devient
      insuffisante.
    + calcul des soldes pour les filtres (en bas de la fenˆtre).
    + le jeu de filtres peut ˆtre sauv‚/recharg‚ (indiquerle dossier
      pour ces fichiers *.CDF).
    + dans la fenˆtre d'‚dition, les flŠches sont pr‚sentes pour
      aller d'une op‚ration … la suivante (elles ‚taient d‚j… l…
      si plusieurs op‚rations ‚taient s‚lectionn‚es … plusieurs)
    + ajouts dans cette documentation.

  ú @{0U}b‚ta8@{0}
    - correction bugs :
      - erreur d'affichage des centimes en n.100 (pour les soldes)
      - lors de la confirmation d'une op‚ration automatique,
        les changements (date, pointage, etc) n'affectent que
        cette op‚ration. pas les suivantes.
        (Merci … Strider)
      - la taille de fontes pour bulle d'aide n'est plus chang‚e
    + filtrage des op‚rations (astuce, le "Tout s‚lectionner"
      ne s‚lectionne que celles restantes)
    + impression des op‚rations (voir dans les "Divers")
      - GDOS ou compatible (par d‚faut) or GEMDOS
      - A4 (par d‚fault) ou US-letter
      - vers l'imprimante ou le presse-papier (metafile *.GEM ou *.TXT)
    + exportation des op‚rations vers un fichier texte
      (champs s‚par‚s par TAB, fin de ligne en CR+LF)

  ú @{0U}b‚ta7@{0}
    - correction bugs :
      - plantages au lancement, si op‚ration automatique
        (effacement d'une op‚ration aprŠs utilisation,
        demande confirmation pour une op‚ration qui n'est pas
        un transfert compte … compte)
      - corrections au niveau de la gestion des ascenseurs
        (plus de s‚lection sauvage, ni d'ouverture de dialogues)
      - suppression d'une op‚ration via le menu popup "~" :
        dire "non" n'efface plus la s‚lection.
    - ajustements :
      - la date de naissance n'est plus obligatoire
      - ":" au lieu de "h" pour les heures au format anglais
      - correction des flags d'allocation m‚moire partag‚e
    (Merci … Olivier et Derryck)

  ú @{0U}b‚ta6@{0}
    - correction bugs :
      - plantage juste aprŠs la sauvegarde des op‚rations
      - plantage al‚atoire lors de l'ouverture fenˆtre pour ajouter
        d'une op‚ration
      - erreur d'affichage dans les champs date s'ils sont trop remplis
      - nom de l'archive de backup incorrect (problŠme de date)
      - les automatismes n'‚taient pas sauv‚s dans l'archive de backup
      - problŠme d'affichage de l'affectation dans une op‚ration automatique
    + scrolling vertical am‚lior‚
    + bulles d'aide
    + raccourcis-clavier
    + documentation ST-Guide
    + lors de la cr‚ation d'une op‚ration automatique, la nouvelle
      entr‚e est 'cr‚‚e comme', si une autre ‚tait s‚lectionn‚e
    + les derniŠres op‚rations sont affich‚es … l'ouverture du compte
      (positionnement vertical correct)

  ú @{0U}b‚ta5@{0}
    - correction bugs :
      - arrondissement des montants (erreurs sur centimes)
      - affichage mauvais si changement de la date d'op‚ration
      - marge gauche pour les pop-ups
    + gestion TT-RAM
    + champ ‚ditable pour les dates peut ˆtre format‚ selon l'affichage.
    + ordre affichage des op‚ration peut ˆtre invers‚ (n‚cessite
      un red‚marrage du programme)
    + possible sauvegarde automatique de la configuration en quittant
    + ‚criture sur compte destinataire si l'op‚ration est un virement
     (attention, les ‚critures ne sont pas li‚es)
    + incr‚mentation automatique du num‚ro de chŠque, selon le dernier
      num‚ro.
    + menu rapide sur les op‚ration : suppression rapide, pointage ou
      d‚pointage, gris‚ ou non selon la s‚lection
    + calendrier (double clic sur les champs ‚ditables pour les dates)
    + fonction de recherche sur une op‚ration (du compte ouvert)
    + op‚rations automatiques

    Merci … Olivier VANONI, Cyril 'Bibou' LEFEBVRE,
            Jean-Marc STOCKLAUSEN, Derryck CROKER

  ú @{0U}b‚ta4@{0}
    + archivage (exp‚rimental, si quelqu'un faisait une ZIP en LDG ?)
    + ic“nes pour le bureau
    - changement du formulaire d'‚dition d'un compte
    - corrections de bugs dont
      - d‚calage des colonnes (Merci Pascal RICARD)
      - heure non valide (Merci Jean-Marc et cicile)
      - $HOME sur partition MiNT (coucou STrider :))
    - divers

  ú @{0U}b‚ta3@{0}
    + formulaire d'enregistrement et cl‚
    + mots de passe crypt‚s
    + nouvelles options d'affichage et diverses
    + s‚lection multiple des op‚rations (+Shift)
    + ouverture de la fenˆtre d'‚dition avec double-clic
    + redraws pour s‚l‚ction plus rapides
    - correction de bugs (merci … Jean-Marc STOCKLAUSEN, Dominique AUSSANT)

  ú @{0U}b‚ta2@{0}
    * premiŠre version publique

@endnode


@node "cresus_merci"
@title "Cr‚sus documentation"
@{0U}                                                       Megagreetings to@{0}

  to Claude ATTARD,
     who teached me to code in GEM in his articles

  to Daroou / Renaissance aka Jean-Marc STOCKLAUSEN
     an old friend, met during the Dungeon GEM adventure ;)

  thanks to Derryck CROKER, Olivier VANONI, Cyril 'Bibou' LEFEBVRE,
            Strider/mjjprod, Cooper/Paradize, cicile+fabounio/TripleA,
            Jace/STK, Rix, AmigaLyon dudes and people on ircnet
            #atari.fr and #atariscne

@endnode

@node "cresus_dev"
@title "Cr‚sus dev-documentation"

@image ANALYSE.IMG 2


                                   @{"*" LINK "cresus_structure_type"}               @{"*" LINK "cresus_structure_category"}
      @{"*" LINK "cresus_structure_currency"}



      @{"*" LINK "cresus_structure_bank"}                       @{"*" LINK "cresus_structure_account"}

                                                 @{"*" LINK "cresus_structure_transaction"}

      @{"*" LINK "cresus_structure_holder"}



  -> @{"Jobs" LINK "cresus_structure_job"}
  -> @{"Date" LINK "cresus_structure_date"}

@endnode

@node "cresus_structure_currency"
@title "Cr‚sus dev-documentation"

  Table: currencies
  Structure length: 52 bytes
  File: SHARED\CURRENCY.CDB
  Code: @{"*" LINK "cresus_structure_currency_code"}

  @{0U}Offset   Code          Name                         Field@{0}
  +0       INO_CUR       Internal number              INT -> 2 bytes (1 -> 32000)
  +2       CLIB_CUR      Currency name                CHAR -> 32 bytes max + nullbyte
  +36      CCOD_CUR      Code                         CHAR -> 3 bytes max + nullbyte
  +40      CCHR_CUR      Symbol                       CHAR -> 1 byte max + nullbyte
  +42      LREF_CUR      Reference flag               BYTE -> 1 = TRUE, 0 = FALSE
  +43      LVAR_CUR      Floating flag (to reference) BYTE -> 1 = TRUE, 0 = FALSE
  +44      FCONVERT_CUR  Rate exchande (to reference) FLOAT -> 8 bytes

@endnode

@node "cresus_structure_currency_code"
@title "Cr‚sus dev-documentation"

PROCEDURE cur_set_number(cur_ptr%,number&)
  INT{cur_ptr%}=number&
RETURN
FUNCTION cur_get_number(cur_ptr%)
  $F&
  RETURN INT{cur_ptr%}
ENDFUNC
PROCEDURE cur_set_wording(cur_ptr%,wording$)
  CHAR{ADD(cur_ptr%,2)}=TRIM$(LEFT$(wording$,32))
RETURN
FUNCTION cur_get_wording$(cur_ptr%)
  IF cur_ptr%>0
    RETURN CHAR{ADD(cur_ptr%,2)}
  ELSE
    RETURN ""
  ENDIF
ENDFUNC
PROCEDURE cur_set_code(cur_ptr%,code$)
  CHAR{ADD(cur_ptr%,36)}=UPPER$(TRIM$(LEFT$(code$,3)))
RETURN
FUNCTION cur_get_code$(cur_ptr%)
  IF cur_ptr%>0
    RETURN CHAR{ADD(cur_ptr%,36)}
  ELSE
    RETURN ""
  ENDIF
ENDFUNC
PROCEDURE cur_set_symbol(cur_ptr%,symbol$)
  CHAR{ADD(cur_ptr%,40)}=LEFT$(symbol$)
RETURN
FUNCTION cur_get_symbol$(cur_ptr%)
  RETURN CHAR{ADD(cur_ptr%,40)}
ENDFUNC
PROCEDURE cur_set_reference(cur_ptr%,reference!)
  IF reference!
    BYTE{ADD(cur_ptr%,42)}=1
  ELSE
    BYTE{ADD(cur_ptr%,42)}=0
  ENDIF
RETURN
FUNCTION cur_is_reference(cur_ptr%)
  $F!
  IF BYTE{ADD(cur_ptr%,42)}
    RETURN TRUE
  ELSE
    RETURN FALSE
  ENDIF
ENDFUNC
PROCEDURE cur_set_conversion(cur_ptr%,conversion)
  FLOAT{ADD(cur_ptr%,44)}=conversion
RETURN
FUNCTION cur_get_conversion(cur_ptr%)
  $F#
  RETURN FLOAT{ADD(cur_ptr%,44)}
ENDFUNC
PROCEDURE cur_set_floating(cur_ptr%,floating!)
  IF floating!
    BYTE{ADD(cur_ptr%,43)}=1
  ELSE
    BYTE{ADD(cur_ptr%,43)}=0
  ENDIF
RETURN
FUNCTION cur_is_floating(cur_ptr%)
  $F!
  IF BYTE{ADD(cur_ptr%,43)}
    RETURN TRUE
  ELSE
    RETURN FALSE
  ENDIF
ENDFUNC

@endnode

@node "cresus_structure_bank"
@title "Cr‚sus dev-documentation"

  Table: banks
  Structure length: 338 bytes
  File: SHARED\BANK.CDB
  Code: @{"*" LINK "cresus_structure_bank_code"}

  @{0U}Offset   Code          Name              Field@{0}
  +0       INO_BNK       Internal number   INT -> 2 bytes (1 -> 32000)
  +2       CLIB_BNK      Name              CHAR -> 32 bytes max + nullbyte
  +36      CCOD_BNK      Code              CHAR -> 8 bytes max + nullbyte
  +46      COFF_BNK      Office            CHAR -> 32 bytes max + nullbyte
  +80      CADR_BNK      Street            CHAR -> 32 bytes max + nullbyte
  +114     CCODPOST_BNK  Zip code          CHAR -> 16 bytes max + nullbyte
  +132     CVILLE_BNK    City              CHAR -> 32 bytes max + nullbyte
  +166     CPAYS_BNK     Country           CHAR -> 16 bytes max + nullbyte
  +184     CHTTP_BNK     Website           CHAR -> 48 bytes max + nullbyte
  +234     CMAIL_BNK     Email             CHAR -> 48 bytes max + nullbyte
  +284     CTEL1_BNK     Phone number 1    CHAR -> 16 bytes max + nullbyte
  +302     CTEL2_BNK     Phone number 2    CHAR -> 16 bytes max + nullbyte
  +320     CFAX_BNK      Telecopy          CHAR -> 16 bytes max + nullbyte

@endnode

@node "cresus_structure_bank_code"
@title "Cr‚sus dev-documentation"

PROCEDURE bnk_set_number(bnk_ptr%,number&)
  INT{bnk_ptr%}=number&
RETURN
FUNCTION bnk_get_number(bnk_ptr%)
  $F&
  RETURN INT{bnk_ptr%}
ENDFUNC
PROCEDURE bnk_set_wording(bnk_ptr%,wording$)
  CHAR{ADD(bnk_ptr%,2)}=TRIM$(LEFT$(wording$,32))
RETURN
FUNCTION bnk_get_wording$(bnk_ptr%)
  IF bnk_ptr%>0
    RETURN CHAR{ADD(bnk_ptr%,2)}
  ELSE
    RETURN ""
  ENDIF
ENDFUNC
PROCEDURE bnk_set_code(bnk_ptr%,code$)
  CHAR{ADD(bnk_ptr%,36)}=UPPER$(TRIM$(LEFT$(code$,8)))
RETURN
FUNCTION bnk_get_code$(bnk_ptr%)
  IF bnk_ptr%>0
    RETURN CHAR{ADD(bnk_ptr%,36)}
  ELSE
    RETURN ""
  ENDIF
ENDFUNC
PROCEDURE bnk_set_agency(bnk_ptr%,agency$)
  CHAR{ADD(bnk_ptr%,46)}=TRIM$(LEFT$(agency$,32))
RETURN
FUNCTION bnk_get_agency$(bnk_ptr%)
  RETURN CHAR{ADD(bnk_ptr%,46)}
ENDFUNC
PROCEDURE bnk_set_address(bnk_ptr%,address$)
  CHAR{ADD(bnk_ptr%,80)}=TRIM$(LEFT$(address$,32))
RETURN
FUNCTION bnk_get_address$(bnk_ptr%)
  RETURN CHAR{ADD(bnk_ptr%,80)}
ENDFUNC
PROCEDURE bnk_set_postnumber(bnk_ptr%,postnumber$)
  CHAR{ADD(bnk_ptr%,114)}=TRIM$(LEFT$(postnumber$,16))
RETURN
FUNCTION bnk_get_postnumber$(bnk_ptr%)
  RETURN CHAR{ADD(bnk_ptr%,114)}
ENDFUNC
PROCEDURE bnk_set_town(bnk_ptr%,town$)
  CHAR{ADD(bnk_ptr%,132)}=TRIM$(LEFT$(town$,32))
RETURN
FUNCTION bnk_get_town$(bnk_ptr%)
  RETURN CHAR{ADD(bnk_ptr%,132)}
ENDFUNC
PROCEDURE bnk_set_country(bnk_ptr%,country$)
  CHAR{ADD(bnk_ptr%,166)}=TRIM$(LEFT$(country$,16))
RETURN
FUNCTION bnk_get_country$(bnk_ptr%)
  RETURN CHAR{ADD(bnk_ptr%,166)}
ENDFUNC
PROCEDURE bnk_set_website(bnk_ptr%,website$)
  CHAR{ADD(bnk_ptr%,184)}=TRIM$(LEFT$(website$,48))
RETURN
FUNCTION bnk_get_website$(bnk_ptr%)
  RETURN CHAR{ADD(bnk_ptr%,184)}
ENDFUNC
PROCEDURE bnk_set_email(bnk_ptr%,email$)
  CHAR{ADD(bnk_ptr%,234)}=TRIM$(LEFT$(email$,48))
RETURN
FUNCTION bnk_get_email$(bnk_ptr%)
  RETURN CHAR{ADD(bnk_ptr%,234)}
ENDFUNC
PROCEDURE bnk_set_telephone1(bnk_ptr%,telephone$)
  CHAR{ADD(bnk_ptr%,284)}=TRIM$(LEFT$(telephone$,16))
RETURN
FUNCTION bnk_get_telephone1$(bnk_ptr%)
  RETURN CHAR{ADD(bnk_ptr%,284)}
ENDFUNC
PROCEDURE bnk_set_telephone2(bnk_ptr%,telephone$)
  CHAR{ADD(bnk_ptr%,302)}=TRIM$(LEFT$(telephone$,16))
RETURN
FUNCTION bnk_get_telephone2$(bnk_ptr%)
  RETURN CHAR{ADD(bnk_ptr%,302)}
ENDFUNC
PROCEDURE bnk_set_faximile(bnk_ptr%,faximile$)
  CHAR{ADD(bnk_ptr%,320)}=TRIM$(LEFT$(faximile$,16))
RETURN
FUNCTION bnk_get_faximile$(bnk_ptr%)
  RETURN CHAR{ADD(bnk_ptr%,320)}
ENDFUNC

@endnode

@node "cresus_structure_holder"
@title "Cr‚sus dev-documentation"

  Table: holders
  Structure length: 250 bytes
  File: SHARED\PEOPLE.CDB
  Code: @{"*" LINK "cresus_structure_holder_code"}

  @{0U}Offset   Code          Name             Field@{0}
  +0       INO_MAN       Internal number  INT -> 2 bytes (1 -> 32000)
  +2       INO_CIV       Title            INT -> 2 bytes (= internal codes)
  +4       CNOM_MAN      Name             CHAR -> 32 bytes max + nullbyte
  +38      CPRENOM_MAN   First name       CHAR -> 16 bytes max + nullbyte
  +56      CNAI_MAN      Birthday         DATE -> 4 bytes (@{"Cr‚sus date format" LINK "cresus_structure_date"})
  +60      CADR_MAN      Street           CHAR -> 32 bytes max + nullbyte
  +94      CCODPOST_MAN  Zip code         CHAR -> 16 bytes max + nullbyte
  +112     CVILLE_MAN    City             CHAR -> 32 bytes max + nullbyte
  +146     CPAYS_MAN     Country          CHAR -> 16 bytes max + nullbyte
  +164     CTEL1_MAN     Phone number 1   CHAR -> 16 bytes max + nullbyte
  +182     CTEL2_MAN     Phone number 2   CHAR -> 16 bytes max + nullbyte
  +200     CMAIL_MAN     Email            CHAR -> 48 bytes max + nullbyte

@endnode

@node "cresus_structure_holder_code"
@title "Cr‚sus dev-documentation"

PROCEDURE man_set_number(man_ptr%,number&)
  INT{man_ptr%}=number&
RETURN
FUNCTION man_get_number(man_ptr%)
  $F&
  RETURN INT{man_ptr%}
ENDFUNC
PROCEDURE man_set_civility(man_ptr%,civility&)
  INT{ADD(man_ptr%,2)}=civility&
RETURN
FUNCTION man_get_civility(man_ptr%)
  $F&
  RETURN INT{ADD(man_ptr%,2)}
ENDFUNC
PROCEDURE man_set_lastname(man_ptr%,lastname$)
  CHAR{ADD(man_ptr%,4)}=TRIM$(LEFT$(lastname$,32))
RETURN
FUNCTION man_get_lastname$(man_ptr%)
  IF man_ptr%>0
    RETURN CHAR{ADD(man_ptr%,4)}
  ELSE
    RETURN ""
  ENDIF
ENDFUNC
PROCEDURE man_set_firstname(man_ptr%,firstname$)
  CHAR{ADD(man_ptr%,38)}=TRIM$(LEFT$(firstname$,16))
RETURN
FUNCTION man_get_firstname$(man_ptr%)
  IF man_ptr%>0
    RETURN CHAR{ADD(man_ptr%,38)}
  ELSE
    RETURN ""
  ENDIF
ENDFUNC
PROCEDURE man_set_birthday(man_ptr%,birthday%)
  LONG{ADD(man_ptr%,56)}=birthday%
RETURN
FUNCTION man_get_birthday(man_ptr%)
  $F&
  RETURN LONG{ADD(man_ptr%,56)}
ENDFUNC
PROCEDURE man_set_address(man_ptr%,address$)
  CHAR{ADD(man_ptr%,60)}=TRIM$(LEFT$(address$,32))
RETURN
FUNCTION man_get_address$(man_ptr%)
  RETURN CHAR{ADD(man_ptr%,60)}
ENDFUNC
PROCEDURE man_set_postnumber(man_ptr%,postnumber$)
  CHAR{ADD(man_ptr%,94)}=TRIM$(LEFT$(postnumber$,16))
RETURN
FUNCTION man_get_postnumber$(man_ptr%)
  RETURN CHAR{ADD(man_ptr%,94)}
ENDFUNC
PROCEDURE man_set_town(man_ptr%,town$)
  CHAR{ADD(man_ptr%,112)}=TRIM$(LEFT$(town$,32))
RETURN
FUNCTION man_get_town$(man_ptr%)
  RETURN CHAR{ADD(man_ptr%,112)}
ENDFUNC
PROCEDURE man_set_country(man_ptr%,country$)
  CHAR{ADD(man_ptr%,146)}=TRIM$(LEFT$(country$,16))
RETURN
FUNCTION man_get_country$(man_ptr%)
  RETURN CHAR{ADD(man_ptr%,146)}
ENDFUNC
PROCEDURE man_set_telephone1(man_ptr%,telephone$)
  CHAR{ADD(man_ptr%,164)}=TRIM$(LEFT$(telephone$,16))
RETURN
FUNCTION man_get_telephone1$(man_ptr%)
  RETURN CHAR{ADD(man_ptr%,164)}
ENDFUNC
PROCEDURE man_set_telephone2(man_ptr%,telephone$)
  CHAR{ADD(man_ptr%,182)}=TRIM$(LEFT$(telephone$,16))
RETURN
FUNCTION man_get_telephone2$(man_ptr%)
  RETURN CHAR{ADD(man_ptr%,182)}
ENDFUNC
PROCEDURE man_set_email(man_ptr%,email$)
  CHAR{ADD(man_ptr%,200)}=TRIM$(LEFT$(email$,48))
RETURN
FUNCTION man_get_email$(man_ptr%)
  RETURN CHAR{ADD(man_ptr%,200)}
ENDFUNC

@endnode

@node "cresus_structure_account"
@title "Cr‚sus dev-documentation"

  Table: accounts
  Structure length: 144 bytes
  File: SHARED\ACCOUNT.CDB
  Code: @{"*" LINK "cresus_structure_account_code"}

  @{0U}Offset   Code          Name                  Field@{0}
  +0       INO_CPT       Internal number       INT -> 2 bytes (1 -> 32000)
  +2       CCOD_CPT      Code                  CHAR -> 8 bytes max + nullbyte
  +12      CLIB_CPT      Name                  CHAR -> 32 bytes max + nullbyte
  +46      CFIC_CPT      Filename              CHAR -> 8 bytes max (major case) + nullbyte
  +56      CPASS_CPT     Password (hashed)     CHAR -> 16 bytes max + nullbyte
  +74      INO_BNK       Bank                  INT -> 2 bytes -> to banks table (not null)
  +76      CID_CPT       Account number        CHAR -> 24 bytes + nullbyte
  +102     INO_MAN1      Holder 1              INT -> 2 bytes -> to holders table (not null)
  +104     INO_MAN2      Holder 2              INT -> 2 bytes -> to holders table (may be null)
  +106     INO_CUR1      Main currency         INT -> 2 bytes -> to currencies table (not null)
  +108     INO_CUR2      Seconde currency      INT -> 2 bytes -> to currencies table (may be null)
  +110     LCRITIQ1_CPT  Minimum Balance alert BYTE -> 1 = TRUE, 0 = FALSE
  +111     LCRITIQ2_CPT  Minimum Balance alert BYTE -> 1 = TRUE, 0 = FALSE (deprecated)
  +112     FCRITIQ1_CPT  Amount for alert      FLOAT -> 8 bytes
  +120     FCRITIQ2_CPT  Amount for alert      FLOAT -> 8 bytes (deprecated)
  +128     FAMOUNT1_CPT  Balance for main cur  FLOAT -> 8 bytes
  +136     FAMOUNT2_CPT  Balance for 2nd cur   FLOAT -> 8 bytes (deprecated)

@endnode

@node "cresus_structure_account_code"
@title "Cr‚sus dev-documentation"

PROCEDURE cpt_set_number(cpt_ptr%,number&)
  INT{cpt_ptr%}=number&
RETURN
FUNCTION cpt_get_number(cpt_ptr%)
  $F&
  RETURN INT{cpt_ptr%}
ENDFUNC
PROCEDURE cpt_set_code(cpt_ptr%,code$)
  CHAR{ADD(cpt_ptr%,2)}=UPPER$(TRIM$(LEFT$(code$,8)))
RETURN
FUNCTION cpt_get_code$(cpt_ptr%)
  RETURN CHAR{ADD(cpt_ptr%,2)}
ENDFUNC
PROCEDURE cpt_set_wording(cpt_ptr%,wording$)
  CHAR{ADD(cpt_ptr%,12)}=TRIM$(LEFT$(wording$,32))
RETURN
FUNCTION cpt_get_wording$(cpt_ptr%)
  IF cpt_ptr%>0
    RETURN CHAR{ADD(cpt_ptr%,12)}
  ELSE
    RETURN ""
  ENDIF
ENDFUNC
PROCEDURE cpt_set_filename(cpt_ptr%,filename$)
  CHAR{ADD(cpt_ptr%,46)}=UPPER$(TRIM$(LEFT$(filename$,8)))
RETURN
FUNCTION cpt_get_filename$(cpt_ptr%)
  RETURN CHAR{ADD(cpt_ptr%,46)}
ENDFUNC
PROCEDURE cpt_set_password(cpt_ptr%,password$)
  IF cpt_password_changed!
    password$=@hash_password$(TRIM$(LEFT$(password$,16)))
  ENDIF
  CHAR{ADD(cpt_ptr%,56)}=password$
RETURN
FUNCTION cpt_is_same_passwords(pass_str1$,hash_str2$)
  $F!
  IF @hash_password$(pass_str1$)=hash_str2$
    RETURN TRUE
  ELSE IF pass_str1$=hash_str2$
    RETURN TRUE
  ELSE
    RETURN FALSE
  ENDIF
ENDFUNC
FUNCTION cpt_get_password$(cpt_ptr%)
  RETURN CHAR{ADD(cpt_ptr%,56)}
ENDFUNC
FUNCTION cpt_is_password_hashed(cpt_ptr%)
  $F!
  IF BYTE{ADD(cpt_ptr%,56)}=0
    RETURN FALSE
  ELSE IF BYTE{ADD(cpt_ptr%,56)}<16
    RETURN TRUE
  ELSE
    RETURN FALSE
  ENDIF
ENDFUNC
FUNCTION cpt_get_password_len(cpt_ptr%)
  $F&
  IF @cpt_is_password_hashed(cpt_ptr%)
    RETURN BYTE{ADD(cpt_ptr%,56)}
  ELSE
    RETURN LEN(CHAR{ADD(cpt_ptr%,56)})
  ENDIF
ENDFUNC
PROCEDURE cpt_set_bank(cpt_ptr%,number&)
  INT{ADD(cpt_ptr%,74)}=number&
RETURN
FUNCTION cpt_get_bank(cpt_ptr%)
  $F&
  RETURN INT{ADD(cpt_ptr%,74)}
ENDFUNC
PROCEDURE cpt_set_id(cpt_ptr%,id$)
  CHAR{ADD(cpt_ptr%,76)}=TRIM$(LEFT$(id$,24))
RETURN
FUNCTION cpt_get_id$(cpt_ptr%)
  RETURN CHAR{ADD(cpt_ptr%,76)}
ENDFUNC
PROCEDURE cpt_set_holder1(cpt_ptr%,number&)
  INT{ADD(cpt_ptr%,102)}=number&
RETURN
FUNCTION cpt_get_holder1(cpt_ptr%)
  $F&
  RETURN INT{ADD(cpt_ptr%,102)}
ENDFUNC
PROCEDURE cpt_set_holder2(cpt_ptr%,number&)
  INT{ADD(cpt_ptr%,104)}=number&
RETURN
FUNCTION cpt_get_holder2(cpt_ptr%)
  $F&
  RETURN INT{ADD(cpt_ptr%,104)}
ENDFUNC
PROCEDURE cpt_set_currency1(cpt_ptr%,number&)
  INT{ADD(cpt_ptr%,106)}=number&
RETURN
FUNCTION cpt_get_currency1(cpt_ptr%)
  $F&
  RETURN INT{ADD(cpt_ptr%,106)}
ENDFUNC
PROCEDURE cpt_set_currency2(cpt_ptr%,number&)
  INT{ADD(cpt_ptr%,108)}=number&
RETURN
FUNCTION cpt_get_currency2(cpt_ptr%)
  $F&
  RETURN INT{ADD(cpt_ptr%,108)}
ENDFUNC
PROCEDURE cpt_set_critical_flag1(cpt_ptr%,critical!)
  IF critical!
    BYTE{ADD(cpt_ptr%,110)}=1
  ELSE
    BYTE{ADD(cpt_ptr%,110)}=0
  ENDIF
RETURN
FUNCTION cpt_get_critical_flag1(cpt_ptr%)
  $F!
  IF BYTE{ADD(cpt_ptr%,110)}=1
    RETURN TRUE
  ELSE
    RETURN FALSE
  ENDIF
ENDFUNC
PROCEDURE cpt_set_critical_flag2(cpt_ptr%,critical!)
  IF critical!
    BYTE{ADD(cpt_ptr%,111)}=1
  ELSE
    BYTE{ADD(cpt_ptr%,111)}=0
  ENDIF
RETURN
FUNCTION cpt_get_critical_flag2(cpt_ptr%)
  $F!
  IF BYTE{ADD(cpt_ptr%,111)}=1
    RETURN TRUE
  ELSE
    RETURN FALSE
  ENDIF
ENDFUNC
PROCEDURE cpt_set_critical_amount1(cpt_ptr%,amount)
  FLOAT{ADD(cpt_ptr%,112)}=amount
RETURN
FUNCTION cpt_get_critical_amount1(cpt_ptr%)
  $F#
  RETURN FLOAT{ADD(cpt_ptr%,112)}
ENDFUNC
PROCEDURE cpt_set_critical_amount2(cpt_ptr%,amount)
  FLOAT{ADD(cpt_ptr%,120)}=amount
RETURN
FUNCTION cpt_get_critical_amount2(cpt_ptr%)
  $F#
  RETURN FLOAT{ADD(cpt_ptr%,120)}
ENDFUNC
PROCEDURE cpt_set_amount1(cpt_ptr%,amount)
  FLOAT{ADD(cpt_ptr%,128)}=amount
RETURN
FUNCTION cpt_get_amount1(cpt_ptr%)
  $F#
  RETURN FLOAT{ADD(cpt_ptr%,128)}
ENDFUNC
PROCEDURE cpt_set_amount2(cpt_ptr%,amount)
  FLOAT{ADD(cpt_ptr%,136)}=amount
RETURN
FUNCTION cpt_get_amount2(cpt_ptr%)
  $F#
  RETURN FLOAT{ADD(cpt_ptr%,136)}
ENDFUNC

@endnode

@node "cresus_structure_type"
@title "Cr‚sus dev-documentation"

  Table: types (of transactions)
  Structure length: 50 bytes
  File: SHARED\STREAM.CDB
  Code: @{"*" LINK "cresus_structure_type_code"}

  @{0U}Offset   Code          Name              Field@{0}
  +0       INO_MOV       Internal number   INT -> 2 bytes (1 -> 32000)
  +2       CLIB_MOV      Name              CHAR -> 32 bytes max + nullbyte
  +36      CCOD_MOV      Code              CHAR -> 8 bytes max + nullbyte
  +46      ICOL_MOV      Color             BYTE -> 0 -> 16 (VDI index)
  +47      LDEB_MOV      Debt flag         BYTE -> 0 = debtor, 1 = creditor
  +48      LCECHK_MOV    Check flag        BYTE -> 0 = no, 1 = with check
  +49      LVIR_MOV      Transfert flag    BYTE -> 0 = no, 1 = transfer to other account (debt)

  Table: types (of transactions)
  Structure length: 32 bytes
  File: SHARED\STREAM2.CDB

  @{0U}Offset   Code          Name              Field@{0}
  +0       INO_NEW_MOV   Internal number   INT -> 2 bytes (1 -> 32000)
                         (if type=account transfer, then it will be the target type)

@endnode

@node "cresus_structure_type_code"
@title "Cr‚sus dev-documentation"

PROCEDURE mov_set_number(mov_ptr%,number&)
  INT{mov_ptr%}=number&
RETURN
FUNCTION mov_get_number(mov_ptr%)
  $F&
  RETURN INT{mov_ptr%}
ENDFUNC
PROCEDURE mov_set_wording(mov_ptr%,wording$)
  CHAR{ADD(mov_ptr%,2)}=TRIM$(LEFT$(wording$,32))
RETURN
FUNCTION mov_get_wording$(mov_ptr%)
  IF mov_ptr%>0
    RETURN CHAR{ADD(mov_ptr%,2)}
  ELSE
    RETURN ""
  ENDIF
ENDFUNC
PROCEDURE mov_set_code(mov_ptr%,code$)
  CHAR{ADD(mov_ptr%,36)}=UPPER$(TRIM$(LEFT$(code$,8)))
RETURN
FUNCTION mov_get_code$(mov_ptr%)
  RETURN CHAR{ADD(mov_ptr%,36)}
ENDFUNC
PROCEDURE mov_set_color(mov_ptr%,color|)
  BYTE{ADD(mov_ptr%,46)}=MAX(0,MIN(color|,15))
RETURN
FUNCTION mov_get_color(mov_ptr%)
  $F|
  RETURN MAX(0,MIN(BYTE{ADD(mov_ptr%,46)},15))
ENDFUNC
PROCEDURE mov_set_debt(mov_ptr%,debt!)
  IF debt!
    BYTE{ADD(mov_ptr%,47)}=1
  ELSE
    BYTE{ADD(mov_ptr%,47)}=0
  ENDIF
RETURN
FUNCTION mov_is_debt(mov_ptr%)
  $F!
  IF mov_ptr%>0
    IF BYTE{ADD(mov_ptr%,47)}>0
      RETURN TRUE
    ELSE
      RETURN FALSE
    ENDIF
  ELSE
    RETURN FALSE
  ENDIF
ENDFUNC
PROCEDURE mov_set_with_check(mov_ptr%,check!)
  IF check!
    BYTE{ADD(mov_ptr%,48)}=1
  ELSE
    BYTE{ADD(mov_ptr%,48)}=0
  ENDIF
RETURN
FUNCTION mov_is_with_check(mov_ptr%)
  $F!
  IF mov_ptr%>0
    IF BYTE{ADD(mov_ptr%,48)}
      RETURN TRUE
    ELSE
      RETURN FALSE
    ENDIF
  ELSE
    RETURN FALSE
  ENDIF
ENDFUNC
PROCEDURE mov_set_transfer(mov_ptr%,transfer!)
  IF transfer!
    BYTE{ADD(mov_ptr%,49)}=1
  ELSE
    BYTE{ADD(mov_ptr%,49)}=0
  ENDIF
RETURN
FUNCTION mov_is_transfer(mov_ptr%)
  $F!
  IF mov_ptr%>0
    IF BYTE{ADD(mov_ptr%,49)}
      RETURN TRUE
    ELSE
      RETURN FALSE
    ENDIF
  ELSE
    RETURN FALSE
  ENDIF
ENDFUNC

@endnode

@node "cresus_structure_category"
@title "Cr‚sus dev-documentation"

  Table: categories
  Structure length: 48 bytes
  File: SHARED\BUDGET.CDB
  Code: @{"*" LINK "cresus_structure_category_code"}

  @{0U}Offset   Code          Name              Field@{0}
  +0       INO_BUD       Internal number   INT -> 2 bytes (1 -> 32000)
  +2       CLIB_BUD      Name              CHAR -> 32 bytes max + nullbyte
  +36      CCOD_BUD      Code              CHAR -> 8 bytes max + nullbyte
  +46      ICOL_BUD      Color             BYTE -> 0 -> 16 (VDI index)

@endnode

@node "cresus_structure_category_code"
@title "Cr‚sus dev-documentation"

PROCEDURE bud_set_number(bud_ptr%,number&)
  INT{bud_ptr%}=number&
RETURN
FUNCTION bud_get_number(bud_ptr%)
  $F&
  RETURN INT{bud_ptr%}
ENDFUNC
PROCEDURE bud_set_wording(bud_ptr%,wording$)
  CHAR{ADD(bud_ptr%,2)}=TRIM$(LEFT$(wording$,32))
RETURN
FUNCTION bud_get_wording$(bud_ptr%)
  IF bud_ptr%>0
    RETURN CHAR{ADD(bud_ptr%,2)}
  ELSE
    RETURN ""
  ENDIF
ENDFUNC
PROCEDURE bud_set_code(bud_ptr%,code$)
  CHAR{ADD(bud_ptr%,36)}=UPPER$(TRIM$(LEFT$(code$,8)))
RETURN
FUNCTION bud_get_code$(bud_ptr%)
  RETURN CHAR{ADD(bud_ptr%,36)}
ENDFUNC
PROCEDURE bud_set_color(bud_ptr%,color|)
  BYTE{ADD(bud_ptr%,46)}=MAX(0,MIN(color|,15))
RETURN
FUNCTION bud_get_color(bud_ptr%)
  $F|
  RETURN MAX(0,MIN(BYTE{ADD(bud_ptr%,46)},15))
ENDFUNC

@endnode

@node "cresus_structure_transaction"
@title "Cr‚sus dev-documentation"

  Table: transactions
  Structure length: 162 bytes
  File: ACCOUNTS\*.CDB
  Code: @{"*" LINK "cresus_structure_transaction_code"}

  @{0U}Offset   Code          Name                  Field@{0}
  +0       INO_OPE       Internal number       INT -> 2 bytes (1 -> 32000, unused)
  +2       INO_CPT       Account               INT -> 2 bytes -> to accounts table (not null)
  +4       DCRE_OPE      Record creation       DATE -> 4 bytes (@{"Cr‚sus date format" LINK "cresus_structure_date"})
  +8       DMOD_OPE      Record modification   DATE -> 4 bytes (@{"Cr‚sus date format" LINK "cresus_structure_date"})
  +12      DOPE_OPE      Date of transaction   DATE -> 4 bytes (@{"Cr‚sus date format" LINK "cresus_structure_date"})
  +16      INO_MOV       Type of transaction   INT -> 2 bytes -> to types tables (not null)
  +18      CCHEQ_OPE     Check number          CHAR -> 16 bytes max + nullbyte
  +36      INO_CPT_VIR   Transfer to account   INT -> 2 bytes -> to accounts table (may be null)
  +38      FAMOUNT1_OPE  Amount in main curren FLOAT -> 8 bytes
  +46      FAMOUNT2_OPE  Amount in 2nd currenc FLOAT -> 8 bytes
  +54      INO_BUD       Category              INT -> 2 bytes -> to categories table (may be null)
  +56      CNOTE1_OPE    Notes 1               CHAR -> 50 bytes max + nullbyte
  +108     CNOTE2_OPE    Notes 2               CHAR -> 50 bytes max + nullbyte
  +160     LPOINTE_OPE   Checked flag          BYTE -> 1 = TRUE, 0 = FALSE
  +161     LFLAGS_OPE    Misc flags            BYTE (not yet used)

@endnode

@node "cresus_structure_transaction_code"
@title "Cr‚sus dev-documentation"

PROCEDURE ope_set_number(ope_ptr%,number&)
  INT{ope_ptr%}=number&
RETURN
FUNCTION ope_get_number(ope_ptr%)
  $F&
  RETURN INT{ope_ptr%}
ENDFUNC
PROCEDURE ope_set_account(ope_ptr%,number&)
  INT{ADD(ope_ptr%,2)}=number&
RETURN
FUNCTION ope_get_account(ope_ptr%)
  $F&
  RETURN INT{ADD(ope_ptr%,2)}
ENDFUNC
PROCEDURE ope_set_date_creation(ope_ptr%,date%)
  LONG{ADD(ope_ptr%,4)}=date%
RETURN
FUNCTION ope_get_date_creation(ope_ptr%)
  $F%
  RETURN LONG{ADD(ope_ptr%,4)}
ENDFUNC
PROCEDURE ope_set_date_modification(ope_ptr%,date%)
  LONG{ADD(ope_ptr%,8)}=date%
RETURN
FUNCTION ope_get_date_modification(ope_ptr%)
  $F%
  RETURN LONG{ADD(ope_ptr%,8)}
ENDFUNC
PROCEDURE ope_set_date_operation(ope_ptr%,date%)
  LONG{ADD(ope_ptr%,12)}=date%
RETURN
FUNCTION ope_get_date_operation(ope_ptr%)
  $F%
  RETURN LONG{ADD(ope_ptr%,12)}
ENDFUNC
PROCEDURE ope_set_stream(ope_ptr%,number&)
  INT{ADD(ope_ptr%,16)}=number&
RETURN
FUNCTION ope_get_stream(ope_ptr%)
  $F&
  RETURN INT{ADD(ope_ptr%,16)}
ENDFUNC
PROCEDURE ope_set_check_number(ope_ptr%,number$)
  CHAR{ADD(ope_ptr%,18)}=LEFT$(number$,16)
RETURN
FUNCTION ope_get_check_number$(ope_ptr%)
  RETURN CHAR{ADD(ope_ptr%,18)}
ENDFUNC
PROCEDURE ope_set_transfer_account(ope_ptr%,number&)
  INT{ADD(ope_ptr%,36)}=number&
RETURN
FUNCTION ope_get_transfer_account(ope_ptr%)
  $F&
  RETURN INT{ADD(ope_ptr%,36)}
ENDFUNC
PROCEDURE ope_set_amount1(ope_ptr%,amount)
  FLOAT{ADD(ope_ptr%,38)}=amount
RETURN
FUNCTION ope_get_amount1(ope_ptr%)
  $F#
  RETURN FLOAT{ADD(ope_ptr%,38)}
ENDFUNC
PROCEDURE ope_set_amount2(ope_ptr%,amount)
  FLOAT{ADD(ope_ptr%,46)}=amount
RETURN
FUNCTION ope_get_amount2(ope_ptr%)
  $F#
  RETURN FLOAT{ADD(ope_ptr%,46)}
ENDFUNC
PROCEDURE ope_set_budget(ope_ptr%,number&)
  INT{ADD(ope_ptr%,54)}=number&
RETURN
FUNCTION ope_get_budget(ope_ptr%)
  $F&
  RETURN INT{ADD(ope_ptr%,54)}
ENDFUNC
PROCEDURE ope_set_note1(ope_ptr%,note$)
  CHAR{ADD(ope_ptr%,56)}=TRIM$(LEFT$(note$,50))
RETURN
FUNCTION ope_get_note1$(ope_ptr%)
  RETURN CHAR{ADD(ope_ptr%,56)}
ENDFUNC
PROCEDURE ope_set_note2(ope_ptr%,note$)
  CHAR{ADD(ope_ptr%,108)}=TRIM$(LEFT$(note$,50))
RETURN
FUNCTION ope_get_note2$(ope_ptr%)
  RETURN CHAR{ADD(ope_ptr%,108)}
ENDFUNC
PROCEDURE ope_set_verified(ope_ptr%,verified!)
  IF verified!
    BYTE{ADD(ope_ptr%,160)}=1
  ELSE
    BYTE{ADD(ope_ptr%,160)}=0
  ENDIF
RETURN
FUNCTION ope_is_verified(ope_ptr%)
  $F!
  IF BYTE{ADD(ope_ptr%,160)}
    RETURN TRUE
  ELSE
    RETURN FALSE
  ENDIF
ENDFUNC
PROCEDURE ope_set_flags(ope_ptr%,flags|)
  BYTE{ADD(ope_ptr%,161)}=flags|
RETURN
FUNCTION ope_get_flags(ope_ptr%)
  $F|
  RETURN BYTE{ADD(ope_ptr%,161)}
ENDFUNC

@endnode

@node "cresus_structure_job"
@title "Cr‚sus dev-documentation"

  Table: jobs
  Structure length: 256 bytes (42 bytes for header, 214 for embeded structure)
  File: SHARED\JOB.CDB
  Code: @{"*" LINK "cresus_structure_job_code"}

  @{0U}Offset   Code          Name                  Field@{0}
  +0       INO_JOB       Internal number       INT -> 2 bytes (1 -> 32000)
  +2       CNOM_JOB      Name                  CHAR -> 30 bytes max + nullbyte
  +34      LACTIF_JOB    Activated flag        BYTE -> 1 = TRUE, 0 = FALSE
  +35      LCONFIRM_JOB  Confirmation dialog   BYTE -> 1 = TRUE, 0 = FALSE
  +36      IREPET_JOB    Repetition            INT -> 2 bytes (= internal codes)
  +38      IFIN_JOB      Behavior after exec   INT -> 2 bytes (0 = inactivate, 1 = delete)
  +40      ITYPE_JOB     Type of structure     INT -> 2 bytes (1 = transaction)
  +42      -> Embedded Structure

@endnode

@node "cresus_structure_job_code"
@title "Cr‚sus dev-documentation"

PROCEDURE job_set_number(job_ptr%,number&)
  INT{job_ptr%}=number&
RETURN
FUNCTION job_get_number(job_ptr%)
  $F&
  RETURN INT{job_ptr%}
ENDFUNC
PROCEDURE job_set_wording(job_ptr%,wording$)
  CHAR{ADD(job_ptr%,2)}=TRIM$(LEFT$(wording$,30))
RETURN
FUNCTION job_get_wording$(job_ptr%)
  IF job_ptr%>0
    RETURN CHAR{ADD(job_ptr%,2)}
  ELSE
    RETURN ""
  ENDIF
ENDFUNC
PROCEDURE job_set_active(job_ptr%,activated!)
  IF activated!
    BYTE{ADD(job_ptr%,34)}=1
  ELSE
    BYTE{ADD(job_ptr%,34)}=0
  ENDIF
RETURN
FUNCTION job_is_active(job_ptr%)
  $F!
  IF BYTE{ADD(job_ptr%,34)}
    RETURN TRUE
  ELSE
    RETURN FALSE
  ENDIF
ENDFUNC
PROCEDURE job_set_need_confirmation(job_ptr%,confirm!)
  IF confirm!
    BYTE{ADD(job_ptr%,35)}=1
  ELSE
    BYTE{ADD(job_ptr%,35)}=0
  ENDIF
RETURN
FUNCTION job_is_confirmation_needed(job_ptr%)
  $F!
  IF BYTE{ADD(job_ptr%,35)}
    RETURN TRUE
  ELSE
    RETURN FALSE
  ENDIF
ENDFUNC
PROCEDURE job_set_repetition(job_ptr%,number&)
  INT{ADD(job_ptr%,36)}=number&
RETURN
FUNCTION job_get_repetition(job_ptr%)
  $F&
  RETURN INT{ADD(job_ptr%,36)}
ENDFUNC
PROCEDURE job_set_end(job_ptr%,number&)
  INT{ADD(job_ptr%,38)}=number&
RETURN
FUNCTION job_get_end(job_ptr%)
  $F&
  RETURN INT{ADD(job_ptr%,38)}
ENDFUNC
PROCEDURE job_set_type(job_ptr%,number&)
  INT{ADD(job_ptr%,40)}=number&
RETURN
FUNCTION job_get_type(job_ptr%)
  $F&
  RETURN INT{ADD(job_ptr%,40)}
ENDFUNC
FUNCTION job_get_pointer(job_ptr%)
  $F%
  RETURN ADD(job_ptr%,42)
ENDFUNC

@endnode

@node "cresus_structure_date"
@title "Cr‚sus dev-documentation"

  Date: 1 long = 4 bytes, bit fields
  Code: @{"*" LINK "cresus_structure_date_code"}

  Field: yyyyyyyyyyyyyyMMMMdddddHHHHHmmmmmm

@endnode

@node "cresus_structure_date_code"
@title "Cr‚sus dev-documentation"

year$=STR$(SHR(timestamp%,20) AND &X11111111111111)
IF LEN(year$)<4
  year$=STRING$(SUB(4,LEN(year$)),"0")+year$
ENDIF

month$=STR$(SHR(timestamp%,16) AND &X1111)
IF LEN(month$)<2
  month$=STRING$(SUB(2,LEN(month$)),"0")+month$
ENDIF

day$=STR$(SHR(timestamp%,11) AND &X11111)
IF LEN(day$)<2
  day$=STRING$(SUB(2,LEN(day$)),"0")+day$
ENDIF

hour$=STR$(SHR(timestamp%,6) AND &X11111)
IF LEN(hour$)<4
  hour$=STRING$(SUB(2,LEN(hour$)),"0")+hour$
ENDIF

minute$=STR$(timestamp% AND &X111111)
IF LEN(minute$)<2
  minute$=STRING$(SUB(2,LEN(minute$)),"0")+minute$
ENDIF

@endnode
