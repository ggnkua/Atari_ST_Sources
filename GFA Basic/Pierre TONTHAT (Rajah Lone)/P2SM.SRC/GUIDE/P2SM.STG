@database "Image tools"
@options "+g -i -s +z -t2 -d12"
@author "Pierre TONTHAT"
@$VER: 0.9
@subject "P2SM documentation"


@node "p2sm_start" "P2SM: homepage"

@image p2sm.img 1






    ú @{"Purpose" LINK "p2sm_purpose"}
    ú @{"Generalities" LINK "p2sm_general"}
    ú @{"Legal" LINK "p2sm_legal"}
    
    ú @{"Images list" LINK "p2sm_images_list"}
    ú @{"Image metadatas" LINK "p2sm_image_metadatas"}
    ú @{"Raster workshop" LINK "p2sm_raster_workshop"}
    ú @{"Palette tools" LINK "p2sm_palette_tools"}
    
    ú @{"Fonts & preferences" LINK "p2sm_preferences"}
    
    ú @{"Historic" LINK "p2sm_historic"}
 
@endnode

@node "p2sm_purpose" "P2SM: why this image tool?"

  I used D2M for a long time for GEM games development, working on sprites
  sets or pictures from tools such as Ultimate Ripper Cartridge.
  This was painful and hard work, since background color used for mask had
  to be isolated from rasters. And blocks had to be created to separate 
  animations and types of objects.
  Work was done in 16 or 256 colors screenmodes.
    
  With no more Falcon in hand, emulators such as NoSTalgia and AtariX were
  used on my Macbook Air. But these a deprecated since macOS Catalina.
  Unfortunatly, Aranym and Hatari eat a lot of CPU and my Macbook's fan gets
  crazy. These can only be launched for a few minutes for tests or just
  one image fix.
    
  I hoped D2M could run natively on the V4SA, but D2M reveals itself to be
  a total crap, deciphering or auto-modifying itself at start, crashing on new
  CPUs such as the 68080 and/or new True Colors screenmodes.
    
  So I decided to code an image tool that would suits to my needs (usage I had
  when using D2M) and truly compatible with GEM and enhanced AtariOS.
    
  And put old D2M definitely to the vault.
   
  Upgrades for decent drawing application are planned.
  Feel free to suggest features you would want for your own usage.
 
@endnode

@node "p2sm_general" "P2SM: generalities"

  This software works on 2/16/256 colors in a chunky way so that it's 
  screenmode independant. You may edit a 256 colors image in a duochrome
  screenmode, but it's a bit silly. You don't have to downgrade from your
  convenient TC32 environment to handle and work on 16/256 colors.
    
  The chunky datas for the raster builds the final (zoomed) image shown in
  the raster workshop window. So it may be slow if you swap from large 
  image to another.
    
  Requirements:
    
  ú EdDI cookie is mandatory, for offscreen VDI.
  ú Multitasking OS, NVDI and very quick CPU are stongly advised.
   
  ú PARX.SYS modules to Read and Write some images formats. A small and 
  customized parx.sys folder is provided for small footprint on screen and
  human interaction. PI1/3 and NEO formats are saved natively.
    
  ú the more RAM available, the merrier. There is no limitation of loaded
  images, so rasters can populate a large amount of memory. Moreover, the
  Zoom x2 to x16 is RAM consuming if large images/sprites sets. 
  If you are short in RAM, then work in the 16 or 256 colors screenmode
  corresponding to the number of colors of your images.
 
@endnode

@node "p2sm_legal" "P2SM: legal"

  P2SM is freeware. Source code is provided for general knowledge,
  possible fork and issues search. Monetizing on this work is forbidden.
    
  It is strongly advised to make frequent backups of your datas.

  As always, we deny any responsibility concerning any errors, bugs
  or limitations of the program on your personal data, and on
  your computer. We try hard to seek out errors and to correct them.
 
@endnode

@node "p2sm_images_list" "P2SM: images list"

  Only image files with palette are supported and 2/16/256 colors.
  For now, images with 2,5,6,7 bitplanes will not be correctly loaded 
  (possible fixes in the future).
 
  In multitasking environment, you can drag'n'drop files and folders from
  the desk to load a series of images.
  To avoid mass effects, only level -1 of the folders content will be loaded.

  "Paste as new" and "Duplicate" functions need a selected image to copy
  some datas and palette.
 
@endnode

@node "p2sm_image_metadatas" "P2SM: image metadatas"
    
  You can change some images informations there, such as:
    
  - name (the current folder is kept, except if you "save as"). The
    DOS 8+3 name format can be mandatory if you have set it in the
    preferences.
    
  - format and extension. GIF is favoured. (X)IMG can be used if width
    is a 16px multiple. NEO and PI1/3 need to tie in precise width, height
    and colors number.
      
  - bitplane number can be changed. The chunky values are lost only when 
    saving files and quitting. The old data can be retreived if you have
    saved the palette into file before the first change.

  - width and height can be changed also. Width can be 16px multiple if you
    have set it in the preferences.
 
@endnode

@node "p2sm_raster_workshop" "P2SM: raster workshop"


@{0B}Zoom@{0} (- and + keys of the numeric pad): 

  - uses offscreen VDI functions to draw from x1 to x16. Need EdDI cookie.
  - uses a lot of TT-RAM, so with larges images it may be better to leave
    True Color and return to 256 colors screenmode.


@{0B}Edition modes@{0}:

   When pick action is active (mouse cursor is pointing hand), you can escape
   this action with Right click or Left click outside the raster.


 - @{0U}Pixel drawing (F1 key):@{0}

   Left click is Pen. Key P to pick color from the raster instead of the pop-up.
   Right click is Gum. Key G to pick a color from the raster.


 - @{0U}Block select (F2 key):@{0}

   Left click selects the left-top corner of a new block, its width and height
   are set by default (32*32, can be modified in the preferences).
   Right click modifies the right-bottom corner of the block.
   No use of rubberbox.

   The block appears as inverted in the display.
   To deselect, set negative width or height, ie right-click at the left or top
   of the block.

   The cut block is replaced by the null color.
   This null color can be choosen in the pop-up or picked from the image. Use
   Key N for shortcut.

   Block is copied/cut into the system clipboard, the format is binary and
   written to scrap.hex file (Pixel = Byte, value is VDI color index encoded
   in hexa-2 letters, CR+LF at line end).

   For paste function, you can set a null/void button and the specific color.
   Thus activated, the paste will not add the pixels of choosen color to the
   image.
   Pick the pixel which will be the left-top corner of the pasted array.

 
 - @{0U}Mirroring (F3 key):@{0}

   Arrow key Left/Right to flip verticaly.
   Arrow key Up/Down to flip horizontaly.


 - @{0U}Shifting (F4 key):@{0}

   Arrows keys Left/Right/Up/Down to move/shift the image 
   like a ROR/ROL function.


 - @{0U}More to come... (Fx key):@{0}
 
@endnode

@node "p2sm_palette_tools" "P2SM: palette tools"


   If you search for a color remap using an imposed palette, see this in the
   preferences in the Palette panel. If enabled, the palette of the first
   listed image will be used as palette for next loaded images.


@{0B}Palette manipulator@{0}:

   Key C to pick and select a color from the raster.

 - Loaded/Saved palette files follow the PARX palette format:
   
   ú 2 LONG for "PARX_PAL"
   ú 1 INT for number version (200 is kept)
   ú 1 INT for the bitplane number
   then series of N triplets in VDI order
   ú 1 INT for red (0 to 1000)
   ú 1 INT for green (0 to 1000)
   ú 1 INT for blue (0 to 1000)

   File extension is .P0x where x is bitplane number.
   To expand and manage a versatile number of colors for palette edition,
   x can be continous from 0 to 8, so it allows to store 2^x colors. 
     
    .P00 -> just 1 color
    .P01 -> 2 colors
    .P02 -> 4 colors
    .P03 -> 8 colors
    .P04 -> 16 colors
    .P05 -> 32 colors
    .P06 -> 64 colors
    .P07 -> 128 colors
    .P08 -> 256 colors

   If alerts are enabled in the Help menu and the selected index is not 0,
   then you can choose the load or save from start index (color 0) or 
   the selected index.
   If help alerts are disabled, then load or save are done from the
   selected index.
 
   Palette files are completed with white color for padding if the number to
   save is higher than the present colors (from start or selected index).

   You can copy and paste one color to the clipboard (file SCRAP.P00 is used),
   with ^C and ^V, when the palette window is ontop.   

 - The Update button is for True colors environment. Realtime color change can 
   be time consuming. For large or complex image, it may be better to have it
   manual for color change seen in the raster workshop window.
   This button can be enabled in the preferences, palette tab.
 
 
@{0B}Sprite & mask generators@{0}:

 - Remove mask color from sprite: usualy, sprites images set shows a flashy
   color for future transparent pixels. This function swaps this color by
   another that should be black/void.
   Use this function with the other below.
 
 - Generate image mask: select the color from the sprites images set that will
   be transparent. Other colors will be for the mask. Current palette can be
   kept, otherwise the mask image will be duochrome (one only bitplane).
 
 
@{0B}More to come...@{0}
 
@endnode

@node "p2sm_preferences" "P2SM: fonts & preferences"

 - @{0U}Fonts@{0}
 
   Currently for the images list. 
   May be extended in the future for text drawings.

 - @{0U}Paths@{0}
   
   ú PARX.SYS folder: use the one provided with this software
   ú Images folder: your working folder
   ú Palettes folder: where you store (part of) palette files

 - @{0U}Metadatas@{0}

   ú Choose DOS 8.3 name format, for compatibility to old Atari systems.

   ú 16px multiple width is very common for sprites. Same for VDI rasters.

 - @{0U}Raster@{0}
 
   ú Choose pattern and color for filling the void if the image is smaller
     than the window.
     
   ú Default width and height can help block selection for same size sprites
     series.

 - @{0U}Palette@{0}

   ú When a (X)IMG file format image is saved, you may want the palette be
     ordered in XBIOS/Shifter (VDIX) order instead of the VDI one (VDI).

   ú Under True colors screenmodes, color modification can be time consuming
     because the raster has to be partialy redrawn (with the changed color).
     To be quicker and for work fluidity, you may want to see raster change
     at will and not realtime, so deselect this option. 
     Though change is automaticaly updated if you select another color in
     the palette manipulator. 

   ú When loading, you can force color remap on the new images. 
     Palette of the first listed image is used as palette for next loaded
     images.
     This function calls the PARX.TRM module. 
   

 Font choice, preferences, windows positions and opening are saved to a config
 file located in $HOME.
 
@endnode

@node "p2sm_historic" "P2SM: history"

  @{0B}0.9@{0}
   + first functional release
 
@endnode
