@database "Joe"
@options "+g -i -s +z -t2 -d12"
@author "Pierre TONTHAT, Jens HATLAK"
@$VER: 1.5D
@subject "Documentation"

@node "joe_start" 
@title "Joe's Documentation"
@image J_TITLE.IMG 4            



                                          the text mode HTML edition
                                                         in slippers :)

    


     @{"What's Joe ?" LINK "chap0"}
     @{"Legal" LINK "legal"}

     @{"Install the application" LINK "chap1"}
     @{"Miscellaneous parameters" LINK "chap2"}
     @{"Text macros customization" LINK "chap3"}

     User part               Power User part
          @{"Icons" LINK "chap41"}                  @{"The GEMScript commands" LINK "chap51"}
          @{"Mouse" LINK "chap42"}                  @{"The *.JXM file" LINK "chap52"}
          @{"Block" LINK "chap43"}                  @{"The *.JIC file" LINK "chap53"}
          @{"Key short-cuts" LINK "chap44"}         @{"The *.JMN file" LINK "chap54"}
          @{"Special functions" LINK "chap45"}      @{"Joe's exchange protocol" LINK "chap55"}
          @{"Help" LINK "chap46"}                   @{"Making a help file" LINK "chap56"}
          @{"Modules" LINK "chap47"}                @{"Translation" LINK "traduc"}

     @{"History" LINK "Joeversions"}
     @{"Known bugs and limitations" LINK "boggues"}

     @{"Thanks" LINK "thankyou"} and @{"Address" LINK "address"} 

@endnode

@node "chap0"
@title "Joe's Documentation"
@{0U}What's Joe ?                                                          @{0}

   Joe is a text editor specialized for HTML quick 'n' easy coding, for
   creation of webpages.
   
   The program runs under GEM environment and has (nearly) all the
   functions of a classic text editor. More, it supports some modern
   protocols such as Drag&Drop, BubbleGEM, OLGA, VA_START, DHST, GEMScript...
   Some enhancements have been created for HTML coding:

   
 - @{0U}Web browser communication@{0}

   A shell inside Joe can call the browser and allow the display
   of the HTML file currently edited.
   A color palette (in D2M format, PARX.SYS) can be loaded in 256 colors
   under Joe, to conformate its palette with the browser's one.
   It's also possible to tile Joe's and the browser's windows for a better
   visualization.

   Since 1.45 version, external programs can be called and managed by
   Joe as the same as the browser. These can be other browsers, HTML
   parsers, or perhaps Java compilers (one never knows ;-).
   As if you launch the browser, you just have to press Shift, Control
   or Alternate to launch one of the external programs 1, 2 or 3.

 - @{0U}A shell for modules@{0}

   A small shell is integrated in Joe and permits to call, in single or
   multitasking mode, small programs or modules. A package of HTML tag
   generators exists, named "Les bons plans … Joe" (Joe's good Tricks).

   An exchange protocol with Joe has been created. Modules can therefore
   send text directly to the main editor.

   These modules can be used alone or with an application other than Joe.
   This application should therefore support the clipboard management, or
   Drag&Drop, or better, Joe's exchange protocol.

 - @{0U}Text macros@{0}

   Several types of macros are available:
   ú predefined, in the menu inside the editor window,
   ú undefined, with keys,
   ú the kurzels (from Qed or EvereST).

   All can be customized more or less easily by the user.

 - @{0U}Some facilities@{0}

   ú differenciation between pure text, HTML tags and ISO entities by
     color or style,
   ú automatic conversion of special ASCII characters,
   ú tags destruction,
   ú file length reduction (unsignificant spaces and unused tags),
   ú several line end formats (Atari, Mac or Unix),
   ú line return managment with brackets (for JavaScript and Java coding),
   ú Help (block selection and ST-Guide call).
   ú etc.

@endnode

@node "legal"
@title "Joe's Documentation"
@{0U}Legal                                                                 @{0}

  This software is @{0B}Postcardware@{0}. No money is asked for its use.
  Copy and spreading is advised.

  I deny any responsibility on the use of the program: therefore use this
  application at your own risk, you and only you are responsible of
  what you do with Joe.
  
  If this application pleases you, I invite you to send me a postcard.
  This should contain nice words or your recriminations, bugz reporting,
  the enhancement you'd like to have.

@endnode

@node "chap1"
@title "Joe's Documentation"
@{0U}Install                                                               @{0}

    You should have a 1 MB memory to run Joe application. If you want to
    call the browser with Joe, or launch its modules, you should have
    at least 2 MB memory.

 0) Important: the modules are now part of the release. Delete therefore the
    old ones with their *.INF files.

 1) A file and folder structure is imposed since Joe's 1.48 version. Copy the
    files and folders from the archive to have the following tree:
    
    JOE.PRG
    JOE.RSC (rename the JOE_C.RSC or JOE_BW.RSC from the GOODIES folder)
    JOE.MAC (text macros)
    MODULES\
      *.JXM (module declaration file)
      *.JIC (module icon file)
      *.PRG (module executable, the only PRG extension is recognized)
      *.RSC (module ressource file)
    MENUS\
      *.JMN (external tags menu)
    GUIDES\
      JOE.HYP
      MODULES.HYP

    You can not respect this structure, but you will not have all
    the functionalities.

    The current *.KRZ file (text macros called kurzels) is set in the
    Joe's pathfile preferences. The SCRIPTS folder is given for examples
    and is only used only by GEMScript interpretors such as SCRIPTER.APP

    Do not recover the *.INF or *.CFG files in the archive if you found ones.

 2) Launch JOE.PRG and choose the pathfiles for the applications
    such as the browser, the external programs, the default paths for the
    edited files, the library paths, the kurzels... (F2 Key)

    Indicate (with a loading) a text macros file (*.MAC) in the text macros
    window. (F4 Key)

 3) Save the configuration with the JOE.CFG name beside the program (or in
    the HOME$ folder in a multitasking environment) and terminate Joe.
    This will be the default configuration loaded at every Joe's launch.

 4) If you are under a multitasking OS and the following is not done,
    write the environment variables for OLGA, BubbleGEM and ST-GUIDE,

    for example in MAGX.INF:
    
    #_ENV OLGAMANAGER=path+filemane of OLGA
    #_ENV BUBBLEGEM=path+filenemae of BUBBLE
    #_ENV STGUIDE=path+filename of ST-GUIDE

    Declare also the path and filename of JOE.PRG in the OLGA.INF
    (at [Applications] level).

@endnode

@node "chap2"
@title "Joe's Documentation"
@{0U}Miscellaneous parameters                                              @{0}

  - @{0U}File@{0}

  ú Maximum line number: Joe can't handle more than this value. Memory
    allocation is not (yet) dynamic and the memory needed for text
    management is fixed at launch with this number.
    
  ú File extension: *.HTM by default, but you can choose another when
    editing. Power users can add new extensions in the pop-up by editing
    JOE.RSC file. Respect the length of the string (6 ASCII characters
    maximum).
    
  ú Remember the old edited file: if Joe has no file to load with
    the command line it looks in JOE.CFG and tries to load the file edited
    formerly. This only works if this option is selected and activated.
    Be careful: if the former file is not found, the option is
    automatically deactivated!

  ú backup files: by default, a backup file (*.BAK) is created if Joe is
    rewriting on an file.

  ú Choose line end format: according to the operating systems, line end is
    coded with 1 or 2 ASCII characters (LineFeed and/or CarriageReturn).
    To make more convenient export and import with other platforms, you
    can choose the line end format (Atari, Unix, Mac) for the file saving.
    Joe doesn't bother of line end formats, it reads these types and you
    don't have to parameter for the files loading.
    @{0B}NB:@{0} Joe considers any file as text file which does not have
    a nullbyte in its data.
    

  - @{0U}Edit@{0}

  ú Tabulation: space number for the tabulation key.
    Joe doesn't handle true tabulation decalages and displays the ASCII
    character 9 if read.

  ú Preserve the indentation: the line return is made according to the
    former left margin. This is used for a better code reading.

  ú Brackets' management: the line return can be made with the { or } keys.
    There's thus an incrementation/decrementation (according to the
    tabulation) of the left margin.

  ú Special characters' automatic management: Joe converts thus all special
    ASCII characters (>127) to HTML &entities;. You can (de)activate
    this option when editing with the @{0I}Control+E@{0} key.

  ú Expert mode: if selected, the confirmation alerts are not displayed
    and the function asked is started directly.
    
 
  - @{0U}Display@{0}
  
  ú Monochrome: the display is made without visual distinction
    of HTML tags and &entities;. This is the quickest mode.
    
  ú Monochrome with distinction: the display of the tags and &entities;
    is done respectively in bold and highlightened. Due to coding
    difficulties, the system font is only available for this mode: bold
    and highlightened styles are too complicated and slow with vector
    fonts.
    
  ú Colorized: use it with a color screen ;-)
    You can select the normal text color, the background color, &entities;
    and tags colors. The second tag color is for <IMG> and <BODY>. It's
    not possible (would be too slow) to handle more tags different colors.
    
  -> Don't forget to @{0B}apply@{0} the changes!

  
  - @{0U}Fonts@{0}

    A fontselector permits you to choose the text fashion. The system font
    is the only permitted font for the "monochrome with distinction"
    display mode.
    A double click on the font list applies the choice immediately.


  - @{0U}Browser@{0}  
    
  ú Automatic detection of multitasking: Joe detects if MagiC or MiNT is
    present by looking in the Cookie-Jar.
    If the first or the second is there Joe launches all its related
    applications in parallel mode.

    If your operating system isn't these, but yours is still a
    multitasking one, then deselect this option and select the option
    below.

  ú Multitasking launch mode: this option can be modified if the former
    is deselected. There, you decide to launch in single or multitasking
    mode.

  ú Save text before browser call: selected if you want your modifications
    shown in the browser.

  ú Handle the browser window: Joe can manipulate the browser window
    (top and resize), the height of the row corresponds to the height of
    Joe's window when the windows are tiled.
    @{0B}NB:@{0} Joe handles only one browser window which possesses the
    full size item.
  
  ú Color palette: avaliable only in 256 colors screen mode. If selected,
    Joe loads at its launch a color palette in D2M format (PARX.SYS)
    described in its pathfiles.
    A palette corresponding to CAB's colors is proposed in the GOODIES
    folder.
    
    
  - @{0U}Modules@{0}
  
  ú Close the modules when leaving Joe: these are closed automatically
    when Joe terminates itself.
    
  ú Convert to small letters: the modules send tags in capital letters.
    Select this option if you want to have the tags in lower case.

@endnode

@node "chap3"
@title "Joe's Documentation"
@{0U}Text macros customization                                             @{0}
   
    Text macros are text strings which will be inserted in the current
    edited file. Some ASCII characters are reserved and make Joe to:

    ú provoke a line return with | (the indentation is done if the option
      is selected)
    ú locate the text cursor when insertion is finished with ~

    The Qed or EvereST Kurzels line return is coded with another way,
    respectively with ^^ and a new line. These are converted to Joe's
    line return when loaded.

  - @{0U}Undefined text macros@{0}
  
    These can be changed directly in Joe application, within a dialogue
    window (@{0I}F4 Key@{0}). An image of the keyboard allows the key
    selection and the new text macro writing.

    You can print, load and save a panel of macros in a *.MAC file. You
    have one panel of text macros with one configuration.

    A text macro modified in the dialogue window is directly valid.

    
  - @{0U}Kurzels@{0}

    The creation or the modifications of the kurzels will be handled with
    a text editor, according to the syntax of EvereST or Qed.
    The kurzels file is loaded at launch and reloaded when its name is
    modified in the pathfiles.

    Joe supports (was more or less hard ;-) Qed automatic expansion. Some
    mnemonics are ended with *. If you want these kurzels to be expanded
    without pressing the @{0I}Esc key@{0}, then select the option in the
    dialogue window for text macros.

    The list of loaded kurzels appears in the text macros window. BubbleGEM
    helps the visualisation of the too long strings

    
  - @{0U}Predefined macros@{0} in the main window menu

    You can modify them with a RSC editor. Joe tolerates the changes of
    its window internal menu. This operation is reserved to power users
    because they must @{0B}sort@{0} the created/deleted/modified objects
    in this menu. If this will not be done, the menu items' selection with
    the keyboard will be perturbed.

    An option in the text macros window dialogue allows a conversion to
    small letters of the text strings of the menu.

    Since the 1.48 version, is given the possibility to have several tags
    menus: you can have 9 external tags menus, located in the Joe's MENUS
    folder and having the @{"*.JMN" LINK "chap54"} extension.
    The tags menu swapping is made by clicking the small swap icon in the
    menu or with Alternate + Function Key (F1 to F10).

@endnode

@node "chap41"
@title "Joe's Documentation"
@{0U}Icons                                                                 @{0}

@image JIC_LOAD.IMG 3
         Open a text file (@{0I}Control+O@{0})


@image JIC_MERG.IMG 3
         Merge/Insert a text file (@{0}Control+I@{0})

         
@image JIC_SAVE.IMG 3
         Save the current text:
             @{0I}Control+S@{0}: Save
             @{0I}Control+M@{0}: Save as...

@image JIC_PRIN.IMG 3
         Print the block if existing or the entire text (@{0I}Control+P@{0})


@image JIC_DELE.IMG 3
         Delete the current text in memory, to have a new one.
         (@{0I}Control+Backspace@{0})
        
@image JIC_INFO.IMG 3
                Monitoring: insertion/overwrite mode, current line, or
                &entity; or ASCII mode
                The hand is for the Drag&Drop. If the block isn't there,
                then the exchanged text is taken form the clipboard.
         
@image JIC_SEAR.IMG 3
         Search (@{0I}Control+F@{0}) of a text string, ASCII characters
         greater than 127 (not allowed in HTML coding), or wrong offline
         hyperlinks.
         
@image JIC_TOOL.IMG 3
         Replace (@{0I}Control+R@{0}) and specials functions:
         ú links extraction to a file
         ú HTML denaturation
         ú optimization (delete unsignificant lines and spaces...)
         
@image JIC_BROW.IMG 3
         Launch or call of the browser (@{0I}F9@{0}) with the possibility to
         save before the current text and give to it (@{0I}F10@{0}).
         If @{0I}Shift@{0} or @{0I}Control@{0} or @{0I}Alternate@{0} key is pressed then
         the external program 1, 2 or 3 is launched or called instead of the
         bowser.
         
@image JIC_SCRP.IMG 3
                               From left to right:
                               paste, copy, cut, delete

@endnode

@node "chap42"
@title "Joe's Documentation"
@{0U}Mouse                                                                 @{0}

 - @{0U}Left click@{0}
   
   Locate the text cursor or select an item of the interface.
   
 - @{0U}Right click@{0}
 
   Call the context menu which proposes the clipboard and special
   functions, the &entity; and ASCII conversion, transformation to capital
   letters.

 - @{0U}Right double click@{0}

   Direct call of the special characters pop-up.

 - @{0U}Left double click@{0}

   In the edit window:
   If done in a tag, this tag is entirely selected.
   If done in a "group" tag (ie <TABLE>...</TABLE>) with the shift key,
   then the tag and its contents are entirely selected. Carefull with
   this method because it may be slow if the end tag isn't found.
   
   If done on normal text: the classic method is applied

   In the fontselector: the choice is applied immediately.
   
 - @{0U}Hold left click@{0} (Mouse Drag)

   After a short time, the mouse drag block selection is active and you
   can select text until the realese of the left click. Be careful: if
   the scrolling is allowed, it's only in one way!
   
 - @{0U}Shift + Left click@{0}

   The mouse cursor's position determines an extremity of a new block. The
   other extremity corresponds to the text cursor or the old block start.

@endnode

@node "chap43"
@title "Joe's Documentation"
@{0U}Block                                                                 @{0}

   Some functions are forbidden in block mode, such as character
   insertion.
   Others, because of the existance of an Undo function, are only
   available in block mode, such as capital letters conversion.

   A press on one of the arrow keys deselects the block. @{0I}Delete@{0} is
   available and active on the block.
   Mistakes can be corrected with the @{0I}Undo@{0} key, but only on the
   block, not yet for the normal text.

   The predefined text macros menu is active in block mode: you can access
   to the items only with the mouse. The selection of a macro such as
   <B>~</B> @{0B}frames@{0} the block: <B> at the start and </B> at the
   end.
   If the text macro doesn't contain a ~ you can choose the position
   of the text macro before or after the block, respectively with left and
   right click.

   The @{0I}Help@{0} key (with or without Shift, Control or Alternate)
   starts a guide declared in the pathfiles.

@endnode

@node "chap44"
@title "Joe's Documentation"
@{0U}Key shortcuts                                                         @{0}

@{0B}Everywhere:@{0}

  F1: Load a configuration file (*.CFG)
  Shift+F1: Save the configuration in a *.CFG file
  F2: Choose the pathfiles
  F3: Miscellaneous parameters
  F4: Customize the text macros 

  F5: Open the Joe edition window
  F6: Open the Joe modules shell
  F7: Tile Joe's window with browser/guide/externals'
  F8: Full screen for all the windows
  F9: Launch or call the browser
  F10: Launch the browser with saving the current text and giving it to the
       browser

  If Shift, Control or Alternate is pressed with F9 or F10 an external
  program 1, 2 or 3 respectively is launched or called instead of the
  browser.
  
  Control+O: Open a text file

  Control+Q: Quit
  Control+U: Close the window
  Control+W: Full size or reserve size the window


@{0B}In the edition window:@{0}

  Control+I: Insert a text file in the text
  Control+S: Save
  Control+M: Save as (with fileselector: possibility to rename the
             edited file)
  Control+P: Print
  Control+Backspace: Delete the text, make a new one
  Control+F: Search
  Control+G: Search again
  Control+R: Replace
  Control+E: Swap &entity; and ASCII mode

  Control+H: Select block start
  Control+B: Select block end
  Control+V: Copy   } 
  Control+C: Cut    } apply also for editable interface items
  Control+X: Delete }
  Control+J: Select the current line
  Control+A: Select the entire text as block
  Control+Y: Select the current line and cut it

  Insert: Swap insert/overwrite mode
  Undo: correct a mistake (only for the block)

  Control+Delete: Delete the current line
  Control+Insert: Insert a line

  Alternate + numeric keyboard number: Insert a special character
  (you must have CKBD if you are under MagiC OS).

  Alternate+Space: Insert "&nbsp;" string  
  Alternate+< : Insert "&lt;" string
  Alternate+> : Insert "&gt;" string
  Alternate+& (key 1): Insert "&amp;" string   }
  Alternate+" (key 3): Insert "&quot;" string  } with french keyboard only

  @{0U}If the block is selected:@{0}
     Help: the first 16  characters are sent to ST-Guide if the HTML guide
     Shift+Help: same with JavaScript guide
     Control+Help: same with Java guide
     Alternate+Help: same with the other guide
  
  @{0U}If the block don't exist:@{0}
     Help: Activate the window menu
     Arrows: Select an item in the menu
     Left Shift + Arrows: Select very left/top/right/bottom of the menu
     Space or Return: Apply and insert the predefined text macro in the text
     Escape: Cancel


@{0B}In the text macros customization dialogue window:@{0}

  Control+Arrows: Change the key
  Control+P: Print the entire panel of text macros
  Control+L: Load a text macros panel (*.MAC)
  Control+S: Save the current text macros panel (*.MAC)

@endnode

@node "chap45"
@title "Joe's Documentation"
@{0U}Special functions                                                     @{0}

  @{0U}Search@{0}

    ú of ASCII characters greater than 127. For a correct display of
      accentuated characters in the browser, these ASCII characters must
      be converted to &entities;. This search type makes easy the correction
      of forgotten unallowed characters.
      @{0B}NB@{0}: modern browsers can display characters greater than
      127 in 1 byte with the ANSI table, not the ASCII one.

    ú of wrong HTML links. A search is made on the hard disk by scanning
      and verifying the related files described in the HREF of the edited
      document.


  @{0U}Replace and convert@{0}

    ú Link extraction: a HTML link scan is made on the current document
      and the results are written into a file specified by the user.
      You have the possibility to view these by the calling of the browser
      when finished.

    ú Denature the document: the reserved characters of HTML language can
      be converted in their &entity; equivalents. This transforms a HTML
      coding in normal text.
      You can, with this option, import a text, convert the & < > and " safely
      and add after the HTML tags.

      The tags destruction is only possible in block mode.

    ú Optimize: several options are proposed to reduce the text file size.
      You can also change the line end format into Unix (LF), this will
      save 1 character per line. 

    ú Insert a filename: a fileselector opens and you can choose a file
      which name will be inserted in the text, with path relation to
      the edited file if on the same disk.

    ú Special characters, which will be converted in &entities; or not.

    ú &entity; or ASCII conversion
    
    ú Convert to capital letters (to make titles easier).
      
@endnode

@node "chap46"
@title "Joe's Documentation"
@{0U}Help                                                                  @{0}

  You can choose some files in the paths which will be used as guides or
  help. These can be *.HYP (ST-Guide format) or simply *.HTM. ST-Guide or
  the browser will be called to view them.

  In case of a *.HYP file, a press on @{0I}Help@{0} with a selected block
  (see the @{"key shortcuts" LINK "chap44"}) gives the start of the
  block to ST-GUIDE. The call with Joe's menu has the same result.

  If the block corresponds to a node of the *.HYP file the page
  concerning the selected text will be displayed directly.

  @{0U}Examples:@{0}

  ú "html" selected, @{0I}Help@{0} next -> display of the page describing
    the HTML tag.

  ú "OnLoad" selected, @{0I}Shift+Help@{0} next -> display of the page
    describing this JavaScript function.

  @{0B}NB@{0}: To avoid case problems when calling the HTML guide, Joe
  converts the block into capital letters. The nodes will have to be

@endnode

@node "chap47"
@title "Joe's Documentation"
@{0U}Modules                                                               @{0}

  Since 1.40 version, Joe can manage call and launch of small external
  programs and supports a particuliar protocol which allows easier
  data exchange.

  To be called under Joe and be listed in the window modules, these
  programs must:

  ú have the *.PRG extension
  ú be in Joe's MODULES foler
  ú have beside a text file with the same name and with @{"*.JXM" LINK "chap52"} extension.
  ú have beside a ressource file with the same name and with @{"*.JIC" LINK "chap53"} extension.

  Please consult the power user part of this document.
    
@endnode

@node "chap51"
@title "Documentation de Joe"
@{0U}The GEMScript commands                                                      @{0}

  - (*) non-standard commands
  - All parameters are strings (the behaviour parameters are not case-sensitive)
  - The commands apply first on the block, and if no selection, on the entire text

ú Name: appGetLongName
  Returns: "Joe"
  Comment: the name of the application (used for example by MultiStrip)

ú Name: appGetVersion (*)
  Returns: the version number in string format "1.48"

ú Name: close
  Comment: same as new in the 1.47 version, close the current text
           and make a new one. 

ú Name: copy
  Parameter 1 (optional): extension of the SCRAP.* file (since 1.48)
                          "TXT" is used by default
  Comment: copy the text clipboard at text cursor position
  
ú Name: cut
  Parameter 1 (optional): extension of the SCRAP.* file (since 1.48)
                          "TXT" is used by default
  Comment: cut the selected block to text clipboard
  
ú Name: delete
  Comment: delete the selected block
  
ú Name: deselect (*)
  Parameter 1: "block.start", "block.end" (default)
  Comment: deselect the current block and set the text cursor at start or end

ú Name: destroyTags (*)
  Comment: destroy the tags (marked with < and <) in the current text
  
ú Name: getAllCommands
  Returns: alphabetical sorted list of GEMScript commands

ú Name: getFirstLink (*)
  Returns: a pathfile (unix format) or the complete URL, if not found nothing (false)
  Parameter 1: "link.source", "link.reference", "link.all" (default)
  Comment: you can choose with the parameter the type of link you want
           to get (source are mostly embedded files (ie images),
           reference are mostly http link to HTML document). The next links
           are get with getNextLink command
           
ú Name: getFront
  Returns: the filename of current edited text.

ú Name: getNextLink (*)
  Returns: a pahtfile, if not found nothing.
  Comment: you must call getFirstLink before use this command.
  
ú Name: isASCIIMode (*)
  Returns: "1" (true) if the ASCII mode is selected, nothing (false) instead
  
ú Name: isEntityMode (*)
  Returns: "1" (true) if the entity mode is active, nothing (false) instead
  
ú Name: isLocked (*)
  Returns: "1" (true) if Joe has been locked, nothing (false) instead
  
ú Name: isSelected (*)
  Returns: "1" (true) if a block selection exist in the edited text,
           nothing (false) instead
          
ú Name: lock (*)
  Comment: lock the Joe's interface, only the window can be manipulated
           use this if you have long and exclusive GEMScript manipulations
           
ú Name: merge
  Parameter 1: filename
  Parameter 2: "text.start", "texte.end", "text.cursor" (default)
  Comment: merge a textfile with the edited one.
  
ú Name: new
  Comment: same as close for the 1.47 version (behaviour will be
           modified for multiple textfile managment)
           
ú Name: open
  Parameter 1: filename
  Comment: loads a textfile
  
ú Name: paste
  Parameter 1 (optional): extension of the SCRAP.* file (since 1.48)
                          "TXT" is used by default
  Comment: insert the text clipboard at text cursor position
  
ú Name: print
  
ú Name: quit
  Comment: there's no alert of confirmation

ú Name: reduce (*)
  Comment: the double lines are made one, the lines are TRIMed
  
ú Name: renameAs (*)
  Parameter 1: filename
  Comment: rename the current edited file with the new filename
  
ú Name: replace (*)
  Parameter 1: string to search
  Parameter 2: string to replace
  Parameter 3: "case.sensitive", "case.indifferent" (default)
  Comment: replace all occurences in the block (if selection) or the text
  
ú Name: save
  Comment: save the edited file
  
ú Name: saveAs
  Parameter 1: filename
  Comment: save the edited file with a new filename
  
ú Name: selectAll
  Comment: select all the text as block

ú Name: selectFirstString (*)
  Parameter 1: string to search
  Parameter 2: "case.sensitive", "case.indifferent" (default)
  Returns: "1" (true) if found and selected, nothing (false) instead
  Comment: select the first found string, the next strings are selected
           with selectNextString command

ú Name: selectFirstTag (*)
  Parameter 1: tagname such as IMG, TABLE or P (case indifferent)
  Parameter 2: "tag.group" (ie for tables), "tag.element" (default) (ie for images)
  Returns: "1" (true) if found and selected, nothing (false) instead
  Comment: select the first type of tag in the text. Its nature is defined
           in parameter 1 and its type (element or property/group) in parameter 2.
           The next same tags must be selected with selectNextTag

ú Name: selectLine (*)
  Parameter 1: line number
  Returns: "1" (true) if the line number is correct and the line is selected
           nothing (false) if the line number is the last line and the 
           line is selected.
           An error occurs if the line number is too big.
           
ú Name: selectNextString (*)
  Returns: "1" (true) if found and selected, nothing (false) instead
  Comment: you must specify the search with selectFirstString before
  
ú Name: selectNextTag (*)
  Returns: "1" (true) if found and selected, nothing (false) instead
  Comment: you muit specify th search  with selectFirstTag before
  
ú Name: selectTagUnderCursor (*)
  Parameter 1: "tag.group" (ie for tables), "tag.element" (default) (ie for images)
  Returns: "1" (true) if a tag has been found under cursor and selected
           nothing (false) if not
           
ú Name: setLineEnd (*)
  Parameter 1: "CR" and/or "LF" (case indifferent)
  Comment: set the line end for saving the text
           (Atari/DOS is "CRLF", Unix is "LF", Mac is "CR")
  
ú Name: toASCII (*)
  Comment: transform HTML entities to ASCII characters
  
ú Name: toEntity (*)
  Comment: transform ASCII characters to HTML entities
  
ú Name: toFront
  Parameter 1: filemane
  Comment: dummy command, will be used with multiple file managment
  
ú Name: toHTMLChar (*)
  Parameter 1: "<" and/or ">" and/or "&" and/or """
  Comment: transform the reserved HTML characters to HTML entities (& to &amp;)
  
ú Name: toReservedChar (*)
  Parameter 1: "<" and/or ">" and/or "&" and/or """
  Comment: transform the HTML entities &amp; and/or &lt; etc to HTML reserved characters
  
ú Name: toUpper (*)
  Comment: set the text to capital letters
  
ú Name: undo
  Comment: not implemented for the moment, a thousand apologizes :(
  
ú Name: unlock
  Comment: unlock Joe and make it react to user commands

@endnode

@node "chap52"
@title "Documentation de Joe"
@{0U}The *.JXM file                                                          @{0}

  The module must have a text file besides the *.PRG file. This file
  has the same name of the module and has the *.JXM extension.

  The text is a property file (list of KEY=VALUE). The keys can be:

  - DESCRIPTION= {short text for the GEM Bubble in Joe's module window}

  - SET=1 the value written in an INT is a bitset,
          bit 0 at 1: the module is listed in Joe's module window

  - TAG= {IMG|TABLE|...} handled tag if the module is a tag generator

  - AUTOSAVE_AT_LAUNCH= {TRUE|FALSE} Joe save the text before launching
                        the module if the value is true.

@endnode

@node "chap53"
@title "Documentation de Joe"
@{0U}The *.JIC file                                                          @{0}

  The *.JIC file is a *.RSC file which has:
  
  - in the first DIALOG tree, one G_ICON (monochrome icon)
  - in the second DIALOG tree, one G_CICON (color and animated icon)
  
  The user can edit/modidy/create new *.JIC file with a ressource editor
  such as Interface or RSC3 and by renaming the extension of the file,
  but the structure above must be respected.
  If not, Joe will crash at launch.

@endnode

@node "chap54"
@title "Documentation de Joe"
@{0U}The *.JMN file                                                          @{0}

  The *.JMN is a *.RSC file which has:
  
  - one only MENU tree

  The user can edit/modify/create new *.JMN file with a ressource editor
  such as Interface or RSC3 and by renaming the extension of the file,
  but the nature of the first and only tree must be respected: must be a
  MENU.
  Every items contained in the several G_BOX of the MENU will be sorted,
  to avoid niggles with key selection in Joe editor.

@endnode

@node "chap55"
@title "Documentation de Joe"
@{0U}Joe's exchange protocol                                                  @{0}

 1. @{0U}The command line@{0}

    Parameter given when launching a module is a Pascal string
    (1 byte describing the lenght of the line, the data-characters, and
    the null-byte terminator). Data are structured like this :

    8 characters corresponding to the application wihch has called the
    module. This 8 characters will be given with no transformation to
    APPL_FIND function.
    
    If Joe is the caller, then the 8 characters are : "JOE     "
    The next characters (to the ending null-byte) describe a filename
    edited by caller.

    The module should get the first 8 characters of the command line,
    and APPL_FIND. If there's an error or the caller doesn't exist,
    the module should not take the rest of the line or consider the
    command line does not applies to Joe exchange protocol.


 2. @{0U}Monotasking mode@{0}

    The module, before quitting, saves the tag or whatever data for
    the caller, in the clipboard.
    
    Joe accepts *.TXT and *.STG formats (*.STG is a C string format,
    considered as a macro, so you can use "|" and "~").
    Therefore SCRAP.TXT or SCRAP.STG .

    When quitting, the module returns a value (QUIT ret& or Pterm(int ret):
    If 0 : the caller loads nothing
    If 1 : the caller loads SCRAP.TXT
    If esle : no yet supported

 3. @{0U}Multitasking mode@{0} (changed since 1.48)
    
    @{0B}NB@{0}: this applies also for accessories in monotasking mode.

    Joe supports VA_START message and Drag&Drop protocol.

    The exchanges with modules use the GEM pipe ("Tube GEM" in French).
    X_adr% is a 16 bytes buffer, mem% is a buffer located in the global
    memory (X_mem%=GEMDOS(68,L:len%,W:32)) if possible (else: GEMDOS(72).
    16 bytes buffers are read by EVNT_MULTI.

    ú @{"SEND TEXT TO THE CALLER" LINK "chap551"}
    ú @{"CALLER RESPOND TO MODULE, TEXT RETRIEVED" LINK "chap552"}
    ú @{"QUIT MESSAGE TO MODULE" LINK "chap553"}

    The module can be temporary (one use per call), persistant or resident
    in memory (several uses per call). In the two last modes, the module is
    in sleep like an accessory, and reactivated with a VA_START call.
    In the persistant mode, the module will auto-quit after 5 minutes of
    inactivity.

@endnode

@node "chap551"
@title "Documentation de Joe"
@{0U}SEND TEXT TO CALLER (Module->Joe)                                               @{0}

  caller_id&=APPL_FIND("????????")
  ' "????????" is the 8 characters string read in the command line.
  IF caller_id&>0
    INT{buffer_adr%}=20140
    INT{ADD(buffer_adr%,2)}=module_id&
    INT{ADD(buffer_adr%,4)}=0
    INT{ADD(buffer_adr%,6)}=0
    INT{ADD(buffer_adr%,8)}=0
    INT{ADD(buffer_adr%,10)}=format&
    ' 1= text, endlines with CRLF, loaded and inserted as text
    ' 2= C string ended with a nullbyte, loaded and inserted as a macro
    ' 0 or else= Joe reads nothing
    LONG{ADD(buffer_adr%,12)}=module_mem%
    ' address in the global memory where the module has put the text
    ~APPL_WRITE(caller_id&,16,buffer_adr%)
  ENDIF

  When reading this in his 16 bytes buffers, the caller wil or will
  not read the memory, and respond to the module with:
  @{"CALLER RESPOND TO MODULE, TEXT RETRIEVED" LINK "chap552"}

@endnode

@node "chap552"
@title "Documentation de Joe"
@{0U}CALLER RESPOND TO MODULE, TEXT RETRIEVED (Joe->Module)                            @{0}

  module_id&=INT{add(multi_evnt_adr%,6)}
  '
  INT{buffer_adr%}=20141
  INT{ADD(buffer_adr%,2)}=caller_id&
  INT{ADD(buffer_adr%,4)}=0
  INT{ADD(buffer_adr%,6)}=0
  INT{ADD(buffer_adr%,8)}=0
  INT{ADD(buffer_adr%,10)}=0
  INT{ADD(buffer_adr%,12)}=0
  INT{ADD(buffer_adr%,14)}=0
  ~APPL_WRITE(module_id&,16,buffer_adr%)

@endnode

@node "chap553"
@title "Documentation de Joe"
@{0U}QUIT MESSAGE TO MODULE (Joe->Module)                                       @{0}

  module_id&=APPL_FIND(module_name$)
  IF module_id&>0
    INT{buffer_adr%}=20142
    INT{ADD(buffer_adr%,2)}=caller_id&
    INT{ADD(buffer_adr%,4)}=0
    INT{ADD(buffer_adr%,6)}=0
    INT{ADD(buffer_adr%,8)}=0
    INT{ADD(buffer_adr%,10)}=0
    INT{ADD(buffer_adr%,12)}=0
    INT{ADD(buffer_adr%,14)}=0
    ~APPL_WRITE(module_id&,16,buffer_adr%)
  ENDIF

  This message is used whan Joe quits and make its modules quit.

@endnode

@node "chap56"
@title "Documentation de Joe"
@{0U}Making a help file                                                     @{0}

  Joe send the 16 (or less) first bytes of the selected block to ST-GUIDE,
  with the name of the guide file.

  Thus, the nodes of the guide must contain the corresponding string.
  For example, if you want to create or complete the HTML guide with the
  description of a new tag, then the node of the page will be "STYLE" or
  else. No < and >, no / either, and all in capital letters for Joe
  converts its block to capitals letters to avoid case-sensitives problems.
  
  Joe converts only its block for the HTML guide. It sends the block
  untouched for the others guides.

@endnode

@node "traduc"
@title "Documentation de Joe"
@{0U}To translators                                                          @{0}

  The only things which are to be changed for others languages
  is the RSC and the JXM files (the ST-GUIDE documentation also if you feel
  the courage and the need).

  The RSC will be edited with RSC editor such as INTERFACE, WERCS or
  RSC3. You can translate all text save the program informations.
  
  But: be carefull to respect the objects order.
       and do not change the state or flags of the objects
  
  You can put your name in the program informations windows after my name,
  RGF's and Fran‡ois's.
  
  You only have to traduce the JOE_BW.RSC file. You can copy and paste
  for the JOE_C.RSC the icon-bar. Then RESPECT the order of trees in the
  RSC. If you're not sure of your manipulations in a dial, just Sort it.

  The JXM files will be edited under Joe (or another text editor).
  Just translate the value of the key "DESCRIPTION".

  @{0B}IMPORTANT:@{0}
     As you well know, keyboards are not the same. The Control+Key works
     without restriction from a country to another, but not the
     Alternate+Key. Therefore, for the text macro, you have to modify
     specifically something in the RSC file: you will see in the
     "d‚finir les macros" (customize the text macros) an image of the
     keyboard. Modify it to correspond to the keyboard of your language.
     Use major case letter (A to Z) and respect above all the order of
     the objects: reSort the parent box to have a new key ordered map.
     All that is not A to Z is considered as dead key.

  I would appreciate you also traduce a part of the documentation:
  the user's guide only. Leave this page and the pages for power users
  in English.

  If you think your traducing work is worth, then you can distribute what
  you have traduce as shareware, but you have no rights on the PRG files

@endnode

@node "Joeversions"
@title "Joe's Documentation"
@{0U}History                                                               @{0}

 @{0B}1.5D@{0}
  ú fix: missing array index when allocating large block of memory.

 @{0B}1.5C@{0}
  ú fix: possible crash at start when loading the preferences files and/or
         the modules declarations.
  ú fix: XRSRC.OVL withdrawn (MiNT 1.19 alert, wrong exit)
  ú fix: cookies detection with Ssystem() if possible.
  ú fix: hide/show mouse cursor is done with AES instead of VDI.
  (modules are also fixed)

 @{0B}1.5B@{0}
  ú fix: display in iconified window under MyAES.

 @{0B}1.5@{0}
  ú recompilation with Lonny Pursell's GFA library, with targets for
    68000 and ColdFire
  ú some RSC fixes for XaAES
  ú fixes on the window arrows for XaAES
  ú smart application name for enhanced AES
  ú rewrite of crappy GFA load/save function, now pure GEMDOS

 @{0B}1.48E@{0} "Bugfix 4"
  ú fixed crash at launch under MiNT with Memory Protection

 @{0B}1.48D@{0} "Bugfix 3"
  ú fixed a big crash during communication between Joe and its modules
  ú Hope to have corrected the menu and dialog box slowliness under MiNT
  ú use of XRSC for external ressource files (RGF method), if you have
    problems with it, rename the \MODULES\XRSRC.OVL as *.OVX.
  ú keyboard overrun behavior improvement
  ú some internal small bugfixes

  ú Well formed HTML. You have seen that Joe use in its menus and
    modules well formed HTML, for exemple <IMG />. This management is
    by default in Joe environment. This is required when you write XSL/XML
    and XHTML. If you don't want <IMG /> but the old <IMG>, save and edit
    the new JOE.CFG file and change the key "USE_WELL_FORMED_HTML" to "FALSE".

  ú ISO-8859-1 filter new function activated by default. If you don't
    want it (seen imperfections or want of speed), save and edit the new
    JOE.CFG and change the key "ISO-8859-1_FILTER" from "TRUE" to "FALSE".

    The filter is working at loading (and merging, pasting) only if the META tag
    <META HTTP-EQUIV="Content-Type" CONTENT="text/html; charset=iso-8859-1">
    or the <?xml version="1.x" encoding="iso-8859-1"?> is there in the first
    2048 bytes.
    If success: the ISO chars are converted to Atari chars
    If not: the character are not converted

    The filter is working at saving (and cutting, copying) only if the same META
    or XML tag is in the first 32 lines of the text.
    If success: the Atari chars are converted to ISO chars
    If not: all is unchanged

    The convertion between ISO and Atari charset is no strictly bijective,
    so some characters will be converted to &#NNN; where NNN is the ISO
    value.

 @{0B}1.48C@{0} "Bugfix 2"
  ú Big bug that was unseen or made Joe to crash (thks A.BERCEGEAY)
  ú Correctly read AES version now (thks J.HATLAK)
  ú Improved horizontal scrolling behaviour (but not as perfect as I wanted)
  ú Understanding GEMScript command : setCursorAt(column, line) (line is optionnal) 
  ú Sending GEMScript command to modules : hasClosed(filename)
  ú Added in the JXM file the key "EXEC=", value is module path and filename.
    (if the module is not in the \MODULES\ folder, Joe will launch it with this value)
  ú small bugfixes
  ú tried to correct menu and dialog slowliness under MiNT but failed (sorry Bohdan)

 @{0B}1.48B@{0} "Bugfix 1"
  ú Custom text macros (Alt+Key) validation (thks T.LEROY)
  ú Added a missing &Aring;
  ú Small bugfixes

 @{0B}1.48@{0} "Makross++"
  ú Changes in the @{"install" LINK "chap1"} (imposed folders) and in modules
    management (icon in Joe' shell window, Joe's exchange protocol changes,
    some unused modules are deprecated, the others are now part of the main
    archive)
  ú External tags menus (creation and customization with a RSC editor)
  ú Kurzels viewer (with help of BubbleGEM)
  ú Bugfixes (the "first kurzel" bug is corrected)
  ú Double click on a tag selects it. Double click plus Shift key pressed
    select the "group" tag.
  ú Keyboard overrun avoided (XBIOS(14) method, thanks to RGF)

 @{0B}1.47@{0} "Moonlight"
  ú New text memory management (megathanks to RGF)
  ú Horizontal slider
  ú MagiC non modal fileselector (unused if Freedom2 is present)
  ú @{"GEMScript" LINK "chap51"} implementation
  ú small changes in the keyboard management (PC pageUp and pageDown...)
  ú Bugfixes
  ú Accessory mode: but deprecated (crashes under SingleTOS)

 @{0B}1.46@{0} "VIP"
  ú Bugfixes
  ú DHST protocol implementation
  ú HOME$ environment variable management

 @{0B}1.45@{0} "Champagne"
  ú Enhanced @{"block management" LINK "chap43"} with an Undo.
  ú Respect (I hope ;-) of GEM @{"key short-cuts" LINK "chap44"}.
  ú @{"Special functions" LINK "chap45"} and clipboard commands menu
    (with right click). 
  ú the modules are available in a new window.
  ú Qed Kurzels support (with automatic expansion, that you have to
    activate in the text macros window dialogue).
  ú @{"Help" LINK "chap46"} with ST-Guide or HTML documentation call.
  ú External programs that can can substituted for the browser.
  ú New configuration file, in which the parameters are kept for new
    versions
  ú Positions and size saving for the editor and module windows.

 @{0B}1.44@{0} "Volcanic"
   Total rewrite of the text load/save functions, (unfinished) mouse drag,
   block is no more line per line, several text file extensions, line end
   saving format into Unix/Atari/Mac mode.

 @{0B}1.43@{0}
   First functions for kurzels management (thoses of EvereST), offscreen
   display mode (abandoned: too slow), first attempt to GEM key shortcuts
   conformity, monochrome mode for tags and &entities; display (with the
   style), browser color palette loading.

 @{0B}1.41@{0} et @{0B}1.42@{0}
   Debugging and code optimization.

 @{0B}1.40@{0}
   Extended text macros, modules, relative pathfile insertion, BubbleGEM
   management, loading and saving configuration files when editing, tags
   destroy, HTML reserved characters conversions, line return with { and },
   main window iconification.   

 @{0B}1.35@{0}
   HTML links extraction, offline wrong links search, OLGA management,
   browser window manipulations, Drag&Drop receive for the editable GEM
   objetcs.
 
 @{0B}1.30@{0} "Saturn V"
   Drag&Drop send and receive, vector fonts, colorized tags,
   new pop-up for the special characters, long filenames under MagiC 5.

 @{0B}1.2@{0}
   Automatic line return, search for ASCII characters greater than 127,
   ASCII <-> HTML special characters conversions.

 @{0B}1.1@{0}
   Possible customization of the tags menu, filename insertion with
   double click, instability under MagiC 5 corrected.

 @{0B}1.0@{0}
   First and full buggy version of Joe, after adapting during three nights
   Blaise version 2.1's code to HTML requirements. Tag menu, special
   characters pop-up and automatic conversion to &entities;.

@endnode

@node "boggues"
@title "Joe's Documentation"
@{0U}Known bugs and limitations                                            @{0}

 ú 'Tis GFA (you know it well ;-p), not C nor 68K. There 'tis slow,
   especially with vector fonts and tag colorization. You'd better
   have a good (N)VDI!

 ú 640*400 or TV resolution with Falcon: the pop-ups and the window
   menu make, when out of the screen, Joe crash. Don't know why: runs
   perfectly in VGA mode and on others Atari machines.

 ú Bad swap between Joe and the browser the first time, under Falcon
   Single TOS: another Falcon bug?

 ú NVDI 2.5 incompatibility report (I'm using NVDI 4.11R8)

 ú Single TOS only: swap between Joe and browser (or other programs) make
   some accessories buggy. Don't forget therefore to close them.

@endnode

@node "thankyou"
@title "Joe's Documentation"
@{0U}Megagreetings to                                                      @{0}

  to Claude ATTARD,
     inspirator of my coding nights 
  to ST Mag and STraTOS,
     for all they have done.
  to Fran‡ois GOUGE (FanFan/Flux),
     for his cooperation and his numerous suggestions.
  to Application Systems France (ASF),
     for their help and amability

  Megathanks to Jens Hatlak, Richard Gordon Faika, Basar Alabay,
  Bouá/PopsyTeam, S‚bastien Terral, FroST/Sector1, Arnaud Bercegeay,
  Laurent Pouillez, J”rgen Nyberg, Didier Briel, Thierry Leroy, Joe Connor,
  Robert King, Pascal Ricard, Martin "nightowl" Byttebier, Benjamin Gandon...

  And to the HUGE Atari ST community :)

@endnode

@node "address"
@title "Joe's Documentation"
@{0U}Address                                                               @{0}

  mailbox: Pierre TONTHAT
           35, Avenue Lacassagne
           F-69003 Lyon

  Phone: (+33) 04.72.53.60.56

  e-mails: ptonthat@club-internet.fr

  Homepage: http://www.multimania.com/nef/
            http://rajah.atari.org/

@endnode
