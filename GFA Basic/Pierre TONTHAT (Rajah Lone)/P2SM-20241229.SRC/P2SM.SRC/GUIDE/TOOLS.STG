@database "Image tools"
@options "+g -i -s +z -t2 -d12"
@author "Pierre TONTHAT"
@$VER: 1.2B
@subject "P2SM tools documentation"


@node "p2smt_start" "P2SM tools: guide"

  @{0U}P2SM tools@{0}

  ú @{"Generalities" LINK "p2smt_generalities"}
  ú @{"Legal" LINK "p2smt_legal"}

  Convert one image to DGI or VDI format
    ú @{"MAKE_DGI" LINK "p2smt_make_dgi"}
    
  Several GIFs in a folder to DGI format, and pack them    
    ú @{"MAKE_DGX" LINK "p2smt_make_dgx"}
    
  ú @{"History" LINK "p2smt_history"}
 
@endnode

@node "p2smt_generalities" "P2SM tools: generalities"

 MAKE_DGI and MAKE_DGX are tools created for my needs in game developments for
 GEM environment.

 To facilitate compatibility to the VDI, MFDB structure (see TOS.HYP doc dev)
 is employed as header. 
 
 Palette may be present or absent, each colors encoded in VDI format
 (1 INT from 0 to 1000 for each component of R, V, B).
  
 The raster images are stored in standard format (planar, not interleaved)
 so that they can be transformed to the specific format of the screen 
 (official Atari, strange graphic cards, new enhanced screenmodes)
 at game start.

 Rasters images are stored always with a width multiple of 16px.
 Bitplanes number is kept (16 colors remains 16c, 256 colors remains 256c, etc).

 The convertors use the PARX.SYS read methods (RIM). GIF modules is mainly
 employed. 

 Generated formats VDI, DGI and DGX are never packed (to reduce loading time,
 generaly loaded from hard disk with space).
 
@endnode

@node "p2smt_legal" "P2SM tools: legal"

  Disclaimer: use it at your own risk. GFA sources are provided for general
              knownledge and possible bugfix.
 
@endnode

@node "p2smt_make_dgi" "P2SM tools: Make DGI or VDI"

  Usage : scans one image or all GIF of a folder and converts it to DGI or VDI
  format. 
  DGI is the old image format for DGEM. 
  VDI is the format used for Rosemary's Racoon Strip Game.

  Save routines are located in MAKE_DGI.GFA.
  Load routines are located in DGEM.GFA and others.

  ú @{0U}DGI format@{0}

    20 bytes informations for MDFB 
    The first 4 bytes = "_DGI" are supposed to be replaced by a pointer.

    Next bytes -> raster image in VDI standard mode (planar, not interleaved)
 
    Since most graphics share the same palette, it's better to have the palette
    in a separated common file. So no palette datas in DGI files.

  ú @{0U}VDI format@{0}

    20 bytes informations for MDFB (see TOS.HYP doc dev)
    The first 4 bytes = "_VDI" are supposed to be replaced by a pointer.

    Next bytes -> palette: 2*3 or 16*3 or 256*3 INTs (6 or 96 or 1536 bytes)
                           (1 INT for each R, V, B, value from 0 to 1000)

    Next bytes -> raster image in VDI standard mode (planar, not interleaved)

  ú @{0U}for TC images@{0}

    20 bytes informations for MDFB (see TOS.HYP doc dev)
    the first 4 bytes = "_DGI" or "_VDI" are supposed to be replaced by a
    pointer. The bitplanes number is 24.

    Next bytes -> raster image separated in R, then V, then B
                 (1 byte for each R or V or B pixel component)
 
@endnode

@node "p2smt_make_dgx" "P2SM tools: Make DGX"

  Usage : scans all GIF (16 or 256 colors) images of a folder, converts it to
  DGI format and gathers all them into a containor DGX file which name is
  [name of the folder].DGX, generated besides the folder.

  Does not handle TC images. Handles only GIF.

  This util was written to group numerous images, to avoid files allocation
  table overloads on disks. It's convenient to group into family sprites, such
  as animations, or depending on the nature of elements.

  Save routines are located in MAKE_DGX.GFA.
  Load routines are located in DGEM.GFA and others.

  1 LONG : "_DGX"
  1 INT : number of contained DGI "files" 
  then list of...
  8 CHAR : was the name without extension of the DGI file, uppercase is used.
  1 LONG : offset from start, to the DGI structure
  then list of DGI structures...

  @{0U}Remap with the EXTENDED.P08@{0}

  Remap colors to the extented 256 colors palette is a trick used for DGEM, it
  does not keep the 16 colors (4 bitplanes), but uses the EXTENDED.P08 file
  (256 colors) to convert and color-remap a 16c to 256c images.
  
  This trick help me to manage additionnal colors used in Dungeon Master for
  several monsters.
  
  This file is editable with D2M or P2SM (palette tools).
 
@endnode

@node "p2smt_history" "P2SM tools: history"

 @{0B}1.2B@{0}
  - add: make update desk for drives contents after writing on disk 
         (under multitasking environment).
  - fix: spare character (often "\") at end path if drag'n'drop.

 @{0B}1.2@{0}
  - fix: parx.mem use is removed.
  - fix: parx.sys functions from P2SM code.
  - add: trace to u:\ram\make_dg?.log (MiNT only).
  - fix: MAKE_DGI: export in TC24 mode was missing.
  - fix: MAKE_DGX: remap with extended did not expand bitplane number to 8.
  - chg: menu removed, Quit = close main window.
  - chg: settings in $HOME and shared between the 2 MAKE_*.
  - add: settings: use or not lowercase for extensions (.vdi, .dgi, .dgx). 
  - add: tools.hyp file guide, with fixes in the documentation.

 @{0B}1.1@{0}
  - reworked from individual dev tools.
  - MagiC/MiNT compatibilty with enhanced directory functions. 
 
@endnode
