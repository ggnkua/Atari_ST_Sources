@database "Image tools"
@options "+g -i -s +z -t2 -d12"
@author "Pierre TONTHAT"
@$VER: 1.2C
@subject "P2SM documentation"


@node "p2sm_start" "P2SM: guide"

@image p2sm.img 1






    ú @{"Purpose" LINK "p2sm_purpose"}
    ú @{"Generalities" LINK "p2sm_general"}
    ú @{"Legal" LINK "p2sm_legal"}
    
    ú @{"Images list" LINK "p2sm_images_list"}
    ú @{"Image metadatas" LINK "p2sm_image_metadatas"}
    ú @{"Raster workshop" LINK "p2sm_raster_workshop"}
    ú @{"Tools attributes" LINK "p2sm_tools_attributes"}
    ú @{"Palette editor" LINK "p2sm_palette_editor"}
    
    ú @{"Preferences" LINK "p2sm_preferences"}
    
    ú @{"History" LINK "p2sm_history"}

    ú @{"Greetings" LINK "p2sm_greetings"}
 
@endnode

@node "p2sm_purpose" "P2SM: why this image tool?"

  I used D2M for a long time for GEM games development, working on sprites
  sets or pictures from tools such as Ultimate Ripper Cartridge.
  This was painful and hard work, since background color used for mask had
  to be isolated from rasters. And blocks had to be created to separate 
  animations and types of objects.
  Work was done in 16 or 256 colors screenmodes.
    
  With no more Falcon in hand, emulators such as NoSTalgia and AtariX were
  used on my Macbook Air. But these are deprecated since macOS Catalina.
  Unfortunatly, Aranym and Hatari eat a lot of CPU and my Macbook's fan gets
  crazy. These can only be launched for a few minutes for tests or just
  one image fix.
    
  I hoped D2M could run natively on the V4SA, but D2M reveals itself to be
  a total crap, deciphering or auto-modifying itself at start, crashing on new
  CPUs such as the 68080 and/or new True Colors screenmodes.
    
  So I decided to code an image tool that would suits to my needs (usage I had
  when using D2M) and truly compatible with GEM and enhanced AtariOS.
    
  And put old D2M definitely to the vault.
   
  Upgrades for evolved (yet for pixel artwork) drawing application are planned.
  Feel free to suggest features you would want for your own usage.
 
@endnode

@node "p2sm_general" "P2SM: generalities"

  This software works on 2/16/256 colors images in a chunky way so that it's 
  screenmode independant. You may edit a 256 colors image in a duochrome
  screenmode, but it's a bit silly. You don't have to downgrade from your
  convenient TC32 environment to handle and work on 2/16/256 colors images.
    
  The chunky datas for the raster builds the final (zoomed) image shown in
  the raster workshop window. So it may be slow if you swap from large 
  image to another.
    
  Requirements:
    
  ú EdDI cookie is mandatory, for offscreen VDI. Better choice is NVDI.
   
    NB: fVDI offscreen functions may seem available, but are not implemented.
    So alert is bypassed but raster won't be displayed. If you use fVDI as
    basic VDI layer, add also NVDI ontop to complete offscreen functions.
  
  ú Multitasking OS, NVDI and very quick CPU are strongly advised.
   
  ú PARX.SYS modules to Read and Write some images formats. A small and 
  customized parx.sys folder is provided for small footprint on screen and
  human interaction. PI1/3 and NEO formats are saved natively.
    
  ú the more RAM available, the merrier. There is no limitation of loaded
  images, so rasters can populate a large amount of memory. Moreover, the
  Zoom x2 to x16 is RAM consuming if large images/sprites sets. 
  If you are short in RAM, then work in the 16 or 256 colors screenmode
  corresponding to the number of colors of your images.
 
@endnode

@node "p2sm_legal" "P2SM: legal"

  P2SM is freeware. Source code is provided for general knowledge,
  possible fork and issues search. Monetizing on this work is forbidden.
    
  It is strongly advised to make frequent backups of your datas.

  As always, we deny any responsibility concerning any errors, bugs
  or limitations of the program on your personal data, and on
  your computer. We try hard to seek out errors and to correct them.
 
@endnode

@node "p2sm_images_list" "P2SM: images list"

  Only image files with palette are supported and 2/16/256 colors.
  For now, images with 3,5,6,7 bitplanes will not be correctly loaded 
  (possible fixes in the future).
 
  In multitasking environment, you can drag'n'drop files and folders from
  the desk to load a series of images.
  To avoid mass effects, only level -1 of the folders content will be loaded.
  
  Program argument is supported at launch to load an image or an images list.

  "Paste as new" and "Duplicate" functions need a selected image to copy
  some datas and palette.
  
  Key short-cut for closing an image is ^Del and not ^U.
  
  Up and Down arrows keys permits to change selected image.

  Closing all closes all images except those with the modified state.

@{0B}Load and save list@{0} 

  The complete list can be saved into *.ilt file (ILT for Image List Text)
  which describes opened images and their current states (tool mode, zoom,
  color index of pen/gum/null, etc).
 
  Purpose is to resume work by loading the images list, like a project. 
  An option in the preferences can clear the current list before loading
  new list.
  
  You can link *.ILT files with P2SM.PRG in your desktop configuration.
 
@endnode

@node "p2sm_image_metadatas" "P2SM: image metadatas"
    
  You can change some images informations there, such as:
    
  - name (the current folder is kept, except if you "save as"). The
    DOS 8+3 name format can be mandatory if you have set it in the
    preferences.
    
  - format and extension. GIF is favoured. (X)IMG can be used if width
    is a 16px multiple. NEO and PI1/3 need to tie in precise width, height
    and colors number.
    For NEO and PI1, colors are saved in STE bit-format.
      
  - bitplane number can be changed. The chunky values are lost only when 
    saving files and quitting. The old data can be retreived if you have
    saved the palette into file before the first change.

  - width and height can be changed also. Width can be 16px multiple if you
    have set it in the preferences.
 
@endnode

@node "p2sm_raster_workshop" "P2SM: raster workshop"


@{0B}Zoom@{0} (- and + keys of the numeric pad): 

  - Uses offscreen VDI functions to draw from x1 to x16. Need EdDI cookie.
  - Uses a lot of TT-RAM, so with larges images it may be better to leave
    True Color and return to 256 colors screenmode.

@{0B}Undo / Redo @{0} (respectively ^Z and ^Y): 

  - Uses a lot of RAM, one memory allocation for each image. 
    Old TOS supports a limited amount of memory allocations, so one should
    not open too many images.
  - Modifications history is purged at closing or saving.
  - Extends as long as memory is available. If new memory allocation is not
    possible at one point, then 50%+ of old history is purged.
  

@{0B}Edition modes@{0}:

   When pick action is active (mouse cursor is pointing hand), you can escape
   this action with Right click or Left click outside the raster.


 - @{0U}Block select (F1 key):@{0}

   No use of rubberbox.
   Left click selects the left-top corner of a new block, its width and height
   are set by default (32*32, can be modified in the preferences).
   Right click modifies the right-bottom corner of the block.
   Arrow keys can move the selection on the left-top corner, keeping width
   and height.

   The block appears as inverted in the display.
   To deselect, set negative width or height, ie right-click at the left or top
   of the block.

   The cut block is replaced by the null color.
   This null color can be choosen in the pop-up or picked from the image. Use
   Key N for shortcut.

   Block is copied/cut into the system clipboard, the format is binary and
   written to scrap.hex file (Pixel = Byte, value is VDI color index encoded
   in hexa-2 letters, CR+LF at line end).

   For paste function, you can set a null/void button and the specific color.
   Thus activated, the paste will not add the pixels of choosen color to the
   image.
   Pick the pixel which will be the left-top corner of the pasted array.

 
 - @{0U}Pixels draw (F2 key):@{0}

   Left click is Pen. Key P to pick color from the raster instead of the pop-up.
   Right click is Gum. Key G to pick a color from the raster.


 - @{0U}Brush (F3 key):@{0}

   Left click to apply the choosen shape with pen color.
   Right click draw the shape with gum color.
   
   For now, shapes can be modified using a ressource editor 
   (Tree 24, 1 bitplane icons).

 
 - @{0U}Flood filler (F4 key):@{0}

   Left click to fill the pointed color zone by pen color.
   Right click to fill with gum color.


 - @{0U}Rectangle (F5 key):@{0}

   Uses a rubberbox to acquire top-left corner at first click,
   and bottom-right corner at click release.
   The 'settings' button opens Tools attributes window for fine settings.
   'a=b' equal sides button force to draw a square.
   Used color is pen color.


 - @{0U}Ellipse (F6 key):@{0}

   Uses a rubberbox to acquire positions at first click and click release.
   The 'settings' button opens Tools attributes window for fine settings.
   'a=b' equal sides button force to draw a square.
   Used color is pen color.


 - @{0U}Polyline (F7 key):@{0}

   Left click to set line start. Use right click to complete the line.
   You can continue to use right click to draw a polyline.
   The 'settings' button opens Tools attributes window for fine settings.
   Used color is pen color.


 - @{0U}Text (F8 key):@{0}

   The 'Edit' button opens Tools attributes window for writing and
   font/size/effects settings.
   Left click apply the text in the raster at top-left text corner.
   Used color is pen color.


 - @{0U}Image mirror (F9 key):@{0}

   Arrow key Left/Right to flip verticaly.
   Arrow key Up/Down to flip horizontaly.


 - @{0U}Image shift (F10 key):@{0}

   Arrows keys Left/Right/Up/Down to move/shift the image 
   like a ROR/ROL function.


 - @{0U}Image rotate:@{0}

   In 90ø steps, clockwise or counter-clockwise. 
 
@endnode

@node "p2sm_tools_attributes" "P2SM: tools attributes"

  Several sub-panels in this window, for text edition and fine settings
  for VDI basic primitives.
  
  For text, write message in the edit field to replace the default text.
 
@endnode

@node "p2sm_palette_editor" "P2SM: palette editor"


  If you search for a color remap using an imposed palette, see this in the
  preferences in the Palette panel. If enabled, the palette of the first
  listed image will be used as palette for next loaded images.

  The Undo/Redo does not apply for palette modifications. Make a secure backup
  by saving it.


@{0B}Colors manipulator@{0}:

   Key C to pick and select a color from the raster.
   
   ^F1: Load palette
   ^F2: Save palette
   ^F3: Update color in raster

 - Loaded/Saved palette files follow the PARX palette format:
   
   ú 2 LONG for "PARX_PAL"
   ú 1 INT for number version (200 is kept)
   ú 1 INT for the bitplane number
   then series of N triplets in VDI order
   ú 1 INT for red (0 to 1000)
   ú 1 INT for green (0 to 1000)
   ú 1 INT for blue (0 to 1000)

   File extension is .P0x where x is bitplane number.
   To expand and manage a versatile number of colors for palette edition,
   x can be continous from 0 to 8, so it allows to store 2^x colors. 
     
    .P00 -> just 1 color
    .P01 -> 2 colors
    .P02 -> 4 colors
    .P03 -> 8 colors
    .P04 -> 16 colors
    .P05 -> 32 colors
    .P06 -> 64 colors
    .P07 -> 128 colors
    .P08 -> 256 colors

   If alerts are enabled in the Help menu and the selected index is not 0,
   then you can choose the load or save from start index (color 0) or 
   the selected index.
   If help alerts are disabled, then load or save are done from the
   selected index.
 
   Palette files are completed with white color for padding if the number to
   save is higher than the present colors (from start or selected index).

   You can copy and paste one color to the clipboard (file SCRAP.P00 is used),
   with ^C and ^V, when the palette window is ontop.   

 - The Update button is for True colors environment. Realtime color change can 
   be time consuming. For large or complex image, it may be better to have it
   manual for color change seen in the raster workshop window.
   This button can be enabled in the preferences, palette tab.
   
 - Gradient can be generated between the current selected color and 
   another color from the palette choosen with right click.
   A confirm alert is displayed to eventualy cancel, if alerts are enabled in
   the Help menu.
 
 
@{0B}Sprite & mask generators@{0}:
  
   ^F5: Create sprite
   ^F6: Create mask

 - Remove mask color from sprite: usualy, sprites images set shows a flashy
   color for future transparent pixels. This function swaps this color by
   another that should be black/void.
   Use this function with the other below.
 
 - Generate image mask: select the color from the sprites images set that will
   be transparent. Other colors will be for the mask. Current palette can be
   kept, otherwise the mask image will be duochrome (one only bitplane).
 
 
@{0B}Rearrange colors order@{0}:

  Grip a color using mouse click held then drag the box at the wanted location
  in the palette.
   and  buttons cycle all colors in the palette backward/upward.
  
  Purpose is to spare the first 16 colors (index 0 to 15) for GEM objects, or
  to use colors that will not hamper windows and menu handling by the user.
  Index 0 is usualy white (or very light) and index 1 the opposite, ie black
  or very dark. 
 
  The Rollback button reset the changes, original palette order is recovered.
  
  The Commit button validates the changes. Image seems unaffected, but colors
  order in the palette is modified, so as the modified flag of the image,
  ready to be saved.
 
@endnode

@node "p2sm_preferences" "P2SM: preferences"

 - @{0U}Paths@{0}
   
   ú PARX.SYS folder: use the one provided with this software
   
   ú Images folder: your working folder
   
   ú Palettes folder: where you store (part of) palette files
   
   ú Use log file: enable or not, choose its path and name

 - @{0U}Images list@{0}
 
   ú Choose a convenient font and its size for the displayed list.
   
   ú The current list can be cleared (except for modified and unsaved images)
     before loading new images list (*.ilt file).

 - @{0U}Metadatas@{0}

   ú Choose DOS 8.3 name format, for compatibility to old Atari systems.
   
   ú Use lowercase for filemanes (enabled by default for MiNT)
   
   ú 16px multiple width is very common for sprites. Same for VDI rasters.

   ú Opens automaticaly metadatas window (or not) for new images, created
     from New (^N), Paste as new (^B), Duplicate (^T).

 - @{0U}Raster@{0}
 
   ú Choose pattern and color for filling the void if the image is smaller
     than the window.
     
   ú Default width and height can help block selection for same size sprites
     series.
     
   ú The GEM clipboard is used for block copy/cut and paste. SCRAP.HEX file
     is dedictated for this write and read job, but user can also export a
     copy to SCRAP.IMG (if XIMG.WIM is provided) for other applications.

   ú Default raster tool mode, after Load / New / Paste as new
     if you prefer to start with block functions and avoid drawing pixels
     at first time.

 - @{0U}Palette@{0}

   ú When a (X)IMG file format image is saved, you may want the palette be
     ordered in XBIOS/Shifter (VDIX) order instead of the VDI one (VDI).

   ú Under True colors screenmodes, color modification can be time consuming
     because the raster has to be partialy redrawn (with the changed color).
     To be quicker and for work fluidity, you may want to see raster change
     at will and not realtime, so deselect this option. 
     Though change is automaticaly updated if you select another color in
     the palette manipulator. 

   ú When loading, you can force color remap on the new images. 
     Palette of the first listed image is used as palette for next loaded
     images.
     This function calls the PARX.TRM module. 
   

 Preferences, windows positions and opened states are saved to a config
 file located in $HOME.
 
@endnode

@node "p2sm_history" "P2SM: history"

 @{0B}1.2C@{0}
 - add: resize block selection with Shift+Arrows keys.
 - fix: cancel or crop block selection if image is reduced.
 - fix: in conversion table for VDI index colors: 1 and 255 were swapped
        at loading/saving for 256 colors images. 

 @{0B}1.2B@{0}
 @{0U}Images list:@{0}
 - add: make update desk for drives contents after writing on disk 
        (under multitasking environment).
 - fix: make ^C effective for Block Copy if image list window ontop by error
        (for ^X and ^V, still mandatory to have raster window ontop).
 - fix: selection and '?' popup: Save as... falsly disabled. 
 - fix: selection and right-click free pop-up could not close image(s).
 - fix: list start not corrected after closing image(s).
 - fix: bad redraw when scrolling to bottom with bottom widget.
 @{0U}Raster window:@{0}
 - add: VDI index indicator on toolbar, next to XYWH.
 - add: arrow keys can move selection in block mode.
 - fix: mirroring and shifting: arrows keys interference with window scrolling.
 @{0U}Palette tool:@{0}
 - add: key shorts for some buttons.
        ^F1: Load palette, ^F2: Save palette, ^F3: Update color in raster
        ^F5: Create sprite, ^F6: Create mask
 - fix: selected color redraws after load or paste.

 @{0B}1.2@{0}
 @{0U}Raster window:@{0}
 - add: image rotate in +/-90ø steps.
 - add: show x+y coords when mouse cursor is in hand pointing state.
 - add: can save a block copy to scrap.img (enable it in the preferences).
 - fix: infinite loop if flood fill on same color.
 - fix: recalculate main color after flood fill.
 - fix: bad edges detection (for example, made bad block redraw on edges).
 - fix: for some tools, forgot to top window after click in void zone.
 - mod: tools are reordered in the pop-up and F1-F10 keys.
 @{0U}Images list:@{0}
 - add: save and load images list as project (*.ILT), with optional
        list clearing before loading (enable this in the preferences).
 - add: close all images (except those that have the flag 'modified').
 - fix: wrong address pointer for raster used when closing image.
 - fix: alert if try to load image without palette or not handled by RIM 
        (no alert when multiple loads with Drag'n'drop).
 - fix: last item wasn't fully displayed in the window bottom.
 - fix: scrolling with down key and item selected.
 @{0U}Preferences:@{0}
 - fix: buttons still selected after paths were changed.
 - fix: could not set default raster tool mode greater than 'image shift'.
 @{0U}Fileselectors:@{0}
 - fix: show title (wrong AES/GEMDOS version detection).
 - fix: correct use of filters.

 @{0B}1.1@{0}
 @{0U}Raster window:@{0}
 - add: brush (draw with 16x16px pattern).
 - add: gum color is possible for flood filler.
 - add: "a=b" button for equal sides (square/circle for rectangle/ellipse).
 - add: settings button: fill pattern for surfaces, type-width-ends for lines.
 - add: remember sliders positions.
 - mod: allow zoom up to 32 if image =< 128*128px.
 - fix: zoom>1 still displayed image evenif deselection in image list.
 - fix: use other safer algorithm for flood filler (stack overflow).
 - fix: forgot the 'modified' flag for VDI basics and flood filler.
 @{0U}Palette tool:@{0}
 - add: rearrange palette order.
 - add: generate gradient in colors modificator.
 - fix: could not select index 0 in palette tools color table. 
 @{0U}Images list:@{0}
 - fix: 2 bitplanes images are loaded and converted to 4 bitplanes.
 - fix: double-click on toolbar opened the metadatas window.
 - fix: closing an image made the next ones with bad palette.
 @{0U}Miscellaneous:@{0}
 - mod: Text window becomes Tools attributes window with sub-panels.
 - add: save tools attributes and preferences windows positions in CFG file.
 - fix: alert if screensize is not enough.

 @{0B}1.0@{0}
 - add: Undo (^Z) and Redo (^Y), with raster changes history.
 - add: VDI basics: (filled|hollowed) rectangles and ellipses, polylines, text.
 - add: bluit-in drawing basic: flood filler.
 - add: BubbleGEM support, with P2SM.BUB file.
 - add: logfile (generaly to u:\ram\p2sm.log).
 - add: arrange/dispose windows (^J).
 - mod: the Fonts window is revamped for Text function (font, size, attributes
        and edit). The fonts for images list is relocated in the preferences.
 
 - add: preference for opening automaticaly or not the metadatas window
        for new images.
 - add: preference for lowercase filenames/extensions.
 - add: preference for default raster mode edition (load, new, paste as new).
    
 - fix: possible crash at rename filename function.
 - fix: corrupted saved files if length > 16000 KB (ex: large block copy).
 - fix: block copy added one more extra line at bottom with left pixel.
 - fix: extension was lost after renaming image.
 - fix: overwrite alert wrongly displayed for "Save" same name.
 - fix: set as modified the color-remaped loaded images.
 - fix: add "u:" and convert slashes for $HOME value written in un*x format.

 - add: arrows keys are effective on raster window for scrolling.
        (old behavior is kept for mirror and shift mode).
 - mod: ^Del instead of ^U for closing image, the previous image in the list
        become selected.
 - fix: removed Insert key, use only ^N.
 - fix: palette tools, modificator pane: conflit between C and ^C.
 - fix: ^M was not active in image metadatas window.
 - fix: Save as (^M) was possible only if modified.

 - fix: raster: block selection, display W and H values (-1 for both).
 - fix: raster: will redraw block only in block mode (F2).
 - fix: raster: pixel at 0,0 = block unselected block display.
 - fix: raster: void zone was not redrawn when unzoomed.
 - fix: raster: closing all, remained first raster.
 - fix: raster: was not all all redrawn after resize.
 - fix: images list: bad redraw when scrolling to bottom.
 - fix: images list: no redraw after renaming.
 - fix: if vertical/horizontal slided, only redraw if changed.

 - mod: use of clean revamped EXIST() instead of old Fopen() trick.
 - rmv: records slot 2 (MFDB) unused.
 - fix: iconified window title.

 @{0B}0.9@{0}
 + first functional release
 
@endnode

@node "p2sm_greetings" "P2SM: greetings"

  to Claude ATTARD,
     who taught me to code in GEM in his articles

  to Daroou / Renaissance aka Jean-Marc STOCKLAUSEN
     an old friend, met during the Dungeon GEM adventure

  Thanks to K-L and Amigars and Jeeg from the Amiga World,
            Atarians unofficial team and Apollo team for the V4SA machine,
            Strider/MJJProd, Cooper/Paradize, fabounio/TripleA,
            and people on ircnet #atari.fr
 
@endnode
