'
' ****************************************************************************
'
'       ð 3 Cubes mapp‚s 256 couleurs en GFA Basic 3.5 pour Falcon 030 ð
'
'                              ½ Fantomas 1995
'
'                       DerniŠres modifs: 22 Aout 1995
'
' ****************************************************************************
'
'
$C+
ON BREAK GOSUB fin
ON ERROR GOSUB fin
'
coke%=GEMDOS(&H20,L:0)          ! Superviseur...
'
' ----------------------------------------------------------------------------
' Gestion de la m‚moire.
' ----------------------------------------------------------------------------
'
INLINE module%,30858
INLINE cub_data%,18966
'
INLINE cube_001%,27481
INLINE cube_002%,20736
INLINE cube_003%,19250
'
INLINE play_mod%,11850
INLINE logo%,16960
INLINE depack%,366
INLINE rebond%,128
'
ecran%=XBIOS(3)
RESERVE 50000                   ! Reservation m‚moire
mod%=MALLOC(46446)              ! Module soundtrack
me1%=MALLOC(77824)              ! Image PI9 (Faces du cube 1)
me2%=MALLOC(77824)              ! Image PI9 (Faces du cube 2)
me3%=MALLOC(77824)              ! Image PI9 (Faces du cube 3)
ec1%=MALLOC(76800)              ! Ecran 1.
ec2%=MALLOC(76800)              ! Ecran 2.
eff%=MALLOC(42240)              ! Effacement.
cub%=MALLOC(39168)              ! Donn‚es pour le cube.
'
' ----------------------------------------------------------------------------
' Changement de r‚solution 320x200 256c.
' ----------------------------------------------------------------------------
'
res&=XBIOS(88,W:-1)                           ! R‚solution actuelle
moniteur%=XBIOS(89)                           ! Type de moniteur
IF moniteur%=2                                ! Moniteur VGA
  ~XBIOS(5,L:ec1%,L:ec1%,W:3,W:&X100110011)   ! VGA: 320x240 256c.
ELSE
  ~XBIOS(5,L:ec1%,L:ec1%,W:3,W:&X11)          ! TV:  320x200 256c.
ENDIF
'
' ----------------------------------------------------------------------------
' Initialisation des variables.
' ----------------------------------------------------------------------------
'
image1%=me1%+1024                  ! Donn‚es pour l'image aprŠs la palette
image2%=me2%+1024                  ! Donn‚es pour l'image aprŠs la palette
image3%=me3%+1024                  ! Donn‚es pour l'image aprŠs la palette
' ---> Player soundtrack.
dsp_relo%=play_mod%                ! Adr: relocation du player.
dsp_play%=play_mod%+10             ! Adr: joue module.
dsp_stop%=play_mod%+34             ! Adr: Stoppe module.
' ---> Offset animation faces.
offset1%=0
offset2%=0
offset3%=0
' ---> Offset position du cube.
decal1%=128
decal2%=0
decal3%=272
' ---> Offset rotation du cube.
cube1%=ADD(cub%,19584)                           ! Face: Manga
cube2%=cub%
cube3%=ADD(cub%,16320) ! 544*30
' ---> Offset rebond du cube.
reb1%=rebond%
reb2%=ADD(rebond%,50)
reb3%=ADD(rebond%,100)
'
sens&=48                                         ! Sens du d‚placement
anim!=TRUE
key|=BYTE{&H484}                                 ! Sauve clavier
'
' ----------------------------------------------------------------------------
'
' ----------------------------------------------------------------------------
'
BYTE{&H484}=0                                    ! Repetition clavier
OUT 4,18                                         ! Souris OFF
'
' ----------------------------------------------------------------------------
'
' ----------------------------------------------------------------------------
'
CLS
BMOVE ec1%,ec2%,76800                            ! Efface ‚cran 2
BMOVE ec1%,eff%,42240
' ----------------------------------------------------------------------------
' Affiche pr‚sentation
' ----------------------------------------------------------------------------
@centre_texte(1,"    p ð 256 COLORS MAPPED CUBE ð q")
@centre_texte(3,"What about displaying three 256 colors")
@centre_texte(4,"mapped cubes on the screen ?")
@centre_texte(6,"Hey, man ! It's 100% GFA Basic code!")
@centre_texte(7,"for")
@centre_texte(8,"FALCON 030")
@centre_texte(14,"Code: FANTOMAS")
@centre_texte(16,"Pack Ice depack routine: Axe")
@centre_texte(17,"DSP Player: BitMaster")
@centre_texte(19,">>>  Preview  <<<")
@centre_texte(21,"    p Find the secret code for q")
@centre_texte(22,"    p HOT STUFF! q")
~INP(2)
CLS
' ----------------------------------------------------------------------------
' D‚compactage des donn‚es (Routine PACK-ICE).
' ----------------------------------------------------------------------------
~C:depack%(L:cube_001%,L:me1%)                   ! Decompacte image cube 1
~C:depack%(L:cube_002%,L:me2%)                   ! Decompacte image cube 2
~C:depack%(L:cube_003%,L:me3%)                   ! Decompacte image cube 3
~C:depack%(L:module%,L:mod%)                     ! D‚compacte musique
~C:depack%(L:cub_data%,L:cub%)                   ! D‚compacte data
' ----------------------------------------------------------------------------
' Installe la palette & Lance la musique
' ----------------------------------------------------------------------------
BMOVE me1%,&HFFFF9800,1024                       ! Installe la palette.
CALL dsp_relo%                                   ! Relocation du player
~C:dsp_play%(L:mod%)                             ! On lance la musique
' ----------------------------------------------------------------------------
' Affichage du logo
' ----------------------------------------------------------------------------
BMOVE logo%,ec1%,16960
BMOVE logo%,ec2%,16960
' *--------------------------------------------------------------------------*
'
'                ð Boucle principale: Animation des trois cubes ð
'
' *--------------------------------------------------------------------------*
REPEAT
  ' t%=TIMER
  ' FOR fois%=0 TO 999
  BMOVE eff%,ADD(ec1%,20800),42240               ! On ‚fface l'‚cran logique.
  @affiche_cube(image1%,offset1%,decal1%,cube1%) ! Affiche 1er cube.
  @affiche_cube(image2%,offset2%,decal2%,cube2%) ! Affiche 2me cube.
  @affiche_cube(image3%,offset3%,decal3%,cube3%) ! Affiche 3me cube.
  @permute_ecrans                                ! Hop, on met … l'‚cran!
  @rotation(544,1088,1088)                       ! Calcul de la rotation.
  @anime_faces(anim!,3)                          ! Animation des faces.
  @rebond                                        ! Rebond des cubes.
  @secret_code
UNTIL BYTE{&HFFFFFC02}=57                        ! Attente de [SPACE].
' NEXT fois%
' PRINT (TIMER-t%)/200
' @permute_ecrans                                  ! Hop, on met … l'‚cran!
' ~INP(2)
@fin                                             ! On Quitte le programme.
' *--------------------------------------------------------------------------*
'
'                              ð Procedures ð
'
' *--------------------------------------------------------------------------*
> PROCEDURE fin
  ' ----------------------------------------------------------------------------
  ' Fin du programme.
  ' ----------------------------------------------------------------------------
  CALL dsp_stop%                                 ! Stoppe la musique.
  BYTE{&H484}=key|                               ! Restaure clavier.
  OUT 4,8                                        ! On remet la souris.
  SHOWM                                          ! La revoil… !
  blow_res&=BSET(res&,15)                        ! Carte Blow Up
  ~XBIOS(5,L:ecran%,L:ecran%,W:3,W:blow_res&)    ! Ancienne  r‚solution.
  ~MFREE(mod%)                                   ! Rends la m‚moire au TOS
  ~MFREE(ec1%)                                   !
  ~MFREE(ec2%)                                   !
  ~MFREE(me1%)                                   !
  ~MFREE(me2%)                                   !
  ~MFREE(me3%)                                   !
  ~MFREE(cub%)                                   !
  ~MFREE(eff%)                                   !
  ~GEMDOS(&H20,L:coke%)                          !
  END                                            ! Fini, on retourne au bureau.
RETURN
> PROCEDURE permute_ecrans
  ' ----------------------------------------------------------------------------
  ' Permutation sur deux ecrans.
  ' ----------------------------------------------------------------------------
  SWAP ec1%,ec2%
  ~XBIOS(5,L:ec1%,L:ec2%,W:-1)
  VSYNC
RETURN
> PROCEDURE secret_code
  ' ----------------------------------------------------------------------------
  ' Code secret: EVENTIDE - Affiche des asiatiques denudees sur tous les cubes
  ' ----------------------------------------------------------------------------
  k$=UPPER$(INKEY$)
  IF k$=CHR$(13)                                 ! Si caractere = RETURN
    IF code$="EVENTIDE"                          ! Si code = EVENTIDE
      @asian_girls                               ! Change les faces des cubes
    ENDIF                                        ! Sinon
    code$=""                                     ! Efface code
  ELSE
    IF k$=CHR$(27) AND anim!=FALSE               ! Si 'Esc' et 'asians'
      @normal                                    ! Retour a la normale
      code$=""                                   ! Efface code
    ELSE
      IF LEN(code$)<8                            ! Si longueur<8
        code$=code$+k$                           ! Code = code + caractere
      ENDIF
    ENDIF
  ENDIF
RETURN
> PROCEDURE asian_girls
  ' ----------------------------------------------------------------------------
  ' Remplace toutes les faces des 3 cubes pas des jf asiatiques
  ' ----------------------------------------------------------------------------
  offset1%=240                                   ! Offset cube 1
  offset2%=240                                   ! Offset cube 2
  offset3%=240                                   ! Offset cube 3
  anim!=FALSE                                    ! Animation faces OFF
RETURN
> PROCEDURE normal
  ' ----------------------------------------------------------------------------
  ' Retour aux faces normales des cubes
  ' ----------------------------------------------------------------------------
  sens&=48                                       ! Sens de l'animation
  offset1%=0                                     ! Offset normal 1
  offset2%=0                                     ! Offset normal 2
  offset3%=0                                     ! Offset normal 3
  anim!=TRUE                                     ! Animation faces ON
RETURN
> PROCEDURE rotation(vit1&,vit2&,vit3&)
  ' ----------------------------------------------------------------------------
  ' Rotation du cube.
  ' ----------------------------------------------------------------------------
  ADD cube1%,vit1&
  IF cube1%>ADD(cub%,38080)
    cube1%=cub%
  ENDIF
  ADD cube2%,vit2&
  IF cube2%>ADD(cub%,38080)
    cube2%=cub%
  ENDIF
  SUB cube3%,vit3&
  IF cube3%<cub%
    cube3%=ADD(cub%,38080) ! 544*70
  ENDIF
RETURN
> PROCEDURE anime_faces(anim!,vbl|)
  ' ----------------------------------------------------------------------------
  ' Animation des faces.
  ' ----------------------------------------------------------------------------
  IF anim!
    INC face|
    IF face|=vbl|
      face|=0
      ADD offset1%,sens&
      ADD offset2%,sens&
      ADD offset3%,sens&
      IF offset1%<=0 OR offset1%>=192
        sens&=-sens&
      ENDIF
    ENDIF
  ENDIF
RETURN
> PROCEDURE rebond
  ' ----------------------------------------------------------------------------
  ' Rebond du cube.
  ' ----------------------------------------------------------------------------
  decal1%=ADD(CARD{reb1%},128)
  ADD reb1%,2
  IF reb1%>ADD(rebond%,126)
    reb1%=rebond%
  ENDIF
  decal2%=CARD{reb2%}
  ADD reb2%,2
  IF reb2%>ADD(rebond%,126)
    reb2%=rebond%
  ENDIF
  decal3%=ADD(CARD{reb3%},272)
  ADD reb3%,2
  IF reb3%>ADD(rebond%,126)
    reb3%=rebond%
  ENDIF
RETURN
> PROCEDURE affiche_cube(image%,offset%,decal%,cube%)
  ' ****************************************************************************
  '
  ' Affichage du cube 256 couleurs / 68 lignes.
  '
  ' ****************************************************************************
  '
  ' image% : Dessin des faces.
  ' Offset%: Pour une animation de chaque face du cube !
  ' Decal% : Pour d‚caler le cube … l'‚cran.
  ' Cube%  : Position du cube (rotation).
  '
  face%=ADD(image%,offset%)
  posi%=ADD(ec1%,decal%)
  BMOVE ADD(face%,{ADD(cube%,0)}),ADD(posi%,{ADD(cube%,4)}),48
  BMOVE ADD(face%,{ADD(cube%,8)}),ADD(posi%,{ADD(cube%,12)}),48
  BMOVE ADD(face%,{ADD(cube%,16)}),ADD(posi%,{ADD(cube%,20)}),48
  BMOVE ADD(face%,{ADD(cube%,24)}),ADD(posi%,{ADD(cube%,28)}),48
  BMOVE ADD(face%,{ADD(cube%,32)}),ADD(posi%,{ADD(cube%,36)}),48
  BMOVE ADD(face%,{ADD(cube%,40)}),ADD(posi%,{ADD(cube%,44)}),48
  BMOVE ADD(face%,{ADD(cube%,48)}),ADD(posi%,{ADD(cube%,52)}),48
  BMOVE ADD(face%,{ADD(cube%,56)}),ADD(posi%,{ADD(cube%,60)}),48
  BMOVE ADD(face%,{ADD(cube%,64)}),ADD(posi%,{ADD(cube%,68)}),48
  BMOVE ADD(face%,{ADD(cube%,72)}),ADD(posi%,{ADD(cube%,76)}),48
  BMOVE ADD(face%,{ADD(cube%,80)}),ADD(posi%,{ADD(cube%,84)}),48
  BMOVE ADD(face%,{ADD(cube%,88)}),ADD(posi%,{ADD(cube%,92)}),48
  BMOVE ADD(face%,{ADD(cube%,96)}),ADD(posi%,{ADD(cube%,100)}),48
  BMOVE ADD(face%,{ADD(cube%,104)}),ADD(posi%,{ADD(cube%,108)}),48
  BMOVE ADD(face%,{ADD(cube%,112)}),ADD(posi%,{ADD(cube%,116)}),48
  BMOVE ADD(face%,{ADD(cube%,120)}),ADD(posi%,{ADD(cube%,124)}),48
  BMOVE ADD(face%,{ADD(cube%,128)}),ADD(posi%,{ADD(cube%,132)}),48
  BMOVE ADD(face%,{ADD(cube%,136)}),ADD(posi%,{ADD(cube%,140)}),48
  BMOVE ADD(face%,{ADD(cube%,144)}),ADD(posi%,{ADD(cube%,148)}),48
  BMOVE ADD(face%,{ADD(cube%,152)}),ADD(posi%,{ADD(cube%,156)}),48
  BMOVE ADD(face%,{ADD(cube%,160)}),ADD(posi%,{ADD(cube%,164)}),48
  BMOVE ADD(face%,{ADD(cube%,168)}),ADD(posi%,{ADD(cube%,172)}),48
  BMOVE ADD(face%,{ADD(cube%,176)}),ADD(posi%,{ADD(cube%,180)}),48
  BMOVE ADD(face%,{ADD(cube%,184)}),ADD(posi%,{ADD(cube%,188)}),48
  BMOVE ADD(face%,{ADD(cube%,192)}),ADD(posi%,{ADD(cube%,196)}),48
  BMOVE ADD(face%,{ADD(cube%,200)}),ADD(posi%,{ADD(cube%,204)}),48
  BMOVE ADD(face%,{ADD(cube%,208)}),ADD(posi%,{ADD(cube%,212)}),48
  BMOVE ADD(face%,{ADD(cube%,216)}),ADD(posi%,{ADD(cube%,220)}),48
  BMOVE ADD(face%,{ADD(cube%,224)}),ADD(posi%,{ADD(cube%,228)}),48
  BMOVE ADD(face%,{ADD(cube%,232)}),ADD(posi%,{ADD(cube%,236)}),48
  BMOVE ADD(face%,{ADD(cube%,240)}),ADD(posi%,{ADD(cube%,244)}),48
  BMOVE ADD(face%,{ADD(cube%,248)}),ADD(posi%,{ADD(cube%,252)}),48
  BMOVE ADD(face%,{ADD(cube%,256)}),ADD(posi%,{ADD(cube%,260)}),48
  BMOVE ADD(face%,{ADD(cube%,264)}),ADD(posi%,{ADD(cube%,268)}),48
  BMOVE ADD(face%,{ADD(cube%,272)}),ADD(posi%,{ADD(cube%,276)}),48
  BMOVE ADD(face%,{ADD(cube%,280)}),ADD(posi%,{ADD(cube%,284)}),48
  BMOVE ADD(face%,{ADD(cube%,288)}),ADD(posi%,{ADD(cube%,292)}),48
  BMOVE ADD(face%,{ADD(cube%,296)}),ADD(posi%,{ADD(cube%,300)}),48
  BMOVE ADD(face%,{ADD(cube%,304)}),ADD(posi%,{ADD(cube%,308)}),48
  BMOVE ADD(face%,{ADD(cube%,312)}),ADD(posi%,{ADD(cube%,316)}),48
  BMOVE ADD(face%,{ADD(cube%,320)}),ADD(posi%,{ADD(cube%,324)}),48
  BMOVE ADD(face%,{ADD(cube%,328)}),ADD(posi%,{ADD(cube%,332)}),48
  BMOVE ADD(face%,{ADD(cube%,336)}),ADD(posi%,{ADD(cube%,340)}),48
  BMOVE ADD(face%,{ADD(cube%,344)}),ADD(posi%,{ADD(cube%,348)}),48
  BMOVE ADD(face%,{ADD(cube%,352)}),ADD(posi%,{ADD(cube%,356)}),48
  BMOVE ADD(face%,{ADD(cube%,360)}),ADD(posi%,{ADD(cube%,364)}),48
  BMOVE ADD(face%,{ADD(cube%,368)}),ADD(posi%,{ADD(cube%,372)}),48
  BMOVE ADD(face%,{ADD(cube%,376)}),ADD(posi%,{ADD(cube%,380)}),48
  BMOVE ADD(face%,{ADD(cube%,384)}),ADD(posi%,{ADD(cube%,388)}),48
  BMOVE ADD(face%,{ADD(cube%,392)}),ADD(posi%,{ADD(cube%,396)}),48
  BMOVE ADD(face%,{ADD(cube%,400)}),ADD(posi%,{ADD(cube%,404)}),48
  BMOVE ADD(face%,{ADD(cube%,408)}),ADD(posi%,{ADD(cube%,412)}),48
  BMOVE ADD(face%,{ADD(cube%,416)}),ADD(posi%,{ADD(cube%,420)}),48
  BMOVE ADD(face%,{ADD(cube%,424)}),ADD(posi%,{ADD(cube%,428)}),48
  BMOVE ADD(face%,{ADD(cube%,432)}),ADD(posi%,{ADD(cube%,436)}),48
  BMOVE ADD(face%,{ADD(cube%,440)}),ADD(posi%,{ADD(cube%,444)}),48
  BMOVE ADD(face%,{ADD(cube%,448)}),ADD(posi%,{ADD(cube%,452)}),48
  BMOVE ADD(face%,{ADD(cube%,456)}),ADD(posi%,{ADD(cube%,460)}),48
  BMOVE ADD(face%,{ADD(cube%,464)}),ADD(posi%,{ADD(cube%,468)}),48
  BMOVE ADD(face%,{ADD(cube%,472)}),ADD(posi%,{ADD(cube%,476)}),48
  BMOVE ADD(face%,{ADD(cube%,480)}),ADD(posi%,{ADD(cube%,484)}),48
  BMOVE ADD(face%,{ADD(cube%,488)}),ADD(posi%,{ADD(cube%,492)}),48
  BMOVE ADD(face%,{ADD(cube%,496)}),ADD(posi%,{ADD(cube%,500)}),48
  BMOVE ADD(face%,{ADD(cube%,504)}),ADD(posi%,{ADD(cube%,508)}),48
  BMOVE ADD(face%,{ADD(cube%,512)}),ADD(posi%,{ADD(cube%,516)}),48
  BMOVE ADD(face%,{ADD(cube%,520)}),ADD(posi%,{ADD(cube%,524)}),48
  BMOVE ADD(face%,{ADD(cube%,528)}),ADD(posi%,{ADD(cube%,532)}),48
  BMOVE ADD(face%,{ADD(cube%,536)}),ADD(posi%,{ADD(cube%,540)}),48
RETURN
> PROCEDURE centre_texte(y_texte|,texte$)
  ' ----------------------------------------------------------------------------
  ' Centre un texte … l'‚cran
  ' ----------------------------------------------------------------------------
  x_texte|=DIV(SUB(40,LEN(texte$)),2)            ! Calcul position en x.
  PRINT AT(x_texte|,y_texte|);texte$             ! Affiche le texte.
RETURN
