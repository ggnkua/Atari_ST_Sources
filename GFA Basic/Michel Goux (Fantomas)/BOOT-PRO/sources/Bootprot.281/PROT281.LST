' ****************************************************************
'
'                     ð BOOT PROTECTOR v2.81 ð
'
'                        ½ Michel GOUX 1995
'
'                    DerniŠres modifs: 01/07/95
'
'             Fonctionne sur STf, STe & FALCON 030  
'
' ****************************************************************
'
'
$C+
ON ERROR GOSUB fin
ON BREAK GOSUB fin
' ----------------------------------------------------------------
' Mode superviseur
' ----------------------------------------------------------------
super%=GEMDOS(32,L:0)                     ! Passage en SUPERVISEUR
' ----------------------------------------------------------------
' Test du cookie_jar / R‚solution en fonction de la machine
' ----------------------------------------------------------------
CLS
@cookie_jar                              ! Test du COOKIE JAR
IF cookie_jar&=3                         ! =3, c'est un FALCON !
  ste|=BYTE{&HFFFF8007}                  ! Passage en mode STe ...
  ste|=BCLR(ste|,5)                      ! ‚vite les plantages ...
  BYTE{&HFFFF8007}=ste|                  ! avec les zics MAD MAX !
  res&=XBIOS(88,W:-1)                    ! R‚solution actuelle
  moniteur%=XBIOS(89)                    ! Type de moniteur
  IF moniteur%=2                         ! Moniteur VGA
    ~XBIOS(5,L:-1,L:-1,W:3,W:&X10110010) ! VGA - 320x240 16c.
  ELSE
    ~XBIOS(5,L:-1,L:-1,W:3,W:&X10000010) ! ST basse - 320x200 16c.
  ENDIF
ELSE                                     ! <>3: c'est un ST
  IF XBIOS(4)<>0                         ! Ce n'est pas un FALCON
    ~GEMDOS(32,L:super%)                 ! Retour en USER
    ALERT 1,"| | Low Rez Only ... ",1," Sorry ",r&
    END                                  ! Fin du programme
  ENDIF
  @blitter                               ! Active blitter
ENDIF
' ---------------------------------------------------------------
' Initialisation programme
' ---------------------------------------------------------------
current_drv%=0                           ! Lecteur = A
HIDEM                                    ! Cache la souris
@init                                    ! Initialisation
@destroy                                 ! Test des vecteurs
@bibli_boot                              ! Charger La bibliothŠque
@inf_load                                ! Chargement des pr‚f‚rences
@chiffre                                 ! Init chiffres (nø musique)
drv&=current_drv%                        ! Lecteur courant
SETMOUSE 159,99                          ! Souris au milieu de l'‚cran
DEFMOUSE souris$                         ! nouvelle souris
SHOWM                                    ! Tiens, la revoil… !
@test_boot                               ! Test du bootsecteur
auto!=FALSE
'
' ************************************************************
'
' BOUCLE PRINCIPALE
'
' ************************************************************
'
DO
  key$=INKEY$
  '
  '
  '
  IF CVI(key$)=59
    auto!=NOT (auto!)
    @etat
  ENDIF
  '
  IF auto!=FALSE
    ' ----------
    ' Dics A [A]
    ' ----------
    IF ((MOUSEK=1 AND MOUSEY>78 AND MOUSEY<138 AND MOUSEX>-1 AND MOUSEX<57) OR UPPER$(key$)="A") AND auto!=falxe
      drv&=0
      @test_boot
      @anti_rebond
    ELSE
      ' ----------
      ' Disc B [B]
      ' ----------
      IF ((MOUSEK=1 AND MOUSEY>141 AND MOUSEY<200 AND MOUSEX>-1 AND MOUSEX<57) OR UPPER$(key$)="B") AND auto!=FALSE
        IF DPEEK(&H4A6)>1
          drv&=1
          @test_boot
        ELSE
          IF cookie_jar&=3
            @error("A DRIVE B ON","FALCON ?")
          ELSE
            @error("DRIVE B NOT","CONNECTED")
          ENDIF
        ENDIF
        @anti_rebond
      ELSE
        ' -----------------
        ' Charger music [L]
        ' -----------------
        IF (MOUSEK=1 AND MOUSEX>264 AND MOUSEX<311 AND MOUSEY>28 AND MOUSEY<44) OR UPPER$(key$)="L"
          @load_music
        ELSE
          ' -----------------
          ' Stopper music [S]
          ' -----------------
          IF (MOUSEK=1 AND MOUSEX>264 AND MOUSEX<311 AND MOUSEY>79 AND MOUSEY<95) OR UPPER$(key$)="S"
            @stop_zic
          ELSE
            ' ---------------
            ' Jouer music [P]
            ' ---------------
            IF (MOUSEK=1 AND MOUSEX>264 AND MOUSEX<311 AND MOUSEY>99 AND MOUSEY<115) OR UPPER$(key$)="P"
              @play_zic
            ELSE
              ' --------------
              ' Music plus [+]
              ' --------------
              IF (MOUSEK=1 AND MOUSEY>56 AND MOUSEY<68 AND MOUSEX>299 AND MOUSEX<311) OR key$="+"
                IF nr_zic%=10
                  IF zic_load&=1
                    @error("CLICK ON PLAY","OR LOAD MUSIC")
                  ELSE
                    @error("YOU MAY LOAD","A MUSIC !")
                  ENDIF
                ELSE
                  INC nr_zic%
                  IF nr_zic%>9
                    nr_zic%=0
                  ENDIF
                  @select_music(296,53,bouton3$,bouton4$)
                ENDIF
              ELSE
                ' ---------------
                ' Music moins [-]
                ' ---------------
                IF (MOUSEK=1 AND MOUSEY>56 AND MOUSEY<68 AND MOUSEX>264 AND MOUSEX<276) OR key$="-"
                  IF nr_zic%=10
                    IF zic_load&=1
                      @error("CLICK ON PLAY","OR LOAD MUSIC")
                    ELSE
                      @error("YOU MAY LOAD","A MUSIC !")
                    ENDIF
                  ELSE
                    DEC nr_zic%
                    IF nr_zic%<0
                      nr_zic%=9
                    ENDIF
                    @select_music(261,53,bouton1$,bouton2$)
                  ENDIF
                ELSE
                  ' -------------
                  ' Couleur grise
                  ' -------------
                  IF MOUSEK=1 AND MOUSEX>145 AND MOUSEX<154 AND MOUSEY>46 AND MOUSEY<55
                    @color_grey
                  ELSE
                    ' ------------
                    ' Couleur rose
                    ' ------------
                    IF MOUSEK=1 AND MOUSEX>145 AND MOUSEX<154 AND MOUSEY>58 AND MOUSEY<67
                      @color_pink
                    ELSE
                      ' ----------
                      ' Texte vert
                      ' ----------
                      IF MOUSEK=1 AND MOUSEX>77 AND MOUSEX<86 AND MOUSEY>46 AND MOUSEY<55
                        @txt_green
                      ELSE
                        ' ------------
                        ' Texte marron
                        ' ------------
                        IF MOUSEK=1 AND MOUSEX>77 AND MOUSEX<86 AND MOUSEY>58 AND MOUSEY<67
                          @txt_brun
                        ELSE
                          ' ---------------
                          ' Sauvegarde .INF
                          ' ---------------
                          IF MOUSEK=1 AND MOUSEX>209 AND MOUSEX<256 AND MOUSEY>62 AND MOUSEY<78
                            @inf_save
                          ELSE
                            ' --------------------
                            ' Sauve music ON / OFF
                            ' --------------------
                            IF MOUSEK=1 AND MOUSEX>226 AND MOUSEX<235 AND MOUSEY>46 AND MOUSEY<55
                              @music_state
                            ELSE
                              ' ----------------
                              ' Informations [I]
                              ' ----------------
                              IF (MOUSEK=1 AND MOUSEX>258 AND MOUSEX<317 AND MOUSEY>163 AND MOUSEY<179) OR UPPER$(key$)="I"
                                @infos
                              ELSE
                                ' ------------------
                                ' Quitter le PRG [Q]
                                ' ------------------
                                IF (MOUSEK=1 AND MOUSEX>258 AND MOUSEX<317 AND MOUSEY>181 AND MOUSEY<197) OR UPPER$(key$)="Q"
                                  @error2("REALLY WANT","TO QUIT ?")
                                  IF ok!
                                    @fin
                                  ENDIF
                                ELSE
                                  ' ----------------
                                  ' Voir le boot [D]
                                  ' ----------------
                                  IF (MOUSEK=1 AND MOUSEX>240 AND MOUSEX<256 AND MOUSEY>151 AND MOUSEY<197) OR UPPER$(key$)="D"
                                    @show_boot
                                  ELSE
                                    ' -----------------
                                    ' Immunize disc [V]
                                    ' -----------------
                                    IF (MOUSEK=1 AND MOUSEX>258 AND MOUSEX<317 AND MOUSEY>135 AND MOUSEY<161) OR UPPER$(key$)="V"
                                      @error2("WANT TO","IMMUNIZE DISC")
                                      IF ok!
                                        @new_boot
                                      ENDIF
                                    ENDIF
                                  ENDIF
                                ENDIF
                              ENDIF
                            ENDIF
                          ENDIF
                        ENDIF
                      ENDIF
                    ENDIF
                  ENDIF
                ENDIF
              ENDIF
            ENDIF
          ENDIF
        ENDIF
      ENDIF
    ENDIF
  ELSE
    @automatic
  ENDIF
LOOP
' ******************************************************************
'
' PROCEDURES
'
' ******************************************************************
> PROCEDURE anti_rebond
  '
  ' ----------------------------
  ' Anti-rebond Clavier & Souris
  ' ----------------------------
  '
  REPEAT
  UNTIL MOUSEK=0 AND INKEY$=""
RETURN
> PROCEDURE chiffre
  '
  '
  '
  '
  '
  ~XBIOS(5,L:ADD(fond%,34),L:-1,W:-1)
  PUT 284,53,chiffre$(nr_zic%)
  ~XBIOS(5,L:ecran%,L:-1,W:-1)
  PUT 284,53,chiffre$(nr_zic%)
RETURN
' ****************************************************************
'
' LECTURE / ECRITURE SUR DISQUETTE
'
' ****************************************************************
> PROCEDURE tst_prot(drive$)
  ' ----------------------------------------------
  '
  ' Teste si la disquette est prot‚g‚e en ‚criture
  '
  ' ----------------------------------------------
  LOCAL bidon%,state&
  bidon%=GEMDOS(61,L:V:drive$,0)
  CARD{&HFF8606}=&H80
  state&=CARD{&HFF8604} AND &H40
  IF state&<>0
    prot_er&=1
    @error("REMOVE WRITE","PROT. ON "+CHR$(ADD(65,drv&)))
  ELSE
    prot_er&=0
  ENDIF
RETURN
> PROCEDURE sauve_boot
  ' -----------------------------------------------
  '
  ' Sauvegarde du boot de BOOT PROTECTOR sur disque
  '
  ' -----------------------------------------------
  tst_prot(CHR$(ADD(65,drv&))+":\")
  IF prot_er&=0
    SETCOLOR 8,&H700
    wrt_error%=XBIOS(9,L:buffer%,L:0,drv&,1,0,0,1)
    SETCOLOR 8,&H300
    IF wrt_error%<>0
      @error("WRITE ERROR","ON DRIVE "+CHR$(ADD(65,drv&)))
    ENDIF
  ENDIF
RETURN
> PROCEDURE boot_exec
  ' ---------------------------
  '
  ' Rend le boot executable ...
  '
  ' ---------------------------
  ~XBIOS(18,L:buffer%,L:-1,-1,1)
RETURN
> PROCEDURE new_boot
  '
  '
  '
  '
  '
  @charge_boot
  IF read_error%=0
    CARD{buffer%}=&H6038
    BMOVE boot%,ADD(buffer%,58),454
    @boot_exec
    @sauve_boot
    @test_boot
  ENDIF
RETURN
> PROCEDURE test_boot
  ' ----------------------------------
  '
  ' Routine principale de test du boot
  '
  ' ----------------------------------
  ' BMOVE ADD(fond%,16034),ADD(ecran%,16000),15840
  @charge_boot
  IF read_error%=0               ! Si pas d'erreur de lecture
    @somme
    @info_disc                   ! Infos sur le disc...
    IF total%=&H1234             ! Si la somme est ‚gale … &H1234
      @cher_boot ! Cherche dans la bibliothŠque s'il est connu
      IF {ADD(find%,132)}<>0
        type$=CHAR{{ADD(find%,132)}}
      ELSE
        type$="UNKNOWN BOOTSECTOR"
      ENDIF
      IF RIGHT$(type$,5)="VIRUS" ! Si c'est un virus,
        DEFFILL 10,2,8           ! on met le fond rouge avant d'‚crire
        PBOX 75,181,225,189      ! le nom du boot.
      ENDIF
      @aff_txt1(84,168,"EXECUTABLE",118,7) ! Le boot est executable !
      @aff_txt1(68,182,type$,150,7) ! Affiche le nom du boot
    ELSE
      @aff_txt1(84,168,"NON EXECUTABLE",118,7) ! pas executable
    ENDIF
  ENDIF
RETURN
> PROCEDURE cher_boot
  ' --------------------------------------------------------
  '
  ' Routine de recherche du boot version 3: Assembleur 68000
  '
  ' --------------------------------------------------------
  INLINE find%,136
  adr_boot%=ADD(biblio%,6)
  fin_boot%=ADD(ADD(biblio%,6),MUL(nombre_boot&,30))
  {ADD(find%,132)}=0
  ~C:find%(L:buffer%,L:adr_boot%,L:fin_boot%)
RETURN
> PROCEDURE info_disc
  ' --------------------------------------------------
  '
  ' Informations sur le disc: pistes, secteurs, ect...
  '
  ' --------------------------------------------------
  nb_side|=BYTE{ADD(buffer%,26)}
  nb_sect|=BYTE{ADD(buffer%,24)}
  IF (nb_side|=1 OR nb_side|=2) AND nb_sect|-1>0
    nb_trac|=(ADD(MUL(BYTE{ADD(buffer%,20)},256),BYTE{ADD(buffer%,19)}))/nb_side|/nb_sect|-1
    @aff_txt1(210,102,STR$(nb_side|),22,7)
    @aff_txt1(210,116,STR$(nb_trac|),22,7)
    @aff_txt1(210,130,STR$(nb_sect|),22,7)
  ELSE
    IF auto!=FALSE
      @error("CAN'T READ","CONFIGURATION")
    ENDIF
  ENDIF
RETURN
> PROCEDURE charge_boot
  ' ------------------------------------
  '
  ' Charge un bootsecteur dans le buffer
  '
  ' ------------------------------------
  SETCOLOR 3,&H70
  read_error%=XBIOS(8,L:buffer%,L:0,drv&,1,0,0,1)
  SETCOLOR 3,&H30
  IF read_error%<>0
    @error("READ ERROR ON","DRIVE "+CHR$(ADD(65,drv&)))
  ENDIF
RETURN
> PROCEDURE show_boot
  ' ----------------------------------------
  '
  ' Voir le bootsecteur [SPACE] pour quitter
  '
  ' ----------------------------------------
  @anti_rebond
  GET 62,9,255,147,fond$
  DEFFILL 0,2,8
  PBOX 62,9,255,147
  OUT 4,18
  DEFTEXT 1,0,0,4
  adresse%=buffer%
  FOR t&=0 TO 15
    x_show&=63
    y_show&=ADD(20,SHL(t&,3))
    FOR n%=adresse% TO ADD(adresse%,31)
      show$=CHR$(BYTE{n%})
      IF show$=CHR$(0)
        TEXT x_show&,y_show&,"."
      ELSE
        TEXT x_show&,y_show&,show$
      ENDIF
      ADD x_show&,6
    NEXT n%
    ADD adresse%,32
  NEXT t&
  REPEAT
    key$=INKEY$
  UNTIL key$=" "
  PUT 62,9,fond$
  OUT 4,8
  SHOWM
RETURN
> PROCEDURE somme
  ' --------------------------------------------
  ' Calcul de la somme des octets du bootsecteur
  ' --------------------------------------------
  total%=0       ! On calcule la somme des octets du bootsecteur
  FOR n%=buffer% TO ADD(buffer%,511) STEP 2
    total%=(ADD(total%,CARD{n%})) MOD 65536
  NEXT n%
  BMOVE ADD(fond%,16034),ADD(ecran%,16000),15840 ! Transfert du fond
RETURN
> PROCEDURE automatic
  ' ----------------------------------------------
  ' Test et vaccination automatique des disquettes
  ' ----------------------------------------------
  SETCOLOR 3,&H70
  REPEAT
    IF CVI(INKEY$)=59           ! Si appui sur F1
      auto!=FALSE               ! Annule mode automatique
      @etat
    ENDIF
    read_error%=XBIOS(8,L:buffer%,L:0,drv&,1,0,0,1) ! lis boot
  UNTIL read_error%=0 OR auto!=FALSE
  SETCOLOR 3,&H30
  '
  IF auto!=TRUE                 ! Si mode automatique
    serie%={ADD(buffer%,8)}     ! Num‚ro de serie de la disquette
    IF serie%<>old_serie%       ! S'il est diff‚rent...
      old_serie%=serie%         ! On le sauve.
      @somme
      @info_disc                ! Lecture des infos
      IF total%=&H1234          ! Si la somme est ‚gale … &H1234
        @cher_boot              ! Cherche si le boot est connu
        IF {ADD(find%,132)}<>0
          type$=CHAR{{ADD(find%,132)}}
        ELSE
          type$="UNKNOWN BOOTSECTOR"
        ENDIF
        @aff_txt1(84,168,"EXECUTABLE",118,7) ! Le boot est executable !
        IF RIGHT$(type$,5)="VIRUS" ! Si c'est un virus,
          DEFFILL 10,2,8           ! on met le fond rouge avant d'‚crire
          PBOX 75,181,225,189      ! le nom du boot.
          @aff_txt1(68,182,type$,150,7) ! Affiche le nom du boot
          SHOWM
          @error2("WANT TO","IMMUNIZE DISC")
          HIDEM
          IF ok!
            @new_boot
          ENDIF
        ELSE
          @aff_txt1(68,182,type$,150,7) ! Affiche le nom du boot
        ENDIF
      ELSE
        @aff_txt1(84,168,"NON EXECUTABLE",118,7) ! pas executable
      ENDIF
    ENDIF
  ENDIF
RETURN
' ********************************************************************
'
' BOITES D'ALERTE / MESSAGES D'ERREURS
'
' ********************************************************************
> PROCEDURE error(m1$,m2$)
  ' -------------
  ' Affiche boite
  ' -------------
  GET 96,50,223,132,fond$
  RC_COPY ADD(alert%,34),0,0,128,83 TO ecran%,96,50
  ' -------------
  ' Affiche texte
  ' -------------
  @aff_txt2(98,70,m1$)
  @aff_txt2(98,80,m2$)
  ' ---------
  ' Test clic
  ' ---------
  REPEAT
    key$=INKEY$
  UNTIL (MOUSEK=1 AND MOUSEX>147 AND MOUSEX<171 AND MOUSEY>108 AND MOUSEY<124) OR key$=CHR$(13)
  PUT 96,50,fond$
  @anti_rebond
RETURN
> PROCEDURE error2(m1$,m2$)
  ' -------------
  ' Affiche boite
  ' -------------
  GET 96,50,223,132,fond$
  RC_COPY ADD(alert%,34),128,0,128,83 TO ecran%,96,50
  ' -------------
  ' Affiche texte
  ' -------------
  @aff_txt2(98,70,m1$)
  @aff_txt2(98,80,m2$)
  ' ---------
  ' Test clic
  ' ---------
  ok!=FALSE
  REPEAT
    key$=INKEY$
  UNTIL (MOUSEK=1 AND MOUSEY>109 AND MOUSEY<124) AND ((MOUSEX>114 AND MOUSEX<170) OR (MOUSEX>179 AND MOUSEX<204)) OR key$=CHR$(13) OR key$=CHR$(27)
  IF (MOUSEX>179 AND MOUSEX<204) OR key$=CHR$(13)
    ok!=TRUE
  ENDIF
  PUT 96,50,fond$
  @anti_rebond
RETURN
> PROCEDURE infos
  ' -------------
  ' Affiche boite
  ' -------------
  GET 96,50,223,132,fond$
  RC_COPY ADD(alert%,34),0,0,128,83 TO ecran%,96,50
  RC_COPY ADD(alert%,34),0,134,110,39 TO ecran%,105,59
  ' ---------
  ' Test clic
  ' ---------
  REPEAT
    key$=INKEY$
  UNTIL (MOUSEK=1 AND MOUSEX>147 AND MOUSEX<171 AND MOUSEY>108 AND MOUSEY<124) OR key$=CHR$(13)
  PUT 96,50,fond$
  @anti_rebond
RETURN
> PROCEDURE etat
  ' ---------------------------------------------
  ' Affiche l'etat du controle (normal/automatic)
  ' ---------------------------------------------
  ~XBIOS(5,L:ADD(fond%,34),L:-1,W:-1)
  IF auto!=TRUE
    HIDEM
    PUT 267,123,auto$
    ~XBIOS(5,L:ecran%,L:-1,W:-1)
    PUT 267,123,auto$
  ELSE
    SHOWM
    PUT 267,123,normal$
    ~XBIOS(5,L:ecran%,L:-1,W:-1)
    PUT 267,123,normal$
  ENDIF
  @anti_rebond
RETURN
' ********************************************************************
'
' ð MUSIQUE ð
'
' ********************************************************************
> PROCEDURE load_music
  ' -------------------------------------
  '
  ' Routine de chargement de la musique !
  '
  ' -------------------------------------
  @file_select
  IF ok!=TRUE AND choix$<>"________.___"
    nom_fichier$=chemin$+choix$+CHR$(0)
    nom_fichier%=V:nom_fichier$
    '
    ' GEMDOS(78) [fsfirst()]
    ' Recherche dans le repertoire actuel le fichier dont le nom se trouve …
    ' l'adresse nom_fichier%. Le nom de fichier trouv‚ est plac‚ dans la DTA.
    ' Erreur: r%=-33 (fichier non trouv‚).
    '
    r%=GEMDOS(78,L:nom_fichier%,-1)
    IF r%<>-33 AND nom_fichier$<>CHR$(0)
      t%={ADD(BASEPAGE,154)} ! Taille du fichier en BASEPAGE + 154
      IF t%<32000
        '
        ' GEMDOS (61) [fopen()]
        ' Ouvre le fichier dont le nom se trouve … l'adresse nom_fichier% en
        ' lecture. r% contient le handle du fichier.
        ' Erreur: r%=-34 ou r%=-35 ou r%=-36
        '
        handle%=GEMDOS(61,L:nom_fichier%,0)
        IF handle%<>-34 AND handle%<>-35 AND handle%<>-36
          zic_load&=0
          LPOKE &H4D2,0 ! Coupe la musique en cours.
          WAVE 0,0      ! Bruit OFF.
          nr_zic%=10    ! Pas de chiffre dans l'afficheur.
          @chiffre       ! Affiche le sprite correspondant.
          '
          ' GEMDOS (63) [fread()]
          ' Charge le fichier de handle handle% et de taille t% … l'adresse
          ' zic%. r% contient le nombre d'octets lus.
          ' Erreur: r%=-37
          '
          r%=GEMDOS(63,handle%,L:t%,L:zic%)
          IF r%<>-37
            '
            ' GEMDOS (62) [fclose()]
            ' Ferme le fichier de handle handle%
            ' Erreur: r%=-37
            '
            r%=GEMDOS(62,handle%)
            IF BYTE{zic%}=&H60 AND BYTE{ADD(zic%,4)}=&H60 AND BYTE{ADD(zic%,8)}=&H60
              nr_zic%=0
              zic_load&=1
              old_nr_zic%=-1
              stop&=0
              @music_player
            ELSE
              @error("NOT A MAD MAX","MUSIC !")
              chemin$="\"
              choix$="________.___"
            ENDIF
          ELSE
            @error("READ ERROR","ON DRIVE "+CHR$(65+GEMDOS(25)))
            choix$=old_choix$
            chemin$=old_chemin$
          ENDIF
        ELSE
          @error("READ ERROR","ON DRIVE "+CHR$(65+GEMDOS(25)))
          choix$=old_choix$
          chemin$=old_chemin$
        ENDIF
      ELSE
        @error("FILE IS","TOO LONG !")
        choix$=old_choix$
        chemin$=old_chemin$
      ENDIF
    ELSE
      @error("CAN'T FIND","THIS FILE !")
      choix$=old_choix$
      chemin$=old_chemin$
    ENDIF
  ENDIF
  @chiffre
RETURN
> PROCEDURE stop_zic
  ' -------------------------------
  '
  ' Test lors de l'appui sur 'STOP'
  '
  ' -------------------------------
  IF zic_load&=1 AND stop&=0 ! Si une music est charg‚e et joue
    LPOKE &H4D2,0            ! Coupe la music...
    WAVE 0,0                 ! ... et le bruit.
    old_nr_zic%=nr_zic%      ! Sauve nø du morceau.
    nr_zic%=10               ! Morceau en cours = rien !
    @chiffre                 ! On affiche.
    stop&=1                  ! Stop valide
  ENDIF
  @anti_rebond
RETURN
> PROCEDURE play_zic
  ' -------------------------------
  '
  ' Test lors de l'appui sur 'PLAY'
  '
  ' -------------------------------
  IF zic_load&=1           ! Si une musique est charg‚e
    IF old_nr_zic%<>-1
      nr_zic%=old_nr_zic%
      old_nr_zic%=-1
      stop&=0              ! Stop invalide
      @music_player        ! Lance la musique
      @chiffre             ! Affiche nø du morceau
      @anti_rebond         ! Anti-rebond souris
    ENDIF
  ELSE
    @error("YOU MAY LOAD","A MUSIC !")
  ENDIF
RETURN
> PROCEDURE music_player
  ' ----------------
  '
  ' Lance la musique
  '
  ' ----------------
  r%(0)=ADD(nr_zic%,1)      ! Nø du morceau dans d0.
  RCALL zic%,r%()           ! Appel de la routine.
  LPOKE &H4D2,ADD(zic%,8)   ! On met dans la VBL Queue.
RETURN
> PROCEDURE select_music(x&,y&,bout1$,bout2$)
  ' -----------------------------
  '
  ' Changement de morceau musical
  '
  ' -----------------------------
  PUT x&,y&,bout1$        ! On affiche le bouton enfonc‚
  {&H4D2}=0               ! On stoppe la musique
  WAVE 0,0                ! Bruit OFF
  @chiffre                ! Affiche le chiffre correspondant
  r%(0)=ADD(nr_zic%,1)    ! Num‚ro du morceau dans d0
  RCALL zic%,r%()         ! On initialise
  LPOKE &H4D2,ADD(zic%,8) ! Et on place dans la VBL-Queue
  @anti_rebond            ! Anti-rebond souris
  PUT x&,y&,bout2$        ! On affiche le bouton normal
RETURN
' ********************************************************************
'
' ð INITIALISATIONS ð
'
' ********************************************************************
> PROCEDURE init
  ' -----------------------------
  '
  ' Inline des dessins / routines
  '
  ' ------------------------------
  ' ---> Dessin du fond <---
  INLINE fond%,32034
  ' ---> Boites d'alerte <---
  INLINE alert%,32034
  ' ---> Music <---
  INLINE zic%,32000
  ' --> Bootsecteur <---
  INLINE boot%,454
  ' ---> Buffer <---
  INLINE buffer%,512
  ' ------
  ' Divers
  ' ------
  key|=PEEK(&H484)
  SPOKE &H484,0
  ecran%=XBIOS(3)
  nr_zic%=10
  old_nr_zic%=-1
  zic_save|=0
  color|=0
  txt_col|=0
  DIM r%(16)
  DIM nom_file$(127)
  DIM prep_file$(127)
  choix$="________.___"
  chemin$="\"
  old_choix$="________.___"
  old_chemin$="\"
  ' -------------------
  ' Palette de couleurs
  ' -------------------
  FOR n&=0 TO 15
    palette$=palette$+MKI$(DPEEK(ADD(&HFF8240,MUL(n&,2))))
    SETCOLOR n&,0
  NEXT n&
  ~XBIOS(6,L:alert%+2)          ! Nouvelle palette
  '
  '
  '
  @init_souris
  ' -------
  ' Sprites
  ' -------
  ~XBIOS(5,L:ADD(alert%,34),L:-1,W:-1)
  GET 299,108,310,119,fleche_h$
  GET 299,121,310,132,fleche_b$
  GET 299,146,310,150,curseur$
  GET 0,174,40,183,auto$
  GET 0,185,40,194,normal$
  @init_car
  @init_boutons
  @init_chiffres
  ~XBIOS(5,L:ecran%,L:-1,W:-1)
RETURN
> PROCEDURE bibli_boot
  ' ------------------------------------
  '
  ' GESTION DE LA BIBLIOTHEQUE DES BOOTS
  '
  ' ------------------------------------
  INLINE biblio%,30006
  INLINE decd%,20
  ' ----------------------
  ' Chargement et d‚codage
  ' ----------------------
  IF EXIST("PROT_BIB.DTA")               ! S'il existe une bibliothŠque
    OPEN "i",#1,"PROT_BIB.DTA"           ! Ouvre en lecture
    prot$=CHR$(INP(#1))+CHR$(INP(#1))+CHR$(INP(#1))+CHR$(INP(#1))
    CLOSE #1                             ! Ferme le fichier
    IF prot$="PROT"                      ! Test identificateur biblio.
      PRINT AT(6,12);"- NEW BOOTS FOUND! LOADING -"
      BLOAD "PROT_BIB.DTA",biblio%       ! Ouvre le fichier en lecture
      CLS
    ENDIF
  ENDIF                                  ! Sinon
  ~C:decd%(L:biblio%+6)                  ! D‚codage
  nombre_boot&=CARD{ADD(biblio%,4)}      ! Charge nombre de boots
RETURN
> PROCEDURE init_boutons
  '
  '
  '
  '
  '
  GET 274,1,290,17,bouton1$
  GET 256,1,272,17,bouton2$
  GET 274,19,290,35,bouton3$
  GET 256,19,272,35,bouton4$
  GET 256,37,264,45,bouton5$
  GET 266,37,274,45,bouton6$
RETURN
> PROCEDURE init_chiffres
  '
  '
  '
  '
  '
  DIM chiffre$(10)
  FOR n|=0 TO 70 STEP 7
    GET n|,116,ADD(n|,5),132,chiffre$(DIV(n|,7))
  NEXT n|
RETURN
> PROCEDURE init_car
  '
  '
  '
  '
  '
  DIM car1$(58),car2$(58)
  FOR x&=0 TO 312 STEP 8
    GET x&,83,ADD(x&,7),90,car1$(DIV(x&,8))
    GET x&,99,ADD(x&,7),106,car2$(DIV(x&,8))
  NEXT x&
  FOR x&=0 TO 144 STEP 8
    GET x&,91,ADD(x&,7),98,car1$(ADD(40,DIV(x&,8)))
    GET x&,107,ADD(x&,7),114,car2$(ADD(40,DIV(x&,8)))
  NEXT x&
RETURN
> PROCEDURE init_souris
  ' -------------------------------------
  '
  ' Red‚finition de la forme de la souris
  '
  ' -------------------------------------
  LOCAL i&,option%
  RESTORE souris
  souris$=""
  FOR i&=1 TO 37
    READ option%
    souris$=souris$+MKI$(option%)
  NEXT i&
souris:
  DATA 1,1,1,0,7
  DATA 65408,65408,65280,65024,65280,65408,65472,61408,51184,1016,508,254,124,56,16,0
  DATA 0,32512,32256,31744,32256,32512,28544,18368,992,496,248,124,56,16,0,0
RETURN
> PROCEDURE destroy
  ' ---------------------------------
  ' Test de D‚tournement des vecteurs
  '
  '   $426, $42a, $472, $476, $47e
  ' ---------------------------------
  '
  ' Mega STe   & ICD  : [$472:    ] [$476:    ] [$47E:    ]
  ' Mega STe   & AHDI : [$472:D2E8] [$476:D2FA] [$47E:D30E]
  ' Falcon 030 & ICD  : [$472:    ] [$476:    ] [$47E:    ]
  ' Falcon 030 & AHDI : [$472:    ] [$476:    ] [$47E:    ]
  '
  '
  ' resetvector$=""
  hdv_bpb$=""
  hdv_rw$=""
  hdv_mchm$=""
  '
  '  $42A [ResetVector] & $426 [ResetValid]
  '
  IF {&H42A}<>0             ! Test de ResetVector
    {&H426}=0               ! MagicNumber … 0
    {&H42A}=0               ! ResetVector … 0
    ' resetvector$="          ResetVector [$42a]"
  ENDIF
  '
  '  $472 [Hdv_Bpb]
  '
  IF {&H472}<&HD2E8       ! Vecteur en $472 d‚tourn‚
    hdv_bpb$="            Hdv_Bpb [$472]"
  ENDIF
  '
  '  $476 [Hdv_Rw]
  '
  IF {&H476}<&HD2FA
    hdv_rw$="             Hdv_Rw [$476]"
  ENDIF
  '
  '  $47e [Hdv_Mchm]
  '
  IF {&H47E}<&HD30E
    hdv_mchm$="            Hdv_Mchm [$47e]"
  ENDIF
  @bloque
RETURN
> PROCEDURE bloque
  ' ----------------------------------
  '
  ' vecteurs d‚tourn‚s, bloque l'acces
  '
  ' ----------------------------------
  ' IF resetvector$<>"" OR hdv_bpb$<>"" OR hdv_rw$<>"" OR hdv_mchm$<>""
  IF hdv_bpb$<>"" OR hdv_rw$<>"" OR hdv_mchm$<>""
    SETCOLOR 0,&H700
    PRINT AT(1,11);"SOME VECTORS HAVE BEEN CHANGED IN MEMORY"
    PRINT AT(1,12);"  PLEASE REBOOT WITH AN IMMUNIZED DISC"
    PRINT
    PRINT
    ' --- $42a ---
    ' IF resetvector$<>""
    ' PRINT resetvector$
    ' ENDIF
    ' --- $472 ---
    IF hdv_bpb$<>""
      PRINT hdv_bpb$
    ENDIF
    ' --- $426 ---
    IF hdv_rw$<>""
      PRINT hdv_rw$
    ENDIF
    ' --- $47e ---
    IF hdv_mchm$<>""
      PRINT hdv_mchm$
    ENDIF
    DO
    LOOP
  ENDIF
RETURN
> PROCEDURE cookie_jar
  ' ------------------------------------------------------
  '
  ' Lecture du COOKIE JAR pour d‚tecter le type de machine
  '
  ' ------------------------------------------------------
  ' 0 - STf
  ' 1 - STe
  ' 2 - TT
  ' 3 - FALCON
  '
  cookie_jar&=0
  mch%=&H5F4D4348                             ! _MCH type de machine
  cookie_ptr%={&H5A0}                         ! Adresse en $5A0
  IF cookie_ptr%<>0                           ! Si =0, pas de Cookie
    REPEAT
      cookie_typ%={cookie_ptr%}               ! Recherche type de Cookie
      IF cookie_typ%<>mch%
        ADD cookie_ptr%,8                     ! <>, on passe au suivant
      ENDIF
    UNTIL cookie_typ%=mch% OR cookie_typ%=0
    IF cookie_typ%<>0                         ! Cookie trouv‚
      cookie_jar&=CARD{ADD(cookie_ptr%,4)}    ! Lecture du cookie
    ENDIF
  ENDIF
RETURN
> PROCEDURE blitter
  ' -----------------------------
  '
  ' Active le blitter s'il existe
  '
  ' -----------------------------
  blit_state&=XBIOS(64,W:-1)              ! Etat du blitter
  IF (blit_state& AND 2)<>0               ! Si blitter present
    IF (blit_state& AND 1)=0              ! Si blitter inactif
      ~XBIOS(64,W:(blit_state& OR 1))     ! Active blitter
    ENDIF
  ENDIF
RETURN
' ********************************************************************
'
' ð AFFICHE FONTES DE CARACTERES ð
'
' ********************************************************************
> PROCEDURE aff_txt1(x&,y|,txt$,grd|,mode|)
  '
  '
  '
  '
  '
  LOCAL nb_car|,long|,diff|,cent|,n|,lt|
  nb_car|=LEN(txt$)                     ! Nbre de caracteres
  long|=SHL|(nb_car|,3)                 ! Longueur en pixels (* 8)
  diff|=SUB(grd|,long|)                 ! Difference pour centrage
  cent|=ADD(x&,SHR|(diff|,1))           ! Centrage (/ 2)
  pos&=ADD(cent|,8)
  FOR n|=1 TO nb_car|
    lt|=SUB(ASC(MID$(txt$,n|,1)),32)
    PUT pos&,y|,car1$(lt|),mode|
    ADD pos&,8
  NEXT n|
RETURN
> PROCEDURE aff_txt2(x&,y|,txt$)
  '
  '
  '
  '
  '
  LOCAL nb_car|,long|,diff|,cent|,n|,lt|
  nb_car|=LEN(txt$)                     ! Nbre de caracteres
  long|=SHL|(nb_car|,3)                 ! Longueur en pixels (* 8)
  diff|=SUB(108,long|)                  ! Difference pour centrage
  cent|=ADD(x&,SHR|(diff|,1))           ! Centrage (/ 2)
  pos&=ADD(cent|,8)
  FOR n|=1 TO nb_car|
    lt|=SUB(ASC(MID$(txt$,n|,1)),32)
    PUT pos&,y|,car2$(lt|),7
    ADD pos&,8
  NEXT n|
RETURN
> PROCEDURE aff_txt4(y|,txt$)
  '
  '
  '
  '
  '
  x&=106
  IF LEFT$(txt$,1)<>CHR$(64)
    x&=122
  ENDIF
  nb_car|=LEN(txt$)
  FOR m|=1 TO nb_car|
    lt|=SUB(ASC(MID$(txt$,m|,1)),32)
    IF lt|>59
      lt|=3
    ENDIF
    PUT x&,y|,car2$(lt|),7
    ADD x&,8
  NEXT m|
RETURN
' ********************************************************************
'
' ð FICHIER PREFERENCES ð
'
' ********************************************************************
> PROCEDURE music_state
  '
  '
  '
  '
  '
  IF zic_save|=0
    zic_save|=1
    PUT 226,46,bouton6$
    set_music
  ELSE
    zic_save|=0
    PUT 226,46,bouton5$
    set_music
  ENDIF
  anti_rebond
RETURN
> PROCEDURE set_music
  '
  '
  '
  '
  '
  ~XBIOS(5,L:ADD(fond%,34),L:-1,W:-1)
  IF zic_save|=1
    PUT 226,46,bouton6$
  ENDIF
  IF zic_save|=0
    PUT 226,46,bouton5$
  ENDIF
  ~XBIOS(5,L:ecran%,L:-1,W:-1)
RETURN
> PROCEDURE inf_load
  ' ******************************
  '
  ' Charger le fichier pr‚f‚rences
  '
  ' ******************************
  IF EXIST("\BOOT_II.INF")
    ' ---------
    ' Ouverture
    ' ---------
    PRINT AT(15,12);"- LOADING -"
    OPEN "i",#1,"\BOOT_II.INF"
    INPUT #1,music$,morceau$,zic_save$,c_fond$,c_txt$
    CLOSE #1
    ' -----
    ' Music
    ' -----.
    IF music$<>"No_name"
      IF EXIST(music$)
        zic_load&=1
        ' --------------
        ' Cherche chemin
        ' --------------
        v|=LEN(music$)
        REPEAT
          DEC v|
          a$=MID$(music$,v|,1)
        UNTIL a$="\"
        chemin$=LEFT$(music$,v|)
        old_chemin$=chemin$
        ' -----------
        ' Cherche nom
        ' -----------
        n|=LEN(music$)-v|
        choix$=RIGHT$(music$,n|)
        old_choix$=choix$
        ' --------------
        ' Charge musique
        ' --------------
        BLOAD music$,zic%
        nr_zic%=VAL(morceau$)
        IF nr_zic%>9
          stop&=1
          old_nr_zic%=SUB(nr_zic%,10)
          nr_zic%=10
        ELSE
          stop&=0
          @music_player
        ENDIF
      ENDIF
    ENDIF
    ' --------------
    ' Music save O/N
    ' --------------
    zic_save|=VAL(zic_save$)
    @set_music
    ' ------------
    ' Couleur fond
    ' ------------
    IF UPPER$(c_fond$)="GREY"
      @set_grey
    ELSE
      IF UPPER$(c_fond$)="BLUE"
        @set_blue
      ELSE
        @set_pink
      ENDIF
    ENDIF
    ' -------------
    ' Couleur texte
    ' -------------
    IF UPPER$(c_txt$)="GREEN"
      @set_green
    ELSE
      @set_brun
    ENDIF
  ENDIF
  ' ------------
  ' Affiche fond
  ' ------------
  BMOVE ADD(fond%,34),ecran%,32000
RETURN
> PROCEDURE inf_save
  ' -----------------------------
  '
  ' Sauver le fichier pr‚f‚rences
  '
  ' -----------------------------
  tst_prot(CHR$(ADD(65,GEMDOS(25)))+":\") ! test protection disque
  IF prot_er&=0                           ! Si pas prot‚g‚,
    OPEN "O",#1,"\BOOT_II.INF"            ! on ouvre le fichier en ‚criture.
    ' -----
    ' Music
    ' -----
    IF zic_save|=1 AND zic_load&=1
      PRINT #1,chemin$+choix$
      IF stop&=1
        PRINT #1,STR$(ADD(10,old_nr_zic%))
      ELSE
        PRINT #1,STR$(nr_zic%)
      ENDIF
      PRINT #1,STR$(zic_save|)
    ELSE
      PRINT #1,"No_name"
      PRINT #1,STR$(nr_zic%)
      PRINT #1,STR$(zic_save|)
    ENDIF
    ' ------------
    ' Couleur fond
    ' ------------
    IF color|=0
      PRINT #1,"Pink"
    ELSE
      IF color|=1
        PRINT #1,"Grey"
      ELSE
        IF color|=2
          PRINT #1,"Blue"
        ENDIF
      ENDIF
    ENDIF
    ' -------------
    ' Couleur texte
    ' -------------
    IF txt_col|=0
      PRINT #1,"Green"
    ELSE
      PRINT #1,"Brown"
    ENDIF
    ' ----
    ' Fini
    ' ----
    CLOSE #1
  ENDIF
  @anti_rebond
RETURN
> PROCEDURE color_grey
  '
  '
  '
  '
  '
  IF color|=0 OR color|=2
    color|=1
    VSYNC
    @set_grey
    PUT 145,46,bouton6$
    PUT 145,58,bouton5$
  ENDIF
  @anti_rebond
RETURN
> PROCEDURE color_pink
  '
  '
  '
  '
  '
  IF color|=1 OR color|=2
    color|=0
    VSYNC
    @set_pink
    PUT 145,46,bouton5$
    PUT 145,58,bouton6$
  ENDIF
  @anti_rebond
RETURN
> PROCEDURE set_pink
  ' ---------
  '
  ' Fond rose
  '
  ' ---------
  color|=0
  SETCOLOR 1,5,3,5
  SETCOLOR 2,7,5,7
  SETCOLOR 4,6,4,6
  SETCOLOR 11,4,2,4
  SETCOLOR 12,4,4,3
  SETCOLOR 13,6,6,5
  SETCOLOR 14,5,5,4
  ~XBIOS(5,L:ADD(fond%,34),L:-1,W:-1)
  PUT 145,46,bouton5$
  PUT 145,58,bouton6$
  ~XBIOS(5,L:ecran%,L:-1,W:-1)
RETURN
> PROCEDURE set_blue
  ' ---------
  '
  ' Fond bleu
  '
  ' ---------
  color|=2
  SETCOLOR 1,2,3,5
  SETCOLOR 2,4,5,7
  SETCOLOR 4,3,4,6
  SETCOLOR 11,1,2,4
  SETCOLOR 12,4,4,3
  SETCOLOR 13,6,6,5
  SETCOLOR 14,5,5,4
  ~XBIOS(5,L:ADD(fond%,34),L:-1,W:-1)
  PUT 145,46,bouton5$
  PUT 145,58,bouton5$
  ~XBIOS(5,L:ecran%,L:-1,W:-1)
RETURN
> PROCEDURE set_grey
  '
  '
  '
  '
  '
  color|=1
  SETCOLOR 1,4,4,4
  SETCOLOR 2,6,6,6
  SETCOLOR 4,5,5,5
  SETCOLOR 11,3,3,3
  SETCOLOR 12,0,1,4
  SETCOLOR 13,2,3,6
  SETCOLOR 14,1,2,5
  ~XBIOS(5,L:ADD(fond%,34),L:-1,W:-1)
  PUT 145,46,bouton6$
  PUT 145,58,bouton5$
  ~XBIOS(5,L:ecran%,L:-1,W:-1)
RETURN
> PROCEDURE txt_green
  '
  '
  '
  '
  '
  IF txt_col|=1
    txt_col|=0
    VSYNC
    set_green
    PUT 77,46,bouton6$
    PUT 77,58,bouton5$
  ENDIF
  anti_rebond
RETURN
> PROCEDURE txt_brun
  '
  '
  '
  '
  '
  IF txt_col|=0
    txt_col|=1
    VSYNC
    set_brun
    PUT 77,46,bouton5$
    PUT 77,58,bouton6$
  ENDIF
  anti_rebond
RETURN
> PROCEDURE set_green
  '
  '
  '
  '
  '
  txt_col|=0
  SETCOLOR 6,0,6,4
  ~XBIOS(5,L:ADD(fond%,34),L:-1,W:-1)
  PUT 77,46,bouton6$
  PUT 77,58,bouton5$
  ~XBIOS(5,L:ecran%,L:-1,W:-1)
RETURN
> PROCEDURE set_brun
  '
  '
  '
  '
  '
  txt_col|=1
  SETCOLOR 6,5,4,0
  ~XBIOS(5,L:ADD(fond%,34),L:-1,W:-1)
  PUT 77,46,bouton5$
  PUT 77,58,bouton6$
  ~XBIOS(5,L:ecran%,L:-1,W:-1)
RETURN
' ******************************************************************
'
' ð NOUVEAU SELECTEUR DE FICHIERS ð
'
' ******************************************************************
> PROCEDURE file_select
  ok!=FALSE
  old_choix|=0
  old_choix$=choix$
  old_chemin$=chemin$
  choix$="________.___"
  chemin$="\"
  ' --------------------
  ' Affiche le selecteur
  ' --------------------
  GET 96,45,241,137,fond$
  ' -----------
  ' Fixe la DTA
  ' -----------
  ~FSETDTA(ADD(BASEPAGE,128))
  CHDIR chemin$
  @search_file
  @prep_aff
  @aff_file
  @fleches
  ' -----------------
  ' Boucle principale
  ' -----------------
  REPEAT
    key$=INKEY$
    ' ---------------------------------
    ' Fichiers vers le bas [Fleche Bas]
    ' ---------------------------------
    IF (MOUSEK=1 AND MOUSEX>222 AND MOUSEX<235 AND MOUSEY>94 AND MOUSEY<107) OR key$=CHR$(0)+"P"
      @file_bas
      @anti_rebond
    ELSE
      ' -----------------------------------
      ' Fichiers vers le haut [Fleche Haut]
      ' -----------------------------------
      IF (MOUSEK=1 AND MOUSEX>222 AND MOUSEX<235 AND MOUSEY>65 AND MOUSEY<78) OR key$=CHR$(0)+"H"
        @file_haut
        @anti_rebond
      ELSE
        ' ----------------
        ' Choix du fichier
        ' ----------------
        IF (MOUSEK=1 AND MOUSEX>122 AND MOUSEX<218 AND MOUSEY>65 AND MOUSEY<104)
          @choix
          @anti_rebond
        ELSE
          ' ----------------------
          ' Retour a la racine [R]
          ' ----------------------
          IF (MOUSEK=1 AND MOUSEX>103 AND MOUSEX<117 AND MOUSEY>52 AND MOUSEY<65) OR UPPER$(key$)="R"
            @racine
            @anti_rebond
          ENDIF
        ENDIF
      ENDIF
    ENDIF
    ' --------------------------
    ' Selection [ENTER] ou [ESC]
    ' --------------------------
  UNTIL (MOUSEK=1 AND MOUSEY>115 AND MOUSEY<131 AND ((MOUSEX>124 AND MOUSEX<180) OR (MOUSEX>189 AND MOUSEX<214))) OR key$=CHR$(13) OR key$=CHR$(27)
  IF (MOUSEX>189 AND MOUSEX<214) OR key$=CHR$(13)
    ok!=TRUE
    IF choix$="________.___"
      chemin$=old_chemin$
      choix$=old_choix$
    ENDIF
  ELSE
    chemin$=old_chemin$
    choix$=old_choix$
  ENDIF
  PUT 96,45,fond$
  @anti_rebond
RETURN
> PROCEDURE search_file
  '
  '
  '
  '
  '
  y_curs=0 ! Coordon‚e de la barre du selecteur … 0
  nb_file|=0 ! Nombre de fichiers
  ptr_file|=1
  e%=FSFIRST("*.*",53)
  DO UNTIL e%
    INC nb_file|
    IF BYTE{ADD(BASEPAGE,149)} AND 16
      nom_file$(nb_file|)="@ "+CHAR{ADD(BASEPAGE,158)}
    ELSE
      nom_file$(nb_file|)=CHAR{ADD(BASEPAGE,158)}
    ENDIF
    e%=FSNEXT()
  LOOP
  IF nb_file|>4
    curseur=12/(nb_file|-4) ! Calcul offset pour la barre du selecteur
  ELSE
    curseur=0
  ENDIF
  QSORT nom_file$(),ADD(nb_file|,1) ! Tri des noms de fichier
RETURN
> PROCEDURE prep_aff
  ' ----------------------------------
  '
  ' Prepare les noms avant l'affichage
  '
  ' ----------------------------------
  FOR n|=1 TO nb_file|
    lg|=LEN(nom_file$(n|))                 ! Longeur chaine
    pt|=INSTR(nom_file$(n|),".")           ! Position du point
    ex|=lg|-pt|+1                          ! Longeur extension
    IF LEFT$(nom_file$(n|),1)<>CHR$(64)
      IF pt|=0
        prep_file$(n|)=nom_file$(n|)
      ELSE
        rgt$=RIGHT$(nom_file$(n|),ex|)
        lft$=LEFT$(nom_file$(n|),lg|-ex|)
        IF LEN(lft$)<8
          lft$=lft$+STRING$(8-LEN(lft$)," ")
        ENDIF
        prep_file$(n|)=lft$+rgt$
      ENDIF
    ELSE
      IF nom_file$(n|)<>"@ ." AND nom_file$(n|)<>"@ .."
        IF pt|=0
          lft$=nom_file$(n|)+STRING$(10-lg|,"_")
          prep_file$(n|)=lft$+".___"
        ELSE
          rgt$=RIGHT$(nom_file$(n|),ex|)
          lft$=LEFT$(nom_file$(n|),lg|-ex|)
          IF LEN(lft$)<10
            lft$=lft$+STRING$(10-LEN(lft$)," ")
          ENDIF
          prep_file$(n|)=lft$+rgt$
        ENDIF
      ELSE
        prep_file$(n|)=nom_file$(n|)
      ENDIF
    ENDIF
  NEXT n|
RETURN
> PROCEDURE aff_file
  '
  '
  '
  '
  '
  RC_COPY ADD(alert%,34),154,107,145,93 TO ecran%,96,45
  @fleches
  t|=68
  IF ADD(ptr_file|,3)<nb_file|
    FOR n|=ptr_file| TO ADD(ptr_file|,3)
      @aff_txt4(t|,prep_file$(n|))
      ADD t|,9
    NEXT n|
  ELSE
    FOR n|=ptr_file| TO nb_file|
      @aff_txt4(t|,prep_file$(n|))
      ADD t|,9
    NEXT n|
  ENDIF
RETURN
> PROCEDURE file_bas
  '
  '
  '
  '
  '
  IF ADD(ptr_file|,3)<nb_file|
    choix$="________.___"
    INC ptr_file|
    y_curs=y_curs+curseur
    @aff_file
  ENDIF
RETURN
> PROCEDURE file_haut
  '
  '
  '
  '
  '
  IF ptr_file|>1
    choix$="________.___"
    DEC ptr_file|
    y_curs=y_curs-curseur
    @aff_file
  ENDIF
RETURN
> PROCEDURE fleches
  '
  '
  '
  '
  '
  IF ptr_file|>1
    PUT 222,65,fleche_h$
  ENDIF
  IF ADD(ptr_file|,3)<nb_file|
    PUT 222,94,fleche_b$
  ENDIF
  PUT 222,ADD(77,y_curs),curseur$
RETURN
> PROCEDURE choix
  ' ---------------------------------
  '
  ' Selection des Dossiers / Fichiers
  '
  ' ---------------------------------
  choix|=SUB(MOUSEY,69)/9
  IF choix|<nb_file|
    IF old_choix|>0
      PUT 114,old_choix|,car2$(2)
    ENDIF
    PUT 114,ADD(68,MUL(choix|,9)),car2$(12),7
    old_choix|=ADD(67,MUL(choix|,9))
    choix|=ADD(choix|,ptr_file|)
    choix$=nom_file$(choix|)
    ' ----------
    ' R‚pertoire
    ' ----------
    IF LEFT$(choix$,1)=CHR$(64)
      choix$=RIGHT$(choix$,SUB(LEN(choix$),2))
      IF choix$=".."
      ELSE
        IF choix$<>"."
          chemin$=chemin$+choix$+"\"
        ENDIF
      ENDIF
      CHDIR choix$
      choix$="________.___"
      @search_file
      @prep_aff
      @aff_file
      @fleches
    ENDIF
  ENDIF
RETURN
> PROCEDURE racine
  '
  '
  '
  '
  '
  chemin$="\"
  choix$="________.___"
  CHDIR chemin$
  @search_file
  @prep_aff
  @aff_file
  @fleches
RETURN
' ******************************************************************
' ð FIN DU PROGRAMME ð
' ******************************************************************
> PROCEDURE fin
  '
  '
  '
  '
  '
  @anti_rebond
  {&H4D2}=0                                   ! Coupe la musique
  WAVE 0,0                                    ! et le son
  BYTE{&H484}=key|                            ! Restore clavier
  CLS
  IF cookie_jar&=3                            ! Si c'est un FALCON
    blow_res&=BSET(res&,15)
    ~XBIOS(5,L:-1,L:-1,W:3,W:blow_res&)       ! Ancienne  r‚solution
  ELSE
    ~XBIOS(64,W:blit_state&)                  ! Restaure blitter.
  ENDIF
  ~GEMDOS(32,L:super%)                        ! Mode utilisateur
  ~XBIOS(6,L:V:palette$)                      ! Restaure palette
  DEFMOUSE 0                                  ! Restaure souris
  END                                         ! Fini !
RETURN
