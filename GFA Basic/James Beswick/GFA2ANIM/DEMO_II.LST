'        The GFA Demo! Part 3 - Main Part - (C) ST Format 1991.
'                      Written by James Beswick.
'
' ** STEP TWO **
'
' This part introduces a shimmering GFA DEMO logo, using the setcolor command
' and the clever use of some variables.
'
' ** INITIALISATION PART (GET THE SPRITES, SET THE MOUSE, ETC.) **
'
Spoke &H484,Peek(&H484) And 2   ! Key click off. Another weird instruction!
Cls                             ! CLear the Screen.
Setcolor 0,0                    ! Set background colour to black.
Setcolor 15,1911                ! Set text colour to white.
'
Bload "gfademo.pi1",Xbios(3)-34
Void Xbios(6,L:Xbios(3)-32)     ! These 2 lines load the demo screen.
'
@Get_sprites                    ! Go directly to the procedure with this name.
'                               ! The procedure, once executed, returns here.
Cls                             ! Clear the screen.
For Col=11 To 14                ! Loop the idented line three times, whilst
  Setcolor Col,0                ! incrementing COL by 1 from 11, until it
Next Col                        ! reaches 14. This clears the logo colours.
Put 0,0,Gfa_demo_logo$          ! Place the logo at the top of the screen.
'
' ** THE SHIMMERING EFFECT **
'
Col11=0                         ! Set some variables here. These will equal the
Col12=2                         ! colour values of four colours that are present
Col13=4                         ! in the logo.
Col14=6
Clr Tog11,Tog12,Tog13,Tog14     ! Toggle variables are needed here.
Repeat                          ! Repeat the idented segment until key press.
  @Calculate_colors             ! Go to the procedure with this name.
  Vsync                         ! Smooth out (and slow down) the colour switch.
  Setcolor 11,Col11             ! Now set all the colours! Colour 11...
  Setcolor 12,Col12             ! Colour 12...
  Vsync                         ! VSYNC is used here to slow down the switch.
  Setcolor 13,Col13             ! Colour 13 set...
  Setcolor 14,Col14             ! Colour 14 set...
Until Inkey$<>""                ! Exit when a key is pressed...
'
Setcolor 0,1911                 ! Set the colours again for the editor, or we
Setcolor 15,0                   ! won't be able to see what we're doing!
Edit                            ! Return straight back to the editor.
'
' ** Long routines are pushed into procedures and put at the end **
'
Procedure Get_sprites           ! This routine GET's (some of) the sprites.
  Get 97,1,111,15,Sphere$
  Get 113,1,127,15,Sphere_mask$
  Get 129,1,137,10,G_spr$
  Get 139,1,144,10,F_spr$
  Get 146,1,151,10,A_spr$
  Get 0,66,319,90,Scroll_window$
  Get 0,104,319,179,Gfa_demo_logo$
  Get 0,181,319,189,Bar1$
  Get 0,191,319,199,Bar2$
  Get 160,16,199,51,Stf$
Return
'
Procedure Calculate_colors      ! Here's a complex set of calculations and
  If Tog11=0                    ! conditional statements that you may not easily
    Add Col11,1                 ! understand.
  Else
    Sub Col11,1
  Endif                         ! The command ADD indicates that the variable
  If Tog12=0                    ! should be increased, or incremented, by the
    Add Col12,1                 ! value after the comma.
  Else
    Sub Col12,1                 ! While SUB indicates that the variable should
  Endif                         ! be decreased, or decremented, by the value
  If Tog13=0                    ! after the comma.
    Add Col13,1
  Else                          ! IF the condition is true, the execute the
    Sub Col13,1                 ! indented program segment, and if it isn't,
  Endif                         ! the execute the idented segment after the
  If Tog14=0                    ! ELSE command.
    Add Col14,1
  Else
    Sub Col14,1
  Endif
  If Col11=7
    Tog11=1
  Endif
  If Col12=7
    Tog12=1
  Endif
  If Col13=7
    Tog13=1
  Endif
  If Col14=7
    Tog14=1
  Endif
  If Col11=0
    Tog11=0
  Endif
  If Col12=0
    Tog12=0
  Endif
  If Col13=0
    Tog13=0
  Endif
  If Col14=0
    Tog14=0
  Endif
Return                               ! Return back to where the PROC was called.
