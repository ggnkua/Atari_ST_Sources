                         -----------------------------
                         | I Can't Believe It's STOS |
                         |                           |
                         |      Version 23/4/94      |
                         | (C) Richard Hunt 1993/94  |
                         -----------------------------


Introduction
------------
What's the biggest give-away after the standard screen fades and horrible file
selector? The sprites. Yes, they are nice and easy to use but unfortunately
because of this are very slow. In addition, you are limited to only 15 sprites
on screen at any one time and this with some very dodgy collision detection.

ICBIS is a STOS extension which corrects these limitations and brings many
additional facilities easing some, quite complex, programming tasks
considerably. These features are listed below. This is all under your direct
control and so also requires a bit more thought before tapping at the keyboard
- you do this anyway of course don't you!

In summary ICBIS PROVIDES YOU WITH A SPRITE TOOLKIT. It's use can be compared
to baking your own cakes as opposed to using cake mixes. The latter is easier
but the results are not as good and you are limited in what you can bake. The
tools and their ranges are outlined below:

    + Up to 65535 sprites - not a measly 15.
    + More than one sprite bank can be used in the program
      directly - no more copying banks to bank 1! Saves on
      memory too.
    + Faster than the existing sprite system when lots doing and ...
    + Autoback can (and should) be turned off - 50 to 100% increase in speed!
    + Allows for easy parallax scrolling as sprites blanked
      with a specified (hence current) screen, not the last background.
    + Global offset for sprites - ideal for large screen/scrolling games.
    + Comprehensive and pixel perfect collision detection.
    + Background collision detection as well (what pixels under sprite!)
    + Invisible sprites (!) make for even faster collision detection.
    + Sprite movements can by precisely synchronised.
    + Animation position can be determined by a simple command.
    + Sprites can be copied to any screen at any point, unlike put sprite!
    + Control is easier as updating of animation and movement
      only done at redraw.
    + Numbers of sprites/moves/anims/areas required set by yourself, up to 255
      each for the latter. Thus keeping memory requirements to a minimum.
    + Very fast screen copy type command for full screens.
    + Existing STOS sprites can be used in your programs as well (65550
      sprites!) or if you don't use the STOS system ...
    + No sprite buffer needed on compilation thus freeing more memory!
    + Fast plotting of backgrounds using sprites (uses optimised plotting on
      even boundaries of 16)

The new commands which 'replace' the old STOS ones are designed as plug-in
replacements allowing you to update your old programs to ICBIS easier and make
life a little easier in your own transition.



How come ICBIS can do this and STOS on it's own can't?
------------------------------------------------------
STOS deals with it's sprites on an individual basis. As an example, consider a
moving sprite:

    Wipe out old using bit of background screen
    Increment position
    Plot new to buffer
    Copy buffer to screen
    Replot any in front of it similarly (higher priorities)

ICBIS adopts the global method:
    Copy specified background screen to specified screen (e.g. logical)
    Increment positions
    Plot all sprites on screen, lowest numbers first

As a result, ICBIS is faster when working with lots of sprites (as is usually
the case in games). Because I didn't use an interrupt (ie. automatic updates)
method this also allowed me to adopt a lot more types of commands. The sprite
offset would be awkward to implement using the STOS (interrupt) method and the
huge number of sprites etc. would also be confusing to set up. I was also
motivated to include seemingly strange commands such as invisspr as ICBIS was
born out of various game ideas floating around in my head which needed a good
sprite engine.



How do I use the new commands?
------------------------------
As ICBIS uses the same sprite bank(s) and similar commands the first step is to
replace the old STOS commands with the ICBIS equivelant. For best results (ie
no flickering) it is best to then modify the program as follows:

    Initialise number of sprites, mushes and films required
    Set logic to background, turn off autoback (now a hinderence)

    Repeat
      Do all gamey stuff and drawing as normal
      Issue the ICBIS command DOSPR to update the sprites
      Use the STOS SCREEN SWAP command to show the results and any other
         screen alterations you have done.
    Until game finished

    Turn off sprites
    Set logic to physical screen
    On with rest of program!

As you can see, this method is particularly suited to screen swapping where as
the STOS system wasn't. If you do convert existing programs read the
descriptions of the ICBIS commands carefully - there were a few oddities in the
STOS system which I didn't seen fit to emulate.



The commands
------------
A summary follows and then an individual breakdown.

ICBIS command                                                  STOS /similar/
+++++++++++++                                                  ++++++++++++++
sprmem   (n, mushes, films, areas)
setspr   n, mushes, films, areas, data_area

sproffset OX, OY
sprplot  sprite, X, Y, image                                   sprite
sprkill  [sprite]                                              sprite off
sprx     (sprite)                                              x sprite
spry     (sprite)                                              y sprite
sprpx    (sprite)
sprpy    (sprite)

mushsprx sprite, movement_string                               move x
mushspry sprite, movement_string                               move y
mushon   [sprite]                                              move on
mushoff  [sprite]                                              move off
mushfrz  [sprite]                                              move freeze
sprmush  (sprite)                                              movon

filmspr  sprite, animation_string                              anim
filmon   [sprite]                                              anim on
filmoff  [sprite]                                              anim off
filmfrz  [sprite]                                              anim freeze
sprfilm  (sprite)
frame    (sprite)

warpspr
sprmesh  sprite1, sprite2

pxelcol  (sprite, colours, screen, x1, y1, x2, y2)
collision (start_sprite, count, sprite)                        collide
setarea  z, x1, y1, x2, y2                                     set zone
resarea  z                                                     reset zone
area     (group, sprite)                                       zone

sprclip  x1, x2, y1, y2                                        limit sprite
nailspr  sprite, screen                                        put sprite
visspr   sprite
invisspr sprite
dospr    background_screen, destination_screen

zipcopy  source, destination                                   screencopy


------------------------------------------------------------------------------

sprmem(n, mushes, films, areas)

    n      = number of sprites
    mushes = maximum number of movement stages (ie brackets in the string)
    films  = maximum number of frames in animation
    areas  = maximum number of areas (equivelant of STOS zones)

Purpose: Returns the memory needed for the specified setup

Example: MEM = sprmem (20,4,6,0)
         print "memory required =";MEM
         reserve as work 5,MEM
         setspr 20,4,6,0,5
         ' and now plot a sprite and display it, requires a graphic image 14
         ' in bank 2!
         sprplot 1,116,100,214
         dospr 0,physic

------------------------------------------------------------------------------

setspr n, mushes, films, areas, address

    address = address (or bank) where sprite info is to be stored.
              If an address is given then this must not be odd.

Purpose: Sets up the ICBIS system for the specified setup.
         Used in conjunction with SprMem (above). ICBIS requires an area
         of memory to be used to store sprite information before any of it's
         sprite commands can be used. This command does that.

         Note that reissuing the setspr command will destroy all existing
         sprite information returning you to a blank slate.

Example: See SprMem

------------------------------------------------------------------------------

sproffset OX, OY

    OX = value to be added to all sprite X co-ords before plotting
    OY = as OX but for the Y co-ords

Purpose: Useful little command that applies (adds) an offset to all sprites
         before all subsequent plotting. Does not alter their logical
         position, ie. that stored in memory, only the position where they
         will appear. In effect it moves the X and Y axes.

Example: Used to good effect in the example program Scroller.Bas!

------------------------------------------------------------------------------

sprplot sprite, X, Y, image

    sprite = number of the ICBIS sprite to be affected
    X, Y   = co-ordinates, not restricted to screen size!
    image  = the number of the graphic in the sprite bank.
             if image > 99 then the bank it is obtained from is image DIV 100.
             e.g.   8 = image 8 from bank 1
                  108 = exactly the same as above but ...
                  214 = image 14 from memory bank 2

Purpose: Puts a sprite at the specified position. If no animation is currently
         underway then it assumes the graphic given by image. Movement is not
         impaired in any way.


Example: See that for SprMem.

------------------------------------------------------------------------------

sprkill
sprkill sprite

Purpose: Deactivates a sprite. Note that unlike with the STOS sprite off
         command it will not be immediately removed from the screen - only at
         the next DoSpr. This command kills any existing movements and
         animations for that sprite (or all if none specified) removing them
         from memory. It also marks the sprite as not in use so will be
         skipped over by most other ICBIS commands. Note that though it is
         not 'active' you can still set up new mushes and films for it which
         can then be turned on after the sprite is reactivated (by the
         SprPlot command)! Got all that? It's not so complicated as it sounds,
         honest!

------------------------------------------------------------------------------

sprx (sprite)
spry (sprite)
sprpx (sprite)
sprpy (sprite)

Purpose: Returns the logical / physical co-ordinates of a sprite.
         SprX and SprY return the X and Y values of the sprites as given by
         SprPlot and affected by move commands. SprPX and SprPY return the
         same values but with the global offsets added on - in other words
         these co-ordinates are the screen ones.

------------------------------------------------------------------------------

mushsprx sprite, movement_string
mushspry sprite, movement_string

Purpose: These are exactly the same as the STOS movex and movey commands. The
         physical implementation of movement within ICBIS however is slightly
         different - see algorithm for dospr. If their is an existing sprite
         movement underway then it is stopped when this command is used
         awaiting a move on command. Note that X and Y operate independantly
         with these commands.

Example: See STOS manual examples and descriptons of movex and movey.

------------------------------------------------------------------------------

mushon
mushon sprite

Purpose: Sets all sprites / specified sprite going on their specified
         movement. Use after declaring the movements with MushSprX and Y.

         Note that if all sprites are set moving with the single MushOn
         command then they will all have the same (start) update time - this
         would not be the case with a for..next loop and using MushOn sprite.
         See MeshSpr for another possibility of obtaining perfect
         synchrnisation.

------------------------------------------------------------------------------

mushoff
mushoff sprite

Purpose: Kills X and Y movements for all sprites / specified sprite.

------------------------------------------------------------------------------

mushfrz
mushfrz sprite

Purpose: Suspends X and Y movements for all sprites / specified sprite.

------------------------------------------------------------------------------

sprmush (sprite)

Purpose: Returns the following as at the last update -
              0  no mush underway
             -1  sprite is mushing
             -2  sprite is mushing but currently frozen
         Note that to STOS the first is equivelant to FALSE and the other two
         (the negative values) to TRUE.

------------------------------------------------------------------------------

filmspr sprite, film_string

Purpose: Exactly the same as the STOS anim command. For an algorithm of the
         way films (animation) are used see dospr.

Example: See STOS manual examples and descriptions of anim.
         See also the example for SprFilm.

------------------------------------------------------------------------------

filmon
filmon sprite

filmoff
filmoff sprite

filmfrz
filmfrz sprite

Purpose: The same as their Mush equivelants except acting on the films of
         course.

------------------------------------------------------------------------------

sprfilm (sprite)

Purpose: Returns the following as at the last update -
              0  no film being played
             -1  film animation underway
             -2  film is currently frozen
         Note that to STOS the first is equivelant to FALSE and the other two
         (the negative values) to TRUE.

Example: ' Following animates sprite 1 and waits till it's finished.
         ' Note is not complete - code to declare the sprites and the banks
         ' of the images are not here!
         :
         sprplot 1,100,100,1
         film 1,"(1,50)(2,10)(3,10)(4,10)(5,25)"
         filmon 1
         repeat
         dospr 0,physic
         until not (sprfilm (1))

------------------------------------------------------------------------------

frame (sprite)

Purpose: Returns the current frame displayed on screen of a film underway.
         That is, the frame at the last update. The frame should not be
         confused with the image - the former is the number of the bracket in
         the sequence whereas the latter is the graphic displayed. Will return
         zero when no film is currently on.

Example: ' This will not work without declaring the sprites and providing
         ' some graphics!
         :
         anim 1,"(1,25)(5,25)"
         anim on 1
         a=frame (1)
         dospr 0,physic
         b=print frame (1)
         wait 25
         dospr 0,physic
         wait 100
         c=print frame (1)
         print a,b,c
         :
         ' This will print the numbers
         '     1         2         3
         ' on the screen.

------------------------------------------------------------------------------

warpspr

Purpose: Sets all mushes and all films of all sprites to be updated at the
         next update with their next position / frame regardless of time lapse
         since last update and then at their normal intervals thereafter.
         Useful where there has been some time since the last update, e.g.
         when breaking out of programs for debugging purposes.

------------------------------------------------------------------------------

sprmesh sprite1, sprite2

Purpose: Sets the times of the next updates for mush and film of sprite 1 to
         those of sprite 2 if a corresponding mush/film exists. Note that the
         state of frozen / moving is copied over as well. If neither / only
         one sprite has a, say mushx, then no change is made. Therefore it is
         possible to have a frozen y movement but underway x movement - think
         about it! A subsequent mushon to sprite 1 and/or sprite 2 will set
         both x and y directions moving.

         Very useful for synchronising mushes / films of new sprites coming
         into existing unison groups of sprites in games. For mass
         initialisation it is better to use the global forms of mushon and
         filmon.

         This is probably the most difficult command to understand, study the
         algorithm and this text and try it in some of your programs to see
         the difference it makes!

Algorithm: If both sprite 1 and sprite 2 have a mushx set next mushx update of
              sprite 1 to that of sprite 2.
           Do the mushy and film timings in a similar manner.
           Copy the states of frozen / moving of sprite 2 to sprite 1 as well
               along with the timings copied over.

------------------------------------------------------------------------------

pxelcol (sprite, colours, background_screen, x1, y1, x2, y2)

Purpose: Returns the colours (out of those to be looked for) that would be
         behind the pixels of the sprite that are within the area specified if
         it were on the screen background_screen. It therefore provides you
         with collision detection between a sprite and drawn graphics.

         Colours is a bitmap of colours to be checked for, ie bit 0 = colour
         0, bit 1 = colour 1 and so on. The returned value is a similar bitmap
         with a bit set if that colour was found. By specifying only the
         colours you're interested in the process doesn't take as long - see
         the algorithm below.

         Note that the returned bitmap will contain other colours which were
         encountered before the final (stated) colour was found. Therefore
         this will not be the complete picture and they shouldn't be used in
         any check. If you want to look for them then you must specifically
         state that in the search bitmap.

Algorithm: For all rows of sprite within area specified
             For all columns of sprite within area specified
               If pixel of sprite is set then
                 Get colour of pixel 'behind' from background_screen
                 Set the appropriate bit in the returned bitmap
                 If all colours searched for found then exit now else loop
           Return values

Example: ' Checks for colour 1,2,4 and 7 behind sprite 1 at coords 100,100
         :
         sprplot 1,100,100,12
         :
         zipcopy back, physic
         wait key
         dospr back, physic
         :
         ' Note that the above is not needed for the checking - it's just to
         ' show what's happening. Backcol checks the sprite at whatever it's
         ' last location was.
         :
         if pxelcol (1, back, %1001011, 0, 0, 319, 199) <> 0 then ...
         ... print "collision!"

------------------------------------------------------------------------------

collision (start_sprite, count, sprite)

Purpose: Returns a bitmap relating to the collision between sprite and count
         number of sprites starting at start_sprite. It does not check for a
         collision with itself! Whereas STOS only checked for boundary
         collisions (ie treating all sprites as solid blocks) my little
         routine then goes to finer detail by checking for pixel collision!

         The returned value is a bitmap with bit 0 = start_sprite, bit 1 =
         start_sprite+1 up to bit count-1 = start_sprite + count-1. Therefore
         a maximum of 32 sprites can be checked in any one instruction (ie
         maximum value of count is 32).

Algorithm: For all sprites to be checked, not including self
             If the boundaries of the sprite clash then
               Check pixel by pixel until sign of collision or all checked
               If there is a collision then set the bitmap so

Example: ' The following returns a bitmap of the collisions between sprite 5
         ' and sprites 3 to 22 inclusive
         COLLISNS = collision (3, 20, 5)

------------------------------------------------------------------------------

setarea z, x1, y1, x2, y2

Purpose: Sets up an area, equivelant to a STOS zone, in which checks can be
         made on a sprite to see if it's hotspot is within. Unlike the STOS
         zone this can have a zone on or off the screen or wherever you want.
         This allows you to check for such trespasses when sprites are
         wandering around off screen out of view.

         The coordinates specified are logical coordinates - ie as if there
         was no sprite offset. The same that you specify for the sprites!

Example: ' Assuming setspr has been used to set up 3 areas
         ' This demonstrates that a huge range of  coordinates can be used!
         setarea 1,0,0,319,15
         setarea 2,-100,0,419,15
         setarea 3,-20000,-10000,-15000,-5000

------------------------------------------------------------------------------

resarea z

Purpose: Deactives/Removes/Kills/Generally gets rid of all knowlege of any
         area z.

------------------------------------------------------------------------------

area (group, sprite)

Purpose: Returns a bitmap of the area the hotspot of sprite is found in. Group
         specified which group of 32 areas to check, ie group 0 is areas 1 to
         32 and group 1 areas 33 to 64 etc.. The bitmap returned is such that
         bit 0 = area 1, bit 1 = area 2 etc. for that group.

------------------------------------------------------------------------------

sprclip x1, y1, x2, y2

Purpose: Specified which bit of the screen sprites are allowed to be drawn in.
         Sprites or bits of sprites outside of this area are not drawn. Note
         that the background_screen is copied over everywhere by do_spr
         regardless. If you are puzzled why any sprites aren't getting drawn
         on the screen make sure the clip area is set to full screen (for
         example) by typing sprclip 0,0,319,199!

         This command allows you to have the rest of the screen for use as a
         display of score and level etc.. In this case you would do all
         drawing to the background screen when updating the information.

------------------------------------------------------------------------------

nailspr sprite, screen

Purpose: A fully working version of STOSs put sprite! This allows you to copy
         a sprite (or rather it's graphic) to the screen at it's coordinates.

Example: ' Following uses nailspr and invis to set up platforms for a game.
         ' The graphics are nailed permanently to the background screen and
         ' the sprites themselves turned invisible so they will not be redrawn
         ' by dospr - thus speeding up the game.
         :
         for l=1 to 10
           nailspr l,back
           invis l
         next l

------------------------------------------------------------------------------

invis sprite

Purpose: Sets a sprite to be invisble - ie it won't be drawn by dospr. All
         other operations (mushing, films, collision detection) will be
         totally unaffected. As such it is very useful in platform games.

Example: See the example for nailspr.

------------------------------------------------------------------------------

visspr sprite

Purpose: Turns a sprite visible again. The counterpart of invis sprite.

------------------------------------------------------------------------------

dospr 0, destination_screen
dospr background_screen, destination_screen

Purpose: Updates sprite mushes and films (ie positions & graphics) then
         displays them on the destination_screen on top of a blank screen /
         the copied background_screen.

Algorithm: Copy / blank background
           For all active sprites ...
              If film on then
                Get next frame and delay as directed by brackets and loops
                Set sprite image as frame
                Set the next update time to current time plus delay
                If next update time still less than current time do next
              Check and update mushes in a similar manner to film
              If visible then draw sprite on screen

Example: See the example for SprMem for it's most basic use and Scroller.Bas
         for it's use with backgrounds and screen swapping.

------------------------------------------------------------------------------

zipcopy source, destination

Purpose: Copies 32000 bytes from source address to destination - ie a very
         fast whole screen copy (without the copying of colours).

Example: ' The following copies a screen from bank 5 to the physical and
         ' background screens - maybe for a menu screen where the mouse is
         ' to be used.
         :
         zipcopy 5,physic
         zipcopy 5,back

------------------------------------------------------------------------------



Error messages & meanings
-------------------------

In addition to a syntax error (instruction not of the right syntax - ie there's
too many/too few parameters or they are the wrong type) ICBIS generates it's
own errors:


Film declaration error
    A film has been attempted to be declared which has an error in the layout.

Illegal clipping coordinates
    The clipping coordinates specified are off-screen, x2 is less than x1
    and/or y2 is less than y1.

Illegal parameters
    The parameters passed in the instruction are illegal / impossible /
    out of range.

Impossible area coordinates
    The area coordinates specified are such that x2 is less than x1 and/or y2
    is less than y1.

Indecipherable number
    An error has occured when trying to decipher a number out of a mush /
    film string, probably due to an incorrect layout in the string.

Mush declaration error
    A mush has been attempted to be declared which has an error in the layout.

No such area
    The area you specified does not exist - ie it is a zero/negative number of
    it is greater than the maximum area you defined using setspr.

Not configured for any films
    You have not set up ICBIS for any films. You must declare the maximum
    number of brackets in a film you will be using when you issue the setspr
    command.

Not configured for any mushes
    As above but for mushes.

Sprite declaration error
    The sprite number you specified does not exist, ie. it is zero/negative
    and/or is greater than the maximum sprites ICBIS is set up for. You must
    declare the maximum number of sprites you will be using with the setspr
    command.



Further notes
-------------
There is no equivelant of priority as this is always maintained. Similarly, the
detect, update, redraw, freeze and unfreeze commands also do not apply. Get
Sprite can be used with this as it justs adds to the sprite bank.

Do not delete a bank which has been set up by setspr - ICBIS will throw a
wobbly if you subsequently try to do anything and could crash the computer (or
worse - the disk!). If you do delete it you must reinstate ICBIS with a new
bank / area before proceeding with any of the commands. It is perfectly OK to
delete a bank and not reset ICBIS so long as you're not using any further ICBIS
commands.
