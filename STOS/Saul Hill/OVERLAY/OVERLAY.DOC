
        |-----------------------------------------------------|
        |  Instructions for the Screen Overlayer Version 2.04 |
        |                                                     |
        |                Written by Saul Hill                 |
        |                                                     |
        |              The Danger Zone (c) 1992               |
        |-----------------------------------------------------|



Introduction
============

    So what is a screen overlayer?,  well it is a program that
combines (upto) 4 screens into a single one, and by use of the colour
palette you can swap between these screens.  Thus saving you memory,
and if used to good effect then it can add a bit of sparkle to many a
program.  You can use it for demo's, video titleling etc...   This is
one of those programs, where, only you can discover, how to use the
program to good effect.  I have provided the program, and example
sources, now you provide the use..  Anyway I hope you enjoy using the
program, and if you do use it, then please give us a Greet.

The Process
===========

    So how does it work, well the first step is to load a picture into
the program, after you have done this, the program forms a map of the
picture, then outputs it to a screen.  When you load the next screen
then when it outputs the picture it use's 2 colours, 1 for the
backgroud and 1 for the parts that are overlayed over the original
colour.  For 3 screens you use 4 colours and for 4 screens you use 8
colours.  Its pretty simple stuff rearly, if you did'nt understand
that then look at the examples provided.

    The 2 screen process uses 3 colours so to display screen one you
need to set the following colour's to the foreground colour. (ie White
etc)

    1 & 3 ($777)
    0 & 2 ($000)

in STOS basic it would look like this:

    fade 4,$0,$777,$0,$777

To display screen 2

    2 & 3 ($777)
    0 & 1 ($000)

    fade 4,$0,$0,$777,$777

How to display 3 screens (7 colours used)

Screen 1:  1,3,4,6 ($777)  0,2,5,7 ($000)
Screen 2:  2,3,5,6 ($777)  0,1,4,7 ($000)
Screen 3:  4,5,6,7 ($777)  0,1,2,3 ($000)

How to display 4 screens (15 colours used)

Screen 1: 1,3,4,6,8,10,11,13    ($777)
          0,2,5,7,9,12,14,15    ($000)

Screen 2: 2,3,5,6,9,10,12,13    ($777)
          0,1,4,7,8,11,14,15    ($000)

Screen 3: 4,5,6,7,11,12,13,14   ($777)
          0,1,2,3,8,9,10,15     ($000)

Screen 4: 8,9,10,11,12,13,14,15 ($777)
          0,1,2,3,4,5,6,7       ($000)

This program can be used by users of any language ( C, GFA, 68000 ,
STOS etc) I have provided example source code of how to display 2, 3 &
4 screens from STOS basic.

Assembler Users
---------------

I've not included sources for fadeing from assembler, becuase most
people prefer to write their own.  I'll just run through the easy way
to fade screens which is by use of the Set Pallette Command.

Firstly you will have to set up your palette data in the form of an
array that holds 16 words of colour data  eg:

screen1       dc.w    $000,$777,$000 etc  to represent all the colours
nessiary to display the screen.

Using this method you would have to set up an array to hold all the in
between fade patterns  from $777, $666,$555 etc, ie: all the in
between fades to the next palette.   This is basically the easyest
method of going about things.

Anyway after you have set up your palette data, you then would have
your loop and you then use the Set Palette:

     move.l    screen1,-(sp)    ; Put you palette data onto the stack
     move.w    #6,-(sp)         ; Set palette function number
     trap      #14              ; Execute
     addq.l    #6,sp            ; Restore Stack

Also you will need some sort of delay in between the fades, you could
try this method, which is again very simple:

wait     move.l    #30000,d0      ; Counter 30000 on d0
again    dbra      d0,again        ; Until counter hits -1
         rts

More advanced methods involve testing each colour register, on placing
it on a MFP timer, or you could place it on the Vbl list..  Anyway,
you are best left to find out the best method yourself, and I would
only recomend using the above method, if you don't know of anyother
way.

User's of C and GFA, you can also use Setpalette, but since we don't
own a copy of GFA, then we carn't provide examples..  Sorry..

For information on the 'Setpalette' function refer to Computes
Technical Reference guide 'TOS'.


File Handling (IFF)
===================

Please note that I have now introduced the facility to load
UNCOMPRESSED IFF pictures, other file formats will be supported in the
future.

Important
=========

TDZ Software and or thier agents do not accept responsibility for loss
to data or damage to hardware through use of this program thru
whatever cause.

Last words...
=============

Well best of luck in using the program.. Bye...



Saul of The Danger Zone..
