
                          STOS COMPILER EXTENSIONS

                                  THE FACTS

                              by David Haylett


So, you've read the book, you've written into magazines, you've asked
Mandarin, but you still can't figure out how to use data areas when
programming your own STOS Compiler extension. Here follows the FACTS which I
eventually had to find out myself (after a lot of hacking).

OK, so let's start with the basics. You want to have a command which prints a
message on the screen. This message is contained in a "dc.b" somewhere, and
you don't know how to access it. For example:


LIB21: dc.w 0    <-- (more about this later)
       ; we are going to use STOS trap 3 function 1
       move.w #1,d7
       lea text(pc),a0
       trap #3
       rts
text: dc.b "Alright mate?",0


...and there you have it. For any single command which requires some internal
data, you simply place them at the end, after the "rts". (Thanks to Martin
for this!)


Now, the problem comes when you want more than one command to access the same
data. Say you wanted two commands, one which takes some parameters from the
user and one which acts on those parameters. Obviously, two seperate command
libraries are going to require access to the same data. How?

Well, one of the very first things you enter into your compiler extension
source code is a list of three offsets. The offset to the parameter list, an
offset to the data area, and an offset to the first command library. The
second one is the one we're interested in.

Straight after your parameter definitions (the CODE: dc.b 0,i,c,i,1,1,0 lark)
you should then place the label "DATA:". Now then, the very first thing that
goes here is a branch to the INIT routine (thanks to Asa for that one!)
Immediately after that you should place another label, eg. "HEAD:". This
label will be the top of the data area, and from here onwards you place the
datas which your commands will require. So, for example:


START: dc.l PARA-START
       dc.l DATA-START
       dc.l LIB1-START

CATALOG: dc.w LIB2-LIB1
         dc.w LIB3-LIB2
         ...etc
         dc.w LIBEX-LIB64

PARA: dc.w 64,64
      dc.w HELLO-PARA
      dc.w GOODBYE-PARA
      .
      .
      whatever
      .
      .

i equ 0
f equ $40
s equ $80
c equ ","

HELLO: dc.b 0,i,1,1,0
GOODBYE: dc.b 0,i,c,i,1,1,0
...and so on

DATA: bra INIT
HEAD:
score: dc.l 0
lives: dc.l 0
area: ds.w 60
message: dc.b "there once was a young man from lincoln...",0
         dc.b "err, who couldn't write lymericks...",0
         dc.b "so whenever he tried to be funny...",0
         dc.b "he wasn't...",0
         dc.b "and everybody used to walk off whenever he said som...",0

INIT: lea END(pc),a2
      rts

END: rts


Now, that's the main structure of the initialisation bit. If you want to put
in any start-up or exit routines which are called once at the beginning and
once at the end of the final executable program, put them in INIT and END
respectively (but remember to save the registers!) The only problem now is,
how do we access the data area? ie. how do we get the value stored at
"lives:"?

Now then, at the beginning of the library which needs to make a call to the
data area, you need to enter this:


LIB44: dc.w 0
       lea $93c(a5),a4
       move.l (a4),a4
       add.l #$10,a4


This routine ends up with 'a4' pointing to the HEAD label. So, to access
'LIVES' for example, you simply do this:

move.l lives-HEAD(a4),d0
  or
clr.l score-HEAD(a4)
 or whatever


The $93c bit is simply an offset from 'a5' (the pointer to STOS's system
variable table thing) which points to about $14 bytes behind DATA (for
whatever reason...)

Note that you can easily incorporate subroutines in your compiled programs,
ie. routines such as STOSSTR and TOSSTR, which need to be called from
different command libraries. The method is exactly the same. Put in the $93c
rubbish at the beginning of the library, and JSR to ROUTINE-HEAD(a4). The
ROUTINE is placed anywhere in the data area (ie. between DATA and INIT).

One final question. What is the dc.w at the beginning? Well, this is only
required if you are going to use one of the internal libraries. An internal
library is like ASK, GETBANK, GETSCR, etc.

Let's say that one of your commands requires the address of a memory bank.
Instead of having to type START(5) or whatever from the STOS program itself,
you can use a library which takes the number '5' and converts it into the
address of bank 5. This is library number 214 (GETBANK).

Now then, here is your command:

LIB55: dc.w 0
       move.l (a6)+,a0 ; a0 now contains an address
       ; mess about with a0
       rts

If you wanted to convert the value inputted from a bank number to a bank
address, do this:

LIB55: dc.w lib55call-LIB55,0
       move.l (a6)+,a0
       move.l a0,-(a6) ; must push the bank number in a6
lib55call: jsr 214
       move.l d3,a0 ; address returned in d3
       ; mess about with a0
       rts

This is necessary because the COMPILER must translate the '214' into an
address to branch to when calling GETBANK, and so it must know where the JMP
actually is.

Goodbye.

David Haylett
(BLACK EAGLE)
