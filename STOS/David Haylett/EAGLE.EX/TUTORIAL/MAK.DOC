

                           EAGLE MFP MAK TUTORIAL
                           ----------------------

This is a seperate tutorial about what MAKs are, what their use is, how to
use them, and how to make them yourself.

What is a MAK?
--------------

When I entered the final stages of programming the EAGLE extension (and the
initial stages of a major brain hemmorhage) I decided that I was bound to
think up something brilliant for an MFP just after I had released it. So, I
thought that the best thing to do was to make this extension extendable
(people with headaches just switch off and forget it!)

If you have read the manual, you should know about the several EAGLE MFP
routines that work on their own, like sprites, music, shifts, fades, and
menus. The EAGLE extension comes with the facility to 'add on' more MFP
routines as and when they are created. These new MFPs are called MAKs (would
you believe) and my excuse is that they stand for MFP PAKS (don't get PAKs
and MAKs confused.....I have!)

These MAKs exist as (usually small) files on a disk, just like any others.
They can be loaded into STOS like a normal binary file, using the BLOAD
command. See page 54 of the STOS manual for more details of BLOAD. Once they
are in memory, they can be used as normal MFPs, albeit with small
differences.


How to use MAKs
---------------

First of all, reserve yourself some memory:

RESERVE AS DATA 5,2000

This reserves memory bank 5. You can also use the AREA function of the EAGLE
extension (see the manual), but it may not be large enough for a MAK (it
should be, though). You can also use a string!: MAK$=space$(1000) will
reserve 1000 bytes of string space (yes, I know it's cheating!)

Then, you load the MAK file from disk into memory. We'll use a file called,
say, EXAMPLE.MAK:

BLOAD "EXAMPLE.MAK",start(5)       [if you reserved a memory bank]
   or
BLOAD "EXAMPLE.MAK",area           [if you are using the AREA]
   or
BLOAD "EXAMPLE.MAK",varptr(MAK$)   [if you are using a string]


Now, we have the MAK in memory. But there are a couple of other things we
need to do first...

As with most of the EAGLE MFP routines, MAKs will require parameters to be
passed to it (like co-ordinates, or colour data, or addresses, or speeds,
etc.) The way to pass parameters to a MAK is identical to the way to pass
parameters to an MFP. You need to have some space in memory, say in an array
or a memory bank, in which exists the parameters (as longwords).

Let's say the EXAMPLE.MAK file which we loaded above does the following:

"Set the background colour to the value in the first available parameter slot
 and increment that value every 50th of a second"

Now, as with MFPs, we need to define some space for these parameters to be
stored. Arrays are probably the best bet for people who need to get the hang
of things, LOKEing memory locations is easier for people who know what
they're doing.

DIM P(5)         ; we'll allow ourselves five parameter slots

Now then, the FIRST parameter slot ALWAYS has to be the address of the MAK
which you just loaded in. So:

P(1) = start(5)      ; if you used memory bank 5
   or
P(1) = area          ; if you used the AREA
   or
P(1) = varptr(MAK$)  ; if you loaded it into a string called MAK$


The second parameter and onwards can be used by the MAK. In the case of our
EXAMPLE.MAK, we need to pass an initial parameter (the colour of the
background) to the routine. This goes in the next available slot:

P(2) = $700     ; start off with a red


If the MAK needed any other parameters, they would be put in P(3), P(4),
P(5)...up to P(9999) if you really need to!

Now, as with MFPs, you need to start up the GLOBAL EAGLE MFP HANDLER (dun dun
da daaaaaa!) This is easier than it sounds!:

QQQ = EAGLE MFPS ON(10)      ; all MFPs and MAKs can now work (max. of 10)


All that's left to do now is initialize the MAK (very similar to initializing
an MFP) and start it off. MFP routines are of types between 1 and 19 or so
(at my last count). If you specify the MFP type as 0, it runs a MAK instead.

INIT MFP 1,0,varptr(P(1))


In English, this says: "initialize an MFP. It will be the first one we use,
it will be of type zero (MAK) and the start of our parameter list is at the
address of the start of the P() array."

Then, use MFP ON 1 and off you go!

There should also be a couple of example .BAS files about using MAKs, so
check these out for a working example.


Writing your own EAGLE MAKs
---------------------------

If you can't program in assembler or machine code, or if you don't want to
write your own MAK, then I'm afraid the tutorial has finished here for you.

Good, still with me. Right, MAKs exist as normal executable files which you
write with your favourite 68000 language.

The first longword of your program should be the header: $1994BACA

If you attempt to use a MAK which does not have this header, then it will not
work. So:

; start of program

dc.l $1994baca       ; our header

After the header comes the routine itself. This can be anything you like, but
must comply to the following rules:

* You CANNOT use address register 0  (a0). This holds the address of the
  start of the parameter list which is entered by the user and passed to the
  MAK routine.

* Your routine MUST take less than a 50th of a second to complete, and it
  MUST NOT have any wait loops of any kind (ie. waiting for a keypress, or a
  VBL, or the drive to stop, etc.) Should your routine take longer than the
  specified time, the machine will lock up when you attempt to use the MAK.

* The stack pointer can be used, but MUST remain at the same place at the end
  as it started off at.

* Normal rules for STOS traps apply (see pages 248 to 265 - remembering that
  TRAP 4 was removed from the language)

* The routine terminates with an RTS.


Don't worry, my handler will save all of the data and address registers for
you, so corrupt them as much as you like, mate.

"a0" points to the start of the parameter list which is created by the user.
The first longword will be the address of your routine (see above) and
obviously must not be changed. The following longwords can be used as you
like to retrieve parameters FROM the STOS program, pass parameters TO the
STOS program, or as any internal counters, timers, flags, etc. that your
routine may need.

On the registration disk is an example MAK in ASCII assembler source code for
you to tear apart.

Please call your MAK routines something helpful, and end the filename with
.MAK (the sooner we set a standard, the better). When it comes to
documentation, either include a seperate ASCII document for each MAK, or one
large ASCII document containing all of the ones on the disk, or subdirectory,
or whatever.

Make the documents easy to understand, making sure that you don't
automatically assume that the reader is a genious at programming. Start with
the name of the MAK, an exact description of what it does, and a list of what
parameters it will need, what parameters it will return, and any parameters
it uses internally. If possible, include a short STOS .BAS program giving a
practical example. If we all comply to these regulations, then everyone will
be happy, and so on.

Oh by the way, the MFP routine which handles MAKs automatically skips 28
bytes of the GEM header, so you can assemble your files as normal without
messing about.

So, get yer MAKs out.

(Black Eagle)
