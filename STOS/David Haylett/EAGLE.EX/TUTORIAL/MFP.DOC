

                       EAGLE EXTENSION 'MFP' TUTORIAL
                      ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

Okay, so MFP's are not exactly the easiest thing in the world to master, and
they are also not the easiest things to explain either, so I thought I'd add
this little tutorial to help clear things out.

First of all, what is an MFP?

Well, your ST has a little chip in it called the 68901 Multi-Function
Processor, and it generally allows you to execute more than one program at
the same time. Within the EAGLE extension, there are three main commands
which allow you to have your own MFP routines within your STOS programs.

These routines are very similar to some which already exist within STOS.
Examples of MFPs which you may be familiar with are the FLASH, SHIFT, SPRITE,
MUSIC, FADE, and MENU commands. One thing that you may have always taken for
granted is the fact that they run in the background while you can do whatever
you want in the foreground. For example, set up a sprite and use the MOVE and
ANIMate commands to send it round the screen. While this is happening, you
can still type, access the disk drive, and generally do whatever you want
without once having to update them.

The EAGLE MFPs are similar routines, but of a different nature. As you may
have noticed if you have read the manual, you can set up scrolltexts,
flashes, barrels, and other similar effects which run on their own without
you needing to update them yourself.

The EAGLE MFPs themselves require some list of parameters which tell them
what to do, ie. what colours to glow, or what text to scroll, just like any
other command. However, I decided not to have the list of parameters
alongside the command, like normal. Instead, one of the three parameters
which are passed to the INIT MFP command points to an address where these
parameters exist. Here is an example:

Say we want to have a vertical scrolltext running on it's own. Looking
through the manual, scrolltexts are type 6, and require five parameters to be
passed to them, indicating screen co-ordinates, addresses, and so forth. The
INIT MFP command COULD have looked like this...

                  INIT MFP 1,6,varptr(txt$),physic,160,0,20

...with 'varptr(txt$)' pointing to the address of the text, 'physic' pointing
to the destination screen, '160' being the x co-ordinate, '0' being the y co-
ordinate, and '20' meaning 20x8 in vertical length down the screen. Now, take
a look at MFP type 8 (MTUBE). This requires seven parameters, but the INIT
MFP command above only allows 5 (excluding MFP number and type). The point
I'm trying to make here is I never know how many parameters the longest MFP
is going to need. I mean, I might allow for eight parameters, then suddenly
think up another one which needs nine. Therefore, instead of a long list of
parameters, the INIT MFP command has three (the last one POINTS to the list
of parameters).

                              INIT MFP 1,6,area

The statement above is the correct format of the command. As you may know,
the 'area' is another command in the EAGLE extension which points to a
kilobyte of spare memory (in version 0.8 anyway, but it may now be
different). In the above command, we are saying that the first MFP we will
have running will be of type 6 (the scrolltext again), and the five
parameters which we must pass to it are to be found at 'area'. The 'area'
could easily be an array or a memory bank.

These parameters need to be stored as consecutive longwords. This means that
from and including the address passed as the third INIT MFP parameter, the
data you need to pass to the MFP routine will be stored there. So, to have a
scrolltext at co-ordinates 160,0 on the physical screen, where the text is
located in a string called TXT$, and the length is 20x8 lines, we would set
up the MFP like this:

X=area : loke X,varptr(TXT$) : loke X+4,physic : loke X+8,160 :
loke X+12,0 : loke X+16,20 : INIT MFP 1,6,X

Quickly, a 'longword' is simply a way of storing a number. See pages 222-223
of the STOS manual, especially under LOKE and LEEK. The next longword is
always FOUR BYTES from the previous longword (note the X,X+4,X+8,X+12 above).

What does the above mean? Well, we are going to put the address of our space
into X. The second command says 'put the address of the scrolltext string at
TXT$ as the first longword in X'. The third command says 'put the destination
address into the next longword, which is always 4 bytes from the previous
one'.

You do not need to use AREA all the time to store these figures. You can
reserve a memory bank as WORK or DATA, and place the address into X, eg.
X=START(5). You can also use an integer array. DIM I(10) : X=VARPTR(I(1)).
Note however that if using arrays as a data list, the third INIT MFP
parameter MUST point to the address of the first cell. Integer arrays always
have cells of longwords.

OK, this probably isn't helping! See this:

1 dim D(10)
2 D(0)=1
3 D(1)=rainbow
4 D(2)=2
5 D(3)=9999
6 INIT MFP 1,1,VARPTR(D(0))

This is another, similar way, of setting up an MFP. This one uses MFP type 1,
which is the GLOW COLOUR REGISTER. The first parameter is the colour register
to glow (in this case, number 1, the default text). The next one is the
address of the colour data. The RAINBOW function is also from the EAGLE
extension, and simply points to an address where there is a list of 50 or so
colours. The third parameter is the speed to glow, similar to the value
passed to the SHIFT and FADE commands. The final number is the quantity of
colours to use before starting again. See the manual for more info.

So, once you have set up your routine with the INIT MFP command, all you have
to do is set it running with the MFP ON command. The values required by the
MFP ON, MFP OFF commands, and the first value for the INIT MFP command all
refer to the number of the MFP. You can have up to 20 at the same time (with
version 0.8 anyway), just like you can have up to 15 sprites.

For working examples, see the MFP??.BAS files.

Well, I hope this has clarified things for you, and if not, then...erm....

David Haylett (Black Eagle)
