                                    $4D2
                                   ------

Does this number mean anything to you? If you use chip music in your STOS
programs then it should be (unless you use MUSAUTO). OK, how about this?

              dreg(0)=1 : call start(3) : loke $4d2,start(3)+8

Ring any bells? Let me tell you. This is the address in memory that you place
the music routine to make it play every frequency cycle (50th/60th of a sec).
If you try to play music this way while EAGLE MFPS are engaged, then you may
find that nothing happens. Here's why...

Your ST has a chip, called the 68901 Multi-function Processor. This is a nice
little chap who makes your ST perform certain routines every 50th of a
second. Once this happens, the 68000 CPU is interrupted and a small list of
addresses is called, one by one, before the CPU is allowed to get on with
whatever it was doing. This list of addresses resides at location $4CE (maybe
also familiar?) onwards. There is a default total of eight MFP calls every
50th of a second, but most of them are blank (0's are ignored).

There are three main values which are important; $454, $456, and the queue.
$454 is a word holding the number of MFP calls to make every 50th/sec (8 on
default). $456 is a longword holding the address of the start of the queue
($4CE on default). Finally, from $4CE to $4EA is a list of 8 longwords which
are to be called every 50th/sec. You should figure out that $4D2 resides
somewhere between the two (in fact it's the second one). This means that
every 50th/sec (I'm getting fed up of writing 50th/sec) $4CE, $4D2, $4D6,
$4DA, $4DE, $4E2, $4E6, and $4EA are all called, and therefore your music
seems to play on it's own.

This is all very well, but why does none of this work when EAGLE MFPs are on?
Well, once you enter EAGLE MFPS ON, my extension totally re-routes the MFP
queue and points to somewhere else in memory, where all the scrollers, tubes,
messages, graphics and snakes can be used. This is done simply by changing
the value in $456. The reason your music doesn't play is because those eight
addresses aren't being called any more! Yes, they are just sitting there
twiddling their little thumbs quietly while the real MFP queue is right up
the other end of memory.

Well? How do we GET the music to work then, eh? You'll be glad to know the
solution is quite simple. All we have to do is find where abouts the queue
actually is, find a free slot (which I generously left for you), and bung the
music routine in there. Here's the STOS equivalent:

Instead of:                LOKE $4D2,music_address
You need to do this:       L=LEEK($456)
                           WHILE LEEK(L)>0
                           L=L+4
                           WEND
                           LOKE L,music_address

...and there you have it. All we do is find where the queue is with $456,
place it in 'L', keep searching until we find an empty slot (a 0), and throw
the music in there. You do not need to go through the whole process when you
want to change music, or switch it off. At the end of the above routine, 'L'
points to the place instead of $4D2, so you can do the following:

                             LOKE L,0 : SILENCE
                       LOKE L,different_music_address

...and so on. Happy? No?

One interesting point to note is that when you enter EAGLE MFPS ON, the
routine first of all copies over the existing routines until it finds a 0. If
you enable your music (normally, at $4D2) BEFORE switching my routine on,
then it will be copied over with the rest and play happily on it's own.

David Haylett
BLACK EAGLE
