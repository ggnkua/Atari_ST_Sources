************************************
**                                **
** DEVELOPMENT (Beta release 0.4) **
**                                **
************************************

Designed & Written By Neil Halliday
(C)1995 STORM Developments.







Beta-Release Conditions
~~~~~~~~~~~~~~~~~~~~~~~

	This pre-release / Beta version of the STORM development STOS
extension can only be used by official beta sites. The compiler extension
files can be used only by those persons registered to the GBP extension,
and the actual coders of the software. STORM developments cannot be held
responsible for any bugs or ommisions in this Beta version of the extension,
and also cannot be held responsible for any damage (software, hardware,
physical or mental) that may occur by the use of this software.


Beta-Release Test Sites
~~~~~~~~~~~~~~~~~~~~~~~

   This extension is being tested in the following places, by the following
   people...
	

	STOSSER..      Dean Sharples (Deano)
	STORM..        Neil Halliday
	GBP..          Bruno Azzara
	               Geoff Harrison
	OTHERS..       Andrew Shirley
		       Kirsten Zeder
	               
	        	
	If you would like to become an official Beta-tester for this
extension then please forward your name and address, along with a blank
disk to the following address.


		Neil Halliday
		115 Heaton Street
		Denton
		Manchester
		M34 3RY
		
		

The Extension
~~~~~~~~~~~~~

	The DEVELOPMENT extension is designed to make the whole task
of coding programs within STOS basic as simple as possible. We have created
routines that do everyday tasks quickly, easily and efficiently. After
using the DEVELOPMENT extension for a while, you will discover that programming
will never be the same..



Beta-Version 0.4
~~~~~~~~~~~~~~~~

	The following commands are available in this Beta version of the
STORM DEVELOPMENT Extension.  To activate the extension, simply copy the
files with an extension of EX? to your STOS directory, and the files with
an extension of EC? to your COMPILER directory. The next time you restart
STOS Basic the DEVELOPMENT extension will become active.




Atari Power Pad(tm) Commands
~~~~~~~~~~~~~~~~~~~~~~~~~~~~


	The following commands have been added to allow STE machines to
take full advantage of the ATARI Powerpad controller handset, as used on
the ATARI JAGUAR 64bit Multi-Media System(tm).




**************************************************************************

    Command: padup 

     Syntax: VAR = padup(N) 

Description: Returns the status of the up button on the Powerpad connected
             to port N of the STE machine. VAR will contain TRUE (-1) if
             the button is pressed, and FALSE (0) at all other times.

**************************************************************************

    Command: paddown 

     Syntax: VAR = paddown(N) 

Description: Returns the status of the down button on the Powerpad
             connected to port N of the STE machine. VAR will contain
             TRUE (-1) if the button is pressed, and FALSE (0) at all
             other times.


**************************************************************************

    Command: padleft 

     Syntax: VAR = padleft(N) 

Description: Returns the status of the left button on the Powerpad
             connected to port N of the STE machine. VAR will contain
             TRUE (-1) if the button is pressed, and FALSE (0) at all
             other times.


**************************************************************************

    Command: padright 

     Syntax: VAR = padright(N) 

Description: Returns the status of the right button on the Powerpad
             connected to port N of the STE machine. VAR will contain
             TRUE (-1) if the button is pressed, and FALSE (0) at all
             other times.


**************************************************************************

    Command: padafire 

     Syntax: VAR = padafire(N) 

Description: Returns the status of the fire A button on the Powerpad
             connected to port N of the STE machine. VAR will contain
             TRUE (-1) if the button is pressed, and FALSE (0) at all
             other times.


**************************************************************************

    Command: padbfire 

     Syntax: VAR = padbfire(N) 

Description: Returns the status of the fire B button on the Powerpad
             connected to port N of the STE machine. VAR will contain
             TRUE (-1) if the button is pressed, and FALSE (0) at all
             other times.


**************************************************************************

    Command: padcfire 

     Syntax: VAR = padcfire(N) 

Description: Returns the status of the fire C button on the Powerpad
             connected to port N of the STE machine. VAR will contain
             TRUE (-1) if the button is pressed, and FALSE (0) at all
             other times.


**************************************************************************

    Command: padpause 

     Syntax: VAR = padpause(N) 

Description: Returns the status of the pause button on the Powerpad
             connected to port N of the STE machine. VAR will contain
             TRUE (-1) if the button is pressed, and FALSE (0) at all
             other times.



**************************************************************************

    Command: padoption 

     Syntax: VAR = padoption(N) 

Description: Returns the status of the option button on the Powerpad
             connected to port N of the STE machine. VAR will contain
             TRUE (-1) if the button is pressed, and FALSE (0) at all
             other times.



**************************************************************************

    Command: padbutton 

     Syntax: VAR = padbutton(N) 

Description: Returns the status of the grey numerical buttons on the
	     Powerpad connected to port N of the STE machine. value VAR
	     is returned as a 16 bit integer, of which each bit holds the
	     status of a single button. When a bit is set, is means that
	     the button is active (pressed).  The 16 bit integer has the 
	     following meaning..
	     
	     
bit	     15 14 13 12 11 10 09 08 07 06 05 04 03 02 01 00
------------------------------------------------------------
button                    #  *  9  8  7  6  5  4  3  2  1  0	     



**************************************************************************

Parallel Port Controller Commands
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

	A long time ago there was a football game written that allowed
four players to play at one time, on four joysticks. This was acheived by
an interface connection that allowed two joysticks to be plugged into
the Centronics (Printer) port.  Using the DEVELOPMENT extension, it is
possible to take full advantage of this joystick interface from within
your programs. This now allows us to access upto four joysticks on an STFM
machine, and upto 8 using an STE!  Imagine an 8 player at once game??

**************************************************************************

    Command: csticks on 

     Syntax: csticks on
     
Description: This cstickson command will activate the parallel port 
             joysticks. In order for the parallel routine to work the 
             sound chip must be initialized. This command does just 
             that. 

**************************************************************************

    Command: csticks off 

     Syntax: csticks off
     
Description: When finished with the centronics port joystick routines
             the Yamaha sound chip has to be reset. Do this by using
             the csticksoff command. 

**************************************************************************

    Command: cstick up 

     Syntax: x=cstick up(n)
     
Description: Will return TRUE (-1) if the joystick connected to port n
             of the Centronics interface is in the up position. Will
             return FALSE (0) if not.

**************************************************************************

    Command: cstick down 

     Syntax: x=cstick down(n)
     
Description: Will return TRUE (-1) if the joystick connected to port n
             of the Centronics interface is in the down position. Will
             return FALSE (0) if not.

**************************************************************************

    Command: cstick left 

     Syntax: x=cstick left(n)
     
Description: Will return TRUE (-1) if the joystick connected to port n
             of the Centronics interface is in the left position. Will
             return FALSE (0) if not.

**************************************************************************

    Command: cstick right 

     Syntax: x=cstick right(n)
     
Description: Will return TRUE (-1) if the joystick connected to port n
             of the Centronics interface is in the right position. Will
             return FALSE (0) if not.

**************************************************************************

    Command: cstick fire 

     Syntax: x=cstick fire(n)
     
Description: Will return TRUE (-1) if the joystick connected to port n
             of the Centronics interface has the fire button pressed.
             Will return FALSE (0) if not.

**************************************************************************




Hardware Scrolling Commands
~~~~~~~~~~~~~~~~~~~~~~~~~~~

	The STE machine has the capabilities of hardware scrolling. We
have written the following routines to take advantage of this new hardware.
Because the hardware scrolling is quite difficult to understand, and takes
a while to get working correctly we have developed a simple command that
will do everything for you, but for the technically minded the direct
hardware interface commands are also available.

**************************************************************************

    Command: hardpixel 

     Syntax: hardpixel N 

Description: This command directly addresses the hardware, and configures
             the number of pixels the screen is shifted to the right. The
             value N can contain 0 to 15.
             

**************************************************************************

    Command: hardscreen 

     Syntax: hardscreen ADDR 

Description: The hardscreen command will set the STE screen address to
             the value of ADDR. There are no restrictions to the value
             of ADDR, and it doesn't have to be to any set boundaries. 

**************************************************************************

    Command: hardlinewid 

     Syntax: hardlinewid N 

Description: The hardlinewid command will set the STE line width value to
             N. The value N contains the overlength line width of the
             hardware scroll map, and is stored in number of words. 
             Therfore if your map is 336 pixels wide, N would contain 4.

**************************************************************************

    Command: hardscroll 

     Syntax: hardscroll ADDR,XPOS,YPOS,WID,HIG,MOD

Description: The hardscroll command will setup and control a complete
             STE hardware scrolling screen. ADDR is the address of your
             map. XPOS and YPOS are the current x and y co-ordinates to
             be displayed on the screen, WID & HIG are with width and
             height of the screen in pixels, and MOD is the command mode.
             
             To speed the routine up, all offset and screen increments
             are calculated in the initialisation routine, and this is
             done by calling the command with a mode (MOD) of 1. Once the
             screen setup is initialised we will then be able to use the
             command to scroll the screen.
             
             hardscroll start(15),0,0,640,400,1
             
             The above statement will set up a map of 640x400 pixels, and
             set the start scroll position to 0,0.
             
             hardscroll start(15),100,100,0,0,2
             
             The above statement will now set our scroll position to
             100,100. 

**************************************************************************

    Command: hardreset 

     Syntax: hardreset 

Description: The hardreset command will de-activate the hardware scroll
             by resetting the hardware registers to the standard ST 
             screen format. It is usually best to use a default physic
             command after calling this instruction. To avoid any nasty
             screen corruption while the addresses are being reset include
             a fade before hand.
             
             ie
             
             fade 1 : hardreset : physic=default physic

**************************************************************************



Screen Saving Commands
~~~~~~~~~~~~~~~~~~~~~~

	I have noticed an incompatibility with STOS and most screen savers
that are available. This is because STOS resets all the environments and
HBL/VBL & Timers etc.. when first executed.  Upto yet, I have only seen
one screen saver that works with STOS, and that is one that bounces a Fuji
(Atari sign) around the screen. All very good, and pretty too, but one
major let down.. Resolution. When in High rez it doesn't work.  Never fear,
we have developed a complete screen saver routine, and integrated it into
the basic version of the extension. This means you can set it going while
working in STOS, and have no fear of burn in.

	The routine we have developed is completely interupt driven, and
sits in the back ground while you work in STOS. It has a clock timer that
can be set to any delay, and will even continue running your STOS programs
while saving the screen!  Let's say you have a complex algorithom generating
a huge sine wave, May take hours.. Set the screen saver routine going, and
the saver will kick in, but continue to generate your sinewave in the
background!  Very useful indeed.

	At the moment these screen saver commands will only work in the
basic programs, and will be ignored when compiled. We are hoping to 
get the compiler versions in very soon, and will maybe improve them too.

**************************************************************************

    Command: setclock

     Syntax: setclock N 

Description: The setclock command allows the delay for the screen saver to
             wait before executing. N is passed in number of seconds.
             
             ie
             
             setclock 10
             
             
             The above example will run the screen saver after 10 seconds
             of no activity.

**************************************************************************

    Command: screensaveron

     Syntax: screensaveron physic

Description: This command will activate the screen saver to run in the
             background.  You can pass any screen address you like, but
             remember it is the one that gets saved, so by passing as a
             bank, you ill actually scroll that instead of the main
             screen.    TIP: Always pass physic!

**************************************************************************

    Command: screensaveroff

     Syntax: screensaveroff

Description: De-activates the screen saver

**************************************************************************


Communication Commands
~~~~~~~~~~~~~~~~~~~~~~

	Seeing as though communicating with other computers is all the
rage these days, we though we would introduce some decent communication
commands into STOS basic.  With the following four commands it is 
possible to create some really fantastic programs. STORM Chat was
completely written using these commands..

**************************************************************************

    Command: auxout

     Syntax: auxout n

Description: Send by n to the serial port.

**************************************************************************

    Command: auxstat

     Syntax: x=auxstat

Description: Test if there is any incoming data from the serial port.
             x will contain TRUE (-1) if there is, of FALSE (0) if not.

**************************************************************************

    Command: auxin

     Syntax: x=auxin

Description: Receive a byte of incoming data from the serial port. Before
	     using this command always test that some data is ready to be
	     received, otherwise this command will just sit until there is.
	     We will be updating this routine to prevent this very shortly. 

	     ie
	     
	     if auxstat then x=auxin

**************************************************************************

    Command: auxset

     Syntax: auxset speed,hand

Description: Set up the serial port ready for communications. speed
             holds the baud rate of the transmission, and hand is the
             handshaking method. Both can have the following values
             
             speed		baudrate
             
              0        		19200
              1			 9600
              2			 4800
              3			 3600
              4			 2400
              5			 2000
              6			 1800
              7			 1200
              8			  600
              9			  300
             10			  200
             11			  150
             12			  134
             13 		  110
             14	 		   75
             15			   50
             
             
             hand		Method
             
             0			No handshake (default after power up)
             1			XON/XOFF
             2			RTS/CTS
             3			XON/XOFF & RTS / CTS (Not usefull)

**************************************************************************


Blitter Chip commands
~~~~~~~~~~~~~~~~~~~~~             


    Command: bfcopy

     Syntax: bfcopy source,destination

Description: Copy a complete, four bit-plane screen from source to
	     destination.

**************************************************************************

    Command: bfskopy

     Syntax: bfskopy source,destination

Description: Copy a complete, single bit-plane screen from source to
	     destination.

**************************************************************************

    Command: bscancopy

     Syntax: bscancopy source,ypos,length,destination,dypos

Description: Will copy "length" scan lines from "source" "ypos" to
	     "destination" "dypos".    This command works in four bit
	     planes. 

**************************************************************************


    Command: bscanskopy

     Syntax: bscanskopy source,ypos,length,destination,dypos

Description: Will copy "length" scan lines from "source" "ypos" to
	     "destination" "dypos".    This command works in single bit
	     planes. 

**************************************************************************


