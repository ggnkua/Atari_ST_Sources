The STOS all purpose shoot`em up routine by Ian Blair

The demo supplied needs STOS installed to run !

The files CORE.BAS and CORE.DOC can be freely distributed in the public 
domain.  Providing that both files are supplied together,  and the routine
may be freely incorporated into the users own programs.

(c)1990 IAN BLAIR  

The following routine is a small piece of code that can be easily modified
to fit any kind of shoot`em up. The code uses movement tables to run 
6 ALIENS,6 BULLETS and 1 SPACESHIP. On a standard 520ST I would recommend
that you leave the dimension statements as they are, because these will
use up over 73k of memory when the program is actually run. How do you get
the data for the movement routines I hear you ask. Well there are two
ways, The first is to define files at the beginning of the program and 
then loading them in as you go along, but I personally find that method 
a little bit cumbersome, And the second is my favourite method, to define
them in a series of mathematical functions in a subroutine for each level. More of that later, but first I will go throught the main program.

NOW THE MAIN CORE OF THE ROUTINE:

10 dim A1(1000),B1(1000),A2(1000),B2(1000)
20 dim A3(1000),B3(1000)
30 dim A4(1000),B4(1000)
40 dim IMAGE1(1000),IMAGE2(1000),IMAGE3(1000),IMAGE4(1000),IMAGE5(1000)
   IMAGE6(1000)
50 dim A5(1000),B5(1000),A6(1000),B6(1000)

These lines define the arrays that will finally hold the movement strings
A1 - A6 are the x coordinates, B1 - B6 are the Y coordinates and IMAGE1
- IMAGE6 are the sprite numbers for the aliens. The advantage in using
an image number with each movement is that you can use as many different
designs of aliens as you want during each "attack".

60 SHIPMESK=%111111110111111
70 ATTMESK=0 : bset 10,ATTMESK : bset 11,ATTMESK : bset 12,ATTMESK :
   bset 13,ATTMESK : bset 14,ATTMESK : bset 15,ATTMESK
80 bclr 1,SHIPMESK : bclr 2,SHIPMESK

This is where the collision detection is initialised. SHIPMESK is a bitmask
for the players ship, set all the bits for the sprites to one.In this
case I am not using sprite 9.Also set the bits for the players ship and
the players bullet(s) to zero with the BCLR function.ATTMESK is the same
for the attacking ships and it is set to zero to begin with and the bits
that correspond to the attackers set to one with the BSET statement
(sprites 10,11,12,13,14,15).Any more information can be found in the STOS  
manual or the excellent GAME MAKERS MANUAL.

90 mode 0 : flash off : synchro off : update off : curs off : hide 
100 key off 
110 load "temp.neo" : wait vbl 

This is the point in the program where I loaded in a trial background and
set up the screen res and got rid of the mouse and function key windows.
PLEASE NOTE THIS IS SLIGHTLY DIFFERENT IN THE SUPPLIED DEMO.

120 limit sprite 0,0 to 210,174

The next step is to limit the sprites to the game area

130 M=1

M is the variable used to define the position in the movement routine

140 XSPR1TE=110 : YSPR1TE=157

xspr1te and yspr1te are the starting positions of the players ship. Notice
the use of 1 in xspr1te to prevent confusion with the keywords in the
interpretor.

150 timer=0

At this point the timer is set to 0, it will be used later on to give a
tick every 2/50ths of a second to keep the program running at a steady
rate.

160 if B1(M)>185 then bset 10,ATTMESK
170 if B2(M)>185 then bset 11,ATTMESK
180 if B3(M)>185 then bset 12,ATTMESK
190 if B4(M)>185 then bset 13,ATTMESK
200 if B5(M)>185 then bset 14,ATTMESK
210 if B6(M)>185 then bset 15,ATTMESK

Lines 160-210 are to check if the aliens have left the screen. If they
have then the bit in ATTMESK is reset to one ready for the next part of
the movement table. Even if an alien has been destroyed the variable that
controls it will still increase to greater than 185. The only drawback
is that all aliens have to leave the bottom of the screen, but by changing
to the array holding the x coordinates or having one or more tests it
could be made more flexible.

220 R1=x sprite(1)-10: R2=x sprite(1)+10

R1 and R2 are the outer limits of the aliens targetting area. If the alien
is inside the area bounded by R1 and R2 then the alien will drop a bomb.
The values of 10 can be increased or decreased to suit the individual games.

230 if jleft then XSPR1TE=XSPR1TE-4
240 if jright then XSPR1TE=XSPR1TE+4

The routine to move the players ship, no explanation is needed here.

260 if movon(2)<>0 then goto 290

This checks if the players missile is moving if it is it jumps past the
firing routine to the next part.

270 sprite 2,-300,-200,28
280 if fire then sprite 2,XSPR1TE,152,28 : move y 2,"(1,-6,25)" :
    move on 2

If the missile is not moving then line 270 wipes it off the screen and 280
checks to see if the fire button has been pressed, when the missile is
fired it is moved using the MOVE Y command. The numbers in the movement
string can be changed for a faster or slower missile or even to add
animation with the ANIM command.

290 if btst(10,ATTMESK) then sprite 10,A1(M),B1(M),IMAGE1(M)
300 if btst(14,ATTMESK) then sprite 14,A5(M),B5(M),IMAGE5(M)
310 if btst(13,ATTMESK) then sprite 13,A4(M),B4(M),IMAGE4(M)
320 if btst(15,ATTMESK) then sprite 15,A6(M),B6(M),IMAGE6(M)
330 if btst(11,ATTMESK) then sprite 11,A2(M),B2(M),IMAGE2(M)
340 if btst(12,ATTMESK) then sprite 12,A3(M),B3(M),IMAGE3(M)

290-340 check to see if the alien has been destroyed and if not places it
on the screen.

350 sprite 1,XSPR1TE,YSPR1TE,26

The players ship is now placed on the screen.

360 if btst(10,ATTMESK) and A1(M)>R1 and A1(M)<R2 and movon(3)=0 then
    sprite 3,A1(M),B1(M)+7,29 : move y 3,"(1,2,99)" : move on 3
370 if btst(11,ATTMESK) and A2(M)>R1 and A2(M)<R2 and movon(4)=0 then
    sprite 4,A2(M),B2(M)+7,29 : move y 4,"(1,2,99)" : move on 4
380 if btst(12,ATTMESK) and A3(M)>R1 and A3(M)<R2 and movon(5)=0 then
    sprite 5,A3(M),B3(M)+7,29 : move y 5,"(1,2,99)" : move on 5
390 if btst(13,ATTMESK) and A4(M)>R1 and A4(M)<R2 and movon(6)=0 then
    sprite 6,A4(M),B4(M)+7,29 : move y 6,"(1,2,99)" : move on 6
400 if btst(14,ATTMESK) and A5(M)>R1 and A5(M)<R2 and movon(7)=0 then
    sprite 7,A5(M),B5(M)+7,29 : move y 7,"(1,2,99)" : move on 7
410 if btst(15,ATTMESK) and A6(M)>R1 and A6(M)<R2 and movon(8)=0 then
    sprite 8,A6(M),B6(M)+7,29 : move y 8,"(1,2,99)" : move on 8

360-410 are the attacking bomb firing routine. Each statement checks to
see if the alien is in the area bordered by R1 and R2, if it still exists
and that there is no bomb currently dropping. If all these checks are
true then a bomb is dropped using the STOS MOVE Y and MOVE ON commands.

420 synchro 

SYNCHRO is a very useful command that updates the sprite positions at the
same time. 

430 inc M
440 if M>800 then _____________________________________________

These two lines move the movement table up 1 place and if M is greater 
than 800 jumps to another part of the program

460 if timer<2 then 460

To keep the program running smoothly without it speeding up or slowing
 down on each cycle the variable TIMER is used to produce a tick every
 2/50ths of a second. If all the operations have been done quickly then
 the program halts until 2/50ths have passed before going on. Most arcade
 games run at 50hz so if used properly STOS can run at 25HZ only half
 speed.

470 CS=collide(1,5,5) and SHIPMESK : if CS<>0 then __________________

CS is the variable used to detect collisions with the ship. Rather than
launch into a detailed explanation of how it works lets just say it works
rather well. For more information on and and other operators refer to
any computer book. CS will normally be 0 and the routine checks it and
failing the condition jumps to the routine after the THEN statement.

480 CA=collide(2,16,16) and ATTMESK : if CA<>0 then gosub 500

As above but CA is the attackers variable.

490 goto 150

Return to the beginning of the cycle.

500 rem blow up an attacker
510 move off 2 : sprite 2,-200,-100,1
520 for I=10 to 15
530 if btst(I,CA) then K1LLED=I : gosub 560
540 next I
550 return 

The above subroutine is used to find out which alien has been destroyed
and to wipe the players missile off the screen. The numbers in the FOR
NEXT loop can be changed for the alien sprites that you are using. The
variable K1LLED is used to pass the information to the routine that
provides an explosion.

The scoring routine could get its information from this subroutine, using 
the k1lled variable to decide how many points etc should be awarded.

560 rem kill attacker
570 bclr K1LLED,ATTMESK
580 if K1LLED=10 then anim 10,"(23,5)(24,5)(12,5)" : anim on 10
590 if K1LLED=11 then anim 11,"(23,5)(24,5)(12,1)" : anim on 11
600 if K1LLED=12 then anim 12,"(23,5)(24,5)(12,1)" : anim on 12
610 if K1LLED=13 then anim 13,"(23,5)(24,5)(12,1)" : anim on 13
620 if K1LLED=14 then anim 14,"(23,5)(24,5)(12,1)" : anim on 14
630 if K1LLED=15 then anim 15,"(23,5)(24,5)(12,1)" : anim on 15
640 boom 
650 return

BCLR in the above routine clears the bit in ATTMESK so that the now
"invisible" alien can`t be shot again or to prevent it dropping any more
bombs. It can be very unnerving to play a game where bombs drop at you
from out of nowhere. The other lines actually animate the explosions
that define the demise of the aliens.


Hopefully the above routine will at least provide you with a skeleton to
work from.  It is not intended to be a tutorial,  but a ready made 
solution to the problem.

The next question is how to actually produce the movement tables.

The following is the subroutine used to produce the attack wave in 
the demonstration program.

1000 rem level 1
1010 rem
1020 rem
1030 S=100 : Y=1
1040 S1=80 : I1=27

The  variables  S and S1 are the entry points for  the  aliens  (x 
coordinates) and Y is the Y coordinate and I1 is the sprite no.

1050 for X=1 to 900
1060 A1(X)=-30 : A2(X)=-30 : A3(X)=-30 : A4(X)=-30 : A5(X)=-30 :
     A6(X)=-30 : B1(X)=-30 : B2(X)=-30 : B3(X)=-30 : B4(X)=-30 : B5(X)=-30 
     : B6(X)=-30
1070 next X

The  above  FOR NEXT routine clears the arrays and sets all the elements
to positions outside the screen.

1080 for C=1 to 100
1090 A1(C)=S : B1(C)=Y : IMAGE1(C)=I1
1100 IMAGE4(C+50)=I1 : IMAGE5(C+70)=I1 : IMAGE6(C+90)=I1
1110 A4(C+50)=S1 : B4(C+50)=Y : A5(C+70)=S1 : B5(C+70)=Y : A6(C+90)=S1 
     : B6(C+90)=Y
1120 A2(C+20)=S : B2(C+20)=Y : A3(C+40)=S : B3(C+40)=Y
1130 IMAGE2(C+20)=27 : IMAGE3(C+40)=27
1140 A1(C+100)=S : B1(C+100)=Y : IMAGE1(C+100)=I1
1150 IMAGE4(C+150)=I1 : IMAGE5(C+170)=I1 : IMAGE6(C+190)=I1
1160 A4(C+150)=S1 : B4(C+150)=Y : A5(C+170)=S1 : B5(C+170)=Y :
     A6(C+190)=S1 : B6(C+190)=Y
1170 A2(C+120)=S : B2(C+120)=Y : A3(C+140)=S : B3(C+140)=Y
1180 IMAGE2(C+120)=27 : IMAGE3(C+140)=27
1190 A1(C+480)=S : B1(C+480)=Y : IMAGE1(C+480)=I1
1200 IMAGE4(C+530)=I1 : IMAGE5(C+530)=I1 : IMAGE6(C+530)=I1
1210 A4(C+530)=S1 : B4(C+530)=Y : A5(C+550)=S1 : B5(C+550)=Y :
     A6(C+570)=S1 : B6(C+570)=Y
1220 A2(C+500)=S : B2(C+500)=Y : A3(C+520)=S : B3(C+520)=Y
1230 IMAGE2(C+500)=27 : IMAGE3(C+520)=27
1240 inc S : inc Y : inc Y : inc Y
1250 dec S1
1260 next C

This FOR NEXT loop supplies the complete paths for the 3 "sweeping" 
routines. Basically it works like this, on each pass of the loop the
y coordinates are increased by three while the x coordintates are
increased S or decreased S1 by one. The offset added to the variable C
means that only one loop is needed to supply three waves. By adding small
offsets to each variable then small delays can be introduced to provide
the continuous swooping effects in the first wave.

1270 Y=0 : S=20 : S1=50 : S2=80 : S3=110 : S4=140 : S5=170 : for C=250
     to 370
1280 A1(C)=S : B1(C)=Y : A2(C)=S5 : B2(C)=Y : IMAGE1(C)=30 : IMAGE2(C)=30
1290 A3(C+30)=S1 : B3(C+30)=Y : A4(C+30)=S4 : B4(C+30)=Y :
     IMAGE3(C+30)=30 : IMAGE4(C+30)=30
1300 A5(C+60)=S2 : B5(C+60)=Y : A6(C+60)=S3 : B6(C+60)=Y :
     IMAGE5(C+60)=30 : IMAGE6(C+60)=30
1310 inc Y : inc Y
1320 next C
1330 Y=0
1340 for C=370 to 470
1350 A1(C)=S2 : A2(C)=S3 : B1(C)=Y : B2(C)=Y : IMAGE1(C)=27 :
     IMAGE2(C)=27
1360 A3(C+20)=S1 : A4(C+20)=S4 : B3(C+20)=Y : B4(C+20)=Y :
     IMAGE3(C+20)=27 : IMAGE4(C+20)=27
1370 A5(C+40)=S : A6(C+40)=S5 : B5(C+40)=Y : B6(C+40)=Y :
     IMAGE5(C+40)=27 : IMAGE6(C+40)=27
1380 A1(C+270)=S2 : A2(C+270)=S3 : B1(C+270)=Y : B2(C+270)=Y :
     IMAGE1(C+270)=27 : IMAGE2(C+270)=27
1390 A3(C+290)=S1 : A4(C+290)=S4 : B3(C+290)=Y : B4(C+290)=Y :
     IMAGE3(C+290)=27 : IMAGE4(C+290)=27
1400 A5(C+310)=S : A6(C+310)=S5 : B5(C+310)=Y : B6(C+310)=Y :
     IMAGE5(C+310)=27 : IMAGE6(C+310)=27
1410 inc Y : inc Y
1420 next C

These two loops are for the dropping formation and they start the 
aliens in pairs to provide a fixed formation. In these the x coordinate
remains constant and the y coordinate is increased by 2 each time.

1430 M=1
1440 return

These two are for passing control back to the program from the subroutine.
The actual process in these loops are hard to explain, but many others 
could be tried. For those with a more mathamatical interest might like
to experiment with other functions like SIN,COS and others. The above is
only intended to give a starting point for a program and I am sure that 
with a little time and effort many more refinements could be made.
The actual processing in the loops takes a quite a bit of time, but when 
it is compiled the speed increase is quite amazing. In some cases it can
take 10 seconds but the time drops to around one second when compiled.
Try compiling the example program and see the difference. But as the 
tables are worked out in advance, say between levels then it does not
affect the important areas of the game. One idea to cover the time is
between levels display a screen and use the MUSIC command as this will 
carry on playing while the routine is "crunching".

One final tip for thaose with the STOS compiler, if you have tried to
compile with a new character set and failed copy the set onto the
compiler folder on the work disk, to replace the existing sets 8x8.cr0 
etc. The compiler takes these from the work disc.
More details about changing the character sets can be found in the
manual.

If anybody out there finds a use for the above routine I would be very
happy to see it, in fact if anybody just wants to swap ideas or to just
write about anything then do get in touch.

Write to          IAN BLAIR
                  78 CARMARTHEN ROAD
                  WAUN WEN
                  SWANSEA
                  SA1 1HS

If anyone does send any disks I`ll send back something of mine.

Best Regards and happy experimenting !

Ian Blair

 

