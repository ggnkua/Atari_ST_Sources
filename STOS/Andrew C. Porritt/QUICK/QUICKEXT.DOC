                    The Stos Quick Extension
                               ---


                     Written by A.C.Porritt

                       of Dattrax Software


                           (22/08/93)

  A great many people seem to use STOS Basic to create games and 
demos.  However, the coding in some of them is such that what may 
have been a great idea turns out to be nothing short of terrible.  
The reason is speed.  Too many people have tried to do too much 
all at once and STOS simply cannot handle it inside a vertical 
blank.  This is where the Quick Extension comes in.

        I tried to incorporate a number of routines that would 
vastly improve the speed of a program if used instead of STOS 
commands.  For example, did you know that for STOS to clear a 
screen using CLS LOGIC takes approximately one vertical blank?  
This is absolutely useless if you want to write a star routine 
that runs in one vertical blank because by the time you have 
erased your old stars, you have little time left to print any new 
ones.  I have written a new command that will directly replace 
CLS XXX (where XXX is a bank, screen, or just simply and address 
in memory).  The command is CLQ.


        Here is a list of the new commands.

        CLQ    <Bank/Screen/Memory Address> [,height]

               This is a fast CLS that clears 32K worth of data 
               or, if required, only a small amount (ie CLQ
               physic,100 would only clear 16K of data (half
               the screen))

               Note: Use CLQ XXX instead of CLQ XXX,200 because 
               it is quicker (marginly).

        Example:

               CLQ 5              -         clears 32K in bank 5.

               CLQ LOGIC,150      -         clears 150 lines of 
                                            the logical screen.



        LIGHT ON and
        LIGHT OFF

               This command turns the drive light on or off.  Do 
               not use it when playing music/sfx as the system
               will either lock up or the music will distort.

        RASTER <bank>

               This will set up a timer B interrupt thus allowing 
               the screen colours and resolution to be set each
               scanline.  The bank that you specify should be set
               up in the following way:-

       Byte:     |   Meaning:
       ----------+----------------------------------------------
       0-1       |   Colour of screen from top of visible screen
       2         |   Distance that colour will span (scan lines)
       3         |   Resolution of span (0=low res, 1=med res)
       4-5       |   Colour of screen from bottom of last span
       6         |   Distance that colour will span (scan lines)
       7         |   Resolution of span
       ...       |   ...

               For the last "span" of colour, putting zero into 
distance byte prevents any more colour spans occurring.



        NO RASTER
                         Turns rasters off.

        FONT <dest,ascii,source,height>

                         Draws a character from a STOS character 
set bank.  Dest is the screen destination.  The character is 
specified in ascii (ie 0-255, space is 32).  Source is the 
character set bank and height specifies the height of the 
character MINUS ONE (ie for a standard eight by eight character 
you would put seven for the height).

        Example:

               FONT PHYSIC+160*100+64/2,asc("T"),5,7

               - draws the character T at location 32,100  
                 (64/2),(160*100) from character bank 5



        FONT LINE <line,ascii,source,dest,height>

                         Similar to FONT but draws one vertical 
line of width one pixel of a character from a STOS character 
bank.  The line is drawn on the right hand side of the 
destination specified.  Line is the pixel column (0-7) required, 
ascii is the ascii value of the character required and source is 
the source bank.  Dest is the destination of the character.  You 
will probably want the character drawn on the right hand side of 
the screen (for use in scrolling texts) so may I suggest trying 
PHYSIC+153 or such like.  Height is the height of the character 
MINUS ONE, as in FONT.

        Example:

               FONT LINE 4,asc("T"),6,physic,15

               - draws the fourth pixel column of character T 
from character bank 6 onto the physical screen (ie in the top 
left hand corner).  The character will have a height of 16.  
Therefore the bank would consist of 8X16 characters (ie a high 
resolution font set).

        SCRLFT <bit_pattern,screen,height>

               This scrolls certain bit planes one pixel to the 
left.  The data to be scrolled is pointed to be screen and the 
height (in pixel lines) is in height. (Note: do not try using 
zero or any negative number for the height!!!)

               The bit pattern can be set as follows:

               %abcd where a,b,c and d are either zero or one.

        Example:

               SCRLFT %0100,physic,200

               - scrolls bit plane 3 of the entire physical 
                 screen to the left.

               SCRLFT %1110,5,50

               - scrolls fifty pixel lines of screen 5 to the 
                 left, however, plane one is not scrolled.

        SCRRGHT <bit_pattern,screen,height>

               Same as SCRLFT (see above) but scrolls to the 
right.


        STARS <bank>

               Something of a small command for what it does.  
This command will draw a number of pixels on the screen at 
certain locations and then move the locations.  Repeated use of 
this command and you'll be seeing stars (excuse the pun!).  This 
command could be used though for images made up of stars to be 
displayed and shifted.

               The bank should be set up like this:-

        Byte:  |  Meaning:
        -------+-------------------------------------------------
        0-3    |  Location to print stars ie physic/start(5) etc.
        4-5    |  Number of stars to print MINUS ONE
        6-7    |  X limit (ie 319 means edge of screen)
        8-9    |  Y limit (ie 100 means half way down screen)
        10-11  |  X location of first star
        12-13  |  Y location of first star
        14-15  |  X step of first star
        16-17  |  Y step of first star
        18-19  |  Colour of first star
        20-21  |  X location of second star
        ...    |  ...


        HANG MOUSE and
        LOOSEN MOUSE

                         These commands switch of the mouse 
interrupt entirely and restart it again.  This helps when you are 
pushing the machine to the limits of running a process under a 
vertical blank because it means that if anyone moves the mouse, 
the screen will not jump.

                         Hang mouse kills the mouse interrupt and 
Loosen mouse restores them again.


        FOLD OUT <source bank,destination bank> and
        FOLD IN <source bank,destination bank>

                         These commands emulate the STOS fold out 
routine that happens each time you load STOS.


        There is a demo for each command here in the EXAMPLES 
folder.

        If you use these routines, please register (œ5.00 
registration fee - no forign currency please)

        If you register you will get immediate information on 
forthcomming releases from Dattrax Software and copy of the Quick
compiler extension as soon as it's finished

        Also comments and questions are welcome.  All 
correspondance to:

        Dattrax Software,
        First Floor Offices,
        201 York Road,
        Hartlepool,
        Cleveland.
        England.
        TS26 9EE.
