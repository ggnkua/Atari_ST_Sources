rem ----------------------------------------
rem ----------- CSV2STOS v1.00 -------------
rem ---- Michael Keenleyside (Dec 2021) ----
rem -------------- .MBKSide ----------------
rem ----------------------------------------

@STARTOFPROG
    erase 1 : erase 5 : erase 6
    mode 0 : click off : key off : curs off : show : mouseon

    menu$ (1)="View   "
        menu$ (1,1)="World Map"
        menu$ (1,2)="Landscape Map"
        menu$ (1,3)="----------"
        menu$ (1,4)="World Blocks"
        menu$ (1,5)="Landscape Blocks"
        menu$ (1,6)="----------"
        menu$ (1,7)="View NEO"
        menu$ (1,8)="View PI1"
        menu$ (1,9)="----------"
        menu$ (1,10)="Quit"

    menu$ (2)="Import CSV File   "
        menu$ (2,1)="Make World Map"
        menu$ (2,2)="Make Landscape Map"
        menu$ (2,3)="----------"
        menu$ (2,4)="Make Batch File"
        menu$ (2,5)="Run Batch Converter"

    menu$ (3)="Export to CSV   "
        menu$ (3,1)="M.L. World Map"
        menu$ (3,2)="M.L. Landscape Map"
        menu$ (3,3)="----------"
        menu$ (3,4)="TOME Map (*.MAP)"
        menu$ (3,5)="AGT Map (*.CCM)"

    menu on 

    locate 0,0
    print
    print
    pen 4
        centre "CSV2STOS v1.00" : print
        print
    pen 13
        centre "By Michael Keenleyside" : print
        centre "STOS Coders FB (Dec. 2021)" : print
        print
        print
    pen 1
        centre "A *.CSV data import/export utility" : print
        print
        centre "For users of Tiled, STOS Basic" : print
        centre "& The Missing Link Extension" : print
        centre "World or Landscape maps" : print
        print
        centre "Now with CSV export options" : print
        centre "for TOME Extension *.MAP files" : print
        centre "and AGT's *.CCM map format"
        print
        print
        print
    pen 13
        centre "For more information on" : print
        centre "AGT by Douglas Little (dml):" : print
        centre "https://bitbucket.org/d_m_l/agtools" : print
    curs off
;
@MAIN_SELECTION_LOOP
    OPTION=mnbar : CHOICE=mnselect
    
    rem View options
    if OPTION=1 and CHOICE=10 then menu off : default : end
        if OPTION=1 and CHOICE=1 then menu off : cls : goto @VIEW_WORLD_MAP
        if OPTION=1 and CHOICE=2 then menu off : cls : goto @VIEW_LANDSCAPE_MAP
        if OPTION=1 and CHOICE=4 then menu off : cls : goto @VIEW_WORLD_BLOCKS
        if OPTION=1 and CHOICE=5 then menu off : cls : goto @VIEW_LANDSCAPE_BLOCKS
        if OPTION=1 and CHOICE=7 then menu off : cls : goto @VIEW_NEO
        if OPTION=1 and CHOICE=8 then menu off : cls : goto @VIEW_PI1

    rem Make World or Landscape Map(s), Make or Run Batch File 
        if OPTION=2 and CHOICE=1 then menu off : cls : goto @MAKE_WORLD_MAP
        if OPTION=2 and CHOICE=2 then menu off : cls : goto @MAKE_LANDSCAPE_MAP
        if OPTION=2 and CHOICE=4 then menu off : cls : goto @MAKE_BATCH_FILE
        if OPTION=2 and CHOICE=5 then menu off : cls : goto @RUN_BATCH_FILE

    rem Export CSV data from World or Landscape Maps, TOME or AGT file formats
        if OPTION=3 and CHOICE=1 then menu off : cls : goto @EXW_CSV_LOAD_WORLD_MAP
        if OPTION=3 and CHOICE=2 then menu off : cls : goto @EXL_CSV_LOAD_LANDSCAPE_MAP
        if OPTION=3 and CHOICE=4 then menu off : cls : goto @EXT_CSV_LOAD_TOME_MAP
        if OPTION=3 and CHOICE=5 then menu off : cls : goto @EXA_CSV_LOAD_AGTCCM_MAP
    goto @MAIN_SELECTION_LOOP
;

@VIEW_WORLD_MAP
    rem Load World Map
        F$=file select$("*.MBK","Load World Map")
        if F$="" then cls : goto @STARTOFPROG
        if length(5)=0 then load F$,5 : D=depack(start(5))
        MAPWID=(deek(start(5)+4)+2)/2 : MAPHGT=deek(start(5)+6)/2
        XB=MAPWID*16-320 : YB=MAPHGT*16-160
    rem Load World Blocks
        F$=file select$("*.MBK","Load World Blocks")
        if F$="" then goto @STARTOFPROG
        if length(6)=0 then load F$,6 : D=depack(start(6))
    rem Init Viewscreen
        hide on : mouseoff : p on
        S5=start(5) : S6=start(6)
        world 0,0,320,160,0,1
        D=palt(start(6))
        locate 0,22 : centre "Use joystick to move around map" : print
        locate 0,24 : centre "Press space to exit" : print
    logic=back
    rem Display World Map, Read Joystick Movement
        X=0 : Y=0
    repeat
        world logic,S6,S5,X,Y,0
        if p left(1)=true and X>0 then X=X-2
        if p right(1)=true and X<XB then X=X+2
        if p up(1)=true and Y>0 then Y=Y-2
        if p down(1)=true and Y<YB then Y=Y+2
        screen swap : wait vbl
    until hardkey=57 : wipe logic : wipe back : erase 5 : erase 6 : p stop : default : click off : clear key
        goto @STARTOFPROG
;
@VIEW_LANDSCAPE_MAP
    rem Load Landscape Map
        F$=file select$("*.MBK","Load Landscape Map")
        if F$="" then cls : goto @STARTOFPROG
        if length(5)=0 then load F$,5 : D=depack(start(5))
        MAPWID=(deek(start(5)+4)+2)/2 : MAPHGT=deek(start(5)+6)/2
        XB=MAPWID*16-320 : YB=MAPHGT*16-160
    rem Load Landscape Blocks
        F$=file select$("*.MBK","Load Landscape Blocks")
        if F$="" then goto @STARTOFPROG
        if length(6)=0 then load F$,6 : D=depack(start(6))
    rem Init Viewscreen
        hide on : mouseoff : p on
        S5=start(5) : S6=start(6)
        landscape 0,0,320,160,0,1
        D=palt(start(6))
        locate 0,22 : centre "Use joystick to move around map" : print
        locate 0,24 : centre "Press space to exit" : print
    logic=back
    rem Display Landscape Map, Read Joystick Movement
        X=0 : Y=0
    repeat
        landscape logic,S6,S5,X,Y,0
        if p left(1)=true and X>0 then X=X-16
        if p right(1)=true and X<XB then X=X+16
        if p up(1)=true and Y>0 then Y=Y-2
        if p down(1)=true and Y<YB then Y=Y+2
        screen swap : wait vbl
    until hardkey=57 : wipe logic : wipe back : erase 5 : erase 6 : p stop : default : click off : clear key
        goto @STARTOFPROG
;
@VIEW_WORLD_BLOCKS
    rem Load World Blocks
        F$=file select$("*.MBK","Load World Blocks")
        if F$="" then erase 6 : goto @STARTOFPROG
        if length(6)=0 then load F$,6 : D=depack(start(6))
    rem Setup Map to View World Blocks (max 256 possible with dml's patch, 128 without)
        if length(5)=0 then reserve as data 5,5008 : fill start(5) to start(5)+length(5),0 : loke start(5),38964820 : doke start(5)+4,98 : doke start(5)+6,100
            W=20 : H=13
        erase 1 : bcopy 5 to 1 : erase 5 : reserve as data 5,(W*H*2)+8 : fill start(5) to start(5)+length(5),0
            kopy start(1),start(5),8
            doke start(5)+4,(W*2)-2 : doke start(5)+6,H*2
        OB=start(1)+8 : B=start(5)+8
            for YY=1 to MH : kopy OB,B,MW*2
                B=B+(W*2) : OB=OB+(OW*2)
            next YY
        BLKNUM=peek(start(6)+6)
    rem Message Screen
        hide on : mouseoff : p on
        S5=start(5) : S6=start(6)
            locate 0,1
            pen 4
                centre "A quick & dirty world block viewer" : print : print
            pen 1
                centre "If this screen freezes &" : print
                centre "doesn't display any kind of" : print
                centre "'Ready to display' message below," : print
                centre "the program has probably crashed" : print : print
                centre "Make sure you are loading" : print
                centre "in a set of world blocks," : print
                centre "otherwise again, it will crash" : print : print
                centre "If any of this happens, reload!" : print : print
            pen 13
                centre "Note: Without dml's patch applied" : print
                centre "there is a 128 world block limit" : print
                centre "(256 with patch applied)": print
            B=8 : C=8 : BN=0 : if BLKNUM=0 then BLKNUM=256
        @WCLOOP
            A=1 
        repeat
            if BN=BLKNUM then goto @WB_VIEW_EXITLOOP
            set block S5,B,C,BN
            inc BN : B=B+16 : inc A
        until A>20
            B=8 : C=C+16
        goto @WCLOOP
            @WB_VIEW_EXITLOOP
            pen 2
            print : print
                centre "Ready to display" : print : print
                centre "Press any key to continue" : print
            wait key
            cls : flash off
            D=palt(start(6))
            world 0,0,320,160,0,1
            locate 0,22 : centre "Joystick up or down to view more blocks" : print
            locate 0,24 : centre "Press space to exit" : print
            logic=back
    rem Start loop, display world map
    X=0 : Y=0
        repeat
            world logic,S6,S5,X,Y,0
            if p up(1)=true and Y>0 then Y=Y-2
            if p down(1)=true and Y<56 then Y=Y+2
            screen swap : wait vbl
        until hardkey=57 : wipe logic : wipe back : erase 5 : erase 6 : p stop : default : click off : clear key
    goto @STARTOFPROG
;
@VIEW_LANDSCAPE_BLOCKS
    rem Load Blocks
        F$=file select$("*.MBK","Load Landscape Blocks")
        if F$="" then erase 6 : goto @STARTOFPROG
        if length(6)=0 then load F$,6 : D=depack(start(6))
    rem Setup Map to View Landscape Blocks (max 512 possible with dml's patch)
        if length(5)=0 then reserve as data 5,5008 : fill start(5) to start(5)+length(5),0 : loke start(5),38964820 : doke start(5)+4,98 : doke start(5)+6,100
        W=20 : H=26
        erase 1 : bcopy 5 to 1 : erase 5 : reserve as data 5,(W*H*2)+8 : fill start(5) to start(5)+length(5),0
        kopy start(1),start(5),8
        doke start(5)+4,(W*2)-2 : doke start(5)+6,H*2
        OB=start(1)+8 : B=start(5)+8
            for YY=1 to MH : kopy OB,B,MW*2
                B=B+(W*2) : OB=OB+(OW*2)
            next YY
        N=map toggle(start(5))
        BLKNUM=peek(start(6)+6)
    rem Init Screen
        hide on : mouseoff : p on
        S5=start(5) : S6=start(6)
    rem Message Screen    
        curs on : locate 0,5
    pen 13
        centre "Temporary Bugfix (of sorts)" : print
        print
    pen 1
        print "Landscape block total detected is";BLKNUM : print : print
        print "If correct, enter this number below" : print
        print "If incorrect, please enter correct"
        print "number of landscape blocks to display" : print : print
        input "Enter 0 if unknown:";BLKNUM
    if BLKNUM=0 then BLKNUM=512
    curs off : cls
        locate 0,1
    pen 1
        locate 0,0
    pen 4
        centre "A quick & dirty landscape block viewer" : print : print
    pen 1
        centre "If this screen freezes &" : print
        centre "doesn't display any kind of" : print
        centre "'Ready to display' message below," : print
        centre "the program has probably crashed" : print : print
        centre "Make sure you are loading" : print
        centre "in a set of landscape blocks," : print
        centre "otherwise again, it will crash" : print : print
        centre "If any of this happens, reload!" : print : print
    pen 10
        centre "Warning: Display may appear 'glitchy'" : print
        centre "This 'might' be resolved at a later date" : print : print
    pen 13
        centre "Note: Without dml's patch applied" : print
        centre "there is a 256 landscape block limit" : print
        centre "(512 with patch applied)": print
    B=8 : C=8 : BN=0
    @LCLOOP
        A=1
    repeat
        if BN=BLKNUM then goto @LB_VIEW_EXITLOOP
        set block S5,B,C,BN
        inc BN : B=B+16 : inc A
    until A>20
        B=8 : C=C+16
    goto @LCLOOP
    @LB_VIEW_EXITLOOP
    pen 2
        print : print
        centre "Ready to display" : print
        centre "Press any key to continue" : print
        wait key : cls
    D=palt(start(6))
    landscape 0,0,320,160,0,1
        locate 0,22 : centre "Joystick up or down to view more blocks" : print
        locate 0,24 : centre "Press space to exit" : print
    logic=back
    rem Start loop, display landscape map
    X=0 : Y=0
    repeat
        landscape logic,S6,S5,X,Y,0
        if p up(1)=true and Y>0 then Y=Y-2
        if p down(1)=true and Y<256 then Y=Y+2
        screen swap : wait vbl
    until hardkey=57 : wipe logic : wipe back : erase 5 : erase 6 : p stop : default : click off : clear key
    goto @STARTOFPROG
;
@VIEW_NEO
    rem Load NEO
        F$=file select$("*.NEO","Load & View NEO")
        if F$="" then cls : goto @STARTOFPROG
        if length(5)=0 then reserve as screen 5 : load F$,5
    S5=start(5) : get palette(5)
        logic=back
        blit S5,0,0,320,200,logic,0,0 : blit S5,0,0,320,200,physic,0,0
    wait key
        cls : erase 5 : default : click off : clear key
    goto @STARTOFPROG
;
@VIEW_PI1
    rem Load PI1
        F$=file select$("*.PI1","Load & View PI1")
        if F$="" then cls : goto @STARTOFPROG
        if length(5)=0 then reserve as screen 5 : load F$,5
    S5=start(5) : get palette(5)
        logic=back
        blit S5,0,0,320,200,logic,0,0 : blit S5,0,0,320,200,physic,0,0
    wait key
        cls : erase 5 : default : click off : clear key
    goto @STARTOFPROG
;

@MAKE_WORLD_MAP
        curs on
        locate 0,6
    pen 1
        centre "Enter the full tile width &" : print
        centre "height of your world map in below" : print : print
        print
        print
        input "Width of map:";W
            if W=0 then erase 1 : erase 5 : erase 6 : curs off : goto @STARTOFPROG
        input "Height of map:";H
            if H=0 then erase 1 : erase 5 : erase 6 : curs off : goto @STARTOFPROG
    erase 1 : erase 5 : erase 6 : reserve as data 6,5008 : fill start(6) to start(6)+length(6),0 : loke start(6),38964820 : doke start(6)+4,98 : doke start(6)+6,100
    bcopy 6 to 1 : erase 6 : reserve as data 6,(W*H*2)+8 : fill start(6) to start(6)+length(6),0
        kopy start(1),start(6),8
            doke start(6)+4,(W*2)-2 : doke start(6)+6,H*2
    OB=start(1)+8 : B=start(6)+8
        for YY=1 to MH : kopy OB,B,MW*2
            B=B+(W*2) : OB=OB+(OW*2)
        next YY
    F$=file select$("*.mbk","Load World Blocks")
        if F$="" then goto @STARTOFPROG
        if length(5)=0 then load F$,5
            F$=file select$("*.csv","Load CSV File")
        if F$="" then goto @STARTOFPROG
    wipe logic : curs off : flash off : hide : mouseoff
        D=palt(start(5))
    rem World map conversion process
        S1=start(1) : S5=start(5) : S6=start(6) 
        world 0,0,320,192,0,1
        world back,S5,S6,0,0,0
        B=8 : C=8 : open in #1,F$
    logic=back
    
    @WCNVLOOP
        A=1
        repeat
            if eof(#1) then close #1 : default : mode 0 : click off : key off : show : mouseon : goto @SV_WORLD_MAP
                input #1,BLKCN
                set block S6,B,C,BLKCN
                world back,S5,S6,0,0,0
            screen swap : wait vbl
                B=B+16 : inc A
        until A=W+1
    B=8 : C=C+16
        goto @WCNVLOOP

    @SV_WORLD_MAP
        F$=file select$("*.MBK","Save a World map")
            if F$="" then default : click off : clear key : goto @STARTOFPROG
        AA=instr(F$,".") : if AA=0 then F$=F$+".MBK"
            if upper$(right$(F$,4))=".MBK" then save F$,6 : goto @W_MAP_SAVED
        bsave F$,start(6) to start(6)+length(6)
    @W_MAP_SAVED
        default : key off : click off : clear key
        goto @STARTOFPROG
;
@MAKE_LANDSCAPE_MAP
        curs on
        locate 0,0
    pen 4
        print
        centre "Note: If you are running CSV2STOS.ACB" : print
        centre "as compiled code & it crashes, run as" : print
        centre "interpreted code within STOS instead." : print
        print
    pen 13
        centre "Landscape map display can be unstable." : print
        print
        centre "My tests have shown it's possible to" : print
        centre "make a vertical map 20 wide x 830 high" : print
        centre "before an issue where the screen goes" : print
        centre "blank 1 pixel just before the end." : print
        print
        centre "72 x 72 is fine, 200 x 100 is fine." : print
        print 
        centre "So investigations are ongoing here(!)" : print
        print
        print
    pen 1
        print "Enter the full tile width & height"
        print "of your landscape map in below:" : print
        print
        input "Width of map:";W
            if W=0 then erase 1 : erase 5 : erase 6 : curs off : goto @STARTOFPROG
        input "Height of map:";H
            if H=0 then erase 1 : erase 5 : erase 6 : curs off : goto @STARTOFPROG
            erase 1 : erase 5 : erase 6 : reserve as data 6,5008 : fill start(6) to start(6)+length(6),0 : loke start(6),38964820 : doke start(6)+4,98 : doke start(6)+6,100
            bcopy 6 to 1 : erase 6 : reserve as data 6,(W*H*2)+8 : fill start(6) to start(6)+length(6),0
    kopy start(1),start(6),8
    doke start(6)+4,(W*2)-2 : doke start(6)+6,H*2
    OB=start(1)+8 : B=start(6)+8
        for YY=1 to MH : kopy OB,B,MW*2
            B=B+(W*2) : OB=OB+(OW*2)
        next YY
    F$=file select$("*.mbk","Load Landscape Blocks")
        if F$="" then goto @STARTOFPROG
        if length(5)=0 then load F$,5
    F$=file select$("*.csv","Load CSV File")
        if F$="" then goto @STARTOFPROG
        wipe logic : curs off : flash off : hide : mouseoff
        D=palt(start(5)) : N=map toggle(start(6))
    rem Landscape map conversion process
        S1=start(1) : S5=start(5) : S6=start(6) 
            landscape 0,0,320,192,0,1
            landscape back,S5,S6,0,0,0
        B=8 : C=8 : open in #1,F$
    logic=back
    @LCNVLOOP
    A=1
    repeat
        if eof(#1) then close #1 : default : mode 0 : click off : key off : show : mouseon : goto @SV_LANDSCAPE_MAP
            input #1,BLKCN
            set block S6,B,C,BLKCN
            landscape back,S5,S6,0,0,0
        screen swap : wait vbl
            B=B+16 : inc A
    until A=W+1
        B=8 : C=C+16
    goto @LCNVLOOP
    @SV_LANDSCAPE_MAP
        F$=file select$("*.MBK","Save a Landscape map")
        if F$="" then default : click off : clear key : goto @STARTOFPROG
        AA=instr(F$,".") : if AA=0 then F$=F$+".MBK"
        if upper$(right$(F$,4))=".MBK" then save F$,6 : goto @L_MAP_SAVED
        bsave F$,start(6) to start(6)+length(6)
    @L_MAP_SAVED
        default : key off : click off : clear key
        goto @STARTOFPROG
;
@MAKE_BATCH_FILE
    rem Setup description file for batch conversion
        flash off : curs off
        locate 0,0
    pen 2
        print
        centre "<<< MAKE BATCH FILE >>>" : print : print
        centre "Description File Maker" : print
        print
    pen 1
        centre "Set up a description file here to" : print
        centre "use with the 'Run Batch Converter'" : print
        centre "option within the main menu" : print : print
        centre "The next file menu will ask you" : print
        centre "to name your description file" : print
        centre "ie. something like BATCHRUN.CSV" : print
        print
        centre "Then you will enter the following:" : print
        centre "map type, map width, map height," : print
        centre "CSV input file, map output filename" : print
        print
        centre "With practice you should get it right!" : print
        centre "See example batch file included also." : print
        centre "It's possible just to edit in Notepad." : print
        print : print
    pen 4
        centre "Press any key to begin" : print : pen 1
    wait key
        cls : curs on : show : mouseon
    
    FCSV$=file select$("*.CSV","Name the description file *.CSV")
        if FCSV$="" then default : key off : click off : clear key : goto @STARTOFPROG
        AA=instr(F$,".") : if AA=0 then FCSV$=FCSV$+".CSV"
    open out #1,FCSV$

    @BATCH_DESCR_LOOP
        pen 4
        print : print "Time for a new map?" : print
        pen 1
        print : print "Input: 1 for World, 2 for Landscape" : print : print "0 to stop adding files" : print
        print : input "World or Landscape map?";MAPTYPE
            if MAPTYPE=0 then close #1 : default : key off : click off : clear key : goto @STARTOFPROG
        print #1,MAPTYPE;",";
        print : input "Map Width:";W
            if W=0 then close #1 : curs off : goto @STARTOFPROG
        print #1,W;",";
        print : input "Map Height:";H
            if H=0 then close #1 : curs off : goto @STARTOFPROG
        print #1,H;",";

    CSVD$=file select$("*.CSV","Select CSV Map Data (*.CSV)")
        if CSVD$="" then default : key off : click off : clear key : close #1 : goto @STARTOFPROG
        print #1,CSVD$;",";

    CSVM$=file select$("*.MBK","Map Export Filename (*.MBK)")
    if CSVM$="" then default : key off : click off : clear key : close #1 : goto @STARTOFPROG
        print #1,CSVM$

        pen 2
        print : print : print "Description added. Press any key!" : print : print
        wait key : cls
    goto @BATCH_DESCR_LOOP
;
@RUN_BATCH_FILE
    rem Run Batch Description File to convert a set of CSV files to Missing Link maps
    wipe logic
        CSVDS$=file select$("*.csv","Select Batch Description File")
            if CSVDS$="" then goto @STARTOFPROG
    
    default : mode 0 : click off : key off : mouseoff : clear key : hide : hide

    open in #1,CSVDS$

    locate 0,1
    pen 4
        print
        centre "<<< RUN BATCH CONVERTER >>>" : print : print
        print
        pen 13
        centre "You will be notified each time" : print
        centre "a map has finished converting" : print : print
        pen 10
        centre "Note: This may take a while!" : print
        print
        print
        print
    @BATCH_FILE_READ
        if eof(#1) then close #1 : cls : locate 0,11 : pen 2 : centre "Batch Conversion Completed" : print : print : pen 1 : centre "Press any key" : curs off : wait key : show : show : goto @STARTOFPROG
        input #1,MAPTYPE : input #1,W : input #1,H : input #1,CSVMAP$ : input #1,OUTPUT$
        pen 1
        print "Map Type: ";
        pen 4
            if MAPTYPE=1 then print "World" else if MAPTYPE=2 then print "Landscape"
        print
        pen 1 : print "Map Width:"; : pen 4 : print W
        pen 1 : print "Map Height:"; : pen 4 : print H
        print
        pen 1 : print "Input: "; : pen 4 : print CSVMAP$
        pen 1 : print "Output: "; : pen 4 : print OUTPUT$
        print
        pen 1
        print "Converting, please wait... ";

        erase 1 : erase 6 : reserve as data 6,5008 : fill start(6) to start(6)+length(6),0 : loke start(6),38964820 : doke start(6)+4,98 : doke start(6)+6,100
        bcopy 6 to 1 : erase 6 : reserve as data 6,(W*H*2)+8 : fill start(6) to start(6)+length(6),0
            kopy start(1),start(6),8
            doke start(6)+4,(W*2)-2 : doke start(6)+6,H*2
            OB=start(1)+8 : B=start(6)+8
        for YY=1 to MH : kopy OB,B,MW*2
            B=B+(W*2) : OB=OB+(OW*2)
        next YY

        if MAPTYPE=2 then N=map toggle(start(6))

    rem Map conversion process
        S6=start(6) 
        B=8 : C=8 : open in #2,CSVMAP$

    @BATCH_CSV_CONVERT_LOOP
        A=1
        repeat
            if eof(#2) then close #2 : goto @SV_BATCH_MAP
            input #2,BLKCN
            set block S6,B,C,BLKCN
            B=B+16 : inc A
        until A=W+1
    B=8 : C=C+16
    goto @BATCH_CSV_CONVERT_LOOP
    
    @SV_BATCH_MAP
    AA=instr(OUTPUT$,".") : if AA=0 then OUTPUT$=OUTPUT$+".MBK"
        if upper$(right$(OUTPUT$,4))=".MBK" then save OUTPUT$,6 : goto @BATCH_MAP_SAVED
            bsave OUTPUT$,start(6) to start(6)+length(6)
    @BATCH_MAP_SAVED
    pen 2 : print "DONE!" : pen 1 : print : print : goto @BATCH_FILE_READ
;

@EXW_CSV_LOAD_WORLD_MAP
    F$=file select$("*.MBK","Load World Map")
        if F$="" then default : key off : click off : clear key : goto @STARTOFPROG
        if length(5)=0 then load F$,5 : D=depack(start(5))
        MAPWID=(deek(start(5)+4)+2)/2 : MAPHGT=deek(start(5)+6)/2
    F$=file select$("*.MBK","Load World Blocks")
        if F$="" then goto @STARTOFPROG
        if length(6)=0 then load F$,6 : D=depack(start(6))
    F$=file select$("*.CSV","Name your CSV file (*.CSV)")
        if F$="" then default : key off : click off : clear key : goto @STARTOFPROG
        AA=instr(F$,".") : if AA=0 then F$=F$+".CSV"
    curs off : flash off : click off : hide : mouseoff
    S1=start(1) : S5=start(5) : S6=start(6)
        world 0,0,320,200,0,1
        world back,S6,S5,0,0,0 : D=palt(start(6)) : print : print
        print : logic=back : locate 0,11 : centre "Please wait, working..." : print
        screen swap : wait vbl
    X=8 : Y=8 : HGT=1 : open out #1,F$
    @WRLD_CSV_LOOP
    W=1
    repeat
        if HGT>MAPHGT then close #1 : goto @WRLD_CSV_EXITLOOP
        print #1,(which block(S5,X,Y)+1);",";
        X=X+16 : inc W
    until W>MAPWID : print #1," "
        X=8 : Y=Y+16 : inc HGT
    goto @WRLD_CSV_LOOP
    @WRLD_CSV_EXITLOOP
    default : mode 0 : key off : click off : curs off : clear key : hide
        locate 0,2
        pen 1 : print "Map Width:"; : pen 4 : print MAPWID
        pen 1 : print "Map Height:"; : pen 4 : print MAPHGT
        print
        pen 4
        print "CSV file saved. Press any key!" : print
    wait key : default : key off : click off : clear key : goto @STARTOFPROG
;
@EXL_CSV_LOAD_LANDSCAPE_MAP
    F$=file select$("*.MBK","Load Landscape Map")
        if F$="" then default : key off : click off : clear key : goto @STARTOFPROG
        if length(5)=0 then load F$,5 : D=depack(start(5))
        MAPWID=(deek(start(5)+4)+2)/2 : MAPHGT=deek(start(5)+6)/2
    F$=file select$("*.MBK","Load Landscape Blocks")
        if F$="" then goto @STARTOFPROG
        if length(6)=0 then load F$,6 : D=depack(start(6))
    F$=file select$("*.CSV","Name your CSV file (*.CSV)")
        if F$="" then default : key off : click off : clear key : goto @STARTOFPROG
        AA=instr(F$,".") : if AA=0 then F$=F$+".CSV"
    curs off : flash off : click off : mouseoff
    S1=start(1) : S5=start(5) : S6=start(6)
        landscape 0,0,320,200,0,1
        landscape back,S6,S5,0,0,0 : D=palt(start(6)) : print : print
        print : logic=back : locate 0,11 : centre "Please wait, working..." : print
        hide
        screen swap : wait vbl
    X=8 : Y=8 : HGT=1 : open out #1,F$
    @LAND_CSV_LOOP
    W=1
    repeat
        if HGT>MAPHGT then close #1 : goto @LAND_CSV_EXITLOOP
        print #1,(which block(S5,X,Y)+1);",";
        X=X+16 : inc W
    until W>MAPWID : print #1," "
        X=8 : Y=Y+16 : inc HGT
    goto @LAND_CSV_LOOP
    @LAND_CSV_EXITLOOP
    default : mode 0 : key off : click off : curs off : clear key : hide
        locate 0,2
        pen 1 : print "Map Width:"; : pen 4 : print MAPWID
        pen 1 : print "Map Height:"; : pen 4 : print MAPHGT
        print
        pen 4
        print "CSV file saved. Press any key!" : print
    wait key : default : key off : click off : clear key : goto @STARTOFPROG
;
@EXT_CSV_LOAD_TOME_MAP
    locate 0,6 : hide : hide
    pen 4
        centre "<<< TOME2CSV >>>" : print
        print
        print
    pen 1
        centre "Did you ever use TOME?" : print
        print
        centre "Now you can find those old maps" : print
        centre "& convert them to import into Tiled!" : print
        print
    pen 13
        centre "Note: You must have TOME installed" : print
        centre "for this program feature to work" : print
        print
        print
    pen 4
        centre "Press any key to begin..."
    pen 1 : wait key : show : show
    F$=file select$("*.MAP","Load TOME Map")
        if F$="" then default : key off : click off : clear key : goto @STARTOFPROG
        reserve as work 5,64000 : bload F$,start(5)
        reserve as screen 6 : wipe start(6)
    F$=file select$("*.CSV","Set CSV Filename")
        if F$="" then default : key off : click off : clear key : goto @STARTOFPROG
        AA=instr(F$,".") : if AA=0 then F$=F$+".CSV"
        curs off : flash off : hide : mouseoff
    logic=back
    map banks start(5),start(5),start(5),start(5),start(6)
    MAPWID=map x(0) : MAPHGT=map y(0)
        cls : print : print
        print : hide : locate 0,11 : centre "Please wait, working..." : print
        screen swap : wait vbl
    X=0 : Y=0 : HGT=1 : open out #1,F$
    @TOME_CONV_LOOP
    W=1
    repeat
        if HGT>MAPHGT then close #1 : cls : goto @FINISH_TOME_LOOP
        T=map tile(X,Y) : T=T+1 : print #1,(T);",";
        X=X+1 : inc W
    until W>MAPWID : print #1," "
        X=0 : Y=Y+1 : inc HGT
    goto @TOME_CONV_LOOP
    @FINISH_TOME_LOOP
        cls : locate 0,2
        pen 1 : print "Map Width:"; : pen 4 : print MAPWID
        pen 1 : print "Map Height:"; : pen 4 : print MAPHGT
        print
        pen 4
        print "CSV file saved. Press any key!" : print
    screen swap : wait vbl
    wait key
    default : mouseon : goto @STARTOFPROG
;
@EXA_CSV_LOAD_AGTCCM_MAP
    curs on
    locate 0,2 : hide : hide
    pen 4
        centre "<<< AGT2STOS >>>" : print
        print
    pen 1
        centre "Converts *.CCM format maps" : print
        centre "(made using AGTCUT.EXE) into CSV data" : print
        print
        centre "You can paste the data into a dummy" : print
        centre "*.TMX map and load this into Tiled" : print
        print
        centre "Export a new CSV file from Tiled" : print
        centre "to import into CSV2STOS, to convert" : print
        centre "the CSV data into a Missing Link" : print
        centre "World or Landscape map when ready" : print
        print
        print
    pen 4    
        centre "Please specify how much memory" : print
        centre "to reserve for your CCM map" : print : print
    pen 1  
        centre "(Enter 512000 or higher if unsure)": print : print : print
        clear key : input "Reserve amount:";MEMRESAGT
        show : show
    reserve as work 1,MEMRESAGT
    F$=file select$("*.CCM","Load AGT Map")
        if F$="" then default : erase 1 : cls : goto @STARTOFPROG
        bload F$,1
    R=10 : MAPWID=(deek(start(1)+2)) : MAPHGT=deek(start(1)+6) : TC=MAPWID*MAPHGT
        cls : curs off
        locate 0,2
        pen 1 : print "Map Width:"; : pen 4 : print MAPWID
        pen 1 : print "Map Height:"; : pen 4 : print MAPHGT
        print
        pen 1
        print "Time to name your new CSV file."
        print
        pen 4
        print "Press any key!"
        pen 1
    wait key
    curs on
    FCSV$=file select$("*.CSV","Save CSV File")
    if FCSV$="" then default : key off : click off : clear key : goto @FINISH
    AA=instr(F$,".") : if AA=0 then FCSV$=FCSV$+".CSV"
        print
        print
        print "Conversion process underway! Working..."
    HGT=1 : open out #1,FCSV$
    @LOOP
    W=1
    repeat
        if HGT>MAPHGT then goto @FINISH
        V=deek(start(1)+R) : V=V+1
        print #1,V;",";
        inc W : R=R+4
    until W>MAPWID : print #1," "
        inc HGT
    goto @LOOP
    @FINISH
        print
        print
        pen 4
        print "Done. Press any key!"
        pen 1
    close #1 : erase 1
    wait key
    default : key off : click off : clear key : mouseon : goto @STARTOFPROG
;
