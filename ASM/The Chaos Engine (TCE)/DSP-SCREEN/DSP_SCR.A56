; +++++++++++++++++++++++++++++++++++
; + DSP-Screen, DSP-Assembler-Teil  +
; + (c)1993 by MAXON-Computer       +
; + Autor: Steffen Scharfe          +
; + Dateiname: DSP_SCR.A56          +
; +++++++++++++++++++++++++++++++++++

PBC         equ $ffe0
CRA         equ $ffee
CRB         equ $ffed
PCC         equ $ffe1
PCDDR       equ $ffe3
PCD         equ $ffe5
TX          equ $ffef
SCR         equ $fff0
SCCR        equ $fff2
SSISR       equ $ffee
BCR         equ $fffe
IPR         equ $ffff
HSR         equ $ffe9
HRX         equ $ffeb
HTX         equ $ffeb

screen      equ $1000
font        equ $2000

            org x:$0 
cursor_x dc     0
cursor_y dc     0

         org     p:0
         jmp     $40

         org     p:$1c
t_vector jsr     timer_init

         org     p:$40

         movep   #0,x:BCR       ;no Waitstates
         movep   #$c000,x:IPR   ;Interrupt-Prioritaet

;Host initialisieren

         movep   #1,x:PBC

;Init Timer fuer Zeilenfrequenz

         movep #$2000,x:SCR     ;Timer Int an
         movep #$0020,x:SCCR    ;15.625 kHz

         andi  #$fc,mr          ;Int an

         jsr   get_font         ;Font laden
         jsr   cls

loop     jclr  #0,x:HSR,*       ;auf Daten warten
         movep x:HRX,a          ;laden
            jsr out_char
            jmp loop

; Interrupt-Routinen fuer den Bildaufbau 
; werden alle 64 us aufgerufen 
; verwendet folgende Register
; (duerfen von dem Hauptprogramm nicht benutzt 
; werden!!)
; r6: Zeiger auf den Bildspeicher 
; r7: Zeilenzaehler
; n7: Hilfregister

; Init SSI Transmit, 8 MHz Pixelclock 
; um die SSI Ausgabe mit dem Timerinterrupt 
; zu synchronisieren

timer_init  movep #$4000,x:CRA      ;16 Bit, 8 MHz
        movep   #$123c,x:CRB        ;Frame Sync intern
        movep   #$178,x:PCC         ;Write als SCI

        movep   #0,x:TX 
        jclr    #6,x:SSISR,*

        move    #t_vector+1,r7 
        move    #timer1,n7 
        movem   n7,p:(r7) 
        move    #256-2,r7 
        rti

;       Vertikal-Sync, 2 Zeilen ( 128 us )

timer1  bclr    #0,x:CRB            ;V-Sync an
        movep   #0,x:TX

        move    (r7)+
        jclr    #8,r7,timer1_end
        move    #t_vector+1,r7
        move    #timer2,n7
        movem   n7,p:(r7)
        move    #256-55,r7
        move    #screen,r6          ;Adr des Video-RAM
timer1_end  rti

;       Top Border, 55 Zeilen

timer2  bclr    #0,x:CRB            ;H-Sync an
        movep   #0,x:TX             ;4 us
        jclr    #6,x:SSISR,* 
        movep   #0,x:TX 
        jclr    #6,x:SSISR,* 
        bset    #0,x:CRB            ;H~Sync aus
        movep   #0,x:TX

        move    (r7)+ 
        jclr    #8,r7,timer2_end 
        move    #t_vector+1,r7 
        move    #timer3,n7 
        movem   n7,p:(r7) 
        move    #256-200,r7 
timer2_end  rti

;       Screen, 200 Zeilen

timer3  bclr    #0,x:CRB            ;H-Sync an
        movep   #0,x:TX             ;4 us
        jclr    #6,x:SSISR,* 
        movep   #0,x:TX 
        jclr    #6,x:SSISR,* 
        bset    #0,x:CRB            ;H-Sync aus
        movep   #0,x:TX

        do      #6,LeftBorder       ;12 us warten 
        jclr    #6,x:SSISR,* 
        movep   #$000000,x:TX 
LeftBorder

        do      #20,Disp 
        jclr    #6,x:SSISR,*
        movep   x:(r6)+,x:TX        ;40 us fuer 1 Pixel-Zeile

Disp
        jclr    #6,x:SSISR,* 
        movep   #$000000,x:TX

        move    (r7)+
        jclr    #8,r7,timer3_end 
        move    #t_vector+1,r7 
        move    #timer4,n7 
        movem   n7,p:(r7) 
        move    #256-56,r7 
timer3_end  rti

;       Low Border, 56 Zeilen

timer4  bclr    #0,x:CRB            ;H-Sync an
        movep   #0,x:TX             ;4 us
        jclr    #6,x:SSISR,* 
        movep   #0,x:TX 
        jclr    #6,x:SSISR,* 
        bset    #0,x:CRB            ;H-Sync aus
        movep   #0,x:TX
        move    (r7)+ 
        jclr    #8,r7,timer4_end 
        move    #t_vector+1,r7 
        move    #timer1,n7 
        movem   n7,p:(r7) 
        move    #256-2,r7 
timer4_end  rti

;--- Bildschirm loeschen

cls     move    #0,x0
        move    #screen,r0
        do      #20*200,cls1
        move    x0,x:(r0)+
cls1
        move    x0,x:cursor_x
        move    x0,x:cursor_y
        rts

;--- scrollt um 8 Pixel-Zeilen nach oben

scroll  move    #screen,r0          ;Ziel
        move    #screen+8*20,r1     ;Quelle
        do      #192*20,scroll1
        move    x:(r1)+,x0
        move    x0,x:(r0)+
scroll1 clr     a
        do      #8*20,scroll2       ;letzte Zeile loeschen
        move    a,x:(r0)+
scroll2 rts

;--- 1 Zeile nach unten, wenn letzte
;        Zeile erreicht: scrollen

cr      clr     a
        move    a,x:cursor_x        ;Zeilenanfang
        move    x:cursor_y,a
        move    #>24,x0             ;letzte Zeile ?
        cmp     x0,a #>1,x0
        jeq     scroll              ;ja
        add     x0,a                ;naechste Zeile
        move    a,x:cursor_y
        rts

;--- gibt ein Zeichen aus
;--- Zeichen muss im hoeherwertigsten
;       Byte von A1 stehen

out_char move   #$0d,x0
        cmp     x0,a #$07,x0        ;CR ?
        jeq     cr                  ;ja
        cmp     x0,a #$400,x0       ;CLS ?
        jeq     cls                 ;ja, Bild loeschen
        move    a1,x1
        mpy     x1,x0,a #>$0007f8,x0
;               13 Bits nach rechts verschieben
        and     x0,a #>font,x0
        add     x0,a
        move    a1,r0               ;r0 zeigt auf Font-Daten
        move    x:cursor_x,a
        move    a,r1
        nop
        move    (r1)+               ;naechste x-Position
        nop
        move    r1,x:cursor_x
        asr     a ;/2
        move    a1,x0

        move    x:cursor_y,a
        asl     a ;*2
        move    a,x1
        asl     a
        asl     a                   ;*8
        add     x1,a                ;*10
        asl     a
        asl     a
        asl     a
        asl     a ;*160
        move    a,x1
        move    #>screen,a
        add     x0,a
        add     x1,a
        move    a,r1                ;r1 = Screenadr
        move    #>$ff0000,x0        ;Maske High-Byte 
        btst    #0,x:cursor_x
        jcs     mask_ok             ;cursor_x zeigt
;                                    schon auf das naechste Zeichen 
        move    #>$00ff00,x0        ;Maske Low-Byte 
mask_ok move    #20,n1              ;1 Zeile = 20 Words
        do      #8,out_char1 
        move    x:(r0)+,a1          ;Font-Daten 
        and     x0,a                ;maskieren
        move    a1,x1
        move    x:(r1),a1           ;Bilddaten 
        or      x1,a                ;ein-odern
        move    a1,x:(r1)+n1        ;schreiben
out_char1
        rts

;-- Font laden

get_font move   #>font,r0
        do      #256*8,get_font1 
        jclr    #0,x:HSR,*          ;auf Daten warten
        movep   x:HRX,x:(r0)+       ;laden 
get_font1   rts
