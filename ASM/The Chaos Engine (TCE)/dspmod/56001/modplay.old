;DSP-MOD-Player
;Coderight by bITmASTER of BSW
;verbraucht 25% der DSP-Rechenzeit

start		equ $40

;---------- X:Memory ----------------------

			org x:0

balance1	dc 0
			dc 0
volume1l	dc 0
volume1r	dc 0
volume1		dc 0
inc1		dc 0
pos1int		dc 0
pos1frac	dc 0

balance2	dc 0
			dc 0
volume2l	dc 0
volume2r	dc 0
volume2		dc 0
inc2		dc 0
pos2int		dc 0
pos2frac	dc 0

balance3	dc 0
			dc 0
volume3l	dc 0
volume3r	dc 0
volume3		dc 0
inc3		dc 0
pos3int		dc 0
pos3frac	dc 0

balance4	dc 0
			dc 0
volume4l	dc 0
volume4r	dc 0
volume4		dc 0
inc4		dc 0
pos4int		dc 0
pos4frac	dc 0

CurBufSize	dc 0				;aktuelle Buffergroesse

PlayBufSize	equ 2*1024

HostBufSize	equ	1024

host_buf1	equ	512				;Hostbuffer
host_buf2	equ 512+1*HostBufSize
host_buf3	equ 512+2*HostBufSize
host_buf4	equ 512+3*HostBufSize
unpack_buf	equ 512+4*HostBufSize

;---------- X: und Y:Memory ---------------------------------------------

play_buf	equ $2000			;X:links, Y:rechts

;---------- Peripherie --------------------

PBC			equ $ffe0
HCR			equ $ffe8
HSR			equ $ffe9
HRX			equ $ffeb
HTX			equ $ffeb

PCC			equ $ffe1
PCDDR		equ $ffe3
PCD			equ $ffe5
CRA			equ $ffec
CRB			equ $ffed
SSISR		equ $ffee
TX			equ $ffef
RX			equ $ffef
BCR			equ $fffe
IPR			equ $ffff

			org	p:0

			jmp 	start

			org p:$10

			jsr	out_dac				;Interruptroutine

			org p:$40

;---------- Start -----------------------------------------------------

			movep	#0,x:BCR		;no Waitstates

;---------- Host initialisieren ---------------------------------------

			movep	#1,x:PBC

;---------- Play-Buffer ---------------------------------------------

			movec	#PlayBufSize-1,m6	;Buffersize
			movec	m6,m7

			clr		b
			move	#play_buf,r7
			rep		#PlayBufSize
			move	b,l:(r7)+			;Buffer loeschen

;---------- Volume Pointer --------------------------------------------

			movec	#2-1,m3

;----------	SSI initialisieren ----------------------------------------

			movep	#$3000,x:IPR	;Int-Prioritaet
			movep	#$4100,x:CRA	;CRA, $4120
			movep	#$5800,x:CRB	;CRB, $5800 / $5a08

			movep	#$01f0,x:PCC	;PCC
			movep	#$0008,x:PCDDR  ;SC0 = Out

			andi	#<$f0,mr		;Interrupt an, No Scaling

			jclr	#<0,x:HSR,*		;warte auf 1.VBL
			movep	x:HRX,x1		;Dummy

			move	#play_buf,r6    ;Calc-Pointer setzen
			move	#play_buf+984,r7	;Play-Pointer setzen
			jmp		loop1

;---------- Daten vom Host holen --------------------------------------

loop		jclr	#<0,x:HSR,*		;warte auf VBL
			movep	x:HRX,x1		;Dummy


loop1		bset	#3,x:PCD

;---------- aktuelle Buffergroesse berechnen -----------------------------

			move	r7,b						;Play-Position
			move	r6,x0						;Calc-Position
			sub		x0,b	#PlayBufSize,x0		;Anzahl der zu berechn. Words
			jcc		SizeOK                      ;r7 > r6
			add		x0,b
SizeOK		move	b,x:<CurBufSize				;und merken

;---------- Daten fuer Kanal 1 holen ------------------------------------

			move	#host_buf1,r0
			move	#volume1,r1
			jsr		CPUtoDSP

;---------- Daten fuer Kanal 2 holen ------------------------------------

			move	#host_buf2,r0
			move	#volume2,r1
			jsr		CPUtoDSP

;---------- Daten fuer Kanal 3 holen ------------------------------------

			move	#host_buf3,r0
			move	#volume3,r1
			jsr		CPUtoDSP

;---------- Daten fuer Kanal 4 holen ------------------------------------

			move	#host_buf4,r0
			move	#volume4,r1
			jsr		CPUtoDSP

;---------- calculate Volume ------------------------------------------

			move	#$700000,y0
			move	#$070000,y1
			move	x:<volume1,x0
			mpy		y0,x0,a
			move	a,x:<volume1l
			mpy		x0,y1,a
			move	a,x:<volume1r

			move	x:<volume2,x0
			mpy		y0,x0,a
			move	a,x:<volume2r
			mpy		x0,y1,a
			move	a,x:<volume2l

			move	x:<volume3,x0
			mpy		y0,x0,a
			move	a,x:<volume3r
			mpy		x0,y1,a
			move	a,x:<volume3l

			move	x:<volume4,x0
			mpy		y0,x0,a
			move	a,x:<volume4l
			mpy		x0,y1,a
			move	a,x:<volume4r

			move	r6,n6					;n6 = Calc-Position
			bset	#0,n2					;Kanal 1
			move	#host_buf1,r0
			move	#<inc1,r2
			move	#<volume1l,r3
			jsr		<CalcFreq

			bclr	#0,n2					;Kanal 2...4
			move	#host_buf2,r0
			move	#<inc2,r2
			move	#<volume2l,r3
			jsr		<CalcFreq

			move	#host_buf3,r0
			move	#<inc3,r2
			move	#<volume3l,r3
			jsr		<CalcFreq

			move	#host_buf4,r0
			move	#<inc4,r2
			move	#<volume4l,r3
			jsr		<CalcFreq

			bclr	#<3,x:PCD
			jmp		<loop

;---------- calculate Frequenz ----------------------------------------

CalcFreq	;move	#$1000,r0
			move	#unpack_buf,r1
			move	x:(r0)+,b				;Anzahl der Bytes
			move	b,n1
			tst		b
			jsne	unpack
			move	#unpack_buf,r1
			move	x:(r0)+,b 				;Anzahl RepBytes
			move	(r1)+n1					;calc RepStart
			move	b,n1
			move	r1,r4					;RepStart merken
			tst		b
			jeq		MakeRep					;kein Repeat
			jsr		unpack					;RepPart entpacken
			move	r4,r1
			move	#unpack_buf+1024,b
			move	(r1)+n1					;RepEnd
			move	r1,x0
			sub		x0,b
			do		b,MakeRep
			move	x:(r4)+,x0
			move	x0,x:(r1)+
MakeRep

			move	n6,r6					;Calc-Position
			move	#unpack_buf,r0
			move	x:(r2)+,x0             	;INC-Wert
			move	x:(r0)+,x1				;first Sample holen
			move	x:(r3)+,y0				;Volume left
			mpy		x1,y0,a		x:(r3)+,y0 	;calc left, Volume right
			move	a,y1					;left -> y1
			mpy		x1,y0,a		(r2)+		;calc right
			move	a,y0	                ;right -> y0
			move	x:(r2),b				;fractional Position

            move	x:<CurBufSize,n0		;Groesse des zu fuellenden Buffers
			do		n0,CalcEnd
			add		x0,b					;pos += inc-Wert
            jec		CalcFreq1				;Extension clear

            bclr	#<23,b1 				;Uebertrag loeschen
            move	x:(r0)+,x1				;neues Sample holen
			move	x:(r3)+,y0				;Volume left
			mpy		x1,y0,a		x:(r3)+,y0  ;calc left, Volume right
			move	a,y1					;left
			mpy		x1,y0,a                 ;calc right
			move	a,y0					;right

CalcFreq1
			move	l:(r6),a
			jclr	#0,n2,CalcFreq2			;Kanal 2, 3, 4
			clr		a                       ;Kanal 1
CalcFreq2	add		y,a
			move	a,l:(r6)+				;Sample -> Buffer

CalcEnd		move	b,x:(r2)-				;Pos merken
			move	r0,b					;neue Int-Pos berechnen
			move	#unpack_buf+1,x0
			sub		x0,b
			move	b,x:(r2)				;Int-Pos
			rts

;********** unpack *****************************************************

;Input:	r0: Zeiger auf Hostbuffer

; unpack b Bytes
; b Bytes ( b/2+1 Words ) ab r0 nach r1

unpack     	lsr		b	#>1,x0      ;/2+1
            add		x0,b
			do		b,unpack_end			;Anzahl der zu unpacks Words

			move	x:(r0),x0
			move	#>$80,x1				;Faktor
			mpy		x1,x0,b     #$ff0000,x0	;Maske
			move	b0,b
			and		x0,b    	#$8000,x1   ;Faktor
			move	b1,x:(r1)+				;-> unpack-Buffer

			move	x:(r0)+,x0
			mpy		x1,x0,b		#$ff0000,x0 ;Maske
			move	b0,b
			and		x0,b
			move	b1,x:(r1)+				;-> unpack-Buffer
unpack_end	rts



;********** Move Sample von der CPU in den DSP ***************************

;Input:	r0: Zeiger auf Hostbuffer
;		r1: Zeiger auf Sample-Sets

CPUtoDSP	jclr	#<0,x:HSR,*		;auf Volume warten
			movep	x:HRX,x:(r1)+	;Volume

			jclr	#<0,x:HSR,*		;auf INC-Wert warten
			movep	x:HRX,x1		;INC-Wert
            move	x1,x:(r1)+      ;->incx

			jclr	#<1,x:HSR,*
			movep	x:(r1),x:HTX 	;posxint -> CPU

			move	x:<CurBufSize,x0
			mpy		x1,x0,b			;INC-Wert * played Words

			jclr	#<1,x:HSR,*		;warten bis HTX leer
            movep	b,x:HTX			;Blocklaenge -> CPU

			jclr	#<1,x:HSR,*		;warten bis HTX leer
            movep	x0,x:HTX		;CurBufSize -> CPU

;---------- Samples von der CPU holen ------------------------------------

			jclr	#<0,x:HSR,*		;warten bis Daten da
			movep	x:HRX,b			;Anzahl der Bytes
            move	b,x:(r0)+		;merken
            tst		b
            jeq		read_end		;ist null
            lsr		b	#>1,x0      ;/2+1
            add		x0,b
			do		b,read_end
			jclr	#<0,x:HSR,*		;warten bis Daten da
			movep	x:HRX,x:(r0)+	;Samples lesen & -> Host-Buffer
read_end
			jclr	#<0,x:HSR,*		;warten bis Daten da
			movep	x:HRX,b			;Anzahl der Bytes
            move	b,x:(r0)+		;merken
            tst		b
            jeq		read_end1		;ist null
            lsr		b	#>1,x0      ;/2+1
            add		x0,b
			do		b,read_end1
			jclr	#<0,x:HSR,*		;warten bis Daten da
			movep	x:HRX,x:(r0)+	;Samples lesen & -> Host-Buffer
read_end1	rts


;----------- Interrupt --------------------------------------------------

out_dac		jclr	#<2,x:SSISR,left	;kein Transmit Frame Sync

			movep	y:(r7)+,x:TX		;Y:Memory, rechts
			rti

left		movep	x:(r7),x:TX       	;X:Memory, links
			rti

			dc		"DSP-Paula-Emulator V2.0 "
			dc		"coderight by bITmASTER of BSW of CC "
