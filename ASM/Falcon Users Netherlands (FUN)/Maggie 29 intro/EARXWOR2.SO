* Object skeleton used by DEMOS1.S or DASTD.S (v2.0)
* v1.0: * Monitormode selection.
*       * SET_RES routine vbl-synced.
*       * Screenaddress-setting optimised.
*
* v1.1: * Automaticly initializes screenbuffers and resolution.
*       * Returns resultcode in INIT routine.
*       * Minor optimisations.

******** OBJECT EQUS ********

Draaiding.RADIUS:	=	185		* ~ sqrt((320/2)^2+(184/2)^2)

Vuurpijl.MAX:		=	8
Vuurpijl.MAX_SNOTJES:	=	20

		RSRESET
Vuurpijl.X:	RS.L	1
Vuurpijl.Y:	RS.L	1
Vuurpijl.DX:	RS.W	1
Vuurpijl.DY:	RS.W	1
Vuurpijl.ON:	RS.W	1
Vuurpijl.SIZE:	RS.B	0


Snotjes.MAX:		=	Vuurpijl.MAX_SNOTJES*Vuurpijl.MAX*4

		RSRESET
Snotje.X:	RS.L	1
Snotje.Y:	RS.L	1
Snotje.DX:	RS.W	1
Snotje.DY:	RS.W	1
Snotje.ON:	RS.W	1
Snotje.AGE:	RS.W	1
Snotje.SIZE:	RS.B	0

******** OBJECT TABLE ********

* Must be first in object!!
fireworxFXTable:
	DC.L	fireworxFXMAINLOOP
	DC.L	INIT_fireworxFX
	DC.L	SET_fireworxFXRES
	DC.L	toggleRotation
	DC.L	toggleAntiRotation
* Add more addresses here..
	DC.L	0

******** RESOLUTION SETTING ROUTINE ********

SET_fireworxFXRES:
	IFEQ	testmode
	move.l	#rts,vbl_gfx

	move.w	$0468.w,d0
.ck468:	cmp.w	$0468.w,d0
	beq.s	.ck468
	move.w	monitormode,d0
	cmpi.w	#vga60,d0
	beq.s	.vga60
	cmpi.w	#vga100,d0
	beq.s	.vga100
	cmpi.w	#rgb50,d0
	beq.s	.rgb50
* Unknown monitormode..
	rts
.vga60:	jmp	vga60_16bit_320_200
	rts
.vga100:
	jmp	vga100_16bit_320_200
	rts
.rgb50:	jmp	rgb50_16bit_320_200
	ENDC
	rts

******** INIT SUBROUTINE ********

* OUTPUT: d0.l: 0   = All clear.
*               neg = Error! Not initialized!
INIT_fireworxFX:
	move.l	#$d3467ec1,random

.success:
	moveq	#0,d0
	rts
.error:	moveq	#-1,d0
	rts

******** SCREENINIT SUBROUTINE ********

INIT_fireworxFXSCREEN:
	IFEQ	testmode
	movea.l	scr,a0
	bsr.l	CLEAR_320200TSCR
	ENDC
	rts

******** MAINLOOP SUBROUTINE ********

fireworxFXMAINLOOP:
	move.l	frmcnt,d0
	sub.l	lastframecount,d0
	cmpi.l	#3,d0
	bhs.s	.end_screeninit
	bsr	INIT_fireworxFXSCREEN
.end_screeninit:

	move.w	$468.w,old468thing

	movea.l	clearTableAddresses,a1
	bsr	clearDots

	bsr	Vuurpijlen.update
	bsr	Scroller.updatePosition

	clr.w	Draaiding.counter
	bsr	Vuurpijlen.addToDraaiding
	bsr	Snotjes.addToDraaiding

	tst.w	Draaiding.rotationActive
	beq.s	.end_rotation
	move.w	Draaiding.rotationSpeed,d0
	tst.w	Draaiding.direction
	bne.s	.anti_clockwise
.clockwise:
	cmpi.w	#256,d0
	bge.s	.speed_okay
	addq.w	#2,d0
	bra.s	.speed_okay
.anti_clockwise
	cmpi.w	#-256,d0
	ble.s	.speed_okay
	subq.w	#2,d0
.speed_okay:
	move.w	d0,Draaiding.rotationSpeed
	move.w	Draaiding.rotation,d1
	add.w	d1,d0
	move.w	d0,Draaiding.rotation
	lsr.w	#5,d0
	bsr	Draaiding.rotate

.end_rotation:

	movea.l	clearTableAddresses,a1
	bsr	Draaiding.paint
	bsr	Scroller.paint

	lea	clearTableAddresses,a0
	move.l	(a0)+,d0
	move.l	(a0)+,d1
	move.l	(a0),-(a0)
	move.l	d0,4(a0)
	move.l	d1,-(a0)

	IFEQ	testmode
	moveq	#1,d2
	cmpi.w	#vga100,monitormode
	bne.s	.interval_established
	moveq	#2,d2
.interval_established:
	move.w	old468thing,d1
.cmp:	move.w	$468.w,d0
	sub.w	d1,d0
	cmp.w	d2,d0
	blt.s	.cmp
	
	lea	scr,a0
	move.l	(a0)+,d0
	move.l	(a0)+,d1
	move.l	(a0),-(a0)
	move.l	d0,4(a0)
	move.l	d1,-(a0)
	move.l	d0,d1
	lsr.w	#8,d0
	move.l	d0,$ffff8200.w
	move.b	d1,$ffff820d.w
	ENDC

	move.l	frmcnt,d0
	sub.l	lastframecount,d0
	bne.s	.res_done
	bsr	SET_fireworxFXRES
.res_done:
	rts

******** OBJECT DATA ********

	DATA

Scroller.textAddress:
	DC.L	Scroller.scrollz
Scroller.scrollz:
	INCBIN	SCROLLZ.TXT
	DC.B	0
	EVEN
Scroller.font:
	INCBIN	FONT.APX

Snotje.shadeTable:
	INCBIN	VONK.APX

clearTableAddresses:
	DC.L	clearTable1
	DC.L	clearTable2
	DC.L	clearTable3

******** OBJECT RESERVES ********

	BSS

old468thing:
	DS.W	1

Draaiding.rotationSpeed:
	DS.W	1
Draaiding.rotation:
	DS.W	1
Draaiding.rotationActive:
	DS.W	1
Draaiding.counter:
	DS.W	1
Draaiding.direction:
	DS.W	1
Draaiding.transformTable:
	DS.W	3*(Snotjes.MAX+Vuurpijl.MAX)

Scroller.counter:
	DS.W	1
Scroller.pixelCounter:
	DS.W	1

Vuurpijl.count:
	DS.W	1
Vuurpijl.table:
	DS.B	Vuurpijl.SIZE*Vuurpijl.MAX

Snotjes.count:
	DS.W	1
Snotjes.table:
	DS.B	Snotje.SIZE*Snotjes.MAX

clearTable1:
	DS.W	1
	DS.L	Snotjes.MAX+Vuurpijl.MAX
clearTable2:
	DS.W	1
	DS.L	Snotjes.MAX+Vuurpijl.MAX
clearTable3:
	DS.W	1
	DS.L	Snotjes.MAX+Vuurpijl.MAX

******** OBJECT SUBROUTINES ********

	TEXT

toggleRotation:
	move.w	#1,Draaiding.rotationActive
	clr.w	Draaiding.direction
	rts

toggleAntiRotation:
	move.w	#1,Draaiding.rotationActive
	move.w	#1,Draaiding.direction
	rts

Vuurpijlen.update:
* Check how many active vuurpijlen and add one if not enough.
	move.w	Vuurpijl.count,d0
	cmpi.w	#Vuurpijl.MAX,d0
	bhs.s	.enough_vuurpijlen
* Find first inactive vuurpijl...
	lea	Vuurpijl.table,a0
	move.w	#Vuurpijl.MAX-1,d7
.find_loop:
	tst.w	Vuurpijl.ON(a0)
	beq.s	.found
	lea	Vuurpijl.SIZE(a0),a0
	dbra	d7,.find_loop
.found:
	move.l	random,d0
        move.l  d0,d1                           * Store d0 temporarily.
        mulu.w  d0,d0                           * Multiply d0*d0.
        eor.l   d1,d0                           * Exclusive OR it.
        addq.l  #7,d0                           * Add constant to it.
	moveq	#0,d2
	move.w	d0,d2
	divu.w	#Draaiding.RADIUS*2,d2
	clr.w	d2
	subi.l	#Draaiding.RADIUS<<16,d2
	move.l	d2,Vuurpijl.X(a0)
	move.l	#-Draaiding.RADIUS<<16,Vuurpijl.Y(a0)
        move.l  d0,d1                           * Store d0 temporarily.
        mulu.w  d0,d0                           * Multiply d0*d0.
        eor.l   d1,d0                           * Exclusive OR it.
        addq.l  #7,d0                           * Add constant to it.
	move.w	d0,d1
	asr.w	#7,d1
	move.w	d1,Vuurpijl.DX(a0)
	move.l	d0,d1
	swap	d1
	lsr.w	#6,d1
	addi.w	#256,d1
	move.w	d1,Vuurpijl.DY(a0)
	move.w	#1,Vuurpijl.ON(a0)
	move.l	d0,random
	addq.w	#1,Vuurpijl.count
.enough_vuurpijlen:

	bsr	Snotjes.update

* Now update all vuurpijlen's positions.
	lea	Vuurpijl.table,a1
	move.w	#Vuurpijl.MAX-1,d7

.update_loop:
	tst.w	Vuurpijl.ON(a1)
	beq.s	.update_next
	move.l	Vuurpijl.X(a1),d0
	move.l	Vuurpijl.Y(a1),d1
	move.w	Vuurpijl.DX(a1),d2
	move.w	Vuurpijl.DY(a1),d3
	subi.w	#$0008,d3
	bpl.s	.not_max
	moveq	#Vuurpijl.MAX_SNOTJES,d4
	move.w	d7,-(sp)
	move.l	a1,-(sp)
	bsr	Snotjes.add
	movea.l	(sp)+,a1
	move.w	(sp)+,d7
	bra.s	.kicked_off
.not_max:
	move.w	d3,Vuurpijl.DY(a1)
	ext.l	d2
	ext.l	d3
	lsl.l	#8,d2
	lsl.l	#8,d3
	add.l	d2,d0
	add.l	d3,d1
	move.l	d0,Vuurpijl.X(a1)
	cmpi.l	#Draaiding.RADIUS<<16,d0
	bge.s	.kicked_off
	cmpi.l	#-Draaiding.RADIUS<<16,d0
	blt.s	.kicked_off
	move.l	d1,Vuurpijl.Y(a1)
	cmpi.l	#-Draaiding.RADIUS<<16,d1
	bge.s	.update_next
.kicked_off:
	clr.w	Vuurpijl.ON(a1)
	subq.w	#1,Vuurpijl.count
.update_next:
	lea	Vuurpijl.SIZE(a1),a1
	dbra	d7,.update_loop
.end_update:
	rts

* INPUT:
Vuurpijlen.addToDraaiding:
* Paint the vuurpijlen.
	moveq	#0,d6				* d6.w: dot count (=0)
	lea	Draaiding.transformTable,a0
	move.w	Draaiding.counter,d0
	mulu.w	#6,d0
	adda.l	d0,a0
	lea	Vuurpijl.table,a1
	move.w	#Vuurpijl.MAX-1,d7

.loop:	tst.w	Vuurpijl.ON(a1)
	beq.s	.next
	addq.w	#1,d6
	move.w	Vuurpijl.X(a1),d0
	move.w	Vuurpijl.Y(a1),d1
	moveq	#$ffffffff,d2
	bsr	Draaiding.add
.next:	lea	Vuurpijl.SIZE(a1),a1
	dbra	d7,.loop

	add.w	d6,Draaiding.counter
	rts

* INPUT:
* d0.w: rotation
Draaiding.rotate:
	Do_SinModulo	d0
	Get_SinCos	sine_tbl,d0,d0,d1
	lea	Draaiding.transformTable,a0
	move.w	Draaiding.counter,d7
	beq.s	.end
	subq.w	#1,d7
* X := +cos(a)*x +sin(a)*y
* X := -sin(a)*x +cos(a)*y
.loop:	movem.w	(a0),d2/d3
	move.w	d2,d4
	move.w	d3,d5
	muls.w	d1,d2				* +cos*x
	muls.w	d0,d3				* +sin*y
	add.l	d2,d3
	neg.w	d4
	muls.w	d0,d4				* -sin*x
	muls.w	d1,d5				* +cos*y
	add.l	d4,d5
	add.l	d3,d3
	add.l	d5,d5
	swap	d3
	swap	d5
	movem.w	d3/d5,(a0)
	addq	#6,a0
	dbra	d7,.loop
.end:	rts	

* INPUT:
* a1: clearing table
Draaiding.paint:
	movea.l	scr,a0
	moveq	#0,d6
	lea	2(a1),a6
	move.w	Draaiding.counter,d7
	lea	Draaiding.transformTable,a4
	beq.s	.end
	subq.w	#1,d7
.loop:	movem.w	(a4)+,d0-d2
	addi.w	#320/2,d0
	ext.l	d0
	neg.w	d1
	addi.w	#200/2,d1
	bsr	paintDot
	dbra	d7,.loop
.end:	move.w	d6,(a1)
	rts

* INPUT:
* d0.l: x position
* d1.l: y position
* d2.w: color
* a0: draaiding buffer
Draaiding.add:
	move.w	d0,(a0)+
	move.w	d1,(a0)+
	move.w	d2,(a0)+
	rts

* INPUT:
* d0.l: x position
* d1.l: y position
* d2.w: color
* d6.w: current count
* a0: screen
* a6: address storage
paintDot:
	cmpi.w	#320,d0
	bcc.s	.end
	cmpi.w	#200,d1
	bcc.s	.end
	mulu.w	#320,d1
	add.l	d0,d1
	lea	(a0,d1.l*2),a3
	move.w	d2,(a3)
	addq.w	#1,d6
	move.l	a3,(a6)+
.end:	rts

* INPUT:
* d0.l: x position
* d1.l: y position
* d2.w: dx
* d3.w: dy
* d4.w: amount
Snotjes.add:
	move.l	random,d5
        move.l  d5,d6				* Store d0 temporarily.
        mulu.w  d5,d5				* Multiply d0*d0.
        eor.l   d6,d5				* Exclusive OR it.
        addq.l  #7,d5				* Add constant to it.
	move.l	d5,random
	andi.w	#$00c0,d5
	lsr.w	#6,d5
	lsl.w	#8,d5
	movea.l	d5,a2
	lea	Snotjes.table,a0
	move.w	#Snotjes.MAX-1,d7
	add.w	d4,Snotjes.count
	subq.w	#1,d4
.loop:
.find_loop:
	tst.w	Snotje.ON(a0)
	beq.s	.found
	lea	Snotje.SIZE(a0),a0
	dbra	d7,.find_loop
	bra.s	.end
.found:
	move.l	random,d5
        move.l  d5,d6				* Store d0 temporarily.
        mulu.w  d5,d5				* Multiply d0*d0.
        eor.l   d6,d5				* Exclusive OR it.
        addq.l  #7,d5				* Add constant to it.
	move.l	d5,random
	move.l	d0,Snotje.X(a0)
	move.l	d1,Snotje.Y(a0)
	asr.w	#8,d5
	add.w	d5,d2
	move.w	d2,Snotje.DX(a0)
	swap	d5
	asr.w	#8,d5
	add.w	d5,d3
	move.w	d3,Snotje.DY(a0)
	move.w	#1,Snotje.ON(a0)
	move.w	d6,d5
	andi.w	#$003f,d6
	add.w	a2,d6
	move.w	d6,Snotje.AGE(a0)
	lea	Snotje.SIZE(a0),a0
	dbra	d4,.loop
.end:	rts

* Update all snotje's positions.
Snotjes.update:
	lea	Snotjes.table,a1
	move.w	#Snotjes.MAX-1,d7

.loop:	tst.w	Snotje.ON(a1)
	beq.s	.next
	move.w	Snotje.AGE(a1),d0
	andi.w	#$00ff,d0
	cmpi.w	#128,d0
	bhs.s	.kicked_off
	move.l	Snotje.X(a1),d0
	move.l	Snotje.Y(a1),d1
	move.w	Snotje.DX(a1),d2
	move.w	Snotje.DY(a1),d3
	subi.w	#$0008,d3
	move.w	d3,Snotje.DY(a1)
	ext.l	d2
	ext.l	d3
	lsl.l	#8,d2
	lsl.l	#8,d3
	add.l	d2,d0
	add.l	d3,d1
	move.l	d0,Snotje.X(a1)
	cmpi.l	#Draaiding.RADIUS<<16,d0
	bge.s	.kicked_off
	cmpi.l	#-Draaiding.RADIUS<<16,d0
	blt.s	.kicked_off
	addq.w	#1,Snotje.AGE(a1)
	move.l	d1,Snotje.Y(a1)
	cmpi.l	#-Draaiding.RADIUS<<16,d1
	bge.s	.next
.kicked_off:
	clr.w	Snotje.ON(a1)
	subq.w	#1,Snotjes.count
.next:	lea	Snotje.SIZE(a1),a1
	dbra	d7,.loop
	rts

* Paint the snotjes.
Snotjes.addToDraaiding:
	lea	Draaiding.transformTable,a0
	move.w	Draaiding.counter,d0
	mulu.w	#6,d0
	adda.l	d0,a0
	lea	Snotjes.table,a1
	move.w	#Snotjes.MAX-1,d7
	moveq	#0,d6
	lea	Snotje.shadeTable+20,a2

.loop:	tst.w	Snotje.ON(a1)
	beq.s	.next
	addq.w	#1,d6
	move.w	Snotje.X(a1),d0
	move.w	Snotje.Y(a1),d1
	move.w	Snotje.AGE(a1),d2
	move.w	(a2,d2.w*2),d2
	bsr	Draaiding.add
.next:	lea	Snotje.SIZE(a1),a1
	dbra	d7,.loop

	add.w	d6,Draaiding.counter
	rts

Scroller.updatePosition:
	move.w	Scroller.counter,d0
	move.w	Scroller.pixelCounter,d1
	addq.w	#3,d1
	cmpi.w	#16,d1
	blt.s	.correct_position
	subi.w	#16,d1
	addq.w	#1,d0
.correct_position:
	move.w	d1,Scroller.pixelCounter
	move.w	d0,Scroller.counter
	rts

Scroller.paint:
	lea	Scroller.font+20,a1
	movea.l	scr,a0
	movea.l	Scroller.textAddress,a2
	adda.w	Scroller.counter,a2
	move.w	Scroller.pixelCounter,d2
	beq.s	.no_frac_chars

.frac_chars:
	move.w	d2,d3
	subi.w	#16,d2
	neg.w	d2
	move.w	d3,-(sp)
	bsr	Scroller.paintFracChar
	moveq	#19-1,d7
	bsr	Scroller.paintChars
	move.w	(sp)+,d2
	moveq	#0,d3
	bsr	Scroller.paintFracChar
	rts

.no_frac_chars:
	moveq	#20-1,d7
	bsr	Scroller.paintChars
	rts

* INPUT:
* d7.w: charnum -1
Scroller.paintChars:
.loop:
* Get next charcode.
	moveq	#0,d0
	move.b	(a2)+,d0
	beq	.end

* Get offset in font to char.
	cmpi.b	#$60,d0
	blt.s	.pokay
	andi.b	#$df,d0
.pokay:	subi.b	#33,d0
	bpl.s	.correct_charcode
	move.b	#14,d0
.correct_charcode:
	divu.w	#20,d0
	move.w	d0,d1
	mulu.w	#320*16*2,d1
	swap	d0
	mulu.w	#16*2,d0
	add.l	d0,d1
	lea	(a1,d1.l),a3

* Paint the char...
	movem.l	(a3),d0-d6/a4
	movem.l	d0-d6/a4,(a0)
	movem.l	640(a3),d0-d6/a4
	movem.l	d0-d6/a4,640(a0)
	movem.l	640*2(a3),d0-d6/a4
	movem.l	d0-d6/a4,640*2(a0)
	movem.l	640*3(a3),d0-d6/a4
	movem.l	d0-d6/a4,640*3(a0)
	movem.l	640*4(a3),d0-d6/a4
	movem.l	d0-d6/a4,640*4(a0)
	movem.l	640*5(a3),d0-d6/a4
	movem.l	d0-d6/a4,640*5(a0)
	movem.l	640*6(a3),d0-d6/a4
	movem.l	d0-d6/a4,640*6(a0)
	movem.l	640*7(a3),d0-d6/a4
	movem.l	d0-d6/a4,640*7(a0)
	movem.l	640*8(a3),d0-d6/a4
	movem.l	d0-d6/a4,640*8(a0)
	movem.l	640*9(a3),d0-d6/a4
	movem.l	d0-d6/a4,640*9(a0)
	movem.l	640*10(a3),d0-d6/a4
	movem.l	d0-d6/a4,640*10(a0)
	movem.l	640*11(a3),d0-d6/a4
	movem.l	d0-d6/a4,640*11(a0)
	movem.l	640*12(a3),d0-d6/a4
	movem.l	d0-d6/a4,640*12(a0)
	movem.l	640*13(a3),d0-d6/a4
	movem.l	d0-d6/a4,640*13(a0)
	movem.l	640*14(a3),d0-d6/a4
	movem.l	d0-d6/a4,640*14(a0)
	movem.l	640*15(a3),d0-d6/a4
	movem.l	d0-d6/a4,640*15(a0)
	lea	16*2(a0),a0
	dbra	d7,.loop

.end:	rts

* INPUT:
* d2.w: pixelpos
* d3.w: pixelrest
* a0: screen
* a1: font
* a2: text
Scroller.paintFracChar:
* Draw the first fractional bitch...
	moveq	#0,d0
	move.b	(a2)+,d0
	beq.s	.wrap
* Get offset in font to char.
	cmpi.b	#$60,d0
	blt.s	.okay
	andi.b	#$df,d0
.okay:	subi.b	#33,d0
	bpl.s	.correct_charcode
	move.b	#14,d0
.correct_charcode:
	divu.w	#20,d0
	move.w	d0,d1
	mulu.w	#320*16*2,d1
	swap	d0
	mulu.w	#16*2,d0
	add.l	d0,d1
	lea	(a1,d1.l),a3
	lea	(a3,d3.w*2),a3

* Paint the char...
	move.w	#16-1,d7
	movea.w	#320,a6
	suba.w	d2,a6
	adda.l	a6,a6
.pyloop:
	move.w	d2,d6
	subq.w	#1,d6
.xloop:	move.w	(a3)+,(a0)+
	dbra	d6,.xloop
	adda.l	a6,a3
	adda.l	a6,a0
	dbra	d7,.pyloop

	movea.w	#-16*320,a6
	adda.w	d2,a6
	adda.l	a6,a6
	adda.l	a6,a0
.end:	rts

.wrap:	clr.w	Scroller.counter
	rts

* INPUT:
* a1: clearing table
clearDots:
	move.w	(a1)+,d7
	beq.s	.end
	subq.w	#1,d7
	moveq	#0,d0
.loop:	movea.l	(a1)+,a0
	move.w	d0,(a0)
	dbra	d7,.loop
.end:	rts

******** END OF DEMO-EFFECT OBJECT ********