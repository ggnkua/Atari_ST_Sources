* Object skeleton used by DEMOS1.S or DASTD.S (v2.0)
* v1.0: * Monitormode selection.
*       * SET_RES routine vbl-synced.
*       * Screenaddress-setting optimised.
*
* v1.1: * Automaticly initializes screenbuffers and resolution.
*       * Returns resultcode in INIT routine.
*       * Minor optimisations.

******** OBJECT EQUS ********

******** OBJECT TABLE ********

* Must be first in object!!
textFXTable:
	DC.L	DEMOFXMAINLOOP
	DC.L	INIT_DEMOFX
	DC.L	SET_DEMOFXRES
	DC.L	setIntroText
	DC.L	setText2
	DC.L	setText3
* Add more addresses here..
	DC.L	0

******** RESOLUTION SETTING ROUTINE ********

SET_DEMOFXRES:
	IFEQ	testmode
	clr.l	$ffff9800.w

	move.l	#rts,vbl_gfx

	move.w	$0468.w,d0
.ck468:	cmp.w	$0468.w,d0
	beq.s	.ck468
	move.w	monitormode,d0
	cmpi.w	#vga60,d0
	beq.s	.vga60
	cmpi.w	#vga100,d0
	beq.s	.vga100
	cmpi.w	#rgb50,d0
	beq.s	.rgb50
* Unknown monitormode..
.vga60:	jmp	vga60_16bit_320_200
	rts
.vga100:
	jmp	vga100_16bit_320_200
	rts
.rgb50:	jmp	rgb50_16bit_320_200
	ENDC
	rts

******** INIT SUBROUTINE ********

* OUTPUT:
* d0.l: 0 = All clear, neg = Error! Not initialized!
INIT_DEMOFX:
	lea	text,a0
	bsr	resetText

.success:
	moveq	#0,d0
	rts
.error:	moveq	#-1,d0
	rts

******** SCREENINIT SUBROUTINE ********

INIT_DEMOFXSCREEN:
	IFEQ	testmode
	movea.l	scr,a0
	bsr	CLEAR_320200TSCR
	ENDC
	rts

******** MAINLOOP SUBROUTINE ********

DEMOFXMAINLOOP:
	move.l	frmcnt,d0
	sub.l	lastframecount,d0
	bne.s	.end_screeninit
	move.l	d0,-(sp)
	bsr	SET_DEMOFXRES
	move.l	(sp)+,d0
	bsr	INIT_DEMOFXSCREEN
	bra	.end_paint
.end_screeninit:

	bsr	refreshScreen
	bsr	paintNextChar
.end_paint:

	IFEQ	testmode
	moveq	#2,d2
	cmpi.w	#vga100,monitormode
	bne.s	.interval_established
	moveq	#4,d2
.interval_established:
	move.w	$468.w,d1
.cmp:	move.w	$468.w,d0
	sub.w	d1,d0
	cmp.w	d2,d0
	blt.s	.cmp

	move.l	scr,d0
	move.l	d0,d1
	lsr.w	#8,d0
	move.l	d0,$ffff8200.w
	move.b	d1,$ffff820d.w
	ENDC
	rts

******** OBJECT DATA ********

	DATA

font:	INCBIN	FONT.APX

text:	DC.B	" THE ATARIANS FROM  "
	DC.B	"     FUN INDUSTRIES "
	DC.B	"           ARE BACK!",0
text2:	DC.B	"TO BRING YOU A      "
	DC.B	"PRODUCTION BY:      "
	DC.B	"                    "
	DC.B	"DFORCE, EARX, HAVOC "
	DC.B	"AND TINKER OF TNH   ",0
text3:	DC.B	"*-   THE MAGGIE   -*"
	DC.B	"*- 10TH BIRTHDAY  -*"
	DC.B	"*-     !INTRO!    -*",0
	EVEN

******** OBJECT RESERVES ********

	BSS

textAddress:
	DS.L	1
counter:
	DS.W	1
refresh:
	DS.W	1

******** OBJECT SUBROUTINES ********

	TEXT

setIntroText:
	lea	text,a0
	bsr	resetText
	rts

setText2:
	lea	text2,a0
	bsr	resetText
	rts

setText3:
	lea	text3,a0
	bsr	resetText
	rts

* INPUT:
* a0: null terminated ASCII text
resetText:
	move.l	a0,textAddress
	clr.w	counter
	not.w	refresh
	rts

refreshScreen:
	tst.w	refresh
	beq.s	.end_refresh
	IFEQ	testmode
	movea.l	scr,a0
	bsr	CLEAR_320200TSCR
	ENDC
	clr.w	refresh
.end_refresh:
	rts

paintNextChar:
	lea	font+20,a1
	movea.l	scr,a0
	movea.l	textAddress,a2

* Get position on screen.
	move.w	counter,d0
	divu.w	#20,d0
	move.w	d0,d1
	mulu.w	#320*16*2,d1
	swap	d0
	mulu.w	#16*2,d0
	add.l	d0,d1
	adda.l	d1,a0

* Get next charcode.
	move.w	counter,d1
	moveq	#0,d0
	move.b	(a2,d1.w),d0
	beq.s	.end

* This is not the last char to paint.. Update the counter...
	addq.w	#1,counter

* Get offset in font to char.
	subi.b	#33,d0
	bpl.s	.okay
	move.b	#14,d0
.okay:	divu.w	#20,d0
	move.w	d0,d1
	mulu.w	#320*16*2,d1
	swap	d0
	mulu.w	#16*2,d0
	add.l	d0,d1
	lea	(a1,d1.l),a3

* Paint the char...
	moveq	#16-1,d7
.yloop:	movem.l	(a3),d0-d6/a4
	movem.l	d0-d6/a4,(a0)
	lea	320*2(a0),a0
	lea	320*2(a3),a3
	dbra	d7,.yloop

.end:	rts

******** END OF DEMO-EFFECT OBJECT ********