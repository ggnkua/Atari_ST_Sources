* Object skeleton used by DEMOS1.S or DASTD.S (v2.0)
* v1.0: * Monitormode selection.
*       * SET_RES routine vbl-synced.
*       * Screenaddress-setting optimised.
*
* v1.1: * Automaticly initializes screenbuffers and resolution.
*       * Returns resultcode in INIT routine.
*       * Minor optimisations.

******** OBJECT EQUS ********

******** OBJECT TABLE ********

* Must be first in object!!
kransFXTable:
	DC.L	kransMAINLOOP
	DC.L	INIT_krans
	DC.L	SET_kransRES
	DC.L	triggerRingIncrease
	DC.L	triggerRingDecrease
* Add more addresses here..
	DC.L	0

******** RESOLUTION SETTING ROUTINE ********

SET_kransRES:
	IFEQ	testmode
	move.l	#rts,vbl_gfx

	move.w	$0468.w,d0
.ck468:	cmp.w	$0468.w,d0
	beq.s	.ck468
	move.w	monitormode,d0
	cmpi.w	#vga60,d0
	beq.s	.vga60
	cmpi.w	#vga100,d0
	beq.s	.vga100
	cmpi.w	#rgb50,d0
	beq.s	.rgb50
* Unknown monitormode..
	rts
.vga60:	jmp	vga60_16bit_160_200
.vga100:
	jmp	vga100_16bit_160_100
.rgb50:	jmp	rgb50_16bit_320_100
	ENDC
	rts

******** INIT SUBROUTINE ********

* OUTPUT: d0.l: 0   = All clear.
*               neg = Error! Not initialized!
INIT_krans:
	bsr	initWrapSine

	bsr	initCircleTables
.success:
	moveq	#0,d0
	rts
.error:	moveq	#-1,d0
	rts

******** SCREENINIT SUBROUTINE ********

INIT_kransSCREEN:
	IFEQ	testmode
	movea.l	scr,a0
	bsr.l	CLEAR_320100TSCR
	ENDC
	rts

******** MAINLOOP SUBROUTINE ********

kransMAINLOOP:
	move.l	frmcnt,d0
	sub.l	lastframecount,d0
	bne.s	.res_done
	move.l	d0,-(sp)
	bsr	SET_kransRES
	move.l	(sp)+,d0
.res_done:
	cmpi.l	#3,d0
	bhs.s	.end_screeninit
	bsr	INIT_kransSCREEN
.end_screeninit:

	move.w	$468.w,.old468

	tst.w	increaseRings
	beq.s	.end_increase_rings
	bmi.s	.decrease_rings
	cmpi.w	#95,activeRings
	bhs.s	.end_increase_rings
	move.l	$4ba.w,d0
	sub.l	increment_start_time,d0
	lsr.l	#3,d0
	cmpi.l	#95,d0
	ble.s	.num_of_rings_okay
	move.w	#95,d0
.num_of_rings_okay:
	move.w	d0,activeRings
	bra.s	.end_increase_rings
.decrease_rings:
	tst.w	activeRings
	beq.s	.end_increase_rings
	move.l	$4ba.w,d1
	sub.l	increment_start_time,d1
	lsr.l	#3,d1
	moveq	#95,d0
	sub.w	d1,d0
	bpl.s	.num_of_rings_okay
.end_increase_rings:

	bsr	paintDistoKrans

	move.w	.old468,d0
.wait_vbl:
	cmp.w	$468.w,d0
	beq.s	.wait_vbl

	IFEQ	testmode
	lea	scr,a0
	move.l	(a0)+,d0
	move.l	(a0)+,d1
	move.l	(a0),-4(a0)
	move.l	d0,(a0)
	move.l	d1,-8(a0)
	move.l	d0,d1
	lsr.w	#8,d0
	move.l	d0,$ffff8200.w
	move.b	d1,$ffff820d.w
	ENDC
	rts

.old468:
	DC.W	0

******** OBJECT DATA ********

	DATA

kransPicture:
	INCBIN	KRANS.APX

quadrantTableAddress:
	DC.L	quadrantTable
	DC.L	quadrantTable2

******** OBJECT RESERVES ********

	BSS

offsetRingAddressTable:
	DS.L	95+1

textureRingAddressTable:
	DS.L	95+1

offsetRingBuffer:
	DS.W	2*(95*95+95)*315/100		* 2*pi(n+n-1+n-2+...+1) = (n*n+n)/2 *2*pi = (n*n+n)*pi 

textureRingBuffer:
	DS.L	3*(95*95+95)*315/100		* (n*n+n)/2 *2*pi = (n*n+n)*pi 

ringTable:
	DS.L	128*8				* max. 128*8 points in a circle

quadrantTable:
	DS.L	128				* max. 128 points in a circle/8
quadrantTable2:
	DS.L	128				* max. 128 points in a circle/8

sineTable:
	DS.W	sintbllen*2

increaseRings:
	DS.W	1
activeRings:
	DS.W	1

increment_start_time:
	DS.L	1

******** OBJECT SUBROUTINES ********

	TEXT

triggerRingIncrease:
	clr.w	activeRings
	move.w	#1,increaseRings
	move.l	$4ba.w,increment_start_time
	rts

triggerRingDecrease:
	clr.w	activeRings
	move.w	#-1,increaseRings
	move.l	$4ba.w,increment_start_time
	rts

initWrapSine:
	lea	sineTable,a0
	lea	sine_tbl,a1
	move.w	#sintbllen-1,d7
.loop:	move.w	(a1),(a0)+
	addq	#4,a1
	dbra	d7,.loop
	lea	sine_tbl,a1
	move.w	#sintbllen-1,d7
.loop2:	move.w	(a1),(a0)+
	addq	#4,a1
	dbra	d7,.loop2
	rts

initCircleTables:
	lea	offsetRingAddressTable,a1
	lea	textureRingAddressTable,a3
	move.l	#offsetRingBuffer,(a1)
	move.l	#textureRingBuffer,(a3)
	moveq	#95,d0
	moveq	#0,d6				* num. of points output

.loop:
* Pass 1: Calculate all points in a circle with radius = d0.w.
	move.w	d0,-(sp)
	bsr	calcCirclePoints3
	move.w	(sp)+,d0

* Pass 2a: Calculate the offset ring from pass 1 results.
	movem.w	d0/d1,-(sp)
	bsr	calcOffsetRing
	movem.w	(sp)+,d0/d1

* Pass 2b: Calculate the texture ring from pass 1 results.
	movem.w	d0/d1,-(sp)
	bsr	calcTextureRing
	movem.w	(sp)+,d0/d6

	addq	#4,a1				* Proceed to next offsetring address.
	addq	#4,a3				* Proceed to next texturering address.
	dbra	d0,.loop

	rts

* Bresenham circle calcs..
* INPUT:
* d0.w: radius
* d6.w: number of points previously output
* OUTPUT:
* d1.w: number of points output
calcCirclePoints3:
	lsr.w	#3,d6				* last points / num of quadrants.
	add.w	d0,d0				* Double radius.
* Pass 1: we calculate a quadrant.
	moveq	#0,d7				* count = 0
	moveq	#0,d1				* x=0
* d := 3 - 2*radius
	moveq	#3,d2
	sub.w	d0,d2
	sub.w	d0,d2
	movea.l	quadrantTableAddress,a0
	movea.l	quadrantTableAddress+4,a2

	cmp.w	d0,d1				* if x<y stop 
	bgt	.end_calcs
* Make a halved copy of the point.
	move.w	d1,d3
	move.w	d0,d4
	lsr.w	#1,d3
	lsr.w	#1,d4
	move.w	d3,(a0)+
	move.w	d4,(a0)+
* count := count + 1
	addq.w	#1,d7

* Do the first point (Damn this effect! Too much specific stuff going on here.)
	tst.w	d2
	bpl.s	.decrease_y0
* d := d + 4*x + 6
	move.w	d1,d3
	lsl.w	#2,d3
	add.w	d3,d2
	addq.w	#6,d2
	bra.s	.end_recalc_discriminator0
.decrease_y0:
* d := d + 4*(x-y) + 10
	move.w	d1,d3
	sub.w	d0,d3
	lsl.w	#2,d3
	add.w	d3,d2
	addi.w	#10,d2
* y := y - 1
	subq.w	#1,d0
.end_recalc_discriminator0:
* x := x + 1
	addq.w	#1,d1

.loop:	cmp.w	d0,d1				* if x<y stop 
	bgt	.end_calcs
* Make a halved copy of the point.
	move.w	d1,d3
	move.w	d0,d4
	lsr.w	#1,d3
	lsr.w	#1,d4

* Compare this to the previous point.
	cmp.w	-4(a0),d3
	bne.s	.find_matching_x
	cmp.w	-2(a0),d4
	beq.s	.end_store
.find_matching_x:
	subq	#4,a2
	addq.w	#1,d6
.find_loop
	addq	#4,a2
	tst.w	d6
	beq.s	.end_matching
	subq.w	#1,d6
	cmp.w	(a2),d3
	bgt.s	.find_loop

* For all previous points with matching x, check if current.y = prev.y
	move.w	d6,d5
	movea.l	a2,a4
.match_loop:
	tst.w	d6
	beq.s	.end_match_loop
	subq.w	#1,d6
	cmp.w	(a2),d3
	bne.s	.end_match_loop
	cmp.w	2(a2),d4
	beq.s	.match_found
	addq	#4,a2
	bra.s	.match_loop

* Match found. Don't output!
.match_found:
	move.w	d5,d6
	movea.l	a4,a2
	bra.s	.end_store

* Match not found. Is new point -> output.
.end_match_loop:
	move.w	d5,d6
	movea.l	a4,a2

.end_matching:
	move.w	d3,(a0)+
	move.w	d4,(a0)+
* count := count + 1
	addq.w	#1,d7
.end_store:

.recalc_discriminator:
	tst.w	d2
	bpl.s	.decrease_y
* d := d + 4*x + 6
	move.w	d1,d3
	lsl.w	#2,d3
	add.w	d3,d2
	addq.w	#6,d2
	bra.s	.end_recalc_discriminator
.decrease_y:
* d := d + 4*(x-y) + 10
	move.w	d1,d3
	sub.w	d0,d3
	lsl.w	#2,d3
	add.w	d3,d2
	addi.w	#10,d2
* y := y - 1
	subq.w	#1,d0
.end_recalc_discriminator:
* x := x + 1
	addq.w	#1,d1
	bra	.loop
.end_calcs:

* Pass 2: we shift and copy this quadrant 45 degrees for 8 times.
	movea.l	quadrantTableAddress,a2
	lea	ringTable,a0
	move.w	d7,d5
	beq	.end_copy
	move.w	d5,d4
	mulu.w	#4*2,d4
	subq.w	#1,d7

.quadrant_loop:
	movea.l	a0,a5

	movem.w	(a2)+,d0/d1
* +x,-y
	moveq	#95,d2
	moveq	#95,d3
	add.w	d0,d2
	sub.w	d1,d3
	movem.w	d2/d3,(a5)
	adda.l	d4,a5
* +y,+x
	moveq	#95,d2
	moveq	#95,d3
	add.w	d1,d2
	add.w	d0,d3
	movem.w	d2/d3,(a5)
	adda.l	d4,a5
* -x,+y
	moveq	#95,d2
	moveq	#95,d3
	sub.w	d0,d2
	add.w	d1,d3
	movem.w	d2/d3,(a5)
	adda.l	d4,a5
* -y,-x
	moveq	#95,d2
	moveq	#95,d3
	sub.w	d1,d2
	sub.w	d0,d3
	movem.w	d2/d3,(a5)
	adda.l	d4,a5

	addq	#4,a0
	dbra	d7,.quadrant_loop

	lea	(ringTable,d4.l),a0
	movea.l	quadrantTableAddress,a2
	move.w	d5,d7
	subq.w	#1,d7

.quadrant_loop2:
	subq	#4,a0
	movea.l	a0,a5

	movem.w	(a2)+,d0/d1
* +y,-x
	moveq	#95,d2
	moveq	#95,d3
	add.w	d1,d2
	sub.w	d0,d3
	movem.w	d2/d3,(a5)
	adda.l	d4,a5
* +x,+y
	moveq	#95,d2
	moveq	#95,d3
	add.w	d0,d2
	add.w	d1,d3
	movem.w	d2/d3,(a5)
	adda.l	d4,a5
* -y,+x
	moveq	#95,d2
	moveq	#95,d3
	sub.w	d1,d2
	add.w	d0,d3
	movem.w	d2/d3,(a5)
	adda.l	d4,a5
* -x,-y
	moveq	#95,d2
	moveq	#95,d3
	sub.w	d0,d2
	sub.w	d1,d3
	movem.w	d2/d3,(a5)
	adda.l	d4,a5

	dbra	d7,.quadrant_loop2
.end_copy:

	move.w	d5,d1
	lsl.w	#3,d1

	lea	quadrantTableAddress,a0
	move.l	(a0)+,d0
	move.l	(a0),-(a0)
	move.l	d0,4(a0)
	rts

* This stores all visible (=within viewport range) points in an offset ring.
* A point means:
* - an offset in the matching texturering
* - an screenoffset
* INPUT:
* d1.w: number of points in circle
* (a1): next address in offsetRingBuffer
calcOffsetRing:
	movea.l	(a1),a2
	lea	ringTable,a0
	moveq	#0,d5				* count = 0
	move.w	d1,d7
	beq.s	.end
	subq.w	#1,d7

.loop:	movem.w	(a0)+,d0/d1
	subi.w	#95-80,d0
	subi.w	#95-50,d1
	cmpi.w	#160,d0
	bhs.s	.next_point
	cmpi.w	#100,d1
	bhs.s	.next_point
	move.w	d5,(a2)+			* Store count (=offset in ring).
	mulu.w	#160,d1
	cmpi.w	#vga100,monitormode
	beq.s	.no_linewidth
	add.l	d1,d1
	cmpi.w	#rgb50,monitormode
	bne.s	.no_dpix
	add.w	d0,d0
.no_dpix:
.no_linewidth:
	add.w	d0,d1
	add.l	d1,d1
	move.w	d1,(a2)+			* Store screenoffset.
.next_point:
* count := count + 4
	addq.w	#4,d5
* Move to next quadrant.
	dbra	d7,.loop

.end:	move.l	a2,4(a1)			* Store address of next offsetRing.
	rts

* This stores a complete texture ring. For wrapping it is repeated once.
* INPUT:
* d1.w: number of points in ring
* (a3): next texturering address
calcTextureRing:
	lea	kransPicture+20,a4
	movea.l	(a3),a2
	lea	ringTable,a0
	move.w	d1,d7
	beq.s	.end
	subq.w	#1,d7

.loop:	movem.w	(a0)+,d0/d1
	mulu.w	#95*2,d1
	add.w	d0,d1
	move.w	(a4,d1.l*2),(a2)+
	move.w	(a4,d1.l*2),(a2)+
.next_point:
	dbra	d7,.loop

* Now we repeat all stored points once...
* a2: start of points to still be written.
	move.l	a2,d7
	sub.l	(a3),d7				* d7.l: number of stored points * 2
	lsr.l	#1,d7				* d7.w: number of stored points
	beq.s	.end
	subq.w	#1,d7
	movea.l	(a3),a4				* a4: start of stored points
.copyloop:
	move.w	(a4)+,(a2)+
	dbra	d7,.copyloop

.end:	move.l	a2,4(a3)			* Store address of next offsetRing.
	rts

paintKrans:
	move.w	monitormode,d0
	cmpi.w	#vga60,d0
	beq.s	paintKransVga60
	cmpi.w	#vga100,d0
	beq.s	paintKransVga100
	cmpi.w	#rgb50,d0
	beq.s	paintKransRgb50
	rts

paintKransVga60:
	movea.l	scr,a0
	lea	160*2(a0),a2
	lea	kransPicture+20,a1
	move.w	#100-1,d7

.yloop:	moveq	#160/8-1,d6

.xloop:	REPT	8
	move.w	(a1),(a0)+
	move.w	(a1)+,(a2)+
	ENDR
	dbra	d6,.xloop

	lea	(190-160)*2(a1),a1
	lea	160*2(a0),a0
	lea	160*2(a2),a2
	dbra	d7,.yloop
	rts

paintKransVga100:
	movea.l	scr,a0
	lea	kransPicture+20,a1
	move.w	#100-1,d7

.yloop:	moveq	#160/8-1,d6

.xloop:	REPT	4
	move.l	(a1)+,(a0)+
	ENDR
	dbra	d6,.xloop

	lea	(190-160)*2(a1),a1
	dbra	d7,.yloop
	rts

paintKransRgb50:
	movea.l	scr,a0
	lea	kransPicture+20,a1
	move.w	#100-1,d7

.yloop:	moveq	#160/8-1,d6

.xloop:	REPT	8
	move.w	(a1),(a0)+
	move.w	(a1)+,(a0)+
	ENDR
	dbra	d6,.xloop

	lea	(190-160)*2(a1),a1
	dbra	d7,.yloop
	rts

paintDistoKrans:
	move.w	activeRings,d7
	beq.s	.end
	subq.w	#1,d7
	move.w	monitormode,d0
	cmpi.w	#vga60,d0
	beq	paintDistoKransVga60
	cmpi.w	#vga100,d0
	beq	paintDistoKransVga100
	cmpi.w	#rgb50,d0
	beq	paintDistoKransRgb50
.end:	rts

paintDistoKransVga100:
	lea	offsetRingAddressTable,a1
	lea	textureRingAddressTable,a3
	lea	sineTable,a5
	movea.l	scr,a0
	moveq	#0,d0
	moveq	#0,d1
	move.w	$4bc.w,d3
	move.w	d3,d4
	Do_SinModulo	d4
	lea	(a5,d4.w*2),a5

.ring_loop:
	movea.l	(a3)+,a4			* a4 = texture ring
	movea.l	(a1)+,a2			* a2 = offset ring
	move.l	(a1),d6				* d6 = next offset ring
	sub.l	a2,d6
	lsr.l	#1,d6				* d6 = number of visible pixels in ring
	beq.s	.end_pixel_loop
	move.l	(a3),d5
	sub.l	a4,d5
	lsr.l	#2,d5				* d5 = total pixels in ring
	move.w	d5,d2
	IFNE	0
	mulu.w	d3,d2
	lsr.l	#8,d2
	lsr.l	#3,d2
	ELSE
	move.w	(a5),d4
	addi.w	#$8000,d4
	mulu.w	d4,d2
	addq	#4,a5	
	lsr.l	#8,d2
	lsr.l	#6,d2
	ENDC
	divu.w	d5,d2
	swap	d2
	lea	(a4,d2.w*2),a4			* current position in texturering
	subq.w	#1,d6
.pixel_loop:
	move.w	(a2)+,d0			* d0.l = ringoffset
	move.w	(a2)+,d1			* d1.l = screenoffset
	move.w	(a4,d0.l),(a0,d1.l)
	dbra	d6,.pixel_loop
.end_pixel_loop:

	dbra	d7,.ring_loop
	rts

paintDistoKransVga60:
	lea	offsetRingAddressTable,a1
	lea	textureRingAddressTable,a3
	lea	sineTable,a5
	movea.l	scr,a0
	lea	320(a0),a6
	moveq	#0,d0
	moveq	#0,d1
	move.w	$4bc.w,d3
	move.w	d3,d4
	Do_SinModulo	d4
	lea	(a5,d4.w*2),a5

.ring_loop:
	movea.l	(a3)+,a4			* a4 = texture ring
	movea.l	(a1)+,a2			* a2 = offset ring
	move.l	(a1),d6				* d6 = next offset ring
	sub.l	a2,d6
	lsr.l	#1,d6				* d6 = number of visible pixels in ring
	beq.s	.end_pixel_loop
	move.l	(a3),d5
	sub.l	a4,d5
	lsr.l	#2,d5				* d5 = total pixels in ring
	move.w	d5,d2
	IFNE	0
	mulu.w	d3,d2
	lsr.l	#8,d2
	lsr.l	#3,d2
	ELSE
	move.w	(a5),d4
	addi.w	#$8000,d4
	mulu.w	d4,d2
	addq	#4,a5	
	lsr.l	#8,d2
	lsr.l	#6,d2
	ENDC
	divu.w	d5,d2
	swap	d2
	lea	(a4,d2.w*2),a4			* current position in texturering
	subq.w	#1,d6
.pixel_loop:
	move.w	(a2)+,d0			* d0.l = ringoffset
	move.w	(a2)+,d1			* d1.l = screenoffset
	move.w	(a4,d0.l),(a0,d1.l)
	dbra	d6,.pixel_loop
.end_pixel_loop:

	dbra	d7,.ring_loop

	movea.l	scr,a0
	move.w	#100-1,d7
.copy_loop:
	movem.l	(a0)+,d0-d6/a1-a5
	movem.l	d0-d6/a1-a5,(a6)
	movem.l	(a0)+,d0-d6/a1-a5
	movem.l	d0-d6/a1-a5,48(a6)
	movem.l	(a0)+,d0-d6/a1-a5
	movem.l	d0-d6/a1-a5,96(a6)
	movem.l	(a0)+,d0-d6/a1-a5
	movem.l	d0-d6/a1-a5,144(a6)
	movem.l	(a0)+,d0-d6/a1-a5
	movem.l	d0-d6/a1-a5,192(a6)
	movem.l	(a0)+,d0-d6/a1-a5
	movem.l	d0-d6/a1-a5,240(a6)
	movem.l	(a0)+,d0-d6/a1
	movem.l	d0-d6/a1,288(a6)
	lea	320*2(a6),a6
	lea	320(a0),a0
	dbra	d7,.copy_loop
	rts

paintDistoKransRgb50:
	lea	offsetRingAddressTable,a1
	lea	textureRingAddressTable,a3
	lea	sineTable,a5
	movea.l	scr,a0
	moveq	#0,d0
	moveq	#0,d1
	move.w	$4bc.w,d3
	move.w	d3,d4
	Do_SinModulo	d4
	lea	(a5,d4.w*2),a5

.ring_loop:
	movea.l	(a3)+,a4			* a4 = texture ring
	movea.l	(a1)+,a2			* a2 = offset ring
	move.l	(a1),d6				* d6 = next offset ring
	sub.l	a2,d6
	lsr.l	#1,d6				* d6 = number of visible pixels in ring
	beq.s	.end_pixel_loop
	move.l	(a3),d5
	sub.l	a4,d5
	lsr.l	#2,d5				* d5 = total pixels in ring
	move.w	d5,d2
	IFNE	0
	mulu.w	d3,d2
	lsr.l	#8,d2
	lsr.l	#3,d2
	ELSE
	move.w	(a5),d4
	addi.w	#$8000,d4
	mulu.w	d4,d2
	addq	#4,a5	
	lsr.l	#8,d2
	lsr.l	#6,d2
	ENDC
	divu.w	d5,d2
	swap	d2
	lea	(a4,d2.w*2),a4			* current position in texturering
	subq.w	#1,d6
.pixel_loop:
	move.w	(a2)+,d0			* d0.l = ringoffset
	move.w	(a2)+,d1			* d1.l = screenoffset
	move.l	(a4,d0.l),(a0,d1.l)
	dbra	d6,.pixel_loop
.end_pixel_loop:

	dbra	d7,.ring_loop
	rts

******** END OF DEMO-EFFECT OBJECT ********