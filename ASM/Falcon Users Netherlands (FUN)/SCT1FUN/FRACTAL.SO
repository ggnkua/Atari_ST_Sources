* Mandelbrotzoom by zerkman/sectorone.

******** OBJECT EQUATES ********

Fractal.strtime	=	0
Fractal.endtime	=	10000

Fractal.xres	equ	160
Fractal.yres	equ	100
Fractal.vidmode	equ	0

Fractal.xinc	equ	($30<<18)/Fractal.xres	; 3.0 / 2 / xres
Fractal.yinc	equ	$0<<18		; 0.0
Fractal.xcnt	equ	-$08<<18	; -0.5 / 2
Fractal.ycnt	equ	$00<<18		; 0.0 / 2

******** OBJECT TABLE ********

* Must be first in object!!
Fractal.table:
	DC.L	Fractal.mainLoop
	DC.L	Fractal.init
	DC.L	Fractal.setRes
* Add more addresses here..
	DC.L	0

******** RESOLUTION SETTING ROUTINE ********

Fractal.setRes:
	IFEQ	testmode
	move.l	#rts,vbl_gfx

	move.w	$0468.w,d0
.ck468:	cmp.w	$0468.w,d0
	beq.s	.ck468
	move.w	monitormode,d0
	cmpi.w	#vga60,d0
	beq.s	.vga60
	cmpi.w	#vga100,d0
	beq.s	.vga100
	cmpi.w	#rgb50,d0
	beq.s	.rgb50
* Unknown monitormode..
	rts
.vga60:	bra.l	vga60_16bit_160_200
.vga100:bra.l	vga100_16bit_160_100
.rgb50:	bra.l	rgb50_16bit_320_200
	ENDC
	rts

******** INIT SUBROUTINE ********

* OUTPUT: d0.l: 0   = All clear.
*               neg = Error! Not initialized!
Fractal.init:
	lea	Fractal.dbltbl+64*64*4,a0
	lea	Fractal.palette,a1
	move	#64*64-1,d0
tblcalc_loop
	move	d0,d1
	and	#$3f,d1
	move.w	(a1,d1.w*2),d2
	swap	d2
	move	d0,d1
	lsr	#6,d1
	and	#$3f,d1
	move.w	(a1,d1.w*2),d2
	move.l	d2,-(a0)
	dbra	d0,tblcalc_loop

.success:
	moveq	#0,d0
	rts
.error:	moveq	#-1,d0
	rts

******** REALTIME INIT SUBROUTINE ********

Fractal.realtimeInit:
; TODO: make this work with a demo-os specific call.
	lea	Fractal.dsp_code,a0
	move.w	#(Fractal.dsp_code_end-Fractal.dsp_code)/3,d0
	bsr	Dsp.loadProgram

	lea	$ffffa202.w,a0
	lea	$ffffa204.w,a1
.bla6	btst	#1,(a0)
	beq.s	.bla6
	move.l	#Fractal.xres,(a1)
	move.l	#Fractal.yres,(a1)

	move.l	$4ba.w,d0
	sub.l	#Fractal.strtime,d0
	move.l	d0,Fractal.orgtimr
	rts

******** SCREENINIT SUBROUTINE ********

Fractal.initScreen:
	rts

******** MAINLOOP SUBROUTINE ********

Fractal.mainLoop:
	move.l	frmcnt,d0
	sub.l	lastframecount,d0
	bne.s	.end_realtime_init
	move.l	d0,-(sp)
	bsr	Fractal.realtimeInit
	move.l	(sp)+,d0
.end_realtime_init:
	cmpi.l	#3,d0
	bhs.s	.end_screeninit
	bsr	Fractal.initScreen
.end_screeninit:

	bsr	Fractal.paint

	IFEQ	testmode
	lea	scr,a0
	move.l	(a0)+,d0
	move.l	(a0)+,d1
	move.l	(a0),-4(a0)
	move.l	d0,(a0)
	move.l	d1,-8(a0)
	move.l	d0,d1
	lsr.w	#8,d0
	move.l	d0,$ffff8200.w
	move.b	d1,$ffff820d.w
	ENDC

	move.l	frmcnt,d0
	sub.l	lastframecount,d0
	bne.s	.res_done
	bsr	Fractal.setRes
.res_done:
	rts

******** OBJECT SUBROUTINES ********

Fractal.paint:
; Here we calculate the position of the center of the screen in the fractal image	
	move.l	$4ba.w,d0
	sub.l	Fractal.orgtimr,d0
	mulu	Fractal.speed,d0
	lsr.l	d0
	cmp	#Fractal.endtime,d0
	bpl	the_end

	lea	Fractal.tvalues,a0
; Later I'll code some dichotomic research
search_loop
	cmp	(a0)+,d0
	bgt.s	search_loop
; Ok, we've found the interval.
	subq	#2,a0
	move	(a0),d2
	move	-(a0),d1
	lea	-Fractal.npoints*6-2(a0),a1	; X coord addr of the far left point
	bsr	Fractal.bspline_calc
	move	d6,d3
	lea	-Fractal.npoints*4-2(a0),a1	; Y coord addr of the far left point
	bsr	Fractal.bspline_calc
	move	d6,d4
	lea	-Fractal.npoints*2-2(a0),a1	; Z coord addr of the far left point
	bsr	Fractal.bspline_calc
	moveq	#10,d1
	lsl.l	d1,d6
	divu.l	#Fractal.xres,d6

	moveq	#10,d1
	lsl.l	d1,d3			; X coord of the center << 22
	lsl.l	d1,d4			; Y coord of the center << 22

	lea	$ffffa202.w,a0
	lea	$ffffa204.w,a1
.bla6	btst	#1,(a0)
	beq.s	.bla6
;	move.l	#Fractal.xinc,(a1)
;	move.l	#Fractal.yinc,(a1)
	move.l	d6,(a1)
	move.l	#0,(a1)
	move.l	d3,(a1)
	move.l	d4,(a1)

;	IFND	TEST
;yo	cmp.b	#$81,$fffffc02.w
;	bne.s	yo
;	ENDC

	lea	$ffffa202.w,a0
	lea	$ffffa204+2.w,a1
	lea	Fractal.dbltbl,a3
	movea.l	scr,a6
	moveq	#0,d2

	move.w	monitormode,d0
	cmpi.w	#vga60,d0
	beq	Fractal.paintVga60
	cmpi.w	#vga100,d0
	beq.s	Fractal.paintVga100
	cmpi.w	#rgb50,d0
	beq	Fractal.paintRgb50
* Unknown monitormode..
	rts

Fractal.paintVga100:
	move	#Fractal.yres-1,d0
.main_loop
	lea	Fractal.buffer,a2
	moveq	#Fractal.xres/2/16-1,d1
.bcl	btst	#0,(a0)
	beq.s	.bcl
.sec_bcl
	rept	16
	move.w	(a1),(a2)+
	endr
	dbra	d1,.sec_bcl

	lea	Fractal.buffer,a2
	moveq	#Fractal.xres/2/16-1,d1

.sec2_bcl
	rept	16
	move	(a2)+,d2
	move.l	(a3,d2.l*4),(a6)+
	endr
	dbra	d1,.sec2_bcl

	dbra	d0,.main_loop
	rts

Fractal.paintVga60:
	lea	160*2(a6),a5
	
	move	#Fractal.yres-1,d0
.main_loop
	lea	Fractal.buffer,a2
	moveq	#Fractal.xres/2/16-1,d1
.bcl	btst	#0,(a0)
	beq.s	.bcl
.sec_bcl
	rept	16
	move.w	(a1),(a2)+
	endr
	dbra	d1,.sec_bcl

	lea	Fractal.buffer,a2
	moveq	#Fractal.xres/2/16-1,d1

.sec2_bcl
	rept	16
	move	(a2)+,d2
	move.l	(a3,d2.l*4),(a6)+
	move.l	(a3,d2.l*4),(a5)+
	endr
	dbra	d1,.sec2_bcl

	lea	160*2(a6),a6
	lea	160*2(a5),a5
	dbra	d0,.main_loop
	rts

Fractal.paintRgb50:
	move	#Fractal.yres-1,d0
.main_loop
	lea	Fractal.buffer,a2
	moveq	#Fractal.xres/2/16-1,d1
.bcl	btst	#0,(a0)
	beq.s	.bcl
.sec_bcl
	rept	16
	move.w	(a1),(a2)+
	endr
	dbra	d1,.sec_bcl

	lea	Fractal.buffer,a2
	moveq	#Fractal.xres/2/16-1,d1

.sec2_bcl
	rept	16
	move	(a2)+,d2
	move.l	(a3,d2.l*4),(a6)+
	move.l	(a3,d2.l*4),(a6)+
	endr
	dbra	d1,.sec2_bcl

	dbra	d0,.main_loop
	rts

the_end:rts

; calculate a B-spline coordinate (-32768ócoords<32767)
; d0 : x coordinate (d1ód0<d2)
; d1 : lower bound of the interval
; d2 : upper bound of the interval
; a1 : pointer to P1, P2, P3, and P4.
; return :
; d6 : the coordinate
Fractal.bspline_calc:
	movem.l	d0-d5/d7,-(sp)
	moveq	#16,d7		; number of bits for the decimals section of t and w
	sub	d1,d0
	sub	d1,d2

	lsl.l	d7,d0
	divu.l	d2,d0		; t << DB
	moveq	#1,d1
	lsl.l	d7,d1		; 1 << DB
	sub.l	d0,d1		; w << DB (w=(1-t))

	move	d1,d2
	mulu	d2,d2		; wý << 2DB
	lsr.l	d7,d2		; wý << DB
	move	d2,d3
	mulu	d1,d3		; wþ << 2DB
	lsr.l	d7,d3		; wþ << DB
	move	(a1)+,d6
	ext.l	d6
	muls.l	d3,d6		; P1*wþ << DB

	move	d0,d4
	mulu	d4,d4		; tý << 2DB
	lsr.l	d7,d4		; tý << DB
	move	d4,d5
	mulu	d0,d5		; tþ << 2DB
	lsr.l	d7,d5		; tþ << DB
	move.l	d5,d0
	add.l	d0,d0
	add.l	d5,d0		; 3tþ << DB
	move.l	d4,d1
	add.l	d1,d1
	add.l	d4,d1
	add.l	d1,d1		; 6tý << DB
	sub.l	d1,d0		; (3tþ-6tý) << DB
	moveq	#4,d4
	lsl.l	d7,d4		; 4 << DB
	add.l	d4,d0		; (3tþ-6tý+4) << DB
	move	(a1)+,d1
	ext.l	d1
	muls.l	d1,d0		; P2*(3tþ-6tý+4) << DB
	add.l	d0,d6

	move.l	d3,d0
	add.l	d0,d0
	add.l	d3,d0		; 3wþ << DB
	move.l	d2,d1
	add.l	d1,d1
	add.l	d2,d1
	add.l	d1,d1		; 6wý << DB
	sub.l	d1,d0		; (3wþ-6wý) << DB
	add.l	d4,d0		; (3wþ-6wý+4) << DB
	move	(a1)+,d1
	ext.l	d1
	muls.l	d1,d0		; P3*(3wþ-6wý+4) << DB
	add.l	d0,d6

	move	(a1)+,d1
	ext.l	d1
	muls.l	d1,d5		; P4*tþ << DB
	add.l	d5,d6

	divs.l	#6,d6
	lsr.l	d7,d6

	movem.l	(sp)+,d0-d5/d7
	rts

******** OBJECT DATA ********

	DATA

Fractal.dsp_code
	incbin	'mandel.p56'
Fractal.dsp_code_end
	even
Fractal.palette:
	dc.w	0 ;$07f3
	dc.w	$07fc,$07f9,$07f6,$07f3,$07f0,$07ed,$07ea,$07e7,$07e4,$07e1
	dc.w	$1fe0,$37e0,$4fe0,$67e0,$7fe0,$97e0,$afe0,$c7e0,$dfe0,$f7e0
	dc.w	$ff20,$fe60,$fda0,$fce0,$fc20,$fb60,$faa0,$f9e0,$f920,$f860
	dc.w	$f803,$f806,$f809,$f80c,$f80f,$f812,$f815,$f818,$f81b,$f81e
	dc.w	$e01f,$c81f,$b01f,$981f,$801f,$681f,$501f,$381f,$201f,$081f
	dc.w	$00df,$019f,$025f,$031f,$03df,$049f,$055f,$061f,$06df,$079f

; Point format = x coord * 1024, y coord * 1024, time value (might change later), 
Fractal.points
;Fractal.xcoords	dc.w	-2500, -1900,-1800,-1700,-1500,-1200,-1000, -800, -750, -750, -750, -500,  500
;Fractal.ycoords	dc.w	    0,    20,   50,   70,  100,  400,  300,  200,    0,  400,  500,  700,  800
;Fractal.zcoords	dc.w	  100,   300,  400,  450,  200,  200,  200,  200,  200,  200,  200,  200,  200
;Fractal.tvalues	dc.w	   -1,     0, 2000, 4000, 7000,10000,12000,14000,16000,17000,18000,21000,26000

;Fractal.xcoords	dc.w	 -10160,-10160,-10160,-10160
;Fractal.xcoords	dc.w	 -5000,-5000,-5000,-5000
;Fractal.ycoords	dc.w	   3200,  3200,  3200,  3200
;Fractal.zcoords	dc.w	  7000, 7000, 7000, 7000
;Fractal.tvalues	dc.w	   -1,    0, 5000, 7000

Fractal.xcoords	dc.w	 -5280,-5180,-5080,-4800,-4500,-4200,-3800,-3000,-2000
Fractal.ycoords	dc.w	  1800, 1500, 1300, 1200, 1250, 1300, 1100, 1000, 1300
Fractal.zcoords	dc.w	  8000,  40,  20,  20,  40,  40,  20, 100, 160
Fractal.tvalues	dc.w	    -1,    0, 2000, 4000, 6000, 7000, 8000,10000,12000
Fractal.npoints =	(*-Fractal.tvalues)/2

Fractal.speed	dc.w	1

******** OBJECT RESERVES ********

	BSS

Fractal.orgtimr	ds.l	1
Fractal.buffer	ds.w	Fractal.xres
Fractal.dbltbl	ds.l	64*64
Fractal.dbltbl2	ds.l	64*64
Fractal.screen	ds.w	Fractal.xres*Fractal.yres+1

******** END OF DEMO-EFFECT OBJECT ********