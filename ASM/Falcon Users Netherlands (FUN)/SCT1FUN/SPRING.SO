* Object skeleton used by DEMOS1.S or DASTD.S (v2.0)
* v1.0: * Monitormode selection.
*       * SET_RES routine vbl-synced.
*       * Screenaddress-setting optimised.
*
* v1.1: * Automaticly initializes screenbuffers and resolution.
*       * Returns resultcode in INIT routine.
*       * Minor optimisations.

******** OBJECT EQUATES ********

Spring.MASS:	=	$1000			; mass of spring (8:8)
Spring.FRICTION:=	$0080			; Friction (8:8)

******** OBJECT TABLE ********

* Must be first in object!!
Spring.table:
	DC.L	Spring.mainLoop
	DC.L	Spring.init
	DC.L	Spring.setRes
* Add more addresses here..
	DC.L	0

******** RESOLUTION SETTING ROUTINE ********

Spring.setRes:
	IFEQ	testmode
	move.l	#rts,vbl_gfx

	move.w	$0468.w,d0
.ck468:	cmp.w	$0468.w,d0
	beq.s	.ck468
	move.w	monitormode,d0
	cmpi.w	#vga60,d0
	beq.s	.vga60
	cmpi.w	#vga100,d0
	beq.s	.vga100
	cmpi.w	#rgb50,d0
	beq.s	.rgb50
* Unknown monitormode..
	rts
.vga60:	bra.l	vga60_16bit_320_200
.vga100:bra.l	vga100_16bit_320_200
.rgb50:	bra.l	rgb50_16bit_320_200
	ENDC
	rts

******** INIT SUBROUTINE ********

* OUTPUT: d0.l: 0   = All clear.
*               neg = Error! Not initialized!
Spring.init:
* Insert pre-running initialising stuff here! Loading, precalculating, etc.
.success:
	moveq	#0,d0
	rts
.error:	moveq	#-1,d0
	rts

******** REALTIME INIT SUBROUTINE ********

Spring.realtimeInit:
* Insert all realtime initialization here (i.e. usage of shared mem, etc.).
	rts

******** SCREENINIT SUBROUTINE ********

Spring.initScreen:
	IFEQ	testmode
	movea.l	scr,a0
	bsr	CLEAR_320200TSCR
	ENDC
	rts

******** MAINLOOP SUBROUTINE ********

Spring.mainLoop:
	move.l	frmcnt,d0
	sub.l	lastframecount,d0
	bne.s	.screen_done
	bsr	Spring.initScreen
.screen_done:

	bsr	Spring.wipeLast
	bsr	Spring.incTime
	bsr	Spring.calcX
	bsr	Spring.plot

	IFEQ	testmode
	lea	scr,a0
	move.l	(a0)+,d0
	move.l	d0,d1
	lsr.w	#8,d0
	move.l	d0,$ffff8200.w
	move.b	d1,$ffff820d.w
	ENDC

	move.l	frmcnt,d0
	sub.l	lastframecount,d0
	bne.s	.res_done
	bsr	Spring.setRes
.res_done:

	move.w	$0468.w,d0
.wait:	cmp.w	$0468.w,d0
	beq.s	.wait

	rts

******** OBJECT SUBROUTINES ********

Spring.wipeLast:
	movea.l	scr,a0
	move.w	Spring.lastPlot,d1
	adda.l	#(320*100+160)*2,a0
	move.w	#$0000,(a0,d1.w*2)
	rts

Spring.incTime:
	move.w	Spring.x_1,Spring.x_2
	move.w	Spring.x,Spring.x_1
	rts

; x[t] = f[t] -M(x[t]-2x[t-1]+x[t-2]) -B(x[t]-x[t-1])
; x[t] = (f[t]-M(x[t-2]-2x[t-1])+Bx[t-1])(1+M+B)^-1
Spring.calcX:
; Calculate f[t]. This is some periodic delta pulse.
	clr.l	d1
	move.l	frmcnt,d0
	andi.w	#$01FF,d0
	bne.s	.end_pulse
	move.l	#$00100000,d1
.end_pulse:
; d1.l=f[t] (16:16)

; Calculate second term: M(x[t-2]-2x[t-1])
	move.w	Spring.x_2,d0
	move.w	Spring.x_1,d2
	sub.w	d2,d0
	sub.w	d2,d0
	muls.w	#Spring.MASS,d0
; d0.l=M(x[t-2]-2x[t-1]) (16:16)

; Calculate third term: Bx[t-1]
	move.w	Spring.x_1,d2
	muls.w	#Spring.FRICTION,d2
; d2.l=Bx[t-1] (16:16)

; Calculate second factor: 1+B+M
	move.w	#$0100+Spring.FRICTION+Spring.MASS,d3

; Calculate first factor: f[t]-M(x[t-2]-2x[t-1])+Bx[t-1]
	sub.l	d0,d1			; d1.w=f[t]-M(x[t-2]-2x[t-1])
	add.l	d2,d1
; d1.w=f[t]-M(x[t-2]-2x[t-1])+Bx[t-1]

; Divide the first factor by the second.
	divs.w	d3,d1
	move.w	d1,Spring.x
	rts

Spring.plot:
	move.w	Spring.x,d1
; d1.w=x[t]
	asr.w	#2,d1
	move.w	d1,Spring.lastPlot
	movea.l	scr,a0
	adda.l	#(320*100+160)*2,a0
	move.w	#$FFFF,(a0,d1.w*2)
	rts

******** OBJECT DATA ********

	DATA



******** OBJECT RESERVES ********

	BSS

Spring.x:
	DS.W	1
Spring.x_1:
	DS.W	1
Spring.x_2:
	DS.W	1
Spring.lastPlot:
	DS.W	1

******** END OF DEMO-EFFECT OBJECT ********