* Object skeleton used by DEMOS1.S or DASTD.S (v2.0)
* v1.0: * Monitormode selection.
*       * SET_RES routine vbl-synced.
*       * Screenaddress-setting optimised.
*
* v1.1: * Automaticly initializes screenbuffers and resolution.
*       * Returns resultcode in INIT routine.
*       * Minor optimisations.

******** OBJECT EQUATES ********

Font.HIGHLIGHTS:	=	0

******** OBJECT TABLE ********

* Must be first in object!!
Font.table:
	DC.L	Font.mainLoop
	DC.L	Font.init
	DC.L	Font.setRes
	DC.L	Font.incX
	DC.L	Font.incY
	DC.L	0

******** RESOLUTION SETTING ROUTINE ********

Font.setRes:
	IFEQ	testmode
	move.l	#rts,vbl_gfx

	move.w	$0468.w,d0
.ck468:	cmp.w	$0468.w,d0
	beq.s	.ck468
	move.w	monitormode,d0
	cmpi.w	#vga60,d0
	beq.s	.vga60
	cmpi.w	#vga100,d0
	beq.s	.vga100
	cmpi.w	#rgb50,d0
	beq.s	.rgb50
* Unknown monitormode..
	rts
.vga60:	bra.l	vga60_16bit_160_200
.vga100:bra.l	vga100_16bit_160_100
.rgb50:	bra.l	rgb50_16bit_320_100
	ENDC
	rts

******** INIT SUBROUTINE ********

* OUTPUT: d0.l: 0   = All clear.
*               neg = Error! Not initialized!
Font.init:
	lea	Font.flowPal,a1
	lea	Font.pal,a0
	bsr	Font.makeColorFlow

	IFNE	Font.HIGHLIGHTS
	lea	Font.backFlowPal,a1
	lea	Font.backPal,a0
	bsr	Font.makeColorFlow
	ENDC

	IFNE	Font.HIGHLIGHTS
	lea	Font.pal+120*2,a0
	REPT	6
	clr.l	(a0)+
	ENDR
	ENDC

	IFNE	Font.HIGHLIGHTS
	lea	Font.pal+192*2,a0
	REPT	8
	clr.l	(a0)+
	ENDR
	ELSE
	lea	Font.pal+184*2,a0
	REPT	8
	clr.l	(a0)+
	ENDR
	ENDC

	bsr	Font.clearDest

	lea	Font.charTable,a1
	move.w	(a1)+,d7
	ble.s	.error
	subq.w	#1,d7

.loop:	lea	Font.charStructure,a5
	move.l	(a1),(a5)
	move.l	a1,-(sp)
	move.w	d7,-(sp)
	bsr	Font.calcChar
	move.w	(sp)+,d7
	movea.l	(sp)+,a1

	lea	Font.charMaskStructure,a5
	move.l	(a1)+,(a5)
	move.l	a1,-(sp)
	move.w	d7,-(sp)
	bsr	Font.calcChar
	move.w	(sp)+,d7
	movea.l	(sp)+,a1
	dbra	d7,.loop

.success:
	moveq	#0,d0
	rts
.error:	moveq	#-1,d0
	rts

******** REALTIME INIT SUBROUTINE ********

Font.realtimeInit:
* Insert all realtime initialization here (i.e. usage of shared mem, etc.).
	rts

******** SCREENINIT SUBROUTINE ********

Font.initScreen:
* Insert screenarea initialising, etc. in here!
	rts

******** MAINLOOP SUBROUTINE ********

Font.mainLoop:
	move.l	frmcnt,d0
	sub.l	lastframecount,d0
	bne.s	.end_realtime_init
	move.l	d0,-(sp)
	bsr	Font.realtimeInit
	move.l	(sp)+,d0
.end_realtime_init:
	cmpi.l	#3,d0
	bhs.s	.end_screeninit
	bsr	Font.initScreen
.end_screeninit:

	bsr	Font.paint

	IFEQ	testmode
	lea	scr,a0
	move.l	(a0)+,d0
	move.l	(a0)+,d1
	move.l	(a0),-4(a0)
	move.l	d0,(a0)
	move.l	d1,-8(a0)
	move.l	d0,d1
	lsr.w	#8,d0
	move.l	d0,$ffff8200.w
	move.b	d1,$ffff820d.w
	ENDC

	move.l	frmcnt,d0
	sub.l	lastframecount,d0
	bne.s	.res_done
	bsr	Font.setRes
.res_done:

	rts

******** OBJECT SUBROUTINES ********

Font.incX:
	move.w	Font.xOffset,d0
	addq.b	#8,d0
	move.w	d0,Font.xOffset
	rts

Font.incY:
	move.w	Font.yOffset,d0
	addq.b	#8,d0
	move.w	d0,Font.yOffset
	rts

Font.clearDest:
	lea	Font.charBuffer-256*2,a0
	move.w	#256-1,d7
.preloop:
	move.w	#$00FF,(a0)+
	dbra	d7,.preloop
	move.w	#256*256-1,d7
.loop:	move.w	#$00FF,(a0)+
	dbra	d7,.loop
	rts

; structure explanation:
; long: rectangle addy
; long: destination addy
; long: pal-increment
; long: palette addy
; INPUT:
; a5: structure
Font.calcChar:
	movea.l	(a5)+,a1			; a1:rectangle

; First clear the bounding window.
	lea	Font.charBuffer,a0		; Draw blocks to make logos, etc.
	clr.l	d0
	move.b	(a1)+,d0
	move.w	d0,.window_x
	lea	(a0,d0.l*2),a0

	move.b	(a1)+,d0
	move.w	d0,.window_y
	mulu.w	#256*2,d0
	adda.l	d0,a0

	clr.l	d2
	move.b	(a1)+,d2
	move.w	d2,.window_w
	move.w	#256,d3
	sub.w	d2,d3
	add.w	d3,d3
	subq.w	#1,d2

	clr.l	d1
	move.b	(a1)+,d1
	move.w	d1,.window_h
	subq.w	#1,d1

.clearheight:
	move.w	d2,d0

.clearwidth:
	move.w	#$00FF,(a0)+
	dbf	d0,.clearwidth

	adda.w	d3,a0
	dbf	d1,.clearheight

; Now put in the rectangles.
.next:	lea	Font.charBuffer,a0		; Draw blocks to make logos, etc.
	clr.l	d0
	move.b	(a1)+,d0
	beq.s	.finished
	lea	(a0,d0.l*2),a0

	move.b	(a1)+,d0
	mulu.w	#256*2,d0
	adda.l	d0,a0

	clr.l	d2
	move.b	(a1)+,d2
	move.w	#256,d3
	sub.w	d2,d3
	add.w	d3,d3
	subq.w	#1,d2

	clr.l	d1
	move.b	(a1)+,d1
	subq.w	#1,d1

.height:move.w	d2,d0

.width:	clr.w	(a0)+
	dbf	d0,.width

	adda.w	d3,a0
	dbf	d1,.height

	bra.s	.next
.finished:

; a5: char structure + 4
; Smooth it up..
	moveq	#6-1,d4			; Smooth it to get colour -

.again:	movea.l	a5,a3			; index's from 0-255
	lea	Font.charBuffer,a0
	movea.l	(a3)+,a4
	move.l	(a3)+,d5
	movea.l	(a3),a2
	clr.l	d1
	move.w	.window_y(pc),d1
	lsl.w	#8,d1
	add.w	.window_x(pc),d1
	lea	(a0,d1.l*2),a0
	lea	(a4,d1.l*2),a4
	move.w	.window_h(pc),d6
	subq.w	#1,d6

.yloop:	move.w	.window_w(pc),d7
	subq.w	#1,d7

.loop:	move.w	+2(a0),d1
	add.w	-2(a0),d1
	add.w	+256*2(a0),d1
	add.w	-256*2(a0),d1
	lsr.w	#2,d1
	move.w	d1,(a0)+
	move.w	(a2,d1.w*2),(a4)+
	dbf	d7,.loop

	move.w	#256,d0
	sub.w	.window_w(pc),d0
	lea	(a0,d0.w*2),a0
	lea	(a4,d0.w*2),a4
	adda.w	d5,a2
	dbf	d6,.yloop

	dbf	d4,.again

	rts

.window_x:
	DC.W	0
.window_y:
	DC.W	0
.window_w:
	DC.W	0
.window_h:
	DC.W	0

; Paint with mask.
Font.paint:
	movea.l	scr,a0
	lea	Font.destBuffer,a1
	lea	Font.destMaskBuffer,a2

	clr.l	d0
	move.w	Font.yOffset,d0
	lsl.w	#8,d0
	add.w	Font.xOffset,d0
	lea	(a1,d0.l*2),a1
	lea	(a2,d0.l*2),a2

; a0: screen
; a1: piccy
; a2: shadow piccy

	move.w	monitormode,d0
	cmpi.w	#vga60,d0
	beq.s	Font.paintVga60
	cmpi.w	#vga100,d0
	beq.s	Font.paintVga100
	cmpi.w	#rgb50,d0
	beq.s	Font.paintRgb50
* Unknown monitormode..
	rts

Font.paintVga60:
	lea	160*2(a0),a3
	moveq	#100-1,d7

.yloop:	move.w	#160-1,d6

.xloop:	move.w	(a2)+,d2
	move.w	(a1)+,d1
	bne.s	.draw
	move.w	d2,(a0)+
	move.w	d2,(a3)+
	dbf	d6,.xloop
	bra.s	.end_xloop
.draw:	move.w	d1,(a0)+
	move.w	d1,(a3)+
	dbf	d6,.xloop
.end_xloop:

	lea	(256-160)*2(a1),a1
	lea	(256-160)*2(a2),a2
	lea	160*2(a0),a0
	lea	160*2(a3),a3
	dbra	d7,.yloop
	rts

Font.paintVga100:
	moveq	#100-1,d7

.yloop:	move.w	#160-1,d6

.xloop:	move.w	(a2)+,d2
	move.w	(a1)+,d1
	bne.s	.draw
	move.w	d2,(a0)+
	dbf	d6,.xloop
	bra.s	.end_xloop
.draw:	move.w	d1,(a0)+
	dbf	d6,.xloop
.end_xloop:

	lea	(256-160)*2(a1),a1
	lea	(256-160)*2(a2),a2
	dbra	d7,.yloop
	rts

Font.paintRgb50:
	moveq	#100-1,d7

.yloop:	move.w	#160-1,d6

.xloop:	move.w	(a2)+,d2
	move.w	(a1)+,d1
	bne.s	.draw
	move.w	d2,(a0)+
	move.w	d2,(a0)+
	dbf	d6,.xloop
	bra.s	.end_xloop
.draw:	move.w	d1,(a0)+
	move.w	d1,(a0)+
	dbf	d6,.xloop
.end_xloop:

	lea	(256-160)*2(a1),a1
	lea	(256-160)*2(a2),a2
	dbra	d7,.yloop
	rts

; Paint with mask.
; INPUT:
; a0: 256*256 buffer to paint to
Font.paintToTexture:
	lea	Font.destBuffer,a1
	lea	Font.destMaskBuffer,a2
; a0: dest
; a1: piccy
; a2: shadow piccy

	move.w	#256-1,d7

.yloop:	move.w	#256-1,d6

.xloop:	move.w	(a2)+,d2
	move.w	(a1)+,d1
	bne.s	.draw
	move.w	d2,(a0)+
	dbf	d6,.xloop
	bra.s	.end_xloop
.draw:	move.w	d1,(a0)+
	dbf	d6,.xloop
.end_xloop:

	dbra	d7,.yloop
	rts

; Generates a highcolor pallette from a (truecolor) flowtable.
; INPUT:
; a0: highcolor buffer to write to
; a1: instruction table 
Font.makeColorFlow:
	move.w	(a1)+,d7
	moveq	#0,d0
	move.w	(a1)+,d0
	moveq	#1,d6
	lsl.w	d0,d6
	move.w	d7,d5
	mulu.w	d6,d5
	subq.w	#1,d6
	movea.w	d6,a5
	subq.w	#1,d7

.loop:	move.l	(a1)+,d1
	move.l	(a1),d2
	move.l	d1,d3
	move.l	d2,d4
	lsr.l	#8,d3
	lsr.l	#8,d4
	clr.w	d3
	clr.w	d4
	sub.l	d3,d4
	asr.l	d0,d4
	move.l	a0,a6

.red_loop:
	swap	d3
	move.w	d3,d5
	lsl.w	#8,d5
	andi.w	#$f800,d5
	move.w	d5,(a0)+
	swap	d3
	add.l	d4,d3
	dbra	d6,.red_loop

	move.w	a5,d6
	move.l	a6,a0
	move.l	d1,d3
	move.l	d2,d4
	andi.l	#$00ff0000,d3
	andi.l	#$00ff0000,d4
	sub.l	d3,d4
	asr.l	d0,d4

.green_loop:
	swap	d3
	move.w	d3,d5
	lsl.w	#3,d5
	andi.w	#$07e0,d5
	or.w	d5,(a0)+
	swap	d3
	add.l	d4,d3
	dbra	d6,.green_loop

	move.l	a6,a0
	move.w	a5,d6
	moveq	#0,d3
	moveq	#0,d4
	move.b	d1,d3
	move.b	d2,d4
	swap	d3
	swap	d4
	sub.l	d3,d4
	asr.l	d0,d4

.blue_loop:
	swap	d3
	move.w	d3,d5
	lsr.w	#3,d5
	andi.w	#$001f,d5
	or.w	d5,(a0)+
	swap	d3
	add.l	d4,d3
	dbra	d6,.blue_loop

	move.w	a5,d6
	dbra	d7,.loop
	rts

******** OBJECT DATA ********

	DATA

Font.charTable:
	DC.W	(.end-.start)/4
.start:	DC.L	Font.charS
	DC.L	Font.charC
	DC.L	Font.charT
	DC.L	Font.char1
	DC.L	Font.charF
	DC.L	Font.charU
	DC.L	Font.charN
.end:

; long: rectangle addy
; long: destination addy
; long: pal-inc
; long: palette addy
Font.charStructure:
	DC.L	Font.charS
	DC.L	Font.destBuffer
	DC.L	4
	DC.L	Font.pal
Font.charMaskStructure:
	DC.L	Font.charS
	DC.L	Font.destMaskBuffer
	DC.L	2
	DC.L	Font.backPal

; Rectangle characters..

; width=50+10, height=55+10
Font.charS:
	DC.B	000,015,060,065
	DC.B	005,015,050,015
	DC.B	005,030,015,020			; lx, ty, w, h
	DC.B	005,040,050,015
	DC.B	040,045,015,020			; lx, ty, w, h
	DC.B	005,065,050,015
	DC.B	0				; terminator (i'll be back)

; width=50+10, height=55+10
Font.charC:
	DC.B	060,015,060,065
	DC.B	005+55,015,050,015
	DC.B	005+55,015,015,055			; lx, ty, w, h
	DC.B	005+55,065,050,015			; lx, ty, w, h
	DC.B	0				; terminator (i'll be back)

; width=50+10, height=55+10
Font.charT:
	DC.B	110,015,060,065
	DC.B	005+110,015,050,020
	DC.B	020+110,015,020,065			; lx, ty, w, h
	DC.B	0				; terminator (i'll be back)

; width=40+10, height=55+10
Font.char1:
	DC.B	165,015,050,065
	DC.B	015+165,015,020,065			; lx, ty, w, h
	DC.B	010+165,020,020,015
	DC.B	005+165,060,040,020
	DC.B	0				; terminator (i'll be back)

; width=50+10, height=55+10
Font.charF:
	DC.B	000,015+70,060,065
	DC.B	005,015+70,020,065			; lx, ty, w, h
	DC.B	005,015+70,050,015
	DC.B	005,035+70,040,015
	DC.B	0				; terminator (i'll be back)

; width=50+10, height=55+10
Font.charU:
	DC.B	060,015+70,060,065
	DC.B	005+55,015+70,020,065			; lx, ty, w, h
	DC.B	005+55,060+70,050,020
	DC.B	035+55,015+70,020,065
	DC.B	0				; terminator (i'll be back)

; width=50+10, height=55+10
Font.charN:
	DC.B	110,015+70,060,065
	DC.B	005+110,015+70,020,065			; lx, ty, w, h
	DC.B	005+110,015+70,050,020
	DC.B	035+110,015+70,020,065
	DC.B	0				; terminator (i'll be back)

	EVEN

Font.flowPal:
	DC.W	(.end-.start)/4
	DC.W	5			;2^6 * 4 = 2^(6+2)=256
.start:
	IFNE	0
	DC.L	$000000FF
	DC.L	$FFFF00FF
	DC.L	$FF7F0000
	DC.L	$FF7F0000
	DC.L	$7F000000
	DC.L	$00000000
	DC.L	$00000000
	DC.L	$0000007F
	ELSE
	DC.L	$00FF00FF
	DC.L	$000000FF
	DC.L	$FF0000FF
	DC.L	$FF000000
	DC.L	$FFFF0000
	DC.L	$00FF0000
	ENDC
.end:

Font.backFlowPal:
	DC.W	(.end-.start)/4
	DC.W	3			;2^6 * 4 = 2^(6+2)=256
.start:
	DC.L	$FFFF00FF
	DC.L	$FFFF00FF
	DC.L	$FFFF00FF
	DC.L	$FFFF00FF
	DC.L	$FFFF00FF
	DC.L	$FFFF00FF
	DC.L	$FFFF00FF
	DC.L	$FFFF00FF
	DC.L	$FFFF00FF
	DC.L	$FFFF00FF
	DC.L	$FFFF00FF
	DC.L	$FFFF00FF
	DC.L	$FFFF00FF
	DC.L	$FFFF00FF
	DC.L	$FFFF00FF
	DC.L	$FFFF00FF
	DC.L	$FFFF00FF
	REPT	64-17
	DC.L	$00000000
	ENDR
.end:

Font.pal:
	DS.W	1024
Font.backPal:
	DS.W	1024

Font.xOffset:
	DC.W	0
Font.yOffset:
	DC.W	0

******** OBJECT RESERVES ********

	BSS

	DS.W	256
Font.charBuffer:
	DS.W	256*256

; This should contain the main character.
	DS.W	256
Font.destBuffer:
	DS.W	256*256
; This should contain a mask character.
	DS.W	256
Font.destMaskBuffer:
	DS.W	256*256