* Object skeleton used by DEMOS1.S or DASTD.S (v1.5)
* v1.0: * Monitormode selection.
*       * SET_RES routine vbl-synced.
*       * Screenaddress-setting optimised.

******** OBJECT EQUS ********

******** OBJECT TABLE ********

* Must be first in object!!
demofx_tbl:
	DC.L	WATERMAINLOOP
	DC.L	INIT_WATER
	DC.L	SET_WATERRES
* Add more addresses here..
	DC.L	0

******** RESOLUTION SETTING ROUTINE ********

SET_WATERRES:
	IFEQ	testmode
	move.l	$0466.w,d0
.ck466:	cmp.l	$0466.w,d0
	beq.s	.ck466
	move.w	monitormode,d0
	cmpi.w	#vga50,d0
	beq.s	.vga50
	cmpi.w	#vga100,d0
	beq.s	.vga100
	cmpi.w	#rgb50,d0
	beq.s	.rgb50
* Unknown monitormode..
	rts
.vga50:	lea	v3220t5_fv,a0
	bsr	CHANGE_FVFAST
	rts
.vga100:
;
;	
	rts
.rgb50:	lea	r3210t5_fv,a0
	bsr	CHANGE_FVFAST
	ENDC
	rts

******** INIT SUBROUTINE ********

INIT_WATER:
	move.l	#flowtable,a1
	move.l	#truepal,a0
	bsr	MAKE_COLORFLOW
	rts

******** MAINLOOP SUBROUTINE ********

WATERMAINLOOP:
	IFEQ	objectmode
	IFEQ	testmode
	addq.l	#1,frmcnt
	ENDC
	ENDC

;	lea	sine_tbl,a0
;	move.w	$4bc.w,d0
;	add.w	d0,d0
;	Do_SinModulo	d0
;	Get_SinCos	a0,d0,d1,d2
;
;	moveq	#9,d0
;	asr.l	d0,d1
;	addq.w	#1,d0
;	asr.l	d0,d2	
;	addi.l	#160/2,d1
;	addi.w	#100/2,d2
;	mulu.w	#160,d2
	movea.l	water_front,a0
;	add.l	d2,d1
;	move.b	#73,(a0,d1.l)

	moveq	#0,d1
	move.w	$4bc.w,d0
	move.w	$468.w,d1
	eor.w	d1,d0
	ror.w	d1,d0
	lsr.w	#2,d0
	move.w	d0,d1
	lsr.w	#4,d0
	sub.w	d0,d1
	move.b	#73,(a0,d1.l)

	bsr	PLOT_WATER

	IFEQ	testmode
	lea	scr,a0
	move.l	(a0)+,d0
	move.l	(a0)+,d1
	move.l	(a0),-4(a0)
	move.l	d0,(a0)
	move.l	d1,-8(a0)
	move.l	d0,d1
	lsr.w	#8,d0
	move.l	d0,$ffff8200.w
	move.b	d1,$ffff820d.w
	ENDC
	rts

******** OBJECT DATA ********

	DATA

water_front:
	DC.L	water1_buf
water_back:
	DC.L	water2_buf

flowtable:
	dc.w	16
	dc.w	4
	dc.l	$00000000	;dc.l	$00000000
	dc.l	$0000001f	;dc.l	$003f0000
	dc.l	$0000002f	;dc.l	$007f0000
	dc.l	$0000003f	;dc.l	$3fdf0000
	dc.l	$0000004f	;dc.l	$7fff0000
	dc.l	$0000005f	;dc.l	$dfff0000
	dc.l	$0000006f	;dc.l	$ffff0000
	dc.l	$0000007f	;dc.l	$ffff003f
	dc.l	$000000ff	;dc.l	$ffff007f
	dc.l	$003f00ff	;dc.l	$ffff00bf
	dc.l	$00bf00ff	;dc.l	$ffff00ff
	dc.l	$3fff00ff	;dc.l	$ffff00ff
	dc.l	$7fff00ff	;dc.l	$ffff00ff
	dc.l	$bfff00ff	;dc.l	$ffff00ff
	dc.l	$ffff00ff	;dc.l	$ffff00ff
	dc.l	$ffff00ff	;dc.l	$ffff00ff
	dc.l	$ffff00ff	;dc.l	$ffff00ff

******** OBJECT RESERVES ********

	BSS

funglepicadr:
	DS.L	1

	DS.W	1

realpal	ds.w	256
fire_pal
	ds.l	256*2*256			* Optimised lookup table!
truepal	ds.l	256+1

	DS.B	320
water1_buf:
	DS.B	320*100
	DS.B	320
water2_buf:
	DS.B	320*100
	DS.B	320

******** OBJECT SUBROUTINES ********

	TEXT

MAKE_COLORFLOW:
	move.w	(a1)+,d7
	moveq	#0,d0
	move.w	(a1)+,d0
	moveq	#1,d6
	lsl.w	d0,d6
	move.w	d7,d5
	mulu.w	d6,d5
	move.w	d5,(a0)+
	subq.w	#1,d6
	move.w	d6,d5
	subq.w	#1,d7

.biglop	move.l	(a1)+,d1
	move.l	(a1),d2
	moveq.l	#0,d3
	move.l	d3,d4
	move.b	d1,d3
	move.b	d2,d4
	swap	d3
	swap	d4
	sub.l	d3,d4
	asr.l	d0,d4
	move.l	a0,a6
.lop1	swap	d3
	move.b	d3,3(a0)
	addq.l	#4,a0
	swap	d3
	add.l	d4,d3
	dbra	d6,.lop1
	move.w	d5,d6
	move.l	a6,a0
	moveq	#0,d3
	move.l	d3,d4
	swap	d1
	swap	d2
	move.b	d1,d3
	move.b	d2,d4
	swap	d3
	swap	d4
	sub.l	d3,d4
	asr.l	d0,d4
.lop2	swap	d3
	move.b	d3,1(a0)
	addq.l	#4,a0
	swap	d3
	add.l	d4,d3
	dbra	d6,.lop2
	move.l	a6,a0
	move.w	d5,d6
	moveq.l	#0,d3
	move.l	d3,d4
	swap	d1
	swap	d2
	rol.l	#8,d1
	rol.l	#8,d2
	move.b	d1,d3
	move.b	d2,d4
	swap	d3
	swap	d4
	sub.l	d3,d4
	asr.l	d0,d4
.lop3	swap	d3
	move.b	d3,(a0)
	addq.l	#4,a0
	swap	d3
	add.l	d4,d3
	dbra	d6,.lop3
	move.w	d5,d6
	dbra	d7,.biglop

	move.l	#truepal,a1
	move.l	#realpal,a0
	move.w	(a1)+,d7

.loop	moveq	#0,d0
	move.b	(a1)+,d0
	andi.b	#%11111000,d0
	lsl.w	#8,d0
	moveq	#0,d1
	move.b	(a1)+,d1
	andi.b	#%11111100,d1
	lsl.w	#3,d1
	moveq	#0,d2
	addq.l	#1,a1
	move.b	(a1)+,d2
	lsr.w	#3,d2
	or.w	d2,d0
	or.w	d1,d0
	move.w	d0,(a0)+
	dbra	d7,.loop

	lea	fire_pal+4,a0
	move.w	#256-1,d7
.bcplop	lea	realpal+256,a1
	moveq	#128-1,d6
.icplop	move.w	(a1),(a0)+
	move.w	(a1)+,(a0)+
	addq	#4,a0
	dbra	d6,.icplop
	lea	realpal,a1
	moveq	#128-1,d6
.icp2lop:
	move.w	(a1),(a0)+
	move.w	(a1)+,(a0)+
	addq	#4,a0
	dbra	d6,.icp2lop
	dbra	d7,.bcplop

	lea	realpal,a1
	lea	fire_pal,a0
	move.w	#256-1,d7
.bcplp2	move.w	(a1)+,d0
	move.w	d0,d1
	swap	d0
	move.w	d1,d0
	move.w	#256-1,d6
.icplp2	move.l	d0,(a0)
	addq	#8,a0
	dbra	d6,.icplp2
	dbra	d7,.bcplp2
	rts

PLOT_WATER:
	movea.l	scr,a0

	lea	fire_pal+256*128*8,a6

	Movea.l	water_back,a1
	Movea.l	water_front,a5
	Move.l	a5,water_back
	Move.l	a1,water_front

	Lea	-1(a1),a2
	Lea	160(a1),a3
	Lea	-160(a1),a4
	Addq	#1,a1

	Move.w	#((160*100)/4)-1,d7

	Move.l	#$40404040,d2	;sign mask
	Move.l	#$7f7f7f7f,d3	;value mask

.loop:	Move.l	(a4)+,d0	;add boundry pixels
	Add.l	(a3)+,d0
	Add.l	(a2)+,d0
	Add.l	(a1)+,d0
	Lsr.l	#1,d0 
	Sub.l	(a5),d0

	Move.l	d0,d1		;bit 6 = sign (7 = trash)
	And.l	d2,d1		;mask sign

	Add.l	d1,d1		; << 1
	And.l	d3,d0
	Or.l	d1,d0		;Restore Sign

	Lsr.l	#7,d1
	Add.l	d1,d0		;d0 - d0 >> 7 (asr)

	Move.l	d0,(a5)+

	move.l	d0,d1
	swap	d0
	move.l	(a6,d0.w*8),(a0)+
	move.l	4(a6,d0.w*8),(a0)+
	move.l	(a6,d1.w*8),(a0)+
	move.l	4(a6,d1.w*8),(a0)+

	dbra	d7,.loop
	rts

******** END OF DEMO-EFFECT OBJECT ********