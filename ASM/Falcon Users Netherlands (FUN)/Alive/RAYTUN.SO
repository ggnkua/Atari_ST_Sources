* Object skeleton used by DEMOS1.S or DASTD.S (v1.5)
* v1.0: * Monitormode selection.
*       * SET_RES routine vbl-synced.
*       * Screenaddress-setting optimised.

******** OBJECT EQUS ********

tunnelxblocks:	EQU	18
tunnelwidth:	EQU	tunnelxblocks*16
tunnelyblocks:	EQU	100/8
tunneldistance:	EQU	$3c00

manualtraject:	EQU	0
autotraject1:	EQU	1
autotraject2:	EQU	2
tunneltrack:	EQU	autotraject2

		RSRESET
camparam1:	RS.W	1
camparam2:	RS.W	1
camparam3:	RS.W	1
camparam4:	RS.W	1
camtblsize:	RS.W	1

******** OBJECT TABLE ********

* Must be first in object!!
demofx_tbl:
	DC.L	DEMOFXMAINLOOP
	DC.L	INIT_DEMOFX
	DC.L	SET_DEMOFXRES
* Add more addresses here..
	DC.L	0

******** RESOLUTION SETTING ROUTINE ********

SET_DEMOFXRES:
	IFEQ	testmode
	move.l	$0466.w,d0
.ck466:	cmp.l	$0466.w,d0
	beq.s	.ck466
	move.w	monitormode,d0
	cmpi.w	#vga50,d0
	beq.s	.vga50
	cmpi.w	#vga100,d0
	beq.s	.vga100
	cmpi.w	#rgb50,d0
	beq.s	.rgb50
* Unknown monitormode..
	rts
.vga50:	lea	v3220t5_fv,a0
	bsr	CHANGE_FVFAST
	rts
.vga100:
;
;	
	rts
.rgb50:	lea	r3210t5_fv,a0
	bsr	CHANGE_FVFAST
	ENDC
	rts

******** INIT SUBROUTINE ********

INIT_DEMOFX:
	movea.l	scr,a0
	bsr	CLEAR_320200TSCR
	movea.l	scr+4,a0
	bsr	CLEAR_320200TSCR
	movea.l	scr+8,a0
	bsr	CLEAR_320200TSCR

	lea	texturefilename_txt,a1
	bsr	LOAD_INCFILE
	move.l	a0,textureadr

	lea	cam_tbl,a0
	move.w	#0,camparam1(a0)
	move.w	#0,camparam2(a0)
	move.w	#0,camparam3(a0)
	move.w	#0,camparam4(a0)

	rts

******** MAINLOOP SUBROUTINE ********

DEMOFXMAINLOOP:
	IFEQ	objectmode
	IFEQ	testmode
	addq.l	#1,frmcnt
	move.w	$468.w,.old468
	ENDC
	ENDC

	bsr	CALC_TUNNELTRAJECT

	lea	grid_tbl,a1
	bsr	CALC_RAYTUNNELNEW

	movea.l	textureadr,a5
	lea	grid_tbl,a1
	bsr	PLOT_RAYTUNNEL

	IFEQ	testmode
	lea	scr,a0
	move.l	(a0)+,d0
	move.l	(a0)+,d1
	move.l	(a0),-4(a0)
	move.l	d0,(a0)
	move.l	d1,-8(a0)
	move.l	d0,d1
	lsr.w	#8,d0
	move.l	d0,$ffff8200.w
	move.b	d1,$ffff820d.w

	move.w	.old468(pc),d0
.waitvbl:
	cmp.w	$468.w,d0
	beq.s	.waitvbl

	ENDC
	rts

.old468:
	DS.W	1

******** OBJECT DATA ********

	DATA

texturefilename_txt:
	DC.B	"IRON.RAW",0
	EVEN

******** OBJECT RESERVES ********

	BSS

textureadr:	DS.L	1
grid_tbl:	DS.L	33*33*2
cam_tbl:	DS.B	camtblsize

******** OBJECT SUBROUTINES ********

	TEXT

* INPUT: a0: screenaddress
CLEAR_320200TSCR:
	moveq	#0,d0
	move.l	d0,d1
	move.l	d0,d2
	move.l	d1,d3
	move.l	d2,d4
	move.l	d3,d5
	move.l	d4,d6
	moveq	#123-1,d7
	move.l	d0,a1
	move.l	d1,a2
	move.l	d2,a3
	move.l	d3,a4
	move.l	d4,a5
	move.l	d5,a6
	adda.l	#320*200*2,a0
.loop	REPT	20
	movem.l	d0-d6/a1-a6,-(a0)
	ENDR
	dbra	d7,.loop
	movem.l	d0-d6/a1-a6,-(a0)
	movem.l	d0-d6,-(a0)
	rts

CALC_TUNNELTRAJECT:
	lea	cam_tbl,a4

	IFEQ	tunneltrack-manualtraject

	move.b	$fffffc02.w,d0
.up:	cmpi.b	#$48,d0
	bne.s	.down
	addq.w	#8,camparam1(a4)
	bra.s	.end
.down:	cmpi.b	#$50,d0
	bne.s	.left
	subq.w	#8,camparam1(a4)
	bra.s	.end
.left:	cmpi.b	#$4b,d0
	bne.s	.right
	addq.w	#8,camparam2(a4)
	bra.s	.end
.right:	cmpi.b	#$4d,d0
	bne.s	.fwd
	subq.w	#8,camparam2(a4)
	bra.s	.end
.fwd:	cmpi.b	#$4e,d0
	bne.s	.bwd
	addq.w	#4,.speed
	bra.s	.end
.bwd:	cmpi.b	#$4a,d0
	bne.s	.end
	subq.w	#4,.speed
;	bra.s	.end
.end:	move.w	.speed(pc),d0
	add.w	d0,camparam3(a4)
	ELSE
	lea	sine_tbl,a2
	move.w	$4bc.w,d0
	move.w	d0,d1
	lsr.w	#4,d0
	lsr.w	#2,d1
	;move.w	d1,camparam4(a4)
	Do_SinModulo	d1
	Get_SinCos	a2,d1,d0,d1
	asr.w	#4,d0
	asr.w	#3,d1
	move.w	d0,camparam1(a4)
	move.w	d1,camparam2(a4)
	asr.w	#1,d1
	eori.w	#$8000,d1
	Do_SinModulo	d1
	Get_Sin	a2,d1,d0
	asr.w	#2,d0
	IFEQ	tunneltrack-autotraject1	
	move.w	$4bc.w,d1
	lsl.w	#5,d1
	move.w	d1,camparam3(a4)
	ENDC
	IFEQ	tunneltrack-autotraject2
	move.w	d0,camparam3(a4)
	ENDC

	ENDC
	rts

.speed:	DC.W	0

* INPUT: a1: address of gridtable
*        a4: address of cameratable
CALC_RAYTUNNEL:
	Do_SinModulo	camparam1(a4)
	Do_SinModulo	camparam2(a4)
	lea	sine_tbl,a0
	move.w	#tunnelxblocks<<10,d7	* x end value
	swap	d7
	move.w	#tunnelyblocks<<10,d7	* y end value
	move.w	#-tunnelyblocks<<10,d1	* y start value

.yloop:	move.w	#-tunnelxblocks<<10,d0	* x start value
	swap	d7

	move.w	#tunneldistance,d2		* Screen distance by observer (ie. focal lenght!)

	move.w	camparam1(a4),d3	* Rotates ray on X axis.
	Get_SinCos	a0,d3,d3,d4	* Get sin(a) and cos(a).
	move.w	d3,d5
	move.w	d4,d6
	muls.w	d2,d3			* z*sin
	muls.w	d1,d4			* y*cos
	muls.w	d1,d5			* y*sin
	muls.w	d2,d6			* z*cos
	add.l	d5,d6			* Z
	sub.l	d3,d4			* Y
	add.l	d6,d6
	add.l	d4,d4
	swap	d6
	movea.w	d6,a3

	swap	d4
	muls.w	d4,d4			* Y^2
	move.l	d4,a5			* Saves Y^2.

.xloop:	move.w	a3,d6
	move.w	camparam2(a4),d3	* Rotate ray on Y axis.
	Get_SinCos	a0,d3,d3,d4 	* Get sin(b) and cos(b).
	move.w	d3,d5
	move.w	d4,d2
	muls.w	d0,d3			* x*sin
	muls.w	d6,d5			* Z*sin
	muls.w	d0,d2			* x*cos
	muls.w	d6,d4			* Z*cos
	add.l	d2,d5			* X
	sub.l	d3,d4			* Z
	add.l	d5,d5
	add.l	d4,d4
	move.l	d5,a2			* Store X.
	move.l	d4,a6			* Store Z.

	swap	d5
	muls.w	d5,d5			* X^2
	add.l	a5,d5			* X^2+Y^2
	addq.l	#1,d5			* Avoid division by zero.

* Now, how do sqrt? I used this routine coded by an unknown archimedes coder
* and then adapted on 6502 and 680x0 by Graham. How it works? find it by
* yourself :-) ;btw..just think that an integer number can be written as a
* product of several factor all equal to 4 and one other real factor.. :-)

* INPUT: d5.l: value to squareroot
* OUTPUT: d3.w: squareroot
	moveq	#1,d3		
	ror.l	#2,d3
	moveq	#32,d2		
.l2n:	move.l	d3,d4
	rol.l	d2,d4
	add.w	d3,d3
	cmp.l	d4,d5
	bcs.b	.no
	addq.w	#1,d3
	sub.l	d4,d5
.no:	subq.w	#2,d2
	bgt.b	.l2n

* Now we have just to perform last calculation..
 
	move.l	a6,d4			* Z
	move.l	a2,d6			* X
	asr.l	#6,d4
	asr.l	#6,d6
	divs.w	d3,d6
	divs.w	d3,d4
	add.w	camparam3(a4),d4	* Z axis camera traslation
	move.w	d4,(a1)+		* Store U.
	move.w	d6,(a1)+		* Store V.

	addi.w	#2<<10,d0		* Do next column.
	cmp.w	d7,d0
	ble.s	.xloop

	swap	d7
	addi.w	#2<<10,d1		* Do next row.
	cmp.w	d7,d1
	ble	.yloop
	rts

* INPUT: a1: address of gridtable
*        a4: address of cameratable
CALC_RAYTUNNELNEW:

		RSRESET
.x0:		RS.L	1
.y0:		RS.L	1
.z0:		RS.L	1
.x1:		RS.L	1
.y1:		RS.L	1
.z1:		RS.L	1
.x2:		RS.L	1
.y2:		RS.L	1
.z2:		RS.L	1
.cornertblsize:	RS.W	1

	Do_SinModulo	camparam1(a4)
	Do_SinModulo	camparam2(a4)
	lea	sine_tbl,a0
	move.w	#tunnelxblocks<<10,d7	* x end value
	move.w	#-tunnelxblocks<<10,d0	* x start value
	swap	d7
	move.w	#tunnelyblocks<<10,d7	* y end value
	move.w	#-tunnelyblocks<<10,d1	* y start value
	lea	.corner_tbl(pc),a5

* Precalculate 3d-transformations of the corner, so you can interpolate all the
* coordinates between those.
* Calculate (x0,y0,z0) upperleft corner of grid.
	move.w	#tunneldistance,d2	* Screen distance by observer (ie. focal lenght!)
	move.w	camparam1(a4),d3	* Rotates ray on X axis.
	Get_SinCos	a0,d3,d3,d4	* Get sin(a) and cos(a).
	move.w	d3,d5
	move.w	d4,d6
	muls.w	d2,d3			* z*sin
	muls.w	d1,d4			* y*cos
	muls.w	d1,d5			* y*sin
	muls.w	d2,d6			* z*cos
	add.l	d5,d6			* Z
	sub.l	d3,d4			* Y
	add.l	d6,d6
;	add.l	d4,d4
	swap	d6
	move.l	d4,.y0(a5)
	move.w	camparam2(a4),d3	* Rotate ray on Y axis.
	Get_SinCos	a0,d3,d3,d4 	* Get sin(b) and cos(b).
	move.w	d3,d5
	move.w	d4,d2
	muls.w	d0,d3			* x*sin
	muls.w	d6,d5			* Z*sin
	muls.w	d0,d2			* x*cos
	muls.w	d6,d4			* Z*cos
	add.l	d2,d5			* X
	sub.l	d3,d4			* Z
;	add.l	d5,d5
;	add.l	d4,d4
	move.l	d5,.x0(a5)		* Store X.
	move.l	d4,.z0(a5)		* Store Z.
* Calculate (x2,y2,z2) lower left corner of grid.
	move.w	#tunneldistance,d2	* Screen distance by observer (ie. focal lenght!)
	move.w	camparam1(a4),d3	* Rotates ray on X axis.
	Get_SinCos	a0,d3,d3,d4	* Get sin(a) and cos(a).
	move.w	d3,d5
	move.w	d4,d6
	muls.w	d2,d3			* z*sin
	muls.w	d7,d4			* y*cos
	muls.w	d7,d5			* y*sin
	muls.w	d2,d6			* z*cos
	add.l	d5,d6			* Z
	sub.l	d3,d4			* Y
	add.l	d6,d6
;	add.l	d4,d4
	swap	d6
	move.l	d4,.y2(a5)
	move.w	camparam2(a4),d3	* Rotate ray on Y axis.
	Get_SinCos	a0,d3,d3,d4 	* Get sin(b) and cos(b).
	move.w	d3,d5
	move.w	d4,d2
	muls.w	d0,d3			* x*sin
	muls.w	d6,d5			* Z*sin
	muls.w	d0,d2			* x*cos
	muls.w	d6,d4			* Z*cos
	add.l	d2,d5			* X
	sub.l	d3,d4			* Z
;	add.l	d5,d5
;	add.l	d4,d4
	move.l	d5,.x2(a5)		* Store X.
	move.l	d4,.z2(a5)		* Store Z.
* Calculate (x1,y1,z1) upper right corner of grid.
	move.w	#tunneldistance,d2	* Screen distance by observer (ie. focal lenght!)
	swap	d7
	move.w	camparam1(a4),d3	* Rotates ray on X axis.
	Get_SinCos	a0,d3,d3,d4	* Get sin(a) and cos(a).
	move.w	d3,d5
	move.w	d4,d6
	muls.w	d2,d3			* z*sin
	muls.w	d1,d4			* y*cos
	muls.w	d1,d5			* y*sin
	muls.w	d2,d6			* z*cos
	add.l	d5,d6			* Z
	sub.l	d3,d4			* Y
	add.l	d6,d6
;	add.l	d4,d4
	swap	d6
	move.l	d4,.y1(a5)
	move.w	camparam2(a4),d3	* Rotate ray on Y axis.
	Get_SinCos	a0,d3,d3,d4 	* Get sin(b) and cos(b).
	move.w	d3,d5
	move.w	d4,d2
	muls.w	d7,d3			* x*sin
	muls.w	d6,d5			* Z*sin
	muls.w	d7,d2			* x*cos
	muls.w	d6,d4			* Z*cos
	add.l	d2,d5			* X
	sub.l	d3,d4			* Z
;	add.l	d5,d5
;	add.l	d4,d4
	move.l	d5,.x1(a5)		* Store X.
	move.l	d4,.z1(a5)		* Store Z.

* Interpolate all the coordinates in the grid and do the texture-calculation.
	movea.l	a1,a0
	movem.l	.x0(a5),d0-d2
	movem.l	.x1(a5),d3-d5
	sub.l	d0,d3
	sub.l	d1,d4
	sub.l	d2,d5
	divs.l	#tunnelxblocks,d3
	divs.l	#tunnelxblocks,d4
	divs.l	#tunnelxblocks,d5
	movea.l	d3,a1
	movea.l	d4,a2
	movea.l	d5,a3
	movem.l	.x2(a5),d3-d5
	sub.l	d0,d3
	sub.l	d1,d4
	sub.l	d2,d5
	divs.l	#100/8,d3
	divs.l	#100/8,d4
	divs.l	#100/8,d5
	movem.l	d3-d5,.x2(a5)
	
	moveq	#100/8,d7

.yloop:	swap	d7
	move.w	#tunnelxblocks,d7	* x loopcounter

	move.l	d1,d6
	swap	d6
	muls.w	d6,d6			* Y^2
	movea.l	d6,a6

.xloop:	move.l	d0,d5
	swap	d5
	muls.w	d5,d5			* X^2
	add.l	a6,d5			* X^2+Y^2
	addq.l	#1,d5			* Avoid division by zero.

* Now, how do sqrt? I used this routine coded by an unknown archimedes coder
* and then adapted on 6502 and 680x0 by Graham. How it works? find it by
* yourself :-) btw..just think that an integer number can be written as a
* product of several factor all equal to 4 and one other real factor.. :-)

* INPUT: d5.l: value to squareroot
* OUTPUT: d3.w: squareroot
	moveq	#1,d3		
	ror.l	#2,d3
	moveq	#32,d6
.l2n:	move.l	d3,d4
	rol.l	d6,d4
	add.w	d3,d3
	cmp.l	d4,d5
	bcs.b	.no
	addq.w	#1,d3
	sub.l	d4,d5
.no:	subq.w	#2,d6
	bgt.b	.l2n

* Now we have just to perform last calculation..
 
	move.l	d2,d4			* Z
	move.l	d0,d6			* X
	asr.l	#6,d4
	asr.l	#6,d6
	divs.w	d3,d6
	divs.w	d3,d4
	add.w	camparam3(a4),d4	* Z axis camera translation
	move.w	d4,(a0)+		* Store U.
	move.w	d6,(a0)+		* Store V.

	add.l	a1,d0
	add.l	a2,d1
	add.l	a3,d2

	dbra	d7,.xloop

	movem.l	(a5),d0-d2
	add.l	.x2(a5),d0
	add.l	.y2(a5),d1
	add.l	.z2(a5),d2
	movem.l	d0-d2,(a5)

	swap	d7
	dbra	d7,.yloop

	rts

	longeven
.corner_tbl:
	DS.B	.cornertblsize

* Here comes the routine that puts all the stuff on screen. it's very simple..just think
* to dispose all (u,v) calculated with tracer on a grid made by 8x8 pixel square. At every
* knot you will find a different (u,v) value. Now we have to interpolate this values from
* knot to knot for every little square. I dont bother you with interpolation formulas that
* are just dumb.

* I know that actually this routine it's slow
* but this is a short code compo, that isn't? :)
* INPUT: A1: address of 33x33 (u,v) grid
*        A5: address of texture
PLOT_RAYTUNNEL:
	movea.l	scr,a0
	lea	(tunnelxblocks+1)*4(a1),a2
	lea	320-tunnelwidth(a0),a0
	moveq	#100/8-1,d7		* y loop counter
	moveq	#0,d0

.scanline:
	swap	d7
	move.w	#tunnelwidth/16-1,d7	* x loop counter
	
.square:
	movea.l	(a2)+,a4		* (u4,v4)
	move.l	(a1)+,d1		* (u1,v1)
	movea.l	(a2),a3			* (u3,v3)
	move.l	(a1),d2			* (u2,v2)
	suba.l	d1,a4			* (u4-u1,v4-v1)
	suba.l	d2,a3			* (u3-u2,v3-v2)
	lsl.l	#3,d1			* Instead divide by 8 all the increments..
	lsl.l	#3,d2			* We just multiply by 8 all the offset :)
					* In this way we have not accuracy loss.
	moveq	#8-1,d6

.Yspan:	move.l	d1,d3			* (uL,vL)
	move.l	d2,d4			* (uR,vR)
	sub.l	d1,d4			* (uR-uL,vR-vL)
	asr.l	#3,d4
	lsl.w	#3,d4
	asr.w	#3,d4

.Xspan:
	REPT	8
	move.w	d3,d0
	move.l	d3,d5
	rol.l	#8,d5
	move.b	d5,d0
	move.l	(a5,d0.l*4),(a0)+
	add.l	d4,d3			* (u+du,v+dv)
	ENDR

	lea	(320-16)*2(a0),a0	* next span
	add.l	a4,d1			* (uL+duL,vL+dvL)
	add.l	a3,d2			* (ur+duR,vR+dvR)
	dbra	d6,.Yspan

	lea	(-8*320+16)*2(a0),a0	* next nice little square
	dbra	d7,.square

	addq	#4,a1
	addq	#4,a2
	lea	((320-tunnelwidth)+320*7)*2(a0),a0
	swap	d7
	dbra	d7,.scanline
	rts

******** END OF DEMO-EFFECT OBJECT ********