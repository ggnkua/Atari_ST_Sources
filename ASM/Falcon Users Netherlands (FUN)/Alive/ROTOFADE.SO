* Object skeleton used by DEMOS1.S or DASTD.S (v1.5)
* v1.0: * Monitormode selection.
*       * SET_RES routine vbl-synced.
*       * Screenaddress-setting optimised.

******** OBJECT EQUS ********

******** OBJECT TABLE ********

* Must be first in object!!
rotofade_tbl:
	DC.L	ROTOFADEMAINLOOP
	DC.L	INIT_ROTOFADE
	DC.L	SET_ROTOFADERES
	DC.L	SET_ROTONORMAL
	DC.L	SET_ROTOMIX
	DC.L	SET_ROTOFADE
	DC.L	0

******** RESOLUTION SETTING ROUTINE ********

SET_ROTOFADERES:
	IFEQ	testmode
	move.w	$0468.w,d0
.ck466:	cmp.w	$0468.w,d0
	beq.s	.ck466
	move.w	monitormode,d0
	cmpi.w	#vga60,d0
	beq.s	.vga60
	cmpi.w	#vga100,d0
	beq.s	.vga100
	cmpi.w	#rgb50,d0
	beq.s	.rgb50
* Unknown monitormode..
	rts
.vga60:	jmp	vga60_16bit_320_100
.vga100:
	jmp	vga100_16bit_320_100
.rgb50:	jmp	rgb50_16bit_320_100
	ENDC
	rts

******** INIT SUBROUTINE ********

INIT_ROTOFADE:
	lea	rotofadeoffset_tbl,a0
	bsr	INIT_ROTOMOTHAFUCK
	lea	blockypicname_txt,a1
	jsr	LOAD_INCFILE
	move.l	a0,blockyadr
	rts

******** MAINLOOP SUBROUTINE ********

ROTOFADEMAINLOOP:
	IFND	demoos
	IFEQ	testmode
	addq.l	#1,frmcnt
	ENDC
	ENDC

	move.w	$468.w,.old468

	movea.l	scr,a0
	movea.l	scr+8,a1
	lea	rotofadeoffset_tbl,a2
	movea.l	rotoroutadr,a3
	jsr	(a3)

	movea.l	blockyadr,a1
	bsr	PLOT_SHIT

	IFEQ	testmode
	lea	scr,a0
	move.l	(a0)+,d0
	move.l	(a0)+,d1
	move.l	(a0),-4(a0)
	move.l	d0,(a0)
	move.l	d1,-8(a0)
	move.l	d0,d1
	lsr.w	#8,d0
	move.l	d0,$ffff8200.w
	move.b	d1,$ffff820d.w

	cmpi.w	#vga100,monitormode
	bne.s	.wait1vbl
	move.w	.old468(pc),d0
.wait2vbl:
	move.w	$468.w,d1
	sub.w	d0,d1
	cmpi.w	#2,d1
	blt.s	.wait2vbl
	rts

.wait1vbl:
	move.w	.old468(pc),d0
.tst468:
	cmp.w	$468.w,d0
	beq.s	.tst468

	ENDC
	rts

.old468:
	DS.W	1

******** OBJECT DATA ********

	DATA

rotoroutadr:
	DC.L	PLOT_ROTO

rotofadevect_tbl:
	DC.L	$0000e000,$00003800
	DC.L	$ffff4800,$0000d000

points:	DC.L	7,1
	DC.L	159-8,7

	DC.L	9,0
	DC.L	159-5,9

blockypicname_txt:
	DC.B	"BLOCKY.RAW",0
	EVEN

******** OBJECT RESERVES ********

	BSS

blockyadr:
	DS.L	1
rotofadeoffset_tbl:
	DS.W	320*100

******** OBJECT SUBROUTINES ********

	TEXT

SET_ROTONORMAL:
	move.l	#PLOT_ROTO,rotoroutadr
	rts

SET_ROTOMIX:
	move.l	#PLOT_ROTOMIX,rotoroutadr
	rts

SET_ROTOFADE:
	move.l	#PLOT_ROTOFADE,rotoroutadr
	rts

INIT_ROTOMOTHAFUCK:
	move.l  points+8,D0
	sub.l   points+0,D0     		* d0: dx
	swap    D0
	divu.l  #160,D0
	move.l  points+12,D1
	sub.l   points+4,D1     		* d1: dy
	swap    D1
	divu.l  #100,D1
	movea.l	d0,a5
	add.l	a5,a5
;Startadresse zum auslesen
	move.l	points,d4
	addi.w	#12,d4
	swap	d4
	move.l	points+4,d5
	addi.w	#-1,d5
	swap	d5
	moveq	#100-1,D7

.rum_yloop:
	sub.l   d1,d4
	add.l   d0,d5
	moveq	#160/4-1,d6
	movem.l d4-d5,-(sp)

.rum_xloop:
	REPT 4
	move.l	d5,d3
	swap	d3
	mulu.w	#320,d3
	move.l	d4,d2
	swap	d2
	add.w   d2,d3
	move.w	d3,(a0)+
	add.l   a5,d4
	add.l   d1,d5
	ENDR
	dbra	d6,.rum_xloop

	movem.l (sp)+,d4-d5
	dbra    D7,.rum_yloop
	rts

* INPUT: a0: destination screenaddress
*        a1: source screenaddress
*        a2: offsetmapaddress
PLOT_ROTO:
	move.w	#(320*100)/64-1,d7

.loop:	REPT	4
	movem.w	(a2)+,d0-d6/a3
	move.l	0(a1,d0.l*2),(a0)+
	move.l	0(a1,d1.l*2),(a0)+
	move.l	0(a1,d2.l*2),(a0)+
	move.l	0(a1,d3.l*2),(a0)+
	move.l	0(a1,d4.l*2),(a0)+
	move.l	0(a1,d5.l*2),(a0)+
	move.l	0(a1,d6.l*2),(a0)+
	move.l	0(a1,a3.l*2),(a0)+
	ENDR
	dbra	d7,.loop
	rts 

* INPUT: a0: destination screenaddress
*        a1: source screenaddress
*        a2: offsetmapaddress
PLOT_ROTOMIX:
	move.w	#(320*100)/8-1,d7
	move.l	#%01111011111011110111101111101111,d6

.loop:	movem.w	(a2)+,d0-d3
	move.l	0(a1,d0.l*2),d0
	lsr.l	#1,d0
	and.l	d6,d0
	move.l	(a0),d4
	lsr.l	#1,d4
	and.l	d6,d4
	add.l	d4,d0
	move.l	d0,(a0)+
	move.l	0(a1,d1.l*2),d0
	lsr.l	#1,d0
	and.l	d6,d0
	move.l	(a0),d4
	lsr.l	#1,d4
	and.l	d6,d4
	add.l	d4,d0
	move.l	d0,(a0)+
	move.l	0(a1,d2.l*2),d0
	lsr.l	#1,d0
	and.l	d6,d0
	move.l	(a0),d4
	lsr.l	#1,d4
	and.l	d6,d4
	add.l	d4,d0
	move.l	d0,(a0)+
	move.l	0(a1,d3.l*2),d0
	lsr.l	#1,d0
	and.l	d6,d0
	move.l	(a0),d4
	lsr.l	#1,d4
	and.l	d6,d4
	add.l	d4,d0
	move.l	d0,(a0)+
	dbra	d7,.loop
	rts 

* INPUT: a0: destination screenaddress
*        a1: source screenaddress
*        a2: offsetmapaddress
PLOT_ROTOFADE:
	move.w	#(320*100)/8-1,d7
	move.l	#%01111011111011110111101111101111,d6

.loop:	movem.w	(a2)+,d0-d3
	move.l	0(a1,d0.l*2),d0
	lsr.l	#1,d0
	and.l	d6,d0
	move.l	d0,(a0)+
	move.l	0(a1,d1.l*2),d0
	lsr.l	#1,d0
	and.l	d6,d0
	move.l	d0,(a0)+
	move.l	0(a1,d2.l*2),d0
	lsr.l	#1,d0
	and.l	d6,d0
	move.l	d0,(a0)+
	move.l	0(a1,d3.l*2),d0
	lsr.l	#1,d0
	and.l	d6,d0
	move.l	d0,(a0)+
	dbra	d7,.loop
	rts 

* INPUT: a1: address of picture to plot
PLOT_SHIT:
	movea.l	scr,a0
	lea	(34*640)+320-64(a0),a0

	lea	sine_tbl,a2
	move.w	$4bc.w,d0
	move.w	d0,d2
	lsl.w	#2,d0
	Do_SinModulo	d0
	Get_Sin	a2,d0,d1
	asr.w	#8,d1
	asr.w	#2,d1
	ext.l	d1
	mulu.w	#7,d2
	lsr.w	#1,d2
	Do_SinModulo	d2
	Get_Sin	a2,d2,d2
	asr.w	#8,d2
	asr.w	#3,d2
	muls.w	#160,d2
	add.l	d2,d1
	lea	(a0,d1.l*4),a0

	moveq	#32-1,d7
.loop:	REPT	32
	move.l	(a1)+,(a0)+
	ENDR
	lea	640-128(a0),a0
	dbra	d7,.loop
	rts

******** END OF DEMO-EFFECT OBJECT ********