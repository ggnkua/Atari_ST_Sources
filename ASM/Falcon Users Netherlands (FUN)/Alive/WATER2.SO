* Object skeleton used by DEMOS1.S or DASTD.S (v1.5)
* v1.0: * Monitormode selection.
*       * SET_RES routine vbl-synced.
*       * Screenaddress-setting optimised.

******** OBJECT EQUS ********

******** OBJECT TABLE ********

* Must be first in object!!
water2_tbl:
	DC.L	WATERMAINLOOP
	DC.L	INIT_WATER
	DC.L	SET_WATERRES
	DC.L	SET_WATERRAIN1
	DC.l	SET_WATERRAIN2
	DC.L	SET_WATERRAIN3
	DC.L	SET_WATERSINES
	DC.L	SET_WATERSTILL
	DC.L	SET_WATERHORMOVE
	DC.L	SET_WATERSINEMOVE
	DC.L	SET_NOPISS
	DC.L	SET_WATERENDMOVE
	DC.L	0

******** RESOLUTION SETTING ROUTINE ********

SET_WATERRES:
	lea	temp_buf,a0
	move.w	#160*203/4-1,d7
	moveq	#0,d0
.loop:	move.l	d0,(a0)+
	dbra	d7,.loop

	IFEQ	testmode
	move.l	#rts,vbl_gfx

	move.w	$0468.w,d0
.ck466:	cmp.w	$0468.w,d0
	beq.s	.ck466

	clr.l	$ffff9800.w

	move.w	monitormode,d0
	cmpi.w	#vga60,d0
	beq.s	.vga60
	cmpi.w	#vga100,d0
	beq.s	.vga100
	cmpi.w	#rgb50,d0
	beq	.rgb50
* Unknown monitormode..
	rts
.vga60:	bra	vga60_16bit_320_100
.vga100:
	bra	vga100_16bit_320_100
.rgb50:	bra	rgb50_16bit_320_100
	ENDC
	rts

******** INIT SUBROUTINE ********

INIT_WATER:
	lea	waterpicname_txt,a1
	bsr	LOAD_INCFILE
	move.l	a0,waterpicadr
	rts

******** MAINLOOP SUBROUTINE ********

WATERMAINLOOP:
	move.w	$468.w,.old468

	IFND	demoos
	IFEQ	testmode
	addq.l	#1,frmcnt
	ENDC
	ENDC

	movea.l	watertrajroutadr,a0
	jsr	(a0)

	movea.l	dropsroutadr,a0
	jsr	(a0)

	bsr	PLOT_WATER

	IFEQ	testmode
	lea	scr,a0
	move.l	(a0)+,d0
	move.l	(a0)+,d1
	move.l	(a0),-4(a0)
	move.l	d0,(a0)
	move.l	d1,-8(a0)
	move.l	d0,d1
	lsr.w	#8,d0
	move.l	d0,$ffff8200.w
	move.b	d1,$ffff820d.w
	ENDC

.wait:	move.w	.old468(pc),d0
	cmp.w	$468.w,d0
	beq.s	.wait
	cmpi.w	#vga100,monitormode
	bne.s	.no2ndvbl
.wait2:	move.w	$468.w,d1
	sub.w	d0,d1
	cmpi.w	#2,d1
	blt.s	.wait2
.no2ndvbl:
	rts

.old468:
	DS.W	1

******** OBJECT DATA ********

	DATA

water_front:
	DC.L	temp_buf+160		;DC.L	water1_buf
water_back:
	DC.L	temp_buf+160*102	;DC.L	water2_buf

dropsroutadr:
	DC.L	CALC_LIKEMICROSHIT
watertrajroutadr:
	DC.L	CALC_WATERSTILLTRAJ

waterpicname_txt:
	DC.B	"WATERBCK.RAW",0
	EVEN

******** OBJECT RESERVES ********

	BSS

oldwatertime:
	DS.W	1
watertrajtime:
	DS.W	1
waterxpos:
	DS.W	1
waterypos:
	DS.W	1
waterpicadr:
	DS.L	1

******** OBJECT SUBROUTINES ********

	TEXT

SET_NOPISS:
	move.l	#CALC_LIKEMICROSHIT,dropsroutadr
	rts

SET_WATERRAIN1:
	move.l	#CALC_WATERRAIN1,dropsroutadr
	move.w	$4bc.w,oldwatertime
	rts

SET_WATERRAIN2:
	move.l	#CALC_WATERRAIN2,dropsroutadr
	move.w	$4bc.w,oldwatertime
	rts

SET_WATERRAIN3:
	move.l	#CALC_WATERRAIN3,dropsroutadr
	move.w	$4bc.w,oldwatertime
	rts

SET_WATERSINES:
	move.l	#CALC_WATERSINES,dropsroutadr
	move.w	$4bc.w,oldwatertime
	rts

SET_WATERSTILL:
	move.l	#CALC_WATERSTILLTRAJ,watertrajroutadr
	rts

SET_WATERHORMOVE:
	move.l	#CALC_WATERHORTRAJ,watertrajroutadr
	rts

SET_WATERSINEMOVE:
	move.w	$4bc.w,watertrajtime
	move.l	#CALC_WATERSINETRAJ,watertrajroutadr
	rts

SET_WATERENDMOVE:
	move.w	$4bc.w,watertrajtime
	move.l	#CALC_WATERENDTRAJ,watertrajroutadr
	rts

CALC_LIKEMICROSHIT:
	nop
	rts

CALC_WATERRAIN1:
	move.w	$4bc.w,d0
	move.w	d0,d1
	sub.w	oldwatertime,d1
	cmpi.w	#17,d1
	blt.s	.noway
	move.w	d0,oldwatertime
	moveq	#0,d1
	move.w	$468.w,d1
	eor.w	d1,d0
	ror.w	d1,d0
	lsr.w	#2,d0
	move.w	d0,d1
	lsr.w	#4,d0
	sub.w	d0,d1
	movea.l	water_front,a0
	move.b	#73,(a0,d1.w)
.noway:	rts

CALC_WATERRAIN2:
	move.w	$4bc.w,d0
	move.w	d0,d1
	sub.w	oldwatertime,d1
	cmpi.w	#6,d1
	blt.s	.noway
	move.w	d0,oldwatertime
	moveq	#0,d1
	move.w	$468.w,d1
	eor.w	d1,d0
	ror.w	d1,d0
	lsr.w	#2,d0
	move.w	d0,d1
	lsr.w	#4,d0
	sub.w	d0,d1
	movea.l	water_front,a0
	move.b	#73,(a0,d1.w)
.noway:	rts

CALC_WATERRAIN3:
	move.w	$4bc.w,d0
	move.w	d0,d2
	sub.w	oldwatertime,d2
	cmpi.w	#1,d2
	blt.s	.noway
	move.w	d0,oldwatertime
	moveq	#0,d1
	move.w	$468.w,d1
	eor.w	d1,d0
	ror.w	d1,d0
	lsr.w	#2,d0
	move.w	d0,d1
	lsr.w	#4,d0
	sub.w	d0,d1
	movea.l	water_front,a0
	move.b	#73,(a0,d1.w)
	cmpi.w	#3,d2
	blt.s	.noway
	ror.w	d1,d1
	eor.w	d1,d0
	ror.w	d1,d0
	lsr.w	#2,d0
	move.w	d0,d1
	lsr.w	#4,d0
	sub.w	d0,d1
	move.b	#73,(a0,d1.w)
.noway:	rts

CALC_WATERSINES:
	lea	sine_tbl,a0
	move.w	$4bc.w,d0
	move.w	d0,d3
	move.w	d0,d4
	add.w	d0,d0
	mulu.w	#5,d3
	mulu.w	#11,d4
	lsr.l	#1,d3
	lsr.l	#1,d4
	Do_SinModulo	d0
	Do_SinModulo	d3
	Do_SinModulo	d4
	Get_SinCos	a0,d0,d1,d2
	Get_Sin		a0,d3,d3
	Get_Cos		a0,d4,d4
	ext.l	d3
	ext.l	d4

	movea.l	water_front,a0

	moveq	#9,d0
	asr.w	d0,d1
	addq.w	#1,d0
	asr.w	d0,d2	
	addi.l	#160/2,d1
	addi.w	#100/2,d2
	mulu.w	#160,d2
	add.l	d2,d1
	move.b	#73,(a0,d1.l)

	asr.w	d0,d4
	subq.w	#1,d0
	asr.w	d0,d3
	addi.l	#160/2,d3
	addi.w	#100/2,d4
	mulu.w	#160,d4
	add.l	d4,d3
	move.b	#73,(a0,d3.l)
	rts

CALC_WATERSTILLTRAJ:
	rts

CALC_WATERHORTRAJ:
	move.w	$4bc.w,d0
	lsr.w	#1,d0
	andi.w	#$00ff,d0
	move.w	d0,waterxpos
	clr.w	waterypos
	rts

CALC_WATERSINETRAJ:
	move.w	$4bc.w,d0
	move.w	d0,d2
	move.w	watertrajtime,d1
	sub.w	d1,d2
	lsr.w	#3,d2
	cmpi.w	#$0100,d2
	ble.s	.ok
	move.w	#$0100,d2
.ok:	lea	sine_tbl,a0
	move.w	d0,d1
	mulu.w	#7,d1
	lsr.w	#2,d1
	Do_SinModulo	d0
	Do_SinModulo	d1
	Get_Sin	a0,d0,d0
	Get_Cos	a0,d1,d1
	muls.w	d2,d0
	muls.w	d2,d1
	swap	d0
	swap	d1
	move.w	d0,waterxpos
	move.w	d1,waterypos
	rts

CALC_WATERENDTRAJ:
	move.w	$4bc.w,d0
	move.w	d0,d2
	move.w	watertrajtime,d1
	sub.w	d1,d2
	lsr.w	#3,d2
	cmpi.w	#$0100,d2
	ble.s	.ok
	move.w	#$0100,d2
.ok:	subi.w	#$0100,d2
	neg.w	d2
	lea	sine_tbl,a0
	move.w	d0,d1
	mulu.w	#7,d1
	lsr.w	#2,d1
	Do_SinModulo	d0
	Do_SinModulo	d1
	Get_Sin	a0,d0,d0
	Get_Cos	a0,d1,d1
	muls.w	d2,d0
	muls.w	d2,d1
	swap	d0
	swap	d1
	move.w	d0,waterxpos
	move.w	d1,waterypos
	rts

* Original from an oxyron guy I believe.
PLOT_WATER:
	movea.l	scr,a0
	movea.l	waterpicadr,a6
	adda.l	#(256*(128-53)+46)*4,a6
	move.w	waterypos,d0
	lsl.w	#7,d0
	move.b	waterxpos+1,d0
	lea	(a6,d0.w*4),a6

	Movea.l	water_back,a1
	Movea.l	water_front,a5
	Move.l	a5,water_back
	Move.l	a1,water_front

	Lea	-1(a1),a2
	Lea	160(a1),a3
	Lea	-160(a1),a4
	Addq	#1,a1

	Move.w	#100-1,d7

	Move.l	#$40404040,d2	;sign mask
	Move.l	#$7f7f7f7f,d3	;value mask

.yloop:	moveq	#40-1,d6
.xloop:	Move.l	(a4)+,d0	;add boundry pixels
	Add.l	(a3)+,d0
	Add.l	(a2)+,d0
	Add.l	(a1)+,d0
	Lsr.l	#1,d0 
	Sub.l	(a5),d0

	Move.l	d0,d1		;bit 6 = sign (7 = trash)
	And.l	d2,d1		;mask sign

	Add.l	d1,d1		; << 1
	And.l	d3,d0
	Or.l	d1,d0		;Restore Sign

	Lsr.l	#7,d1
	Add.l	d1,d0		;d0 - d0 >> 7 (asr)

	Move.l	d0,(a5)+

	move.l	d0,d1
	swap	d0
	move.l	(a6,d0.w*4),(a0)+
	move.l	4(a6,d0.w*4),(a0)+
	addq	#8,a6
	move.l	(a6,d1.w*4),(a0)+
	move.l	4(a6,d1.w*4),(a0)+
	addq	#8,a6

	dbra	d6,.xloop

	lea	1024-640(a6),a6
	dbra	d7,.yloop
	rts

******** END OF DEMO-EFFECT OBJECT ********