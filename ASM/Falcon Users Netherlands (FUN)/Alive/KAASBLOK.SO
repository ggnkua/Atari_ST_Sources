* Object skeleton used by DEMOS1.S or DASTD.S (v1.5)
* v1.0: * Monitormode selection.
*       * SET_RES routine vbl-synced.
*       * Screenaddress-setting optimised.

******** OBJECT EQUS ********

******** OBJECT TABLE ********

* Must be first in object!!
kaasblok_tbl:
	DC.L	KAASBLOKMAINLOOP
	DC.L	INIT_KAASBLOK
	DC.L	SET_KAASBLOKRES
	DC.L	TOGGLE_TEXTROT
	DC.L	SET_KAASZOOMIN
	DC.L	RESET_TCUBELOGOPOS
	DC.L	SET_TCUBELOGOMOVE
	DC.L	SET_KAASZOOMOUT
	DC.L	0

******** RESOLUTION SETTING ROUTINE ********

SET_KAASBLOKRES:
	IFEQ	testmode
	move.l	#rts,vbl_gfx

	move.l	$0466.w,d0
.ck466:	cmp.l	$0466.w,d0
	beq.s	.ck466

	movea.l	scr,a0
	bsr	CLEAR_320200TSCR
	movea.l	scr+4,a0
	bsr	CLEAR_320200TSCR
	movea.l	scr+8,a0
	bsr	CLEAR_320200TSCR

	move.w	monitormode,d0
	cmpi.w	#vga60,d0
	beq.s	.vga60
	cmpi.w	#vga100,d0
	beq.s	.vga100
	cmpi.w	#rgb50,d0
	beq.s	.rgb50
* Unknown monitormode..
	rts
.vga60:	jmp	vga60_16bit_320_200
.vga100:
	jmp	vga100_16bit_320_200
.rgb50:	jmp	rgb50_16bit_320_200
	ENDC
	rts

******** INIT SUBROUTINE ********

INIT_KAASBLOK:
	rts

******** MAINLOOP SUBROUTINE ********

KAASBLOKMAINLOOP:
	IFND	demoos
	IFEQ	testmode
	addq.l	#1,frmcnt
	move.w	$468.w,.old468
	ENDC
	ENDC

	move.l	tcubelogoroutadr,a0
	jsr	(a0)

	movea.l	scr,a0
	bsr	PLOT_TEXTCUBELOGO

	movea.l	scr,a0
	bsr	CLEAR_KAASSCREEN

	move.l	kaasroutadr,a0
	jsr	(a0)

	lea	kaasblok_ini,a1
	lea	rot_tbl,a2
	move.w	$4bc.w,d0
	move.w	d0,d1
	mulu.w	#5,d0
	lsr.w	#1,d0
	mulu.w	#7,d1
	lsr.w	#2,d1
	move.w	d0,(a2)
	move.w	d1,2(a2)
	bsr	ROTATE_PIECE

	movea.l	kaastrajroutadr,a0
	jsr	(a0)

	bsr	POSITION_PIECE
	bsr	PERSPECT_PIECE
	lea	piece_tbl,a1
	bsr	PLOT_TXTOBJECT

	IFEQ	testmode
	lea	scr,a0
	move.l	(a0)+,d0
	move.l	(a0)+,d1
	move.l	(a0),-4(a0)
	move.l	d0,(a0)
	move.l	d1,-8(a0)
	move.l	d0,d1
	lsr.w	#8,d0
	move.l	d0,$ffff8200.w
	move.b	d1,$ffff820d.w

	move.w	.old468(pc),d0
.tst468:
	cmp.w	$468.w,d0
	beq.s	.tst468
	ENDC
	rts

.old468:
	DS.W	1

******** OBJECT DATA ********

	DATA

kaasblok_ini:
	DC.W	8
	DC.W	-90,-90,-90
	DC.W	90,-90,-90
	DC.W	90,90,-90
	DC.W	-90,90,-90
	DC.W	-90,-90,90
	DC.W	90,-90,90
	DC.W	90,90,90
	DC.W	-90,90,90

	DC.W	6

	DC.W	4
	DC.L	texture_rpc
	DC.W	0,255,0
	DC.W	1,255,255
	DC.W	2,0,255
	DC.W	3,0,0
	DC.W	4
	DC.L	texture_rpc
	DC.W	0,255,0
	DC.W	4,255,255
	DC.W	5,0,255
	DC.W	1,0,0
	DC.W	4
	DC.L	texture_rpc
	DC.W	6,127,0
	DC.W	2,127,127
	DC.W	1,0,127
	DC.W	5,0,0
	DC.W	4
	DC.L	texture_rpc
	DC.W	3,255,0
	DC.W	2,255,255
	DC.W	6,0,255
	DC.W	7,0,0
	DC.W	4
	DC.L	texture_rpc
	DC.W	0,63,0
	DC.W	3,63,63
	DC.W	7,0,63
	DC.W	4,0,0
	DC.W	4
	DC.L	texture_rpc
	DC.W	7,63,0
	DC.W	6,63,63
	DC.W	5,0,63
	DC.W	4,0,0

kaasroutadr:
	DC.L	STILL_KAAS
kaastrajroutadr:
	DC.L	CALC_KAASSTILLTRAJ
tcubelogoroutadr:
	DC.L	DO_RTS
kaaszpos:
	DC.W	-300

texture_rpc:
	DC.W	256,256
	INCBIN	KAAS3.RAW

texturecubepic_dat:
	INCBIN	TEXTCUBE.RAW

******** OBJECT RESERVES ********

	BSS

*3d tmap stuffs
rot_tbl:
	DS.W	3
newpoly_dat:
	DS.L	50
txtpolyscript_buf:
	DS.W	1
	DS.L	100
txtpolyedge_tbl:
	DS.W	6*scrlines
	DS.W	1000
piece_tbl:
	DS.W	500
kaasfxstarttime:
	DS.W	1
tcubelogolines:
	DS.W	1
tcubestarttime:
	DS.W	1

******** OBJECT SUBROUTINES ********

	TEXT

TOGGLE_TEXTROT:
	lea	kaasroutadr,a0
	cmpi.l	#ROTEER_KAAS,(a0)
	beq.s	.still
	move.l	#ROTEER_KAAS,(a0)
	rts
.still:	move.l	#STILL_KAAS,(a0)
	rts

SET_KAASZOOMIN:
	move.w	$4bc.w,kaasfxstarttime
	move.l	#CALC_KAASZOOMTRAJ,kaastrajroutadr
	rts

RESET_TCUBELOGOPOS:
	move.l	#DO_RTS,tcubelogoroutadr
	clr.w	tcubelogolines
	rts

SET_TCUBELOGOMOVE:
	move.w	$4bc.w,tcubestarttime
	move.l	#MOVE_TCUBELOGO,tcubelogoroutadr
	rts

SET_KAASZOOMOUT:
	move.w	$4bc.w,kaasfxstarttime
	move.l	#CALC_KAASZOOMOUTTRAJ,kaastrajroutadr
	rts

DO_RTS:	rts

MOVE_TCUBELOGO:
	move.w	$4bc.w,d0
	sub.w	tcubestarttime,d0
	asr.w	#1,d0
	cmpi.w	#86,d0
	ble.s	.move
	move.w	#86,d0
.move:	move.w	d0,tcubelogolines
	rts

CALC_KAASZOOMTRAJ:
	moveq	#0,d0
	move.w	$4bc.w,d0
	sub.w	kaasfxstarttime,d0
	bmi.s	.rts
	lsl.l	#2,d0
	move.l	#-4000,d2
	add.l	d0,d2
	cmpi.l	#-300,d2
	ble.s	.pos_ok
	move.l	#-300,d2
.pos_ok:
	move.w	d2,kaaszpos
	moveq	#0,d0
	moveq	#0,d1
.rts:	rts

CALC_KAASZOOMOUTTRAJ:
	moveq	#0,d0
	move.w	$4bc.w,d0
	sub.w	kaasfxstarttime,d0
	bmi.s	.rts
	lsl.l	#2,d0
	move.l	#-300,d2
	sub.l	d0,d2
	moveq	#0,d0
	moveq	#0,d1
.rts:	rts

CALC_KAASSTILLTRAJ:
	moveq	#0,d0
	moveq	#0,d1
	move.w	kaaszpos,d2
	rts

* INPUT: a0: screenaddress
CLEAR_KAASSCREEN:
	moveq	#0,d0
	move.l	d0,d1
	move.l	d0,d2
	move.l	d1,d3
	move.l	d2,d4
	move.l	d3,d5
	move.l	d4,d6
	move.w	#181-1,d7
	move.l	d0,a1
	move.l	d1,a2
	move.l	d2,a3
	move.l	d3,a4
	move.l	d4,a5
	move.l	d5,a6
	adda.l	#640*189+460,a0
.loop:	REPT	5
	movem.l	d0-d6/a1-a6,-(a0)
	ENDR
	movem.l	d0-d4,-(a0)
	lea	-360(a0),a0
	dbra	d7,.loop
	rts

STILL_KAAS:
	lea	kaasblok_ini,a0
	move.w	(a0)+,d0
	mulu.w	#6,d0
	adda.l	d0,a0
	move.w	(a0)+,d7
	subq.w	#1,d7

.polyloop:
	addq	#8,a0
	move.l	#$00ff0000,(a0)+
	addq	#2,a0
	move.l	#$00ff00ff,(a0)+
	addq	#2,a0
	move.l	#$000000ff,(a0)+
	addq	#2,a0
	move.l	#$00000000,(a0)+
	dbra	d7,.polyloop
	rts

* KAAS KAAS KAAS!!!!
* !!!UIT HET VUISTJE
ROTEER_KAAS:
	lea	sine_tbl,a1
	lea	kaasblok_ini,a0
	move.w	(a0)+,d0
	mulu.w	#6,d0
	lea	10(a0,d0.l),a0
	lea	(6*4+6)*3(a0),a2

* Do first side of cube..
	move.w	$4bc.w,d0
	move.w	d0,d7
	andi.w	#$00ff,d0
	move.b	d0,d0
	bpl.s	.pos
	neg.b	d0
.pos:	move.w	d0,d1
	neg.w	d1
	addi.w	#128,d0
	addi.w	#128,d1
	move.w	d0,(a0)+
	move.w	d0,(a2)+
	move.w	d1,(a0)+
	move.w	d1,(a2)+
	addq	#2,a0
	addq	#2,a2
	move.w	d0,(a0)+
	move.w	d0,(a2)+
	move.w	d0,(a0)+
	move.w	d0,(a2)+
	addq	#2,a0
	addq	#2,a2
	move.w	d1,(a0)+
	move.w	d1,(a2)+
	move.w	d0,(a0)+
	move.w	d0,(a2)+
	addq	#2,a0
	addq	#2,a2
	move.w	d1,(a0)+
	move.w	d1,(a2)+
	move.w	d1,(a0)+
	move.w	d1,(a2)+

* Do second side..
	addq	#8,a0 
	addq	#8,a2
	move.w	d7,d0
	move.w	d7,d5
	neg.w	d0
	mulu.w	#3,d0
	Do_SinModulo	d0
	Get_SinCos	a1,d0,d1,d2
	asr.w	#8,d1
	asr.w	#8,d2
	move.w	d1,d3
	move.w	d2,d4
	neg.w	d3
	neg.w	d4
	move.w	d5,d0
	Do_SinModulo	d5
	Get_Cos	a1,d5,d5
	mulu.w	#3,d0
	lsr.w	#1,d0
	Do_SinModulo	d0
	Get_Sin	a1,d0,d6
	asr.w	#7,d5
	asr.w	#7,d6
	move.w	d1,d0
	add.w	d5,d0
	move.w	d0,(a0)+
	move.w	d0,(a2)+
	move.w	d2,d0
	add.w	d6,d0
	move.w	d0,(a0)+
	move.w	d0,(a2)+
	addq	#2,a0
	addq	#2,a2
	move.w	d2,d0
	add.w	d5,d0
	move.w	d0,(a0)+
	move.w	d0,(a2)+
 	move.w	d3,d0
	add.w	d6,d0
	move.w	d0,(a0)+
	move.w	d0,(a2)+
	addq	#2,a0
	addq	#2,a2
	move.w	d3,d0
	add.w	d5,d0
	move.w	d0,(a0)+
	move.w	d0,(a2)+
	move.w	d4,d0
	add.w	d6,d0
	move.w	d0,(a0)+
	move.w	d0,(a2)+
	addq	#2,a0
	addq	#2,a2
	move.w	d4,d0
	add.w	d5,d0
	move.w	d0,(a0)+
	move.w	d0,(a2)+
	move.w	d1,d0
	add.w	d6,d0
	move.w	d0,(a0)+
	move.w	d0,(a2)+

* Do third side..
	addq	#8,a0
	addq	#8,a2
	move.w	d7,d0
	mulu.w	#5,d0
	lsr.w	#1,d0
	Do_SinModulo	d0
	Get_SinCos	a1,d0,d1,d2
	move.w	d7,d0
	mulu.w	#3,d0
	Do_SinModulo	d0
	Get_Sin	a1,d0,d0
	asr.w	#7,d0
	addi.w	#384,d0
	divs.w	d0,d1
	divs.w	d0,d2
	move.w	d1,d3
	move.w	d2,d4
	neg.w	d3
	neg.w	d4
	move.w	#128,d5
	add.w	d5,d1
	add.w	d5,d2
	add.w	d5,d3
	add.w	d5,d4
	move.w	d1,(a0)+
	move.w	d1,(a2)+
	move.w	d2,(a0)+
	move.w	d2,(a2)+
	addq	#2,a0
	addq	#2,a2
	move.w	d2,(a0)+
	move.w	d2,(a2)+
	move.w	d3,(a0)+
	move.w	d3,(a2)+
	addq	#2,a0
	addq	#2,a2
	move.w	d3,(a0)+
	move.w	d3,(a2)+
	move.w	d4,(a0)+
	move.w	d4,(a2)+
	addq	#2,a0
	addq	#2,a2
	move.w	d4,(a0)+
	move.w	d4,(a2)+
	move.w	d1,(a0)+
	move.w	d1,(a2)+
	
	rts

* This routine is just a easy to calculate sinus-matrix thingy
* rotates around the z-axis and then around the y-axis.
* makes a rotated copy of the original...
* INPUT: a1: address of source objectbuffer
*        a2: address of rotation-array
ROTATE_PIECE:
* Get sine-values..
	lea	sine_tbl,a0
	Do_SinModulo	(a2)
	move.w	(a2)+,d0
	Get_SinCos	a0,d0,d1,d2
	add.l	d1,d1
	add.l	d2,d2
	Do_SinModulo	(a2)
	move.w	(a2)+,d0
	Get_SinCos	a0,d0,d3,d4
	add.l	d3,d3
	add.l	d4,d4
	lea	piece_tbl,a0
	move.l	a0,a6
	addq	#4,a0
	move.w	(a1)+,d7
	move.w	d7,(a0)+
	subq.w	#1,d7
	movea.w	d7,a5
	move.l	a1,a2
* Calculate the x-coordinates..
.xloop:	move.w	(a1)+,d0
	ext.l	d0
	muls.l	d4,d0
	addq	#2,a1
	move.w	(a1)+,d5
	ext.l	d5
	muls.l	d3,d5
	sub.l	d5,d0
	swap	d0
	move.w	d0,(a0)
	addq	#6,a0
	dbra	d7,.xloop
* Calculate the y-coordinates..
	lea	6+2(a6),a0			* Get address of first y-coord
	move.l	d3,a3				* Backup
	move.l	d4,a4				* Backup
	muls.l	d1,d5:d3
	move.w	d5,d3
	swap	d3
	muls.l	d1,d5:d4
	move.w	d5,d4
	swap	d4
	move.l	a2,a1
	move.w	a5,d7
.yloop:	movem.w	(a1)+,d5-d6
	muls.l	d3,d5
	muls.l	d2,d6
	move.w	(a1)+,d0
	ext.l	d0
	muls.l	d4,d0
	add.l	d0,d5
	add.l	d6,d5
	swap	d5
	move.w	d5,(a0)
	addq	#6,a0
	dbra	d7,.yloop
* Calculate the z-coordinates..
	lea	6+4(a6),a0			* Get address of first z-coord
	move.l	a3,d3
	move.l	a4,d4
	muls.l	d2,d5:d3
	move.w	d5,d3
	swap	d3
	muls.l	d2,d5:d4
	move.w	d5,d4
	swap	d4
	move.l	a2,a1
	move.w	a5,d7
.zloop:	movem.w	(a1)+,d5-d6
	muls.l	d3,d5
	muls.l	d1,d6
	sub.l	d6,d5
	move.w	(a1)+,d0
	ext.l	d0
	muls.l	d4,d0
	add.l	d0,d5
	swap	d5
	move.w	d5,(a0)
	addq	#6,a0
	dbra	d7,.zloop
	move.l	a1,(a6)				* Store address of object-polydata
	rts

POSITION_PIECE:
	lea	piece_tbl+4,a0
	move.w	(a0)+,d7
	subq.w	#1,d7

.2loop:	add.w	d0,(a0)+
	add.w	d1,(a0)+
	add.w	d2,(a0)+
	dbra	d7,.2loop
	rts

PERSPECT_PIECE:
	lea	piece_tbl+4,a0
	move.w	(a0)+,d7
	subq.w	#1,d7

	move.l	#scrxbytes/4,d3
	move.l	#scrlines/2,d4
	move.w	#$0100,d5
.prslp2:
	move.w	4(a0),d0
	neg.w	d0
	add.w	d5,d0			d0.w: scale factor

	movem.w	(a0),d1-d2
	asl.l	#8,d1
	muls.w	#310,d2			;	asl.l	#8,d2
	divs.w	d0,d1			scale x-coordinate
	add.w	d3,d1			center x-coordinate
	move.w	d1,(a0)+
	divs.w	d0,d2			scale y-coordinate
	add.w	d4,d2			center y-coordinate
	move.w	d2,(a0)+
	addq.l	#2,a0
	dbra	d7,.prslp2
	rts

* Routine uses backface culling.
* INPUT: a1: address of piece_table containing object
PLOT_TXTOBJECT
	move.l	(a1)+,a0
	lea	.poly_dat,a2
	move.w	(a0)+,d7
	addq	#2,a1
	subq.w	#1,d7

.loop:	lea	(a2),a3
* Fetch all points.
	move.w	(a0)+,d6
	move.w	d6,(a3)+
	move.l	(a0)+,(a3)+
	subq.w	#1,d6

.plop:	move.w	(a0)+,d0
	mulu.w	#6,d0
	lea	(a1,d0.l),a4
	move.l	(a4)+,(a3)+
	move.w	(a4)+,(a3)+
	move.l	(a0)+,(a3)+
	dbra	d6,.plop

	lea	6(a2),a4
	move.w	(a4),d0
	move.w	10(a4),d1
	move.w	22(a4),d2
	move.w	12(a4),d3
	move.w	2(a4),d4
	move.w	20(a4),d5
	
* d0 = x1 d1 =x2 d2=y3 d3=y2 d4=y1 d5=x3 (allemaal words)
	sub.w	d1,d0
	sub.w	d3,d2
	sub.w	d3,d4
	sub.w	d1,d5
	muls.w	d0,d2
	muls.w	d4,d5
	cmp.w	d5,d2
	bmi.s	.dbra

	movem.l	d7-a2,-(sp)
	lea	(a2),a1
	bsr	PLOT_TTXTPOLY	
	movem.l	(sp)+,d7-a2

.dbra:	dbra	d7,.loop
	rts

	BSS

.poly_dat:
	DS.L	50

	TEXT

* Routine that plots a lineair mapped polygon to the screen.
* NO CLIPPING and far from optimised.
* INPUT: a1: startaddress of texturepolygon datastructure.
PLOT_TTXTPOLY
* I: Transform poly table into a script table.
*    - Find point with lowest y-value.
*    - Cycle clock- and anticlock-wise through the polygon to find the
*      next points and put the slopes of the new lines in the script along
*      with the y-length of each linepart.
*    - If necessary, swap the slopes so you always have the left side in
*      the first longword and the right side in the second longword.
* II: Fill the edge table according to the script table.
* III: Put the poly on screen according to the edge table.
* PART I:
* Find point with lowest y-value.
	move.w	(a1)+,d7
	subq.w	#1,d7
	move.l	(a1)+,-(sp)
	move.w	d7,d6
	move.l	a1,a6
	move.l	a1,a5
	move.w	2(a1),d0
	lea	10(a1),a1
	subq.w	#1,d7
	moveq	#0,d1
.fndlop:
	cmp.w	2(a1),d0
	blt.s	.skip
	bne.s	.noadd
	addq.w	#1,d1
.noadd:	move.w	2(a1),d0
	move.l	a1,a5
.skip:	lea	10(a1),a1
	dbra	d7,.fndlop
	cmpi.b	#3,d1
	blt.s	.polyok
	addq	#4,sp				* Pop backup shit off!
	rts
.polyok:
	move.l	scr,a0
	move.w	d0,d4
	mulu.w	#scrxbytes,d0
	add.l	d0,a0
	move.w	(a5),d0
	add.w	d0,d0
	add.w	d0,a0
	move.l	a0,-(sp)			* Push start screenaddress on stack
	move.l	6(a5),-(sp)			* Push start texturepos. on stack
* Fill the scripttable entries.
	moveq	#0,d5
	move.l	a6,a1
	move.l	a5,a6
	lea	txtpolyscript_buf+2,a0
	move.w	d6,d7
.makescriptloop
	bsr	.getnextpointaclock
	bsr	.getnextpointclock
	move.w	2(a5),d0
	cmp.w	2(a3),d0
	bgt	.scriptend
	move.w	2(a6),d0
	cmp.w	2(a4),d0
	bgt	.scriptend
	moveq	#0,d0
	move.w	(a3),d0
	sub.w	(a5),d0
	swap	d0
	moveq	#0,d1
	move.w	2(a3),d1
	sub.w	2(a5),d1
	bne.s	.diva
* If the aclock-edge has dy=0 then make a special scriptentry.
	move.l	d0,(a0)+			* store l-polyedge increment
	move.w	6(a3),d0
	sub.w	6(a5),d0
	swap	d0
	sub.w	d0,d0
	move.l	d0,(a0)+			* store l texture x increment
	move.w	8(a3),d0
	sub.w	8(a5),d0
	swap	d0
	sub.w	d0,d0
	move.l	d0,(a0)+			* store l texture y increment
	moveq	#0,d0
	move.l	d0,(a0)+			* store r-polyedge increment (=0.0)
	move.l	d0,(a0)+			* store r texture x increment (=0.0)
	move.l	d0,(a0)+			* store r texture y increment (=0.0)
	move.w	d0,(a0)+			* store dy (=0)
	move.l	a3,a5
	bra	.eol
.diva:	divs.l	d1,d0				* l polyedge increment in d0.l
	move.w	6(a3),d2
	sub.w	6(a5),d2
	swap	d2
	sub.w	d2,d2
	divs.l	d1,d2				* l texture x-increment in d2.l
.nodiv:	move.w	8(a3),d3
	sub.w	8(a5),d3
	swap	d3
	sub.w	d3,d3
	divs.l	d1,d3				* l texture y-increment in d3.l
.nodiv2:
	move.l	d0,(a0)+
	move.l	d2,(a0)+
	move.l	d3,(a0)+
	moveq	#0,d0
	move.w	(a4),d0
	sub.w	(a6),d0
	swap	d0
	moveq	#0,d1
	move.w	2(a4),d1
	sub.w	2(a6),d1
	bne.s	.divc
* If the clock-edge has dy=0 then make a special scriptentry.
	move.l	d0,(a0)+			* store r polyedge increment
	move.w	6(a4),d0
	sub.w	6(a6),d0
	swap	d0
	sub.w	d0,d0
	move.l	d0,(a0)+			* store r texture x increment
	move.w	8(a4),d0
	move.w	8(a6),d0
	swap	d0
	sub.w	d0,d0
	move.l	d0,(a0)+			* store r texture y increment
	moveq	#0,d0
	move.l	d0,-24(a0)			* store l polyedge increment (=0.0)
	move.l	d0,-20(a0)			* store l texture x increment (=0.0)
	move.l	d0,-16(a0)			* store l texture y increment (=0.0)
	move.w	d0,(a0)+			* store dy (=0)
	move.l	a4,a6
	bra.s	.eol
.divc:	divs.l	d1,d0				* r polyedge increment in d0.l
	move.w	6(a4),d2
	sub.w	6(a6),d2
	swap	d2
	sub.w	d2,d2
	divs.l	d1,d2				* r texture x-increment in d2.l
.nodiv3:
	move.w	8(a4),d3
	sub.w	8(a6),d3
	swap	d3
	sub.w	d3,d3
	divs.l	d1,d3				* r texture y-increment in d3.l
.nodiv4:
	move.l	d0,(a0)+
	move.l	d2,(a0)+
	move.l	d3,(a0)+
	move.w	2(a3),d0
	cmp.w	2(a4),d0
	bpl.s	.else
	move.w	d0,d1
	sub.w	d4,d0
	move.w	d0,(a0)+
	move.w	d1,d4
	move.l	a3,a5
	bra.s	.eol
.else:	move.w	2(a4),d2
	move.w	d2,d1
	sub.w	d4,d2
	move.w	d2,(a0)+
	move.w	d1,d4
	move.l	a4,a6
	cmp.w	d0,d1
	bne.s	.eol
	move.l	a3,a5
.eol:	addq.w	#1,d5
	bra	.makescriptloop
.scriptend:
	lea	txtpolyscript_buf,a0
	move.w	d5,(a0)+
* If needed, swap the sides.
	move.l	(a0),d0
	cmp.l	12(a0),d0
	blt.s	.endswap
;	move.l	26(a0),d0
;	cmp.l	26+12(a0),d0
;	blt.s	.endswap
.doswap:
	subq.w	#1,d5
.swaplp:
	movem.l	(a0),d0-d4/d6
	movem.l	d3/d4/d6,(a0)
	movem.l	d0-d2,12(a0)
	lea	26(a0),a0
	dbra	d5,.swaplp
.endswap:

* PART II:
* 1) Do left side of polygon.
	lea	txtpolyedge_tbl,a6
	clr.w	(a6)
	lea	2(a6),a0
	lea	txtpolyscript_buf,a1
	move.w	(a1)+,d7
	subq.w	#1,d7
	bpl.s	.dopt2
	lea	12(sp),sp			* Adjust stack before RTS: some data was still pushed on it
	rts
.dopt2:	moveq	#0,d0
	move.w	2(sp),d2			* Pop y texturepos. of stack
	swap	d2
	sub.w	d2,d2
	move.w	(sp),d1				* Pop x texturepos. of stack
	swap	d1
	sub.w	d1,d1
	movea.w	#12,a2
.entryloopl:
	move.l	(a1)+,d3
	move.l	(a1)+,d4
	move.l	(a1)+,d5
	adda.l	a2,a1
	move.w	(a1)+,d6
	add.w	d6,(a6)
	subq.w	#1,d6
	bpl.s	.lineloopl
	add.l	d3,d0
	add.l	d4,d1
	add.l	d5,d2
	bra.s	.d7dbfl
.lineloopl:
	swap	d0
	swap	d1
	swap	d2
	movem.w	d0-d2,(a0)
	adda.l	a2,a0
	swap	d0
	swap	d1
	swap	d2
	add.l	d3,d0
	add.l	d4,d1
	add.l	d5,d2
	dbra	d6,.lineloopl
.d7dbfl:
	dbra	d7,.entryloopl
* 2) Do right side of polygon.
	lea	txtpolyedge_tbl+2+6,a0
	lea	txtpolyscript_buf,a1
	move.w	(a1)+,d7
	moveq	#0,d0
	move.w	(sp)+,d1			* Pop x texturepos. of stack
	swap	d1
	sub.w	d1,d1
	move.w	(sp)+,d2			* Pop y texturepos. of stack
	swap	d2
	sub.w	d2,d2
.entryloopr:
	adda.l	a2,a1
	move.l	(a1)+,d3
	move.l	(a1)+,d4
	move.l	(a1)+,d5
	move.w	(a1)+,d6
	subq.w	#1,d6
	bpl.s	.do_lineloopr
	add.l	d3,d0
	add.l	d4,d1
	add.l	d5,d2
	bra.s	.d7dbfr
.do_lineloopr:
.lineloopr:
	swap	d0
	swap	d1
	swap	d2
	movem.w	d0-d2,(a0)
	adda.l	a2,a0
	swap	d0
	swap	d1
	swap	d2
	add.l	d3,d0
	add.l	d4,d1
	add.l	d5,d2
	dbra	d6,.lineloopr
.d7dbfr:
	dbra	d7,.entryloopr
* PART III:
	move.l	(sp)+,a0
	move.l	(sp)+,a2
	addq	#4,a2
	move.l	a0,a6
	lea	txtpolyedge_tbl,a1
	move.w	(a1)+,d7
	lea	scrxbytes.w,a5
	subq.w	#1,d7
	bmi.s	.rts
.drawtxtlinelp:
	movem.w	(a1)+,d0/d1/d2/d3/d4/d6
* d0.l: X1 (extend word) d1.l: TX1 (extend word) d2.l: TY1 (extend word)
* d3.l: X2 (extend word) d4.l: TX2 (extend word) d6.l: TY2 (extend word)
	lea	(a0,d0.l*2),a0
	sub.l	d1,d4
	sub.l	d2,d6
	lsl.w	#8,d2
	asl.l	#8,d4
	asl.l	#8,d6
	sub.w	d0,d3
	bmi.s	.rts
	beq.s	.1pix
	divs.w	d3,d4
	divs.w	d3,d6
.1pix:	rol.l	#8,d6
	move.b	d4,d6
	rol.l	#8,d6
	eor.b	d6,d6
	swap	d6				* uu--VVvv
	lsr.w	#8,d4				* ------UU
	moveq	#0,d5
.plotpixlp:
	move.w	d2,d5
	move.b	d1,d5
	move.w	(a2,d5.l*2),(a0)+
	add.l	d6,d2
	addx.b	d4,d1
	dbra	d3,.plotpixlp
	adda.l	a5,a6
	movea.l	a6,a0
	dbra	d7,.drawtxtlinelp
.rts:	rts

* Subroutine that finds the next texturepoly point in a texturepoly.
* Searches anti-clockwise.
* INPUT: a1: address of first texturepoly point
*        a5: address of actual texturepolypoint
*        d7: number of points in texturepoly
* OUTPUT: a3: address of found point
.getnextpointaclock:
	lea	-10(a5),a3
	cmpa.l	a1,a3
	bpl.s	.ok
	move.w	d7,d0
	mulu.w	#10,d0
	lea	(a1,d0.l),a3
.ok:	rts

* Subroutine that finds the next lowest texturepoly point in a texturepoly.
* Searches clockwise
* INPUT: a1: address of first texturepoly point
*        a6: address of current point
*        d7: number of points in texturepoly
* OUTPUT: a4: address of found point
.getnextpointclock:
	lea	10(a6),a4
	move.l	a4,d0
	sub.l	a1,d0
	move.w	d7,d1
	mulu.w	#10,d1
	cmp.l	d0,d1
	bpl.s	.okido
	move.l	a1,a4
.okido:	rts

* INPUT: a0: screenaddress
PLOT_TEXTCUBELOGO:
	move.w	tcubelogolines,d0
	bne.s	.go_on
	rts
.go_on:	lea	texturecubepic_dat,a1
	adda.l	#scrxbytes*200+scrxbytes-45*4,a0
	move.w	d0,d7
	mulu.w	#scrxbytes,d0
	suba.l	d0,a0
	subq.w	#1,d7

.yloop:
	REPT	45
	move.l	(a1)+,(a0)+
	ENDR
	lea	scrxbytes-45*4(a0),a0
	dbra	d7,.yloop
	rts

******** END OF DEMO-EFFECT OBJECT ********