******** BEGIN OF DEMO-EFFECT OBJECT ********

blobradi:	equ	54
blobrad:	equ	50/4*4
numblobs:	equ	4

blobfx_tbl:
	DC.L	BLOBMAINLOOP
	DC.L	INIT_BLOB
	DC.L	SET_BLOBRES
* Add more addresses here..
	DC.L	0

******** RESOLUTION SETTING ROUTINE ********

SET_BLOBRES:
	IFEQ	testmode
	move.l	$0466.w,d0
.ck466:	cmp.l	$0466.w,d0
	beq.s	.ck466
	move.w	monitormode,d0
	cmpi.w	#vga60,d0
	beq.s	.vga60
	cmpi.w	#vga100,d0
	beq.s	.vga100
	cmpi.w	#rgb50,d0
	beq	.rgb50
* Unknown monitormode..
	rts
.vga60:
	move.l   #$c6008D,$ffff8282.w
	move.l   #$1502ac,$ffff8286.w
	move.l   #$8D0097,$ffff828a.w
	move.l   #$41903ff,$ffff82a2.w
	move.l   #$3f0155,$ffff82a6.w
	move.l   #$2e50415,$ffff82aa.w
	move.w   #$200,$ffff820a.w
	move.w   #$186,$ffff82c0.w
	clr.w    $ffff8266.w
	move.w   #$100,$ffff8266.w
	move.w   #$5,$ffff82c2.w
	move.w   #$140,$ffff8210.w
	rts
.vga100:
	move.l   #$c6008f,$ffff8282.w
	move.l   #$1802ae,$ffff8286.w
	move.l   #$8f0098,$ffff828a.w
	move.l   #$275025b,$ffff82a2.w
	move.l   #$410085,$ffff82a6.w
	move.l   #$2150271,$ffff82aa.w
	move.w   #$200,$ffff820a.w
	move.w   #$186,$ffff82c0.w
	clr.w    $ffff8266.w
	move.w   #$100,$ffff8266.w
	move.w   #$5,$ffff82c2.w
	move.w   #$140,$ffff8210.w
	rts
.rgb50:	lea	r3210t5_fv,a0
	bsr	CHANGE_FVFAST
	ENDC
	rts

******** INIT SUBROUTINE ********

INIT_BLOB:
	bsr	INIT_SHADETAB
	bsr	PRECALC_BLOBBUFFERS
	rts

******** MAINLOOP SUBROUTINE ********

BLOBMAINLOOP:
	IFEQ	objectmode
	IFEQ	testmode
	addq.l	#1,frmcnt
	ENDC
	ENDC

	move.w	strblobinv,d1
	bsr	CALC_BLOBTRAJECTS
	bsr	PLOT_SLOW4BLOBS

	IFEQ	testmode
	lea	scr,a0
	move.l	(a0)+,d0
	move.l	(a0)+,d1
	move.l	(a0),-4(a0)
	move.l	d0,(a0)
	move.l	d1,-8(a0)
	move.l	d0,d1
	lsr.w	#8,d0
	move.l	d0,$ffff8200.w
	move.b	d1,$ffff820d.w
	ENDC
	rts

******** OBJECT SUBROUTINES ********

* INPUT: a0: screenaddress
CLEAR_SCR3210T:
	moveq	#0,d0
	move.l	d0,d1
	move.l	d0,d2
	move.l	d1,d3
	move.l	d2,d4
	move.l	d3,d5
	move.l	d4,d6
	moveq	#61-1,d7
	movea.l	d0,a1
	movea.l	d1,a2
	movea.l	d2,a3
	movea.l	d3,a4
	movea.l	d4,a5
	movea.l	d5,a6
	adda.l	#320*100*2,a0
.loop	REPT	20
	movem.l	d0-d6/a1-a6,-(a0)
	ENDR
	dbra	d7,.loop
	REPT	10
	movem.l	d0-d6/a1-a6,-(a0)
	ENDR
	movem.l	d0-d6/a1-a3,-(a0)
	rts

* Routine that creates a simple color-flow and puts it in a table.
INIT_SHADETAB
	move.w	#%0000000000000001,d0
	move.w	#%0000000000000000,d1
	lea	colorflow_tbl,a0
	moveq	#32-1,d7
.lp	move.w	#128-1,d6
.inlp	move.w	d1,(a0)+
	dbra	d6,.inlp
	add.w	d0,d1
	dbra	d7,.lp

	move.w	#%0000000000011111,d1
	moveq	#32-1,d7
.lp2	move.w	#128-1,d6
.inlp2	move.w	d1,(a0)+
	dbra	d6,.inlp2
	subi.w	#%0000000000000001,d1
	addi.w	#%0000000000100000,d1
	dbra	d7,.lp2

	move.w	#%0000001111100000,d0
	moveq	#32-1,d7
.lp3	move.w	#128-1,d6
.inlp3	move.w	d0,(a0)+
	dbra	d6,.inlp3
	addi.w	#%0000000000100000,d0
	dbra	d7,.lp3

	move.w	#%0000011111100000,d0
	moveq	#32-1,d7
.lp4	move.w	#128-1,d6
.inlp4	move.w	d0,(a0)+
	dbra	d6,.inlp4
	addi.w	#%0000100000000000,d0
	dbra	d7,.lp4

	move.w	#%1111111111100000,d0
	moveq	#32-1,d7
.lp5	move.w	#128-1,d6
.inlp5	move.w	d0,(a0)+
	dbra	d6,.inlp5
	subi.w	#%0000000000100000,d0
	dbra	d7,.lp5

	move.w	#%1111110000000000,d0
	moveq	#32-1,d7
.lp6	move.w	#128-1,d6
.inlp6	move.w	d0,(a0)+
	dbra	d6,.inlp6
	addi.w	#%0000000000000001,d0
	dbra	d7,.lp6

	move.w	#%1111110000011111,d0
	moveq	#32-1,d7
.lp7	move.w	#256-1,d6
.inlp7	move.w	d0,(a0)+
	dbra	d6,.inlp7
	addi.w	#%0000000000100000,d0
	dbra	d7,.lp7

	moveq	#$ffffffff,d0
	move.w	#(8192+16384)-1,d7
.lp8	move.w	d0,(a0)+
	dbra	d7,.lp8

	rts

* Routine that precalculates the plottable picture of a blob-element and
* also the density-buffer for an element.
PRECALC_BLOBBUFFERS
* Calculate the density buffer..
	lea	blobdens_tbl+(blobrad*2*blobrad*2*2),a0
	moveq	#(blobrad*2)-1,d7

.yloop	moveq	#(blobrad*2)-1,d6
.xloop	move.w	d6,d0
	move.w	d7,d1
	subi.w	#blobrad,d0
	subi.w	#blobrad,d1
	muls.w	d0,d0
	muls.w	d1,d1
	add.l	d0,d1
	cmpi.l	#blobrad*blobrad,d1
	blt.s	.in
	move.l	#$ffff,d0
	bra.s	.calc
.in	moveq	#0,d0
	divu.l	#(blobrad*blobrad),d1:d0
	eor.w	d0,d0
	swap	d0
.calc	move.l	#$ffff,d2
	sub.l	d0,d2
	mulu.w	d2,d2
	swap	d2
;	mulu.w	d2,d2
;	eor.w	d2,d2
;	swap	d2
	andi.l	#$ffff,d2
	divu.w	#numblobs,d2
	move.w	d2,-(a0)
	dbra	d6,.xloop
	dbra	d7,.yloop

* Calculate the highcolor-buffer out of the density-buffer.
	move.w	#(blobrad*2)-1,d7
	lea	blobdens_tbl,a1
	lea	colorflow_tbl,a2
	lea	blob_pic,a0
	moveq	#0,d1
.cnvlp	move.w	#(blobrad*2)-1,d6
.cxloop	move.w	(a1)+,d1
	move.w	(a2,d1.l*2),(a0)+
	dbra	d6,.cxloop
	dbra	d7,.cnvlp
	rts

* Update the circular-movement of the blobs.
* INPUT: d1.w: 0=positive movement
*              1=negative movement
CALC_BLOBTRAJECTS
	lea	blobpos_tbl,a0
	lea	sine_tbl,a1
	move.l	$4ba.w,d0
	sub.l	starttime,d0
	asr.l	#1,d0
	tst.w	d1
	bne.s	.do_it
	neg.w	d0
.do_it
* Blob 1..
	Do_SinModulo	d0
	Get_SinCos	a1,d0,d1,d2
	asr.w	#8,d1
	asr.w	#8,d2
	asr.w	#2,d1
	asr.w	#1,d2
	move.w	d1,(a0)+
	move.w	d2,(a0)+
* Blob 2..
	mulu.w	#5,d0
	Do_SinModulo	d0
	Get_SinCos	a1,d0,d1,d2
	asr.w	#8,d1
	asr.w	#8,d2
	asr.w	#1,d1
	asr.w	#1,d2
	move.w	d1,d6
	move.w	d1,(a0)+
	move.w	d2,(a0)+
* Blob 3..
	neg.w	d0
	addi.w	#500,d0
	Do_SinModulo	d0
	Get_SinCos	a1,d0,d1,d2
	asr.w	#8,d1
	asr.w	#8,d2
	asr.w	#1,d1
	asr.w	#2,d2
	move.w	d1,(a0)+
	move.w	d2,(a0)+
* Blob 4..
	addi.w	#700,d0
	Do_SinModulo	d0
	Get_SinCos	a1,d0,d1,d2
	asr.w	#8,d1
	asr.w	#8,d2
	asr.w	#1,d1
	asr.w	#1,d2
	move.w	d1,(a0)+
	move.w	d2,(a0)+

	lea	blobpos_tbl,a0
	lea	4*4(a0),a1
	lea	(a0),a6
	REPT	6
	movem.w	(a0)+,d0-d1
	addi.w	#100/2-blobrad,d0
	addi.w	#(scrxbytes/4)-blobrad,d1
	move.w	d1,(a1)+
	move.w	d0,(a1)+
	ENDR
	REPT	4
	addi.w	#(scrxbytes/4)-blobrad,(a6)+
	addi.w	#100/2-blobrad,(a6)+
	ENDR
	rts

PLOT_SLOW4BLOBS
	lea	blobbasin_buf,a0
	bsr	CLEAR_SCR3210T

	lea	blobpos_tbl,a5
	moveq	#numblobs-1,d7

.biglop	swap	d7
	lea	blobdens_tbl,a1
	lea	blobbasin_buf,a0
	movem.w	(a5)+,d0-d1
	muls.w	#640,d1
	add.l	d0,d0
	add.l	d1,a0
	add.l	d0,a0
	lea	(a0),a2
	adda.l	#((blobrad*2)-1)*640,a2
	lea	blobrad*4(a0),a3
	lea	blobrad*4(a2),a4
	move.w	#blobrad-1,d7
.loop1	moveq	#(blobrad/4)-1,d6
.iloop1	movem.l	(a1)+,d0-d3
	add.l	d0,(a0)+
	add.l	d1,(a0)+
	add.l	d2,(a0)+
	add.l	d3,(a0)+
	add.l	d0,(a2)+
	add.l	d1,(a2)+
	add.l	d2,(a2)+
	add.l	d3,(a2)+
	dbra	d6,.iloop1
	lea	640-(blobrad*4)(a0),a0
	lea	-640-(blobrad*4)(a2),a2
	dbra	d7,.loop1
	swap	d7
	dbra	d7,.biglop

	bra	PLOT_HEIGHTFIELD

	lea	blobbasin_buf,a1
	lea	colorflow_tbl,a2
	lea	sine_tbl,a0
	moveq	#0,d0
	move.w	$4bc.w,d0
	sub.w	starttime+2,d0
	move.w	d0,d1
	lsl.w	#2,d0
	Do_SinModulo	d0
	lsr.w	#1,d0
	Get_Sin		a0,d0,d0
	lsr.w	#8,d0
	lsr.w	#1,d0
	addi.w	#$0040,d0
	mulu.w	#3,d1
	lsr.l	#1,d1
	Do_SinModulo	d1
	Get_SinCos	a0,d1,d6,d7
	asr.w	#8,d6
	asr.w	#1,d6	
	asr.w	#8,d7
	asr.w	#3,d7
	move.l	d0,d1
	neg.l	d1
	addi.l	#$00e0,d1
	move.l	#$0100,d0			* Voor 2*2 pix testen..
	move.l	#$0100,d1
	bra	PLOT_HEIGHTFIELD

PLOT_HEIGHTFIELD
	move.l	scr,a0
	lea	blobbasin_buf+160,a1
	lea	colorflow_tbl,a2
	moveq	#0,d0
	moveq	#0,d1
	moveq	#0,d2
	moveq	#0,d3
	moveq	#100-1,d7
.yloop	move.w	#(scrxbytes/16)-1,d6
.xloop	move.w	(a1)+,d0
	move.w	(a1)+,d1
	move.w	(a1)+,d2
	move.w	(a1)+,d3
	move.l	(a2,d0.l*2),(a0)+
	move.l	(a2,d1.l*2),(a0)+
	move.l	(a2,d2.l*2),(a0)+
	move.l	(a2,d3.l*2),(a0)+
	dbra	d6,.xloop
	lea	320(a1),a1
	dbra	d7,.yloop
	rts

******** OBJECT DATA ********

	DATA

strblobinv:
	DC.W	0

******** OBJECT RESERVES ********

	BSS

colorflow_tbl:
	DS.W	65536
blobpos_tbl:
	DS.W	2*20				* 20 x,y
blob_pic:
	DS.W	54*2*54*2
blobdens_tbl:
	DS.W	54*2*54*2

	DS.W	320*100			;ds.w	320*200
blobbasin_buf:
	DS.W	320*100			;ds.w	320*200
	DS.W	320*100			;ds.w	320*200

******** OBJECT SUBROUTINES ********

	TEXT

******** END OF DEMO-EFFECT OBJECT ********