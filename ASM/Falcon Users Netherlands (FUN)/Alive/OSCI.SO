* Object skeleton used by DEMOS1.S or DASTD.S (v1.5)
* v1.0: * Monitormode selection.
*       * SET_RES routine vbl-synced.
*       * Screenaddress-setting optimised.

******** OBJECT EQUS ********

******** OBJECT TABLE ********

* Must be first in object!!
demofx_tbl:
	DC.L	DEMOFXMAINLOOP
	DC.L	INIT_DEMOFX
	DC.L	SET_DEMOFXRES
* Add more addresses here..
	DC.L	0

******** RESOLUTION SETTING ROUTINE ********

SET_DEMOFXRES:
	IFEQ	testmode
	move.l	$0466.w,d0
.ck466:	cmp.l	$0466.w,d0
	beq.s	.ck466
	move.w	monitormode,d0
	cmpi.w	#vga50,d0
	beq.s	.vga50
	cmpi.w	#vga100,d0
	beq.s	.vga100
	cmpi.w	#rgb50,d0
	beq.s	.rgb50
* Unknown monitormode..
	rts
.vga50:	lea	v3220t5_fv,a0
	bsr	CHANGE_FVFAST
	rts
.vga100:
;
;	
	rts
.rgb50:	lea	r3220t5_fv,a0
	bsr	CHANGE_FVFAST
	ENDC
	rts

******** INIT SUBROUTINE ********

INIT_DEMOFX:
	bsr	dspmod32_start				;init dspmod
	lea	module_mod,a0
	bsr	dspmod32_play_module
	move.l	#dspmod32_player+44,musicirq

	lea	lastscopeframe_tbl,a0
	move.w	#(scrxbytes/4*3)-1,d7
	moveq	#0,d0
.loop:	move.l	d0,(a0)+
	dbra	d7,.loop
	rts

******** MAINLOOP SUBROUTINE ********

DEMOFXMAINLOOP:
	IFND	demoos
	IFEQ	testmode
	addq.l	#1,frmcnt
	move.l	$466.w,.old466
	ENDC
	ENDC

	bsr	PLOT_OSCILOSCOPE

	IFEQ	testmode
	move.l	.old466(pc),d0
.waitvbl:
	cmp.l	$466.w,d0
	beq.s	.waitvbl

	lea	scr,a0
	move.l	(a0)+,d0
	move.l	(a0)+,d1
	move.l	(a0),-4(a0)
	move.l	d0,(a0)
	move.l	d1,-8(a0)
	move.l	d0,d1
	lsr.w	#8,d0
	move.l	d0,$ffff8200.w
	move.b	d1,$ffff820d.w
	ENDC
	rts

.old466:
	DS.L	1

******** OBJECT DATA ********

	DATA

module_mod:
	INCBIN	E:\MOD\STRANGEL.MOD
	EVEN

scopeframeadr:
	DC.L	lastscopeframe_tbl
	DC.L	lastscopeframe_tbl+scrxbytes*2
	DC.L	lastscopeframe_tbl+scrxbytes*4

******** OBJECT RESERVES ********

	BSS

lastscopeframe_tbl:
	DS.L	scrxbytes/2*3

******** OBJECT SUBROUTINES ********

	TEXT

PLOT_OSCILOSCOPE:
	movea.l	scr,a6
	adda.l	#scrxbytes*100,a6
	movea.l	a6,a0
	movea.l	scopeframeadr,a1
	moveq	#0,d1
	move.w	#scrxbytes/2-1,d7

.clrloop:
	move.l	(a1)+,d0
	move.w	d1,(a6,d0.l)
	addq	#2,a6
	dbra	d7,.clrloop

	move.l	$ffff8902.w,d0
	move.b	$ffff8907.w,d1
	lsl.w	#8,d0
	move.b	d1,d0

	movea.l	d0,a1
	movea.l	scopeframeadr,a2
	move.w	#scrxbytes/2-1,d7
	moveq	#$ffffffff,d1

.loop:	move.w	(a1),d0
	addq	#8,a1
	asr.w	#8,d0
	muls.w	#scrxbytes,d0
	move.w	d1,(a0,d0.l)
	move.l	d0,(a2)+
	addq	#2,a0
	dbra	d7,.loop

	lea	scopeframeadr,a0
	move.l	(a0)+,d0
	move.l	(a0)+,d1
	move.l	(a0),-4(a0)
	move.l	d0,(a0)
	move.l	d1,-8(a0)
	rts

******** END OF DEMO-EFFECT OBJECT ********