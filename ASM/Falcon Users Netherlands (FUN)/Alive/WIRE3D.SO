* 4 bitplane wireframe with motionblur. I can't seem to get the blur right.
* But hell.. It works more or less.

* Object skeleton used by DEMOS1.S or DASTD.S (v1.5)
* v1.0: * Monitormode selection.
*       * SET_RES routine vbl-synced.
*       * Screenaddress-setting optimised.

******** OBJECT EQUS ********

wire100color:	EQU	$6f6f006f
wire075color:	EQU	$9f9f009f
wire050color:	EQU	$bfbf00bf
wire025color:	EQU	$bfbf00bf
wire000color:	EQU	$ffff00ff

******** OBJECT TABLE ********

* Must be first in object!!
wire3d_tbl:
	DC.L	WIRE3DMAINLOOP
	DC.L	INIT_WIRE3D
	DC.L	SET_WIRE3DRES
	DC.L	SET_WIRETORUS
	DC.L	SET_WIRESPIKES
	DC.L	SET_WIRESPIKES2
	DC.L	SET_DUMMY
	DC.L	SET_DUMMY
	DC.L	SET_DUMMY
	DC.L	SET_DUMMY
	DC.L	SET_DUMMY
	DC.L	SET_DUMMY
	DC.L	0

******** RESOLUTION SETTING ROUTINE ********

SET_WIRE3DRES:
	IFEQ	testmode
	move.l	#rts,vbl_gfx

	movea.l	scr,a0
	bsr	CLEAR_3202008SCR
	movea.l	scr+4,a0
	bsr	CLEAR_3202008SCR

	move.w	$0468.w,d0
.ck466:	cmp.w	$0468.w,d0
	beq.s	.ck466

	move.l	#SET_WIRE3DPAL,vbl_gfx

	move.w	monitormode,d0
	cmpi.w	#vga60,d0
	beq.s	.vga60
	cmpi.w	#vga100,d0
	beq.s	.vga100
	cmpi.w	#rgb50,d0
	beq.s	.rgb50
* Unknown monitormode..
	rts
.vga60:	jmp	vga60_8bit_320_200
.vga100:
	jmp	vga100_8bit_320_200
.rgb50:	jmp	rgb50_8bit_320_200
	ENDC
	rts

******** INIT SUBROUTINE ********

INIT_WIRE3D:

	rts

******** MAINLOOP SUBROUTINE ********

WIRE3DMAINLOOP:
	IFND	demoos
	IFEQ	testmode
	addq.l	#1,frmcnt
	ENDC
	ENDC

	move.w	$468.w,.old468

	movea.l	scr,a0
	move.w	bitplane,d0
	bsr	COPY_BLURBITPLANES

	movea.l	wire3dobjadr,a1
	lea	wirerot_tbl,a2
	move.w	$4bc.w,d0
	move.w	d0,d1
	lsl.w	#1,d0
	move.w	d0,(a2)
	mulu.w	#5,d1
	lsr.w	#1,d1
	move.w	d1,2(a2)
	lea	temp_buf,a0
	bsr	ROTATE_3DBUF

	lea	temp_buf,a0
	moveq	#0,d0
	moveq	#0,d1
	move.w	pos_z,d2
	bsr	POSITION_3DBUF

	lea	temp_buf,a0
	bsr	PERSPECT_3DBUF

	movea.l	scr,a0
	lea	temp_buf,a2
	adda.w	bitplane,a0
	bsr	PLOT_3DBUF

	move.w	bitplane,d0
	move.w	d0,oldbitplane
	subq.w	#2,d0
	andi.w	#$0007,d0
	move.w	d0,bitplane

	IFEQ	testmode
	lea	scr,a0
	move.l	(a0)+,d0
	move.l	(a0),-4(a0)
	move.l	d0,(a0)
	move.l	d0,d1
	lsr.w	#8,d0
	move.l	d0,$ffff8200.w
	move.b	d1,$ffff820d.w

	cmpi.w	#vga100,monitormode
	bne.s	.wait1vbl

	move.w	.old468(pc),d0
.wait2vblloop:
	move.w	$468.w,d1
	sub.w	d0,d1
	cmpi.w	#2,d1
	blt.s	.wait2vblloop
	rts

.wait1vbl:
	move.w	$468.w,d0
.wait1vblloop:
	cmp.w	$468.w,d0
	beq.s	.wait1vblloop
	ENDC
	rts

.old468:
	DC.W	0

******** OBJECT DATA ********

	DATA

pos_z:	DC.W	-150
bitplane:
	DC.W	0
oldbitplane:
	DC.W	0
wire3dobjadr:
	DC.L	fuji_ini

wire3dpal_tbl:
* 025 050 075 100
	DC.L	wire000color			* 0000
	DC.L	wire100color			* 0001
	DC.L	wire075color			* 0010
	DC.L	wire100color			* 0011
	DC.L	wire050color			* 0100
	DC.L	wire100color			* 0101
	DC.L	wire075color			* 0110
	DC.L	wire100color			* 0111
	DC.L	wire025color			* 1000
	DC.L	wire100color			* 1001
	DC.L	wire075color			* 1010
	DC.L	wire100color			* 1011
	DC.L	wire050color			* 1100
	DC.L	wire100color			* 1101
	DC.L	wire075color			* 1110
	DC.L	wire100color			* 1111
* 050 075 100 025
	DC.L	wire000color			* 0000
	DC.L	wire025color			* 0001
	DC.L	wire100color			* 0010
	DC.L	wire100color			* 0011
	DC.L	wire075color			* 0100
	DC.L	wire075color			* 0101
	DC.L	wire100color			* 0110
	DC.L	wire100color			* 0111
	DC.L	wire050color			* 1000
	DC.L	wire050color			* 1001
	DC.L	wire100color			* 1010
	DC.L	wire100color			* 1011
	DC.L	wire075color			* 1100
	DC.L	wire075color			* 1101
	DC.L	wire100color			* 1110
	DC.L	wire100color			* 1111
* 075 100 025 050
	DC.L	wire000color			* 0000
	DC.L	wire050color			* 0001
	DC.L	wire025color			* 0010
	DC.L	wire050color			* 0011
	DC.L	wire100color			* 0100
	DC.L	wire100color			* 0101
	DC.L	wire100color			* 0110
	DC.L	wire100color			* 0111
	DC.L	wire075color			* 1000
	DC.L	wire075color			* 1001
	DC.L	wire075color			* 1010
	DC.L	wire075color			* 1011
	DC.L	wire100color			* 1100
	DC.L	wire100color			* 1101
	DC.L	wire100color			* 1110
	DC.L	wire100color			* 1111
* 100 025 050 075
	DC.L	wire000color			* 0000
	DC.L	wire075color			* 0001
	DC.L	wire050color			* 0010
	DC.L	wire075color			* 0011
	DC.L	wire025color			* 0100
	DC.L	wire075color			* 0101
	DC.L	wire050color			* 0110
	DC.L	wire075color			* 0111
	DC.L	wire100color			* 1000
	DC.L	wire100color			* 1001
	DC.L	wire100color			* 1010
	DC.L	wire100color			* 1011
	DC.L	wire100color			* 1100
	DC.L	wire100color			* 1101
	DC.L	wire100color			* 1110
	DC.L	wire100color			* 1111

* Looks best at z_pos=-150
funlogo_ini:
	DC.W	56

	DC.W	-120,-60,20
	DC.W	-60,-60,20
	DC.W	-60,-40,20
	DC.W	-100,-40,20
	DC.W	-100,-20,20
	DC.W	-80,-20,20
	DC.W	-80,0,20
	DC.W	-100,0,20
	DC.W	-100,40,20
	DC.W	-120,40,20
	DC.W	-120,-60,-20
	DC.W	-60,-60,-20
	DC.W	-60,-40,-20
	DC.W	-100,-40,-20
	DC.W	-100,-20,-20
	DC.W	-80,-20,-20
	DC.W	-80,0,-20
	DC.W	-100,0,-20
	DC.W	-100,40,-20
	DC.W	-120,40,-20

	DC.W	-40,-60,20
	DC.W	-20,-60,20
	DC.W	-20,20,20
	DC.W	20,20,20
	DC.W	20,-60,20
	DC.W	40,-60,20
	DC.W	40,40,20
	DC.W	-40,40,20
	DC.W	-40,-60,-20
	DC.W	-20,-60,-20
	DC.W	-20,20,-20
	DC.W	20,20,-20
	DC.W	20,-60,-20
	DC.W	40,-60,-20
	DC.W	40,40,-20
	DC.W	-40,40,-20

	DC.W	60,-60,20
	DC.W	80,-60,20
	DC.W	110,10,20
	DC.W	110,-60,20
	DC.W	130,-60,20
	DC.W	130,40,20
	DC.W	110,40,20
	DC.W	80,-30,20
	DC.W	80,40,20
	DC.W	60,40,20
	DC.W	60,-60,-20
	DC.W	80,-60,-20
	DC.W	110,10,-20
	DC.W	110,-60,-20
	DC.W	130,-60,-20
	DC.W	130,40,-20
	DC.W	110,40,-20
	DC.W	80,-30,-20
	DC.W	80,40,-20
	DC.W	60,40,-20

	DC.W	84

	DC.W	0,1
	DC.W	1,2
	DC.W	2,3
	DC.W	3,4
	DC.W	4,5
	DC.W	5,6
	DC.W	6,7
	DC.W	7,8
	DC.W	8,9
	DC.W	9,0
	DC.W	0,10
	DC.W	1,11
	DC.W	2,12
	DC.W	3,13
	DC.W	4,14
	DC.W	5,15
	DC.W	6,16
	DC.W	7,17
	DC.W	8,18
	DC.W	9,19
	DC.W	10,11
	DC.W	11,12
	DC.W	12,13
	DC.W	13,14
	DC.W	14,15
	DC.W	15,16
	DC.W	16,17
	DC.W	17,18
	DC.W	18,19
	DC.W	19,10

	DC.W	20,21
	DC.W	21,22
	DC.W	22,23
	DC.W	23,24
	DC.W	24,25
	DC.W	25,26
	DC.W	26,27
	DC.W	27,20
	DC.W	20,28
	DC.W	21,29
	DC.W	22,30
	DC.W	23,31
	DC.W	24,32
	DC.W	25,33
	DC.W	26,34
	DC.W	27,35
	DC.W	28,29
	DC.W	29,30
	DC.W	30,31
	DC.W	31,32
	DC.W	32,33
	DC.W	33,34
	DC.W	34,35
	DC.W	35,28

	DC.W	36,37
	DC.W	37,38
	DC.W	38,39
	DC.W	39,40
	DC.W	40,41
	DC.W	41,42
	DC.W	42,43
	DC.W	43,44
	DC.W	44,45
	DC.W	45,36
	DC.W	36,46
	DC.W	37,47
	DC.W	38,48
	DC.W	39,49
	DC.W	40,50
	DC.W	41,51
	DC.W	42,52
	DC.W	43,53
	DC.W	44,54
	DC.W	45,55
	DC.W	46,47
	DC.W	47,48
	DC.W	48,49
	DC.W	49,50
	DC.W	50,51
	DC.W	51,52
	DC.W	52,53
	DC.W	53,54
	DC.W	54,55
	DC.W	55,46

* Looks best at z_pos=-16
logo3d_ini:
	DC.W	60

	DC.W	-80,-60,15
	DC.W	-50,-60,15
	DC.W	-20,-40,15
	DC.W	-20,-20,15
	DC.W	-35,0,15
	DC.W	-20,20,15
	DC.W	-20,40,15
	DC.W	-50,60,15
	DC.W	-80,60,15
	DC.W	-80,50,15
	DC.W	-60,50,15
	DC.W	-35,35,15			* 11
	DC.W	-35,22,15			* 12
	DC.W	-55,0,15
	DC.W	-35,-22,15			* 14
	DC.W	-35,-35,15			* 15
	DC.W	-60,-50,15
	DC.W	-80,-50,15
	DC.W	-80,-60,-15			* 18
	DC.W	-50,-60,-15
	DC.W	-20,-40,-15
	DC.W	-20,-20,-15
	DC.W	-35,0,-15
	DC.W	-20,20,-15
	DC.W	-20,40,-15
	DC.W	-50,60,-15
	DC.W	-80,60,-15
	DC.W	-80,50,-15
	DC.W	-60,50,-15
	DC.W	-35,35,-15			* 29
	DC.W	-35,22,-15
	DC.W	-55,0,-15
	DC.W	-35,-22,-15			* 32
	DC.W	-35,-35,-15
	DC.W	-60,-50,-15
	DC.W	-80,-50,-15
	DC.W	20,-60,15		32
	DC.W	60,-60,15
	DC.W	80,-40,15
	DC.W	80,40,15
	DC.W	60,60,15
	DC.W	20,60,15
	DC.W	35,-45,15		38
	DC.W	50,-45,15
	DC.W	65,-35,15
	DC.W	65,35,15
	DC.W	50,45,15
	DC.W	35,45,15
	DC.W	20,-60,-15		44
	DC.W	60,-60,-15
	DC.W	80,-40,-15
	DC.W	80,40,-15
	DC.W	60,60,-15
	DC.W	20,60,-15
	DC.W	35,-45,-15		50
	DC.W	50,-45,-15
	DC.W	65,-35,-15
	DC.W	65,35,-15
	DC.W	50,45,-15
	DC.W	35,45,-15

	DC.W	90				* Number of lines
* Front side of '3'
	DC.W	0,1
	DC.W	1,2
	DC.W	2,3
	DC.W	3,4
	DC.W	4,5
	DC.W	5,6
	DC.W	6,7
	DC.W	7,8
	DC.W	8,9
	DC.W	9,10
	DC.W	10,11
	DC.W	11,12
	DC.W	12,13
	DC.W	13,14
	DC.W	14,15
	DC.W	15,16
	DC.W	16,17
	DC.W	17,0
* Back side of '3'
	DC.W	18,19
	DC.W	19,20
	DC.W	20,21
	DC.W	21,22
	DC.W	22,23
	DC.W	23,24
	DC.W	24,25
	DC.W	25,26
	DC.W	26,27
	DC.W	27,28
	DC.W	28,29
	DC.W	29,30
	DC.W	30,31
	DC.W	31,32
	DC.W	32,33
	DC.W	33,34
	DC.W	34,35
	DC.W	35,18
* Lines connecting front and back of '3'
	DC.W	0,18
	DC.W	1,19
	DC.W	2,20
	DC.W	3,21
	DC.W	4,22
	DC.W	5,23
	DC.W	6,24
	DC.W	7,25
	DC.W	8,26
	DC.W	9,27
	DC.W	10,28
	DC.W	11,29
	DC.W	12,30
	DC.W	13,31
	DC.W	14,32
	DC.W	15,33
	DC.W	16,34
	DC.W	17,35
* Front of 'D'
	DC.W	36,37
	DC.W	37,38
	DC.W	38,39
	DC.W	39,40
	DC.W	40,41
	DC.W	41,36
	DC.W	42,43
	DC.W	43,44
	DC.W	44,45
	DC.W	45,46
	DC.W	46,47
	DC.W	47,42
* Back of 'D'
	DC.W	48,49
	DC.W	49,50
	DC.W	50,51
	DC.W	51,52
	DC.W	52,53
	DC.W	53,48
	DC.W	54,55
	DC.W	55,56
	DC.W	56,57
	DC.W	57,58
	DC.W	58,59
	DC.W	59,54
* Lines connecting back and front of 'D' toghether
	DC.W	36,48
	DC.W	37,49
	DC.W	38,50
	DC.W	39,51
	DC.W	40,52
	DC.W	41,53
	DC.W	42,54
	DC.W	43,55
	DC.W	44,56
	DC.W	45,57
	DC.W	46,58
	DC.W	47,59

fuji_ini:
	DC.W	44			Number of points in Fuji

	DC.W	-50,-60,10		0
	DC.W	-57,0,10
	DC.W	-70,30,10
	DC.W	-95,38,10		3

	DC.W	-10,-60,10		4
	DC.W	-10,60,10		5

	DC.W	50,-60,10		6
	DC.W	57,0,10
	DC.W	70,30,10
	DC.W	95,38,10		9

	DC.W	-30,-60,10		10
	DC.W	-35,0,10
	DC.W	-50,40,10
	DC.W	-65,52,10
	DC.W	-95,60,10		14

	DC.W	10,-60,10		15
	DC.W	10,60,10		16

	DC.W	30,-60,10		17
	DC.W	35,0,10
	DC.W	50,40,10
	DC.W	65,52,10
	DC.W	95,60,10		21

	DC.W	-50,-60,-10
	DC.W	-57,0,-10
	DC.W	-70,30,-10
	DC.W	-95,38,-10

	DC.W	-10,-60,-10
	DC.W	-10,60,-10

	DC.W	50,-60,-10
	DC.W	57,0,-10
	DC.W	70,30,-10
	DC.W	95,38,-10

	DC.W	-30,-60,-10
	DC.W	-35,0,-10
	DC.W	-50,40,-10
	DC.W	-65,52,-10
	DC.W	-95,60,-10

	DC.W	10,-60,-10
	DC.W	10,60,-10

	DC.W	30,-60,-10
	DC.W	35,0,-10
	DC.W	50,40,-10
	DC.W	65,52,-10
	DC.W	95,60,-10

	DC.W	56			number lines in Fuji

	DC.W	0,1
	DC.W	1,2
	DC.W	2,3

	DC.W	4,5

	DC.W	10,11
	DC.W	11,12
	DC.W	12,13
	DC.W	13,14

	DC.W	6,7
	DC.W	7,8
	DC.W	8,9

	DC.W	15,16

	DC.W	17,18
	DC.W	18,19
	DC.W	19,20
	DC.W	20,21

	DC.W	22+0,22+1
	DC.W	22+1,22+2
	DC.W	22+2,22+3

	DC.W	22+4,22+5

	DC.W	22+10,22+11
	DC.W	22+11,22+12
	DC.W	22+12,22+13
	DC.W	22+13,22+14

	DC.W	22+6,22+7
	DC.W	22+7,22+8
	DC.W	22+8,22+9

	DC.W	22+15,22+16

	DC.W	22+17,22+18
	DC.W	22+18,22+19
	DC.W	22+19,22+20
	DC.W	22+20,22+21

	DC.W	4,15
	DC.W	5,16
	DC.W	22+4,22+15
	DC.W	22+5,22+16
	DC.W	4,22+4
	DC.W	5,22+5
	DC.W	15,22+15
	DC.W	16,22+16

	DC.W	0,10
	DC.W	22+0,22+10
	DC.W	0,22+0
	DC.W	10,22+10
	DC.W	3,14
	DC.W	22+3,22+14
	DC.W	3,22+3
	DC.W	14,22+14

	DC.W	6,17
	DC.W	22+6,22+17
	DC.W	6,22+6
	DC.W	17,22+17
	DC.W	9,21
	DC.W	9+22,21+22
	DC.W	9,22+9
	DC.W	21,22+21

wiretorus_ini:
	INCBIN	TORUS.WIR

wirespikes_ini:
	INCBIN	SPIKES.WIR

wirespikes2_ini:
	INCBIN	SPIKES2.WIR

******** OBJECT RESERVES ********
                                                                                                                                                                                                                                                         
	BSS

wirerot_tbl:
	DS.W	3

******** OBJECT SUBROUTINES ********

	TEXT

SET_DUMMY:
	                                                                                      
	rts

SET_WIRETORUS:
	move.w	#-200,pos_z
	move.l	#wiretorus_ini,wire3dobjadr
	rts

SET_WIRESPIKES:
	move.w	#-500,pos_z
	move.l	#wirespikes_ini,wire3dobjadr
	rts

SET_WIRESPIKES2:
	move.w	#-500,pos_z
	move.l	#wirespikes2_ini,wire3dobjadr
	rts

* Sets first 16 pallettecolors of the falconpallette. Clears the rest of
* the 256.
SET_WIRE3DPAL:
	move.w	oldbitplane,d0
	cmp.w	bitplane,d0
	beq.s	.rts
	lsl.w	#5,d0
	lea	(wire3dpal_tbl,d0.w),a1
	lea	$ffff9800.w,a0
	moveq	#16/2-1,d7
.setpalloop:
	move.l	(a1)+,(a0)+
	move.l	(a1)+,(a0)+
	dbra	d7,.setpalloop

	moveq	#0,d0
	moveq	#240/2-1,d7
.clearpalloop:
	move.l	d0,(a0)+
	move.l	d0,(a0)+
	dbra	d7,.clearpalloop
.rts:	rts

* INPUT: d0.w: bitplane number *2
*        a0: destination screen
*        a1: source screen
COPY_BLURBITPLANES:
	moveq	#16,d1
	moveq	#14,d2
	move.w	#20*200-1,d7
	moveq	#0,d6
	move.w	d0,d0
	beq.s	.bpl0
	cmpi.w	#2,d0
	beq.s	.bpl1
	cmpi.w	#4,d0
	beq.s	.bpl2
	bra.s	.bpl3

.bpl0:	lea	4(a0),a1
.bpl0loop:
;	move.w	4(a0),2(a0)	2(a1),2(a0)
;	move.w	d6,(a0)
;;	move.w	4(a1),4(a0)
;;	move.w	6(a1),6(a0)
;	adda.l	d1,a0
;	adda.l	d1,a1

	move.w	d6,(a0)+
	move.w	(a1),(a0)
	adda.l	d2,a0
	adda.l	d1,a1
	dbra	d7,.bpl0loop
	rts
.bpl1:	lea	6(a0),a1
	addq	#2,a0
.bpl1loop:
;	move.w	6(a0),4(a0)	4(a1),4(a0)
;;	move.w	(a1),(a0)
;	move.w	d6,2(a0)
;;	move.w	6(a1),6(a0)
;	adda.l	d1,a0
;	adda.l	d1,a1

	move.w	d6,(a0)+
	move.w	(a1),(a0)
	adda.l	d2,a0
	adda.l	d1,a1
	dbra	d7,.bpl1loop
	rts
.bpl2:	movea.l	a0,a1
	addq	#4,a0
.bpl2loop:
;	move.w	(a0),6(a0)	6(a1),6(a0)
;;	move.w	(a1),(a0)
;;	move.w	2(a1),2(a0)
;	move.w	d6,4(a0)
;	adda.l	d1,a0
;	adda.l	d1,a1

	move.w	d6,(a0)+
	move.w	(a1),(a0)
	adda.l	d2,a0
	adda.l	d1,a1
	dbra	d7,.bpl2loop
	rts
.bpl3:	lea	2(a0),a1
.bpl3loop:
;	move.w	2(a0),(a0)	(a1),(a0)
;;	move.w	2(a1),2(a0)
;;	move.w	4(a1),4(a0)
;	move.w	d6,6(a0)
;	adda.l	d1,a0
;	adda.l	d1,a1

	move.w	d6,6(a0)
	move.w	(a1),(a0)
	adda.l	d1,a0
	adda.l	d1,a1
	dbra	d7,.bpl3loop
	rts

* This routine is just a easy to calculate sinus-matrix thingy
* rotates around the z-axis and then around the y-axis.
* makes a rotated copy of the original...
* INPUT: a0: address of destination objectbuffer
*        a1: address of source objectbuffer
*        a2: address of rotation-array
ROTATE_3DBUF:
* Get sine-values..
	lea	sine_tbl,a3
	Do_SinModulo	(a2)
	move.w	(a2)+,d0
	Get_SinCos	a3,d0,d1,d2
	Do_SinModulo	(a2)
	move.w	(a2)+,d0
	Get_SinCos	a3,d0,d3,d4
	move.l	a0,a6
	addq	#4,a0
	move.w	(a1)+,d7
	move.w	d7,(a0)+
	subq.w	#1,d7
	movea.w	d7,a5
	movea.l	a1,a2
* Calculate the x-coordinates..
.xloop:	move.w	(a1)+,d0
	muls.w	d4,d0
	addq	#2,a1
	move.w	(a1)+,d5
	muls.w	d3,d5
	sub.l	d5,d0
	add.l	d0,d0
	swap	d0
	move.w	d0,(a0)
	addq	#6,a0
	dbra	d7,.xloop
* Calculate the y-coordinates..
	lea	6+2(a6),a0			* Get address of first y-coord
	move.l	d3,a3				* Backup
	move.l	d4,a4				* Backup
	muls.w	d1,d3
	muls.w	d1,d4
	rol.l	#1,d3
	rol.l	#1,d4
	swap	d3
	swap	d4
	movea.l	a2,a1
	move.w	a5,d7
.yloop:	movem.w	(a1)+,d5-d6
	muls.w	d3,d5
	muls.w	d2,d6
	move.w	(a1)+,d0
	muls.w	d4,d0
	add.l	d0,d5
	add.l	d6,d5
	add.l	d5,d5
	swap	d5
	move.w	d5,(a0)
	addq	#6,a0
	dbra	d7,.yloop
* Calculate the z-coordinates..
	lea	6+4(a6),a0			* Get address of first z-coord
	move.l	a3,d3
	move.l	a4,d4
	muls.w	d2,d3
	muls.w	d2,d4
	rol.l	#1,d3
	rol.l	#1,d4
	swap	d3
	swap	d4
	move.l	a2,a1
	move.w	a5,d7
.zloop:	movem.w	(a1)+,d5-d6
	muls.w	d3,d5
	muls.w	d1,d6
	sub.l	d6,d5
	move.w	(a1)+,d0
	muls.w	d4,d0
	add.l	d0,d5
	add.l	d5,d5
	swap	d5
	move.w	d5,(a0)
	addq	#6,a0
	dbra	d7,.zloop
	move.l	a1,(a6)				* Store address of object-polydata
	rts

* INPUT: a0: address of objectbuffer
POSITION_3DBUF:
	addq	#4,a0
	move.w	(a0)+,d7
	subq.w	#1,d7

.2loop	add.w	d0,(a0)+
	add.w	d1,(a0)+
	add.w	d2,(a0)+
	dbra	d7,.2loop
	rts

* INPUT: a0: address of objectbuffer
PERSPECT_3DBUF:
	addq	#4,a0
	move.w	(a0)+,d7
	subq.w	#1,d7
	movea.l	a0,a1
	move.w	#320/2,d4
	moveq	#200/2,d5
	move.w	#$0100,d6

.perspectloop:
	movem.w	(a0)+,d1-d3		* Get x, y and z.
	neg.w	d3
	lsl.l	#8,d1
	add.w	d6,d3			* d0.w: scale factor
	lsl.l	#8,d2
	divs.w	d3,d1			* Scale x-coordinate.
	divs.w	d3,d2			* Scale y-coordinate.
	add.w	d4,d1			* Center x-coordinate.
	add.w	d5,d2			* Center y-coordinate.
	move.w	d1,(a1)+		* Store x-coordinate.
	move.w	d2,(a1)+		* Store y-xoordinate.
	addq	#2,a1
	dbra	d7,.perspectloop
	rts

* INPUT: a0: screenaddress
*        a2: objectaddress
PLOT_3DBUF:
	movea.l	a0,a6
	movea.l	(a2)+,a1
	addq	#2,a2
	move.w	(a1)+,d7
	subq.w	#1,d7
	bmi	.rts

.loop:	movem.w	(a1)+,d0/d2
	add.l	d0,d0
	add.l	d2,d2
	move.l	d0,d1
	move.l	d2,d3
	add.l	d0,d0
	add.l	d2,d2
	add.l	d1,d0
	add.l	d3,d2
	movem.w	(a2,d0.l),d0-d1
	movem.w	(a2,d2.l),d2-d3
	movea.l	a6,a0
	move.w	d7,-(sp)

* Plots a line to an 8 bitplane screen. NO CLIPPING!
* INPUT: d0.l: x0
*        d1.l: y0
*        d2.l: x1
*        d3.l: y1
*        a0: screenaddress (+bitplane offset)
	move.l	d2,d4
	move.l	d3,d5
	sub.w	d0,d2
	bpl.s	.xpos
	neg.w	d2
.xpos:	sub.w	d1,d3
	bpl.s	.ypos
	neg.w	d3
.ypos:	cmp.w	d2,d3
	bhi.s	.doverticalslope

.dohorizontalslope:
	cmp.w	d0,d4
	bhi.s	.h_lrswapped
	exg	d0,d4
	exg	d1,d5
.h_lrswapped:
	move.l	#320,d2
	sub.l	d0,d4
	sub.l	d1,d5
	bpl.s	.h_updown
	neg.l	d5
	neg.l	d2
.h_updown:
	mulu.w	#320,d1
	adda.l	d1,a0
	move.l	d0,d1
	andi.w	#$fff0,d0
	adda.l	d0,a0
	sub.l	d0,d1
	subi.w	#15,d1
	neg.w	d1
	moveq	#0,d6
	bset	d1,d6
	lsl.w	#8,d4
	addq.w	#1,d5
	divu.w	d5,d4
	subq.w	#1,d5
	move.w	d4,d3
	lsr.w	#8,d3
	subq.w	#1,d3
	bpl.s	.hnoadjust
	moveq	#0,d3
	moveq	#0,d4
.hnoadjust:
	moveq	#0,d1
	move.w	d3,d7
	movea.w	#16,a3
	addq.w	#1,d7

.hchunkloop:
	move.w	(a0),d0
.hpixelloop:
	or.w	d6,d0
	ror.w	#1,d6
	dbcs	d7,.hpixelloop
	move.w	d0,(a0)
	move.w	d7,d7
	bmi.s	.hnextline
	adda.l	a3,a0
	subq.w	#1,d7
	bpl.s	.hchunkloop
.hnextline:
	adda.l	d2,a0
	move.w	d3,d7
	add.b	d4,d1
	bcc.s	.hnocarry
	addq.w	#1,d7
.hnocarry:
	dbra	d5,.hchunkloop
	bra.s	.endplot

.doverticalslope:
	cmp.w	d0,d4
	bhs.s	.v_lrswapped
	exg	d0,d4
	exg	d1,d5
.v_lrswapped:
	move.l	#320,d2
	sub.l	d0,d4
	sub.l	d1,d5
	bpl.s	.v_updown
	neg.l	d5
	neg.l	d2
.v_updown:
	mulu.w	#320,d1
	adda.l	d1,a0
	move.l	d0,d1
	andi.w	#$fff0,d0
	adda.l	d0,a0
	sub.l	d0,d1
	moveq	#0,d6
	subi.w	#15,d1
	neg.w	d1
	bset	d1,d6
	lsl.w	#8,d5
	addq.w	#1,d4
	divu.w	d4,d5
	subq.w	#1,d4
	move.w	d5,d3
	lsr.w	#8,d3
	subq.w	#1,d3
	move.w	d3,d7
	moveq	#0,d1
	movea.w	#16,a3
	addq.w	#1,d7

.vchunkloop:
.vpixelloop:
	or.w	d6,(a0)
	adda.l	d2,a0
	dbra	d7,.vpixelloop
	move.w	d3,d7
	add.b	d5,d1
	bcc.s	.vnocarry
	addq.w	#1,d7
.vnocarry:
	ror.w	#1,d6
	bcc.s	.vnotnextbpl
	adda.l	a3,a0
.vnotnextbpl:
	dbra	d4,.vchunkloop

.endplot:
	move.w	(sp)+,d7
	dbra	d7,.loop

.rts	rts

******** END OF DEMO-EFFECT OBJECT ********