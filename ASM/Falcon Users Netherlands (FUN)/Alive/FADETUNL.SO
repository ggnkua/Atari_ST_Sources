* Object skeleton used by DEMOS1.S or DASTD.S (v1.5)
* v1.0: * Monitormode selection.
*       * SET_RES routine vbl-synced.
*       * Screenaddress-setting optimised.

******** OBJECT EQUS ********

******** OBJECT TABLE ********

* Must be first in object!!
tunnel_tbl:
	DC.L	TUNNELMAINLOOP
	DC.L	INIT_TUNNEL
	DC.L	SET_TUNNELRES
	DC.L	CLEAR_PAL256
	DC.L	0

******** RESOLUTION SETTING ROUTINE ********

SET_TUNNELRES:
	IFEQ	testmode
	move.l	$0466.w,d0
.ck466:	cmp.l	$0466.w,d0
	beq.s	.ck466

	movea.l	scr,a0
	bsr	CLEAR_RIGHTLINE
	movea.l	scr+4,a0
	bsr	CLEAR_RIGHTLINE
	movea.l	scr+8,a0
	bsr	CLEAR_RIGHTLINE

	move.w	monitormode,d0
	cmpi.w	#vga60,d0
	beq.s	.vga60
	cmpi.w	#vga100,d0
	beq.s	.vga100
	cmpi.w	#rgb50,d0
	beq.s	.rgb50
* Unknown monitormode..
	rts
.vga60:	jmp	vga60_16bit_320_100
.vga100:
	movea.l	scr+12,a0
	movea.l	picadr,a1
	lea	768(a1),a1
	bsr	COPY_PIC3202008
	move.l	#SWAP_VBLRES,vbl_gfx
	rts
.rgb50:	jmp	rgb50_16bit_320_100
	ENDC
	rts

******** INIT SUBROUTINE ********

INIT_TUNNEL:
	lea	tunneltxtname_txt,a1
	bsr.l	LOAD_INCFILE
	move.l	a0,tunneltxtadr

	lea	backfadename_txt,a1
	bsr.l	LOAD_INCFILE
	move.l	a0,picadr
	rts

******** MAINLOOP SUBROUTINE ********

TUNNELMAINLOOP:
	IFND	demoos
	IFEQ	testmode
	addq.l	#1,frmcnt
	ENDC
	ENDC

	move.w	$468.w,.old468

	bsr	FADE_PICPAL

	moveq	#0,d0
	moveq	#0,d1
	move.w	$4bc.w,d1
	lsr.w	#1,d1
	andi.w	#64-1,d1
	move.w	$4bc.w,d2
	Do_SinModulo	d2
	Get_Sin	sine_tbl,d2,d0
	asr.w	#8,d0
	andi.w	#64-1,d0
	lsl.l	#8,d1
	add.l	d0,d0
	add.l	d0,d1
	movea.l	tunneltxtadr,a0
	lea	tunnel_dat,a1
	lea	(a0,d1.l*2),a2
	bsr	PLOT_TUNNEL

	IFEQ	testmode
	lea	scr,a0
	move.l	(a0)+,d0
	move.l	(a0)+,d1
	move.l	(a0),-4(a0)
	move.l	d0,(a0)
	move.l	d1,-8(a0)
	cmpi.w	#vga100,monitormode
	beq.s	.no_setscreen
	move.l	d0,d1
	lsr.w	#8,d0
	move.l	d0,$ffff8200.w
	move.b	d1,$ffff820d.w
.no_setscreen:

	move.w	.old468(pc),d0
.waitvbl:
	cmp.w	$468.w,d0
	beq.s	.waitvbl
	ENDC
	rts

.old468:
	DC.W	0

******** OBJECT DATA ********

	DATA

tunnel_dat:
	INCBIN	TUNNEL.DAT
backfadename_txt:
	DC.B	"ALIVE1.RAW",0
tunneltxtname_txt:
	DC.B	"256128.RAW",0
	EVEN

******** OBJECT RESERVES ********

	BSS

tunneltxtadr:
	DS.L	1
picadr:	DS.L	1
fadepal_tbl:
	DS.L	256
refreshfadetun:
	DS.W	1

******** OBJECT SUBROUTINES ********

	TEXT

CLEAR_PAL256:
	move.w	$468.w,d0
.waitvbl:
	cmp.w	$468.w,d0
	beq.s	.waitvbl

	moveq	#0,d0
	lea	$ffff9800.w,a0
	moveq	#128-1,d7
.loop:	move.l	d0,(a0)+
	move.l	d0,(a0)+
	dbra	d7,.loop
	rts

* INPUT: a0: address of screenbuffer
CLEAR_RIGHTLINE:
	moveq	#0,d0
	lea	636(a0),a0
	movea.w	#640,a6
	moveq	#100-1,d7
.clrloop:
	move.l	d0,(a0)
	adda.l	a6,a0
	dbra	d7,.clrloop
	rts

* INPUT: a1: address of tunnel-offset-table
*        a2: address of tunnel picture
PLOT_TUNNEL:
	movea.l	scr,a0
	movea.l	a0,a3
	subq	#4,a0
	adda.l	#640*100-4,a3
	moveq	#50-1,d7

.lp:	moveq	#39-1,d6
	addq	#2,a1
	subq	#4,a3
	addq	#4,a0

.inlop:	movem.w	(a1)+,d0-d3
	move.w	(a2,d0.l*2),d4
	move.w	d4,(a0)+
	move.w	d4,(a3)+
	move.w	d4,(a0)+
	move.w	d4,(a3)+
	subq	#8,a3
	move.w	(a2,d1.l*2),d4
	move.w	d4,(a0)+
	move.w	d4,(a3)+
	move.w	d4,(a0)+
	move.w	d4,(a3)+
	subq	#8,a3
	move.w	(a2,d2.l*2),d4
	move.w	d4,(a0)+
	move.w	d4,(a3)+
	move.w	d4,(a0)+
	move.w	d4,(a3)+
	subq	#8,a3
	move.w	(a2,d3.l*2),d4
	move.w	d4,(a0)+
	move.w	d4,(a3)+
	move.w	d4,(a0)+
	move.w	d4,(a3)+
	subq	#8,a3
	dbra	d6,.inlop

	movem.w	(a1)+,d0-d2
	move.w	(a2,d0.l*2),d4
	move.w	d4,(a0)+
	move.w	d4,(a3)+
	move.w	d4,(a0)+
	move.w	d4,(a3)+
	subq	#8,a3
	move.w	(a2,d1.l*2),d4
	move.w	d4,(a0)+
	move.w	d4,(a3)+
	move.w	d4,(a0)+
	move.w	d4,(a3)+
	subq	#8,a3
	move.w	(a2,d2.l*2),d4
	move.w	d4,(a0)+
	move.w	d4,(a3)+
	move.w	d4,(a0)+
	move.w	d4,(a3)+
	subq	#8,a3

	dbra	d7,.lp

;.lp:	moveq	#40-1,d6
;.inlop:
;	movem.w	(a1)+,d0-d3
;	move.l	(a2,d0.l*2),d4
;	move.l	d4,(a0)+
;	move.l	d4,-(a3)
;	move.l	(a2,d1.l*2),d4
;	move.l	d4,(a0)+
;	move.l	d4,-(a3)
;	move.l	(a2,d2.l*2),d4
;	move.l	d4,(a0)+
;	move.l	d4,-(a3)
;	move.l	(a2,d3.l*2),d4
;	move.l	d4,(a0)+
;	move.l	d4,-(a3)
;	dbra	d6,.inlop
;	dbra	d7,.lp
	rts

SWAP_VBLRES:
	not.w	.count
	beq.s	.piccy

	move.l	scr+8,d0
	move.l	d0,d1
	lsr.w	#8,d0
	move.l	d0,$ffff8200.w
	move.b	d1,$ffff820d.w

	jmp	vga100_16bit_320_100

.piccy:	move.l	scr+12,d0
	move.l	d0,d1
	lsr.w	#8,d0
	move.l	d0,$ffff8200.w
	move.b	d1,$ffff820d.w

	jsr	vga100_8bit_320_200
	bra	SET_PAL

.count:	DC.W	0

FADE_PICPAL:
	lea	fadepal_tbl,a0
	movea.l	picadr,a1
	move.w	#256-1,d7
	move.w	$4bc.w,d3
	andi.w	#$01ff,d3
	cmpi.w	#$0100,d3
	blt.s	.fadein
.fadeout:
	eori.w	#$01ff,d3
.fadein:

.loop:	moveq	#0,d0
	moveq	#0,d1
	moveq	#0,d2
	move.b	(a1)+,d0
	move.b	(a1)+,d1
	move.b	(a1)+,d2
	mulu.w	d3,d0
	mulu.w	d3,d1
	mulu.w	d3,d2
	lsr.w	#8,d0
	lsr.w	#8,d1
	lsr.w	#8,d2
	move.b	d0,(a0)+
	move.b	d1,(a0)+
	move.b	d2,(a0)+
	dbra	d7,.loop
	rts

SET_PAL:
	lea	fadepal_tbl,a1
	lea	$ffff9800.w,a0
	move.w	#256-1,d7
.loop:	move.w	(a1)+,d0
	swap	d0
	move.b	(a1)+,d0
	move.l	d0,(a0)+
	dbra	d7,.loop
	rts

******** END OF DEMO-EFFECT OBJECT ********