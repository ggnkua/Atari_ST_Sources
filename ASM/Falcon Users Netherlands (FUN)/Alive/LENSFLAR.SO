* dirty lensflares ---===>>> * Crime Does Pay *

* Object skeleton used by DEMOS1.S or DASTD.S (v1.5)
* v1.0: * Monitormode selection.
*       * SET_RES routine vbl-synced.
*       * Screenaddress-setting optimised.

******** OBJECT EQUS ********

flarefpumode:	EQU	0

numflares:	EQU	1
flareradius:	EQU	56
flarelines:	EQU	3
flarecenter:	EQU	(flareradius*2*flareradius)+flareradius

******** OBJECT TABLE ********

* Must be first in object!!
lensflare_tbl:
	DC.L	LENSFLAREMAINLOOP
	DC.L	INIT_LENSFLARE
	DC.L	SET_LENSFLARERES
	DC.L	TRIGGER_FLAREZOOMIN
	DC.L	TRIGGER_FLAREFLYBYL
	DC.L	TRIGGER_FLAREFLYBYR
	DC.L	TRIGGER_FLAREZOOMOUT
	DC.L	TRIGGER_FLARETRAJECT
	DC.L	0

******** RESOLUTION SETTING ROUTINE ********

SET_LENSFLARERES:
	IFEQ	testmode
	move.l	#rts,vbl_gfx

	move.l	$0466.w,d0
.ck466:	cmp.l	$0466.w,d0
	beq.s	.ck466

	movea.l	scr,a0
	bsr	CLEAR_320100TSCR
	movea.l	scr+4,a0
	bsr	CLEAR_320100TSCR
	movea.l	scr+8,a0
	bsr	CLEAR_320100TSCR

	move.w	monitormode,d0
	cmpi.w	#vga60,d0
	beq.s	.vga60
	cmpi.w	#vga100,d0
	beq.s	.vga100
	cmpi.w	#rgb50,d0
	beq.s	.rgb50
* Unknown monitormode..
	rts
.vga60:	bra	vga60_16bit_320_100
.vga100:
	bra	vga100_16bit_320_100
.rgb50:	bra	rgb50_16bit_320_100
	ENDC
	rts

******** INIT SUBROUTINE ********

INIT_LENSFLARE:
	lea	flareflow_tbl,a1
	lea	flarecolor_tbl,a0
	bsr	MAKE_COLORFLOW

	IFNE	flarefpumode
	lea	flarefield_buf,a0
	bsr	MAKE_LENSFLAREBUF
	ENDC

	lea	flarecolor_tbl,a2
	lea	flarefield_buf,a1
	lea	flarepic_buf,a0
	move.w	#flareradius*2*flareradius*2-1,d0
	bsr	CONV_FIELD2PIC
	rts

******** MAINLOOP SUBROUTINE ********

LENSFLAREMAINLOOP:
	IFND	demoos
	IFEQ	testmode
	addq.l	#1,frmcnt
	ENDC
	ENDC

;	move.w	.actframe(pc),d3
;	movem.l	(winpos_tbl,d3.w*8),d0-d1
;	movem.l	d0-d1,flareclip_tbl

	movea.l	flaretrajroutadr,a0
	jsr	(a0)
	lea	flarepic_buf,a1
	move.w	.actframe(pc),d3
	lea	(winpos_tbl,d3.w*8),a2
;	pea	(a2)
	bsr	PLOT_SCALEFLARE
;	movea.l	(sp)+,a2

;	movem.l	(a2),d0-d1
;	movem.l	d0-d1,flareclip_tbl+8
;	bsr	CLEAR_FLARESCREEN

	lea	flarepic_buf,a0
	lea	flarefield_buf,a1
	lea	flarecolor_tbl,a2
	bsr	ADD_FLARELINES

;	move.w	.actframe(pc),d0
;	addq.w	#1,d0
;	cmpi.w	#3,d0
;	bne.s	.nowrap
;	moveq	#0,d0
;.nowrap:
;	move.w	d0,.actframe

	IFEQ	testmode
	lea	scr,a0
	move.l	(a0)+,d0
	move.l	(a0),-4(a0)
	move.l	d0,(a0)
	move.l	d0,d1
	lsr.w	#8,d0
	move.l	d0,$ffff8200.w
	move.b	d1,$ffff820d.w
	ENDC

	move.w	$468.w,d0
.tst468:
	cmp.w	$468.w,d0
	beq.s	.tst468
	rts

.actframe:
	DC.W	0

******** OBJECT DATA ********

	DATA

	IFEQ	flarefpumode
flarefield_buf:
	INCBIN	FLARE.DAT
	ENDC

flaretrajroutadr:
	DC.L	CALC_FLARETRAJECT
flareflow_tbl:
	DC.W	20
	DC.W	4
	DC.L	$00000000	;DC.L	$00000000
	DC.L	$00000000	;DC.L	$003f0000
	DC.L	$3f000000	;DC.L	$007f0000
	DC.L	$7f000000	;DC.L	$3fdf0000
	DC.L	$bf1f0000	;DC.L	$7fff0000
	DC.L	$ff3f0000	;DC.L	$dfff0000
	DC.L	$ff7f0000	;DC.L	$ffff0000
	DC.L	$ffbf0000	;DC.L	$ffff003f
	DC.L	$ffff0000	;DC.L	$ffff007f
	DC.L	$ffff001f	;DC.L	$ffff00bf
	DC.L	$ffff003f	;DC.L	$ffff00ff
	DC.L	$ffff007f	;DC.L	$ffff00ff
	DC.L	$ffff00bf	;DC.L	$ffff00ff
	DC.L	$ffff00ff	;DC.L	$ffff00ff
	DC.L	$ffff00ff	;DC.L	$ffff00ff
	DC.L	$ffff00ff	;DC.L	$ffff00ff
	DC.L	$ffff00ff	;DC.L	$ffff00ff
	DC.L	$ffff00ff	;DC.L	$ffff00ff
	DC.L	$ffff00ff	;DC.L	$ffff00ff
	DC.L	$ffff00ff	;DC.L	$ffff00ff
	DC.L	$ffff00ff	;DC.L	$ffff00ff

******** OBJECT RESERVES ********

	BSS

random:	DS.L	1
winpos_tbl:
	DS.W	4*3
flareclip_tbl:
	DS.W	4*(numflares+1)

	IFNE	flarefpumode
flarefield_buf:
	DS.B	flareradius*2*flareradius*2
	ENDC

flarepic_buf:
	DS.L	flareradius*2*flareradius*2
flarecolor_tbl:
	DS.W	512
lensflarestarttime:
	DS.W	1

******** OBJECT SUBROUTINES ********

	TEXT

TRIGGER_FLAREZOOMIN:
	move.l	#CALC_FLAREZOOMIN,flaretrajroutadr
	move.w	$4bc.w,lensflarestarttime
	rts

TRIGGER_FLAREFLYBYL:
	move.l	#CALC_FLAREFLYBYL,flaretrajroutadr
	move.w	$4bc.w,lensflarestarttime
	rts

TRIGGER_FLAREFLYBYR:
	move.l	#CALC_FLAREFLYBYR,flaretrajroutadr
	move.w	$4bc.w,lensflarestarttime
	rts

TRIGGER_FLAREZOOMOUT:
	move.l	#CALC_FLAREZOOMOUT,flaretrajroutadr
	move.w	$4bc.w,lensflarestarttime
	rts

TRIGGER_FLARETRAJECT:
	move.l	#CALC_FLARETRAJECT,flaretrajroutadr
	rts

CALC_FLAREZOOMIN:
	move.w	$4bc.w,d2
	move.w	d2,d0
	mulu.w	#5,d0
	lsr.w	#1,d0
	Do_SinModulo	d0
	Get_SinCos	sine_tbl,d0,d0,d1
	moveq	#10,d3
	asr.w	d3,d0
	asr.w	d3,d1
	sub.w	lensflarestarttime,d2
	cmpi.w	#220,d2
	bhs.s	.error
	eori.w	#$01ff,d2
	add.w	d2,d2
	cmpi.w	#$0040,d2
	bhs.s	.ok
.error:	move.w	#$0040,d2
.ok:	andi.w	#$01ff,d2
	add.w	d2,d2
	rts

CALC_FLAREFLYBYL:
	moveq	#-80,d0
	moveq	#-50,d1
	move.w	$4bc.w,d2
	sub.w	lensflarestarttime,d2
	cmpi.w	#200,d2
	ble.s	.oki
	move.w	#200,d2
.oki:	move.w	d2,d3
	lsr.w	#1,d3
	add.w	d2,d0
	add.w	d3,d1
	move.w	#$0100,d2
	sub.w	d3,d2
	rts

CALC_FLAREFLYBYR:
	moveq	#80,d0
	moveq	#50,d1
	move.w	$4bc.w,d2
	sub.w	lensflarestarttime,d2
	cmpi.w	#200,d2
	ble.s	.oki
	move.w	#200,d2
.oki:	move.w	d2,d3
	lsr.w	#1,d3
	sub.w	d2,d0
	sub.w	d3,d1
	move.w	#$0100,d2
	add.w	d3,d2
	rts

CALC_FLAREZOOMOUT:
	moveq	#0,d0
	moveq	#0,d1
	move.w	$4bc.w,d2
	sub.w	lensflarestarttime,d2
	cmpi.w	#220,d2
	bhs.s	.error
	add.w	d2,d2
	addi.w	#$0040,d2
	bra.s	.ok
.error:	move.w	#$01ff,d2
.ok:	andi.w	#$01ff,d2
	add.w	d2,d2
	rts

CALC_FLARETRAJECT:
	move.w	$4bc.w,d2
	move.w	d2,d0
	mulu.w	#5,d0
	lsr.w	#2,d0
	Do_SinModulo	d0
	Get_SinCos	sine_tbl,d0,d0,d1
	moveq	#10,d3
	asr.w	d3,d0
	asr.w	d3,d1
;	lsr.w	#1,d2
	andi.w	#$01ff,d2
	btst	#8,d2
	beq.s	.pos
	not.w	d2
	andi.w	#$01ff,d2
.pos:	addi.w	#$00c0,d2
	rts

* INPUT: a0: address of destination highcolor buffer
*        a1: address of colorflow table
MAKE_COLORFLOW:
	lea	.truepal_tbl,a2
	move.w	(a1)+,d7
	moveq	#0,d0
	move.w	(a1)+,d0
	moveq	#1,d6
	lsl.w	d0,d6
	move.w	d7,d5
	mulu.w	d6,d5
	move.w	d5,(a2)+
	subq.w	#1,d6
	move.w	d6,d5
	subq.w	#1,d7

.biglop:
	move.l	(a1)+,d1
	move.l	(a1),d2
	moveq.l	#0,d3
	move.l	d3,d4
	move.b	d1,d3
	move.b	d2,d4
	swap	d3
	swap	d4
	sub.l	d3,d4
	asr.l	d0,d4
	move.l	a2,a6
.lop1:	swap	d3
	move.b	d3,3(a2)
	addq.l	#4,a2
	swap	d3
	add.l	d4,d3
	dbra	d6,.lop1
	move.w	d5,d6
	move.l	a6,a2
	moveq	#0,d3
	move.l	d3,d4
	swap	d1
	swap	d2
	move.b	d1,d3
	move.b	d2,d4
	swap	d3
	swap	d4
	sub.l	d3,d4
	asr.l	d0,d4
.lop2:	swap	d3
	move.b	d3,1(a2)
	addq.l	#4,a2
	swap	d3
	add.l	d4,d3
	dbra	d6,.lop2
	move.l	a6,a2
	move.w	d5,d6
	moveq.l	#0,d3
	move.l	d3,d4
	swap	d1
	swap	d2
	rol.l	#8,d1
	rol.l	#8,d2
	move.b	d1,d3
	move.b	d2,d4
	swap	d3
	swap	d4
	sub.l	d3,d4
	asr.l	d0,d4
.lop3:	swap	d3
	move.b	d3,(a2)
	addq.l	#4,a2
	swap	d3
	add.l	d4,d3
	dbra	d6,.lop3
	move.w	d5,d6
	dbra	d7,.biglop

	lea	.truepal_tbl,a1
	move.w	(a1)+,d7

.loop:	moveq	#0,d0
	move.b	(a1)+,d0
	andi.b	#%11111000,d0
	lsl.w	#8,d0
	moveq	#0,d1
	move.b	(a1)+,d1
	andi.b	#%11111100,d1
	lsl.w	#3,d1
	moveq	#0,d2
	addq.l	#1,a1
	move.b	(a1)+,d2
	lsr.w	#3,d2
	or.w	d2,d0
	or.w	d1,d0
	move.w	d0,(a0)+
	dbra	d7,.loop
	rts

	BSS

.truepal_tbl:
	DS.L	1024

	TEXT

* Very fast and accurate squareroot algorithm.
* Quite lengthy, though: 64 bytes.
* INPUT: d1.l: value to calculate the squareroot of (integer)
* OUTPUT: d0.l: squareroot of value (16.16 fixed point)
CALC_SQUAREROOT:
	moveq	#1,d2
	ror.l	#2,d2
	moveq	#$F,d3
.loop1:	cmp.l	d2,d1
	bgt.s	.endloop1
	add.l	d1,d1
	lsr.l	#1,d2
	dbf	d3,.loop1
	bra.s	.end
.endloop1:

	sub.l	d2,d1
	move.l	d2,d0
	lsr.l	#1,d2
.loop2:	lsr.l	#1,d2
	add.l	d2,d0
	cmp.l	d0,d1
	bgt.s	.endloop2
	sub.l	d2,d0
	add.l	d1,d1
	dbf	d3,.loop2
	bra.s	.end
.endloop2:

	sub.l	d0,d1
	add.l	d2,d0
	add.l	d1,d1
	dbf	d3,.loop2

.end:	add.l	d0,d0
	addi.l	#$00008000,d0
	rts

* Routine that calculates bandlimited noise.
* Each integer has a different random value.
* INPUT: d0.l: 16.16 fixed point number x
* OUTPUT: d0.l 16.16 fixed point limited random number
CALC_NOISE1D:
	move.w	random,d2

	move.l	d0,d4
	sub.w	d0,d0				* i:=floor(x)
	sub.l	d0,d4				* f:=x-i
	swap	d0

	move.w	d0,d1

	rol.w	d0,d0
	eor.w	d2,d0
	eor.w	d1,d0

	addq.w	#1,d1

	move.w	d1,d3

	rol.w	d1,d1
	eor.w	d2,d1
	eor.w	d3,d1

* d0.w: n0:=rand(i)
* d1.w: n1:=rand(i+1)
	sub.w	d0,d1				* n1-n0
	muls.w	d1,d4				* (n1-n0)*f
	add.l	d4,d4
	swap	d4
	add.w	d4,d0				* n0 + (n1-n0)*f
	rts

* Buggerishly slow and totally incomplete CPU-only lensflare routine.
PLOT_LENSFLARE:
	movea.l	scr,a0
	move.w	#-flareradius,d7

.yloop:	move.w	#-flareradius,d6

.xloop:	move.w	d6,d0
	move.w	d7,d1
	muls.w	d0,d0
	muls.w	d1,d1
	add.l	d0,d1				* dsqr:=dx*dx+dy*dy
	movem.w	d6-d7,-(sp)
	move.l	a0,-(sp)
	bsr	CALC_SQUAREROOT
	move.l	(sp)+,a0
	movem.w	(sp)+,d6-d7
	lsr.l	#1,d0				* d:=sqrt(dx*dx+dy*dy)/2


	movem.w	d6-d7,-(sp)
	move.l	a0,-(sp)
	bsr	CALC_NOISE1D
	move.l	(sp)+,a0
	movem.w	(sp)+,d6-d7

	addq.w	#1,d6
	cmpi.w	#flareradius,d6
	bne.s	.xloop

	addq.w	#1,d7
	cmpi.w	#flareradius,d7
	bne.s	.yloop

	rts

* Plots a lensflare with heavy floating point calcs on the FPU.
* INPUT: a1: address of colortable
PLOT_FPULENSFLARE:
	movea.l	scr,a0
	adda.l	#((-flareradius+160)+(-flareradius+100)*320)*2,a0
	move.w	#-flareradius,d7

.yloop:	move.w	#-flareradius,d6

.xloop:	move.w	d6,d0
	move.w	d7,d1
	muls.w	d0,d0
	muls.w	d1,d1
	add.l	d0,d1				* dsqr:=dx*dx+dy*dy
	fmove.l	d1,fp0
	fsqrt	fp0				* d:=sqrt(dsqr)
	fmul.s	#1.0,fp0			* d:=d*flarediameter

	fmove.l	fp0,d0

	fmove	fp0,fp1
	fneg	fp1
	fmove	fp1,fp2
	fmul	fp0,fp1				* /
	fmul.s	#0.006,fp1			* \ fp1:=-d*d*gauss
	fetox	fp1				* /
	fmul.s	#0.5,fp1			* \ fp1:=exp(-d*d*gauss)*mix
	fmul.s	#0.03,fp2			* /
	fetox	fp2				* | fp2:=exp(-d*linear)*(1-mix)
	fmul.s	#0.5,fp2			* \ 
	fadd	fp1,fp2				* a:=fp1+fp2

	fcmp.s	#43.4,fp0			* /
	fble	.endcalcring			* | if d < rmin or d > rmax
	fcmp.s	#46.6,fp0			* | then
	fble	.calcring			* \
	fmove.s	#0,fp4				* ring:=0
	bra.s	.endcalcring
.calcring:
	fmove	fp0,fp3				* /
	fsub.s	#45,fp3				* | ring:=fabs(d-rmid)/rwid
	fabs	fp3				* |
	fdiv.s	#1.6,fp3			* \
	fmove	fp3,fp4				* /
	fadd	fp3,fp4				* |
	fsub.s	#3,fp4				* |
	fneg	fp4				* | ring:=1-ring*ring*(3-2*ring)
	fmul	fp3,fp4				* |
	fmul	fp3,fp4				* |
	fneg	fp4				* |
	fadd.s	#1,fp4				* \
	fmul.s	#0.1,fp4			* ring:=ring*0.10
	fadd	fp4,fp2				* a:=a+ring
.endcalcring:

.dolines:
	fmove.w	d6,fp5				* /
	fdiv.w	d7,fp5				* | v:=fatan(x/y)+pi
	fatan	fp5				* |
	fadd.s	#3.141562,fp5			* \
	fmove	fp5,fp6				* /
	fmul.s	#655360,fp5			* |
	fmove.l	fp5,d0				* |
	bsr	CALC_NOISE1D			* |
	fmove.l	d0,fp5				* |
	fdiv.s	#65536,fp5			* | v:=(fmod(v/pi*17 +1.0+Noise1D(v*10), 1) - 0.5)*2
	fadd.s	#1,fp5				* |
	fdiv.s	#3.141562,fp6			* |
	fmul.s	#17,fp6				* |
	fadd	fp5,fp6				* |
	fmod.s	#1.0,fp6			* |
	fsub.s	#0.5,fp6			* |
	fadd	fp6,fp6				* \
	fabs	fp6				* v:=|v|
	fmove	fp6,fp7				* /
	fmul	fp6,fp6				* |
	fmul	fp6,fp6				* | v:=v^5
	fmul	fp7,fp6				* \

	fmul.s	#0.1,fp6			* /
	fmul.s	#0.1,fp0			* |
	fadd.s	#1,fp0				* | a:= a + (0.1*v / (1 + d*0.1))
	fdiv	fp0,fp6				* |
	fadd	fp6,fp2				* \

	fcmp.s	#1,fp2				* /
	fble	.notclipped			* \ if a > 1 then
	fmove.s	#1,fp2				* a:=1
.notclipped:
	fmul.s	#255,fp2
	fmove.w	fp2,d0
	move.w	(a1,d0.w*2),(a0)+
	
	addq.w	#1,d6
	cmpi.w	#flareradius,d6
	bne	.xloop

	lea	(320-flareradius*2)*2(a0),a0
	addq.w	#1,d7
	cmpi.w	#flareradius,d7
	bne	.yloop
	rts

* INPUT: a0: address of destination heightfieldbuffer
MAKE_LENSFLAREBUF:
	move.w	#-flareradius+1,d7

.yloop:	move.w	#-flareradius+1,d6

.xloop:	move.w	d6,d0
	move.w	d7,d1
	muls.w	d0,d0
	muls.w	d1,d1
	add.l	d0,d1				* dsqr:=dx*dx+dy*dy
	fmove.l	d1,fp0
	fsqrt	fp0				* d:=sqrt(dsqr)
	fmul.s	#1.0,fp0			* d:=d*flarediameter

	fmove	fp0,fp1
	fneg	fp1
	fmove	fp1,fp2
	fmul	fp0,fp1				* /
	fmul.s	#0.006,fp1			* \ fp1:=-d*d*gauss
	fetox	fp1				* /
	fmul.s	#0.5,fp1			* \ fp1:=exp(-d*d*gauss)*mix
	fmul.s	#0.03,fp2			* /
	fetox	fp2				* | fp2:=exp(-d*linear)*(1-mix)
	fmul.s	#0.5,fp2			* \ 
	fadd	fp1,fp2				* a:=fp1+fp2

	fcmp.s	#43.4,fp0			* /
	fble	.endcalcring			* | if d < rmin or d > rmax
	fcmp.s	#46.6,fp0			* | then
	fble	.calcring			* \
	fmove.s	#0,fp4				* ring:=0
	bra.s	.endcalcring
.calcring:
	fmove	fp0,fp3				* /
	fsub.s	#45,fp3				* | ring:=fabs(d-rmid)/rwid
	fabs	fp3				* |
	fdiv.s	#1.6,fp3			* \
	fmove	fp3,fp4				* /
	fadd	fp3,fp4				* |
	fsub.s	#3,fp4				* |
	fneg	fp4				* | ring:=1-ring*ring*(3-2*ring)
	fmul	fp3,fp4				* |
	fmul	fp3,fp4				* |
	fneg	fp4				* |
	fadd.s	#1,fp4				* \
	fmul.s	#0.1,fp4			* ring:=ring*0.10
	fadd	fp4,fp2				* a:=a+ring
.endcalcring:

.dolines:
;	fmove.w	d6,fp5				* /
;	fdiv.w	d7,fp5				* | v:=fatan(x/y)+pi
;	fatan	fp5				* |
;	fadd.s	#3.141562,fp5			* \
;	fmove	fp5,fp6				* /
;	fmul.s	#655360,fp5			* |
;	fmove.l	fp5,d0				* |
;	bsr	CALC_NOISE1D			* |
;	fmove.l	d0,fp5				* |
;	fdiv.s	#65536,fp5			* | v:=(fmod(v/pi*17 +1.0+Noise1D(v*10), 1) - 0.5)*2
;	fadd.s	#1,fp5				* |
;	fdiv.s	#3.141562,fp6			* |
;	fmul.s	#17,fp6				* |
;	fadd	fp5,fp6				* |
;	fmod.s	#1.0,fp6			* |
;	fsub.s	#0.5,fp6			* |
;	fadd	fp6,fp6				* \
;	fabs	fp6				* v:=|v|
;	fmove	fp6,fp7				* /
;	fmul	fp6,fp6				* |
;	fmul	fp6,fp6				* | v:=v^5
;	fmul	fp7,fp6				* \

;	fmul.s	#0.1,fp6			* /
;	fmul.s	#0.1,fp0			* |
;	fadd.s	#1,fp0				* | a:= a + (0.1*v / (1 + d*0.1))
;	fdiv	fp0,fp6				* |
;	fadd	fp6,fp2				* \

	fcmp.s	#1,fp2				* /
	fble	.notclipped			* \ if a > 1 then
	fmove.s	#1,fp2				* a:=1
.notclipped:
	fmul.s	#255,fp2
	fmove.w	fp2,d0
	move.b	d0,(a0)+
	
	addq.w	#1,d6
	cmpi.w	#flareradius+1,d6
	bne	.xloop

	addq.w	#1,d7
	cmpi.w	#flareradius+1,d7
	bne	.yloop
	rts

* INPUT: d0.w: number of pixels to do -1
*        a0: address of destination picture
*        a1: address of source heightfield
*        a2: address of palettetable
CONV_FIELD2PIC:
	moveq	#0,d1
.loop:	move.b	(a1)+,d1
	move.w	(a2,d1.l*2),(a0)+
	move.w	(a2,d1.l*2),(a0)+
	dbra	d0,.loop
	rts

DRAW_FLARELINE:
	lea	-2(a0),a2
	lea	-1(a1),a3

	move.l	#flareradius*2,d4
	btst	#0,d0
	bne.s	.pos
	neg.l	d4
.pos:	move.l	d4,d5
	add.l	d4,d5
	add.l	d5,d5
	moveq	#48-1,d6
	moveq	#0,d1
	moveq	#0,d2
	tst.l	d0
	bmi.s	.yline

.xline:
.xloop:	move.b	d6,d3
	lsr.b	#1,d3
	move.b	(a1)+,d2
	add.b	d3,d2
	bcc.s	.below256
	move.b	#255,d2
.below256:
	move.l	(a0),(a5)+
	move.l	(a4,d2.l*2),(a0)+
	move.b	-(a3),d2
	add.b	d3,d2
	bcc.s	.below256_2
	move.b	#255,d2
.below256_2:
	move.l	-(a2),(a5)+
	move.l	(a4,d2.l*2),(a2)
	add.w	d0,d1
	bcc.s	.skipaddy
	adda.l	d5,a0
	adda.l	d4,a1
	suba.l	d5,a2
	suba.l	d4,a3
.skipaddy:
	dbra	d6,.xloop
	rts
.yline:
.yloop:	move.b	d6,d3
	lsr.b	#1,d3
	move.b	(a1),d2
	add.b	d3,d2
	bcc.s	.below256y
	move.b	#255,d2
.below256y:
	move.l	(a0),(a5)+
	move.l	(a4,d2.l*2),(a0)
	move.b	(a3),d2
	add.b	d3,d2
	bcc.s	.below256y_2
	move.b	#255,d2
.below256y_2:
	move.l	(a2),(a5)+
	move.l	(a4,d2.l*2),(a2)
	add.w	d0,d1
	bcc.s	.skipaddx
	addq	#1,a1
	subq	#1,a3
	addq	#4,a0
	subq	#4,a2
.skipaddx:
	adda.l	d5,a0
	adda.l	d4,a1
	suba.l	d5,a2
	suba.l	d4,a3
	dbra	d6,.yloop
	rts

RESTORE_FLARELINE:
	lea	-2(a0),a2

	move.l	#flareradius*2,d4
	btst	#0,d0
	bne.s	.pos
	neg.l	d4
.pos:	move.l	d4,d5
	add.l	d4,d5
	add.l	d5,d5
	moveq	#48-1,d6
	moveq	#0,d1
	moveq	#0,d2
	tst.l	d0
	bmi.s	.yline

.xline:
.xloop:
	move.l	(a5)+,(a0)+
	move.l	(a5)+,-(a2)
	add.w	d0,d1
	bcc.s	.skipaddy
	adda.l	d5,a0
	suba.l	d5,a2
.skipaddy:
	dbra	d6,.xloop
	rts
.yline:
.yloop:
	move.l	(a5)+,(a0)
	move.l	(a5)+,(a2)
	add.w	d0,d1
	bcc.s	.skipaddx
	addq	#4,a0
	subq	#4,a2
.skipaddx:
	adda.l	d5,a0
	suba.l	d5,a2
	dbra	d6,.yloop
	rts

* INPUT: a0: address of flarebitmap
*        a1: address of heightfieldbuffer
*        a2: address of palettetable
ADD_FLARELINES:
* First of all: Restore the previously drawn lines in the buffer.
	movea.l	a2,a4
	lea	flarecenter*4(a0),a0
	lea	flarecenter(a1),a1
	moveq	#flarelines-1,d7
	lea	.flarebackup_tbl,a5
	movem.l	a0-a1,-(sp)
	tst.l	.oldrandom(pc)
	beq.s	.endrestore

.oldlineloop:
	movem.l	(sp),a0-a1

	move.l	.oldrandom(pc),d0
	bsr	RESTORE_FLARELINE

	move.l	.oldrandom(pc),d0
	move.l	d0,d1
	rol.l	d0,d0
	eor.l	d1,d0
	addi.l	#$e2b7f341,d0
	move.l	d0,.oldrandom

	dbra	d7,.oldlineloop
.endrestore:

.drawnewlines:
	moveq	#flarelines-1,d7
	lea	.flarebackup_tbl,a5
	move.l	random,d0
	move.l	d0,d1
	rol.l	d0,d0
	eor.l	d1,d0
	addi.l	#$e2b7f341,d0
	move.l	d0,random
	move.l	d0,.oldrandom

.newlineloop:
	movem.l	(sp),a0-a1

	move.l	random,d0
	bsr	DRAW_FLARELINE

	move.l	random,d0
	move.l	d0,d1
	rol.l	d0,d0
	eor.l	d1,d0
	addi.l	#$e2b7f341,d0
	move.l	d0,random

	dbra	d7,.newlineloop

	addq	#8,sp
	rts

.oldrandom:
	DC.L	0

	BSS

.flarebackup_tbl:
	DS.L	flareradius*2*flarelines

	TEXT

CLEAR_FLARESCREEN:
	lea	flareclip_tbl,a0
	moveq	#0,d7

.loop:	movem.w	(a0)+,d0-d3			* Get coords and goto next pos.
	move.l	a0,-(sp)			* Save next coord-address.
	move.w	d7,wnum				* Save counter.
	movem.w	d0-d3,-(sp)			* Push X1, Y1, X2, Y2
	bsr.s	REC_WINDOW
	addq	#8,sp
	move.w	wnum(pc),d7			* Restore counter.
	move.l	(sp)+,a0			* Restore address.
	addq.w	#1,d7
	cmpi.w	#numflares+1,d7
	bne.s	.loop
	rts

wnum:	DS.W	1

	RSRESET
* Format of local stackrecord:
	RS.W	1
i:	RS.W	1
flag:	RS.W	1
ex1:	RS.W	1
ey1:	RS.W	1
ex2:	RS.W	1
ey2:	RS.W	1
* Format of pushed stackrecord:
	RS.W	3
x1:	RS.W	1
y1:	RS.W	1
x2:	RS.W	1
y2:	RS.W	1

REC_WINDOW:
	link	a0,#-6*2			* Make stackrecord.
	move.w	#numflares-1,-i(a0)		* i:=Number of flares-1;
	clr.w	-flag(a0)			* Flag:=false;
	move.w	-i(a0),d7
.loop:	move.w	d7,-i(a0)
* Initialize window to compare with.
	movem.w	(flareclip_tbl,d7.w*8),d0-d3	* Get address of window to compare
	move.w	d0,-ex1(a0)
	move.w	d1,-ey1(a0)
	move.w	d2,-ex2(a0)
	move.w	d3,-ey2(a0)
* Get type of overlap in current window..
* IF ((ex2 > x1) and (ex2 < x2) and (ey2 > y1) and (ey2 < y2)) THEN
.quadrant1:
	move.w	-ex2(a0),d0
	cmp.w	x1(sp),d0
	ble	.endcase
	cmp.w	x2(sp),d0
	bhs.s	.quadrant2
	move.w	-ey2(a0),d0
	cmp.w	y1(sp),d0
	ble	.endcase
	cmp.w	y2(sp),d0
	bhs	.quadrant4
	move.w	#1,-flag(a0)
	move.w	-i(a0),d0
* RecWindow(x1, y1, ex2, ey2);
* RecWindow(ex2, y1, x2, ey2);
* RecWindow(x1, ey2, x2, y2);
	cmp.w	wnum(pc),d0
	bhs.s	.q1_rw2
	move.w	-ex1(a0),d0
	move.w	-ey1(a0),d1
	move.w	x2(sp),d2
	move.w	y2(sp),d3
	movem.w	d0-d3,-(sp)
;	bsr	REC_WINDOW
	addq	#8,sp
.q1_rw2:
	move.w	-ex2(a0),d0
	move.w	y1(sp),d1
	move.w	x2(sp),d2
	move.w	-ey2(a0),d3
	movem.w	d0-d3,-(sp)
	bsr	REC_WINDOW
	addq	#8,sp
	move.w	x1(sp),d0
	move.w	-ey2(a0),d1
	move.w	x2(sp),d2
	move.w	y2(sp),d3
	movem.w	d0-d3,-(sp)
	bsr	REC_WINDOW
	addq	#8,sp
	bra	.endfor
*  IF ((ex1 > x1) and (ex1 < x2) and (ey2 > y1) and (ey2 < y2)) THEN
.quadrant2:
	move.w	-ex1(a0),d0
	cmp.w	x1(sp),d0
	ble	.upper_half
	cmp.w	x2(sp),d0
	bhs	.endcase
	move.w	-ey2(a0),d0
	cmp.w	y1(sp),d0
	ble	.endcase
	cmp.w	y2(sp),d0
	bhs.s	.quadrant3
	move.w	#1,-flag(a0)
	move.w	-i(a0),d0
* RecWindow(ex1, y1, x2, ey2);
* RecWindow(x1, y1, ex1, ey2);
* RecWindow(x1, ey2, x2, y2);
	cmp.w	wnum(pc),d0
	bhs.s	.q2_rw2
	move.w	-ex1(a0),d0
	move.w	y1(sp),d1
	move.w	x2(sp),d2
	move.w	-ey2(a0),d3
	movem.w	d0-d3,-(sp)
;	bsr	REC_WINDOW
	addq	#8,sp
.q2_rw2:
	move.w	x1(sp),d0
	move.w	y1(sp),d1
	move.w	-ex1(a0),d2
	move.w	-ey2(a0),d3
	movem.w	d0-d3,-(sp)
	bsr	REC_WINDOW
	addq	#8,sp
	move.w	x1(sp),d0
	move.w	-ey2(a0),d1
	move.w	x2(sp),d2
	move.w	y2(sp),d3
	movem.w	d0-d3,-(sp)
	bsr	REC_WINDOW
	addq	#8,sp
	bra	.endfor
* IF ((ex1 > x1) and (ex1 < x2) and (ey1 > y1) and (ey1 < y2)) THEN
.quadrant3:
	move.w	-ey1(a0),d0
	cmp.w	y1(sp),d0
	ble	.left_half
	cmp.w	y2(sp),d0
	bhs	.left_half
	move.w	#1,-flag(a0)
	move.w	-i(a0),d0
* RecWindow(ex1, ey1, x2, y2);
* RecWindow(x1, y1, x2, ey1);
* RecWindow(x1, ey1, ex1, y2);
	cmp.w	wnum(pc),d0
	bhs.s	.q3_rw2
	move.w	-ex1(a0),d0
	move.w	-ey1(a0),d1
	move.w	x2(sp),d2
	move.w	y2(sp),d3
	movem.w	d0-d3,-(sp)
;	bsr	REC_WINDOW
	addq	#8,sp
.q3_rw2:
	move.w	x1(sp),d0
	move.w	y1(sp),d1
	move.w	x2(sp),d2
	move.w	-ey1(a0),d3
	movem.w	d0-d3,-(sp)
	bsr	REC_WINDOW
	addq	#8,sp
	move.w	x1(sp),d0
	move.w	-ey1(a0),d1
	move.w	-ex1(a0),d2
	move.w	y2(sp),d3
	movem.w	d0-d3,-(sp)
	bsr	REC_WINDOW
	addq	#8,sp
	bra	.endfor
* IF ((ex2 > x1) and (ex2 < x2) and (ey1 > y1) and (ey1 < y2)) THEN
.quadrant4:
	move.w	-ey1(a0),d0
	cmp.w	y1(sp),d0
	ble	.right_half
	cmp.w	y2(sp),d0
	bhs	.right_half
	move.w	#1,-flag(a0)
	move.w	-i(a0),d0
* RecWindow(x1, ey1, ex2, y2);
* RecWindow(x1, y1, x2, ey1);
* RecWindow(ex2, ey1, x2, y2);
	cmp.w	wnum(pc),d0
	bhs.s	.q4_rw2
	move.w	x1(sp),d0
	move.w	-ey1(a0),d1
	move.w	-ex2(a0),d2
	move.w	y2(sp),d3
	movem.w	d0-d3,-(sp)
;	bsr	REC_WINDOW
	addq	#8,sp
.q4_rw2:
	move.w	x1(sp),d0
	move.w	y1(sp),d1
	move.w	x2(sp),d2
	move.w	-ey1(a0),d3
	movem.w	d0-d3,-(sp)
	bsr	REC_WINDOW
	addq	#8,sp
	move.w	-ex2(a0),d0
	move.w	-ey1(a0),d1
	move.w	x2(sp),d2
	move.w	y2(sp),d3
	movem.w	d0-d3,-(sp)
	bsr	REC_WINDOW
	addq	#8,sp
	bra	.endfor
*  if ((ex1 > x1) and (ex1 < x2) and (ey1 < y1) and (ey2 > y2)) then
.left_half:
	move.w	-ey1(a0),d0
	cmp.w	y1(sp),d0
	bhi	.upper_half
	move.w	#1,-flag(a0)
	move.w	-i(a0),d0
* RecWindow(ex1, y1, x2, y2);
* RecWindow(x1, y1, ex1, y2);
	cmp.w	wnum(pc),d0
	bhs.s	.lh_rw2
	move.w	-ex1(a0),d0
	move.w	y1(sp),d1
	move.w	x2(sp),d2
	move.w	y2(sp),d3
	movem.w	d0-d3,-(sp)
;	bsr	REC_WINDOW
	addq	#8,sp
.lh_rw2:
	move.w	x1(sp),d0
	move.w	y1(sp),d1
	move.w	-ex1(a0),d2
	move.w	y2(sp),d3
	movem.w	d0-d3,-(sp)
	bsr	REC_WINDOW
	addq	#8,sp
	bra	.endfor
*  if ((ex2 > x1) and (ex2 < x2) and (ey1 < y1) and (ey2 > y2)) then
.right_half:
	move.w	-ey1(a0),d0
	cmp.w	y1(sp),d0
	bhi.s	.upper_half
	move.w	#1,-flag(a0)
	move.w	-i(a0),d0
* RecWindow(x1, y1, ex2, y2);
* RecWindow(ex2, y1, x2, y2);
	cmp.w	wnum(pc),d0
	bhs.s	.rh_rw2
	move.w	x1(sp),d0
	move.w	y1(sp),d1
	move.w	-ex2(a0),d2
	move.w	y2(sp),d3
	movem.w	d0-d3,-(sp)
;	bsr	REC_WINDOW
	addq	#8,sp
.rh_rw2:
	move.w	-ex2(a0),d0
	move.w	y1(sp),d1
	move.w	x2(sp),d2
	move.w	y2(sp),d3
	movem.w	d0-d3,-(sp)
	bsr	REC_WINDOW
	addq	#8,sp
	bra	.endfor
*  if ((ex1 < x1) and (ex2 > x2) and (ey1 > y1) and (ey1 < y2)) then
.upper_half:
	move.w	-ey1(a0),d0
	cmp.w	y1(sp),d0
	ble.s	.lower_half
	cmp.w	y2(sp),d0
	bhs.s	.lower_half
	move.w	#1,-flag(a0)
	move.w	-i(a0),d0
* RecWindow(x1, ey1, x2, y2);
* RecWindow(x1, y1, x2, ey1);
	cmp.w	wnum(pc),d0
	bhs.s	.uh_rw2
	move.w	x1(sp),d0
	move.w	-ey1(a0),d1
	move.w	x2(sp),d2
	move.w	y2(sp),d3
	movem.w	d0-d3,-(sp)
;	bsr	REC_WINDOW
	addq	#8,sp
.uh_rw2:
	move.w	x1(sp),d0
	move.w	y1(sp),d1
	move.w	x2(sp),d2
	move.w	-ey1(a0),d3
	movem.w	d0-d3,-(sp)
	bsr	REC_WINDOW
	addq	#8,sp
	bra	.endfor 
*  if ((ex1 < x1) and (ex2 > x2) and (ey2 > y1) and (ey2 < y2)) then
.lower_half:
	move.w	-ey2(a0),d0
	cmp.w	y1(sp),d0
	ble.s	.no_overlap
	cmp.w	y2(sp),d0
	bhs.s	.no_overlap
	move.w	#1,-flag(a0)
	move.w	-i(a0),d0
* RecWindow(x1, y1, x2, ey2);
* RecWindow(x1, ey2, x2, y2);
	cmp.w	wnum(pc),d0
	bhs.s	.dh_rw2
	move.w	x1(sp),d0
	move.w	y1(sp),d1
	move.w	x2(sp),d2
	move.w	-ey2(a0),d3
	movem.w	d0-d3,-(sp)
;	bsr	REC_WINDOW
	addq	#8,sp
.dh_rw2:
	move.w	x1(sp),d0
	move.w	-ey2(a0),d1
	move.w	x2(sp),d2
	move.w	y2(sp),d3
	movem.w	d0-d3,-(sp)
	bsr	REC_WINDOW
	addq	#8,sp
	bra	.endfor
.no_overlap:
* Rectangle is completely in another?
	move.w	-ex1(a0),d0
	cmp.w	x1(sp),d0
	ble	.not_in
	move.w	-ex2(a0),d0
	cmp.w	x2(sp),d0
	bge	.not_in
	move.w	-ey1(a0),d0
	cmp.w	y1(sp),d0
	ble.s	.not_in
	move.w	-ey2(a0),d0
	cmp.w	y2(sp),d0
	bge.s	.not_in
	move.w	#1,-flag(a0)
	move.w	-ex1(a0),d0
	move.w	-ey1(a0),d1
	move.w	-ex2(a0),d2
	move.w	y1(sp),d3
	movem.w	d0-d3,-(sp)
	bsr	REC_WINDOW
	addq	#8,sp
	move.w	-ex1(a0),d0
	move.w	y1(sp),d1
	move.w	x1(sp),d2
	move.w	y2(sp),d3
	movem.w	d0-d3,-(sp)
	bsr	REC_WINDOW
	addq	#8,sp
	move.w	x2(sp),d0
	move.w	y1(sp),d1
	move.w	-ex2(a0),d2
	move.w	y2(sp),d3
	movem.w	d0-d3,-(sp)
	bsr	REC_WINDOW
	addq	#8,sp
	move.w	-ex1(a0),d0
	move.w	y2(sp),d1
	move.w	-ex2(a0),d2
	move.w	-ey2(a0),d3
	movem.w	d0-d3,-(sp)
	bsr	REC_WINDOW
	addq	#8,sp
	bra	.endfor
.not_in:
* rectangle is completely over another?
	move.w	-ex1(a0),d0
	cmp.w	x1(sp),d0
	bge	.not_over
	move.w	-ex2(a0),d0
	cmp.w	x2(sp),d0
	ble	.not_over
	move.w	-ey1(a0),d0
	cmp.w	y1(sp),d0
	bge.s	.not_over
	move.w	-ey2(a0),d0
	cmp.w	y2(sp),d0
	ble.s	.not_over
	move.w	#1,-flag(a0)
	move.w	x1(sp),d0
	move.w	y1(sp),d1
	move.w	x2(sp),d2
	move.w	-ey1(a0),d3
	movem.w	d0-d3,-(sp)
	bsr	REC_WINDOW
	addq	#8,sp
	move.w	x1(sp),d0
	move.w	-ey1(a0),d1
	move.w	-ex1(a0),d2
	move.w	-ey2(a0),d3
	movem.w	d0-d3,-(sp)
	bsr	REC_WINDOW
	addq	#8,sp
	move.w	-ex2(a0),d0
	move.w	-ey1(a0),d1
	move.w	x2(sp),d2
	move.w	-ey2(a0),d3
	movem.w	d0-d3,-(sp)
	bsr	REC_WINDOW
	addq	#8,sp
	move.w	x1(sp),d0
	move.w	-ey2(a0),d1
	move.w	x2(sp),d2
	move.w	y2(sp),d3
	movem.w	d0-d3,-(sp)
	bsr	REC_WINDOW
	addq	#8,sp
	bra	.endfor
.not_over:
.endcase:
	move.w	-i(a0),d7
	dbra	d7,.loop
.endfor:
	tst.w	-flag(a0)
	beq.s	.plot_window
	unlk	a0
	rts

.plot_window:
	move.w	x1(sp),d0
	move.w	y1(sp),d1
	move.w	x2(sp),d6
	move.w	y2(sp),d7

	pea	(a0)
	;bsr	CLEAR_RECTANGLE
	movea.l	(sp)+,a0

	unlk	a0
	rts

* INPUT: d0.w: left x
*        d1.w: upper y
*        d6.w: right x
*        d7.w: lower y
;CLEAR_RECTANGLE:
	tst.w	d0
	bpl.s	.testx0
	moveq	#0,d0
.testx0:
	cmpi.w	#320,d0
	blt.s	.endtestx0
	move.w	#320-1,d0
.endtestx0:

	tst.w	d1
	bpl.s	.testy0
	moveq	#0,d1
.testy0:
	cmpi.w	#200,d1
	blt.s	.endtesty0
	move.w	#200-1,d1
.endtesty0:

	tst.w	d6
	bgt.s	.testx1
	moveq	#0,d6
.testx1:
	cmpi.w	#320,d6
	blt.s	.endtestx1
	move.w	#320-1,d6
.endtestx1:

	tst.w	d7
	bgt.s	.testy1
	moveq	#0,d7
.testy1:
	cmpi.w	#200,d7
	blt.s	.endtesty1
	move.w	#200-1,d7
.endtesty1:

	movea.l	scr,a0
	move.w	d6,d2
	move.w	d7,d3
	addq.w	#1,d2
	andi.w	#$fffe,d2
	adda.w	d2,a0
	adda.w	d2,a0
	mulu.w	#scrxbytes,d3
	adda.l	d3,a0
	sub.w	d0,d6
	addq.w	#1,d6
	sub.w	d1,d7
	moveq	#$00000000,d0
	move.l	d0,d1
	move.l	d0,d2
	move.l	d0,d3
	move.l	d0,d4
	movea.l	d0,a1
	movea.l	d0,a2
	movea.l	d0,a3
	movea.w	#scrxbytes,a4
	lsr.w	#1,d6
	move.w	d6,d5
	add.w	d6,d5
	add.w	d5,d5
	suba.w	d5,a4
	ext.l	d6
	move.l	d6,d5
	andi.w	#$0007,d6
	lsr.w	#3,d5
	neg.l	d5
	neg.l	d6
	add.l	d5,d5
	add.l	d5,d5
	add.l	d6,d6
	lea	.endchunks(pc),a5
	adda.l	d5,a5
	lea	.endpix(pc),a6
	adda.l	d6,a6

.yloop:

.xloop:
	jmp	(a5)
	REPT	320/16
	movem.l	d0-d4/a1-a3,-(a0)
	ENDR
.endchunks:
	jmp	(a6)
	REPT	7
	move.l	d0,-(a0)
	ENDR
.endpix:

	suba.l	a4,a0
	dbra	d7,.yloop
	rts

* INPUT: d0.w: x-center of flare
*        d1.w: y-center of flare
*        d2.w: scalefactor
*        a1: address of flare-picture
*        a2: address of window-entry to write to
PLOT_SCALEFLARE:
	addi.w	#80,d0
	addi.w	#50,d1
	movea.l	scr,a0
	move.l	#(flareradius*2)<<8,d5
	divu.w	d2,d5

	move.w	d5,d4
	move.w	d5,d6
	lsr.w	#1,d4
	sub.w	d4,d0
	sub.w	d4,d1
	moveq	#0,d3
	move.w	d0,d3
	bpl.s	.xpos
	neg.w	d3
	mulu.w	d2,d3
	clr.w	(a2)
	add.w	d0,d5
	move.w	d5,4(a2)
	bra.s	.endxpos
.xpos:	move.w	d0,(a2)
	lsl.w	#2,d3
	adda.w	d3,a0
	moveq	#0,d3
.xclip:	add.w	d0,d5
	cmpi.w	#160,d5
	ble.s	.endxclip
	move.w	#160,d5
.endxclip:
	move.w	d5,4(a2)
	sub.w	d0,d5
.endxpos:

	moveq	#0,d4
	move.w	d1,d4
	bpl.s	.ypos
	neg.w	d4
	mulu.w	d2,d4
	clr.w	2(a2)
	move.w	d6,d7
	add.w	d1,d7
	move.w	d7,6(a2)
	bra.s	.endypos
.ypos:	move.w	d1,2(a2)
	mulu.w	#scrxbytes,d4
	adda.l	d4,a0
	moveq	#0,d4
.yclip:	move.w	d6,d7
	add.w	d1,d7
	cmpi.w	#100,d7
	ble.s	.endyclip
	move.w	#100,d7
.endyclip:
	move.w	d7,6(a2)
	sub.w	d1,d7
.endypos:

	subq.w	#1,d7
	movea.w	#160,a6
	sub.w	d5,a6
	adda.l	a6,a6
	adda.l	a6,a6
	move.l	d3,d0
	ror.l	#8,d0
	moveq	#0,d3
	move.w	d2,d3
	ror.l	#8,d3
	move.w	d5,d6
	lsr.w	#4,d5
	andi.w	#$000f,d6
	mulu.w	#6,d6
	neg.l	d6
	lea	.endxloop(pc),a2
	adda.l	d6,a2

.yloop:	move.w	d4,d1
	lsr.w	#8,d1
	mulu.w	#flareradius*2,d1
	add.l	d0,d1
	move.w	d5,d6
	addi.w	#0,d1
	jmp	(a2)

.xloop:	REPT	1<<4
	move.l	(a1,d1.w*4),(a0)+
	addx.l	d3,d1
	ENDR
.endxloop:
	dbra	d6,.xloop

	add.w	d2,d4
	adda.l	a6,a0
	dbra	d7,.yloop
	rts

******** END OF DEMO-EFFECT OBJECT ********