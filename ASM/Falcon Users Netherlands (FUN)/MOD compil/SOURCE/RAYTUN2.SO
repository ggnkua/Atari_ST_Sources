* Object skeleton used by DEMOS1.S or DASTD.S (v1.5)
* v1.0: * Monitormode selection.
*       * SET_RES routine vbl-synced.
*       * Screenaddress-setting optimised.

******** OBJECT EQUS ********

tunnelxblocks:	EQU	18
tunnelwidth:	EQU	tunnelxblocks*16
tunnelyblocks:	EQU	100/8
tunneldistance:	EQU	$5000

		RSRESET
camparam1:	RS.W	1
camparam2:	RS.W	1
camparam3:	RS.W	1
camparam4:	RS.W	1
camtblsize:	RS.W	1

******** OBJECT TABLE ********

* Must be first in object!!
raytun_tbl:
	DC.L	RAYTUNMAINLOOP
	DC.L	INIT_RAYTUN
	DC.L	SET_RAYTUNRES
	DC.L	SET_TUNNELTRAJECT1
	DC.L	SET_TUNNELTRAJECT2
	DC.L	0

******** RESOLUTION SETTING ROUTINE ********

SET_RAYTUNRES:
	IFEQ	testmode
	move.l	#rts,vbl_gfx

	move.w	$0468.w,d0
.ck466:	cmp.w	$0468.w,d0
	beq.s	.ck466
	move.w	monitormode,d0
	cmpi.w	#vga60,d0
	beq.s	.vga60
	cmpi.w	#vga100,d0
	beq.s	.vga100
	cmpi.w	#rgb50,d0
	beq.s	.rgb50
* Unknown monitormode..
	rts
.vga60:	bra	vga60_16bit_320_100
.vga100:
	bra	vga100_16bit_320_100
.rgb50:	bra	rgb50_16bit_320_100
	ENDC
	rts

******** INIT SUBROUTINE ********

INIT_RAYTUN:
	lea	tunneltexture_txt,a1
	bsr	LOAD_INCFILE
	move.l	a0,tuntextureadr

	lea	multiply_tbl,a0
	bsr	CALC_MULTIPLYTABLE

	lea	length_tbl,a0
	bsr	CALC_LENGTHTABLE

	lea	cam_tbl,a0
	move.w	#0,camparam1(a0)
	move.w	#0,camparam2(a0)
	move.w	#0,camparam3(a0)
	move.w	#0,camparam4(a0)
	rts

INIT_RAYTUNSCREEN:
	movea.l	scr,a0
	bsr	CLEAR_320100TSCR
	rts

******** MAINLOOP SUBROUTINE ********

RAYTUNMAINLOOP:
	move.l	frmcnt,d0
	sub.l	lastframecount,d0
	bne.s	.res_done
	move.l	d0,-(sp)
	bsr	SET_RAYTUNRES
	move.l	(sp)+,d0
.res_done:
	cmpi.l	#3,d0
	bhs.s	.end_screeninit
	bsr	INIT_RAYTUNSCREEN
.end_screeninit:

	movea.l	tunneltrajroutadr,a0
	jsr	(a0)

	lea	grid_tbl,a1
	lea	cam_tbl,a4
	bsr	CALC_FASTRAYTUNNEL

	movea.l	tuntextureadr,a5
	lea	grid_tbl,a1
	bsr	PLOT_RAYTUNNEL

	IFEQ	testmode
	lea	scr,a0
	move.l	(a0)+,d0
	move.l	(a0)+,d1
	move.l	(a0),-4(a0)
	move.l	d0,(a0)
	move.l	d1,-8(a0)
	move.l	d0,d1
	lsr.w	#8,d0
	move.l	d0,$ffff8200.w
	move.b	d1,$ffff820d.w
	ENDC
	rts

******** OBJECT DATA ********

	DATA

tunneltrajroutadr:
	DC.L	CALC_AUTOTUNNELTRAJECT0
atan2_tbl:
	INCBIN	ATAN2TBL.DAT
tunneltexture_txt:
	DC.B	"FLOW.RAW",0	;"IRON.RAW",0
	EVEN

******** OBJECT RESERVES ********

	BSS

tuntextureadr:
	DS.L	1
grid_tbl:
	DS.L	(tunnelxblocks+1)*(tunnelyblocks+1)
cam_tbl:
	DS.B	camtblsize
multiply_tbl:
	DS.W	1<<16
length_tbl:
	DS.B	1<<16
raytunstarttime:
	DS.W	1

******** OBJECT SUBROUTINES ********

	TEXT

SET_TUNNELTRAJECT1:
	move.w	$4bc.w,raytunstarttime
	move.l	#CALC_AUTOTUNNELTRAJECT1,tunneltrajroutadr
	rts

SET_TUNNELTRAJECT2:
	move.w	$4bc.w,raytunstarttime
	move.l	#CALC_AUTOTUNNELTRAJECT2,tunneltrajroutadr
	rts

* INPUT: a0: tableaddress
CALC_LENGTHTABLE:
	lea	256(a0),a1
	lea	((256*255).l,a0),a2
	lea	((256*255).l,a1),a3
	move.l	#1200<<16,d5			* Radius of tunnel.

	moveq	#-128,d7

.yloop:	moveq	#-128,d6
	move.w	d7,d0
	muls.w	d7,d0
	movea.l	d0,a6
	
.xloop:	move.w	d6,d1
	muls.w	d6,d1
	add.l	a6,d1
	subq.l	#1,d1
	bsr	CALC_ATARISQRT
	move.l	d5,d2
	divu.l	d0,d2
	move.b	d2,(a0)+
	move.b	d2,-(a3)
	move.b	d2,-(a1)
	move.b	d2,(a2)+
	addq.w	#1,d6
;	cmpi.w	#128,d6
	bne.s	.xloop

	lea	128(a0),a0
	lea	384(a1),a1
	lea	-384(a2),a2
	lea	-128(a3),a3
	addq.w	#1,d7
;	cmpi.w	#128,d7
	bne.s	.yloop

	rts

* INPUT: a0: tableaddress
CALC_MULTIPLYTABLE:
	moveq	#-128,d7

.yloop:	moveq	#-128,d6

.xloop:	move.w	d6,d0
	muls.w	d7,d0
	add.w	d0,d0
	subq.w	#1,d0
	move.w	d0,(a0)+
	addq.w	#1,d6
	cmpi.w	#128,d6
	bne.s	.xloop

	addq.w	#1,d7
	cmpi.w	#128,d7
	bne.s	.yloop
	rts

CALC_MANUALTUNNELTRAJECT:
	lea	cam_tbl,a4
	move.b	$fffffc02.w,d0
.up:	cmpi.b	#$48,d0
	bne.s	.down
	addq.w	#8,camparam1(a4)
	bra.s	.end
.down:	cmpi.b	#$50,d0
	bne.s	.left
	subq.w	#8,camparam1(a4)
	bra.s	.end
.left:	cmpi.b	#$4b,d0
	bne.s	.right
	addq.w	#8,camparam2(a4)
	bra.s	.end
.right:	cmpi.b	#$4d,d0
	bne.s	.fwd
	subq.w	#8,camparam2(a4)
	bra.s	.end
.fwd:	cmpi.b	#$4e,d0
	bne.s	.bwd
	addq.w	#4,.speed
	bra.s	.end
.bwd:	cmpi.b	#$4a,d0
	bne.s	.end
	subq.w	#4,.speed
;	bra.s	.end
.end:	move.w	.speed(pc),d0
	add.w	d0,camparam3(a4)
	rts

.speed:	DC.W	0

CALC_AUTOTUNNELTRAJECT0:
	lea	cam_tbl,a4
	move.w	$4bc.w,d1
	sub.w	raytunstarttime,d1
	lsl.w	#5,d1
	move.w	d1,camparam3(a4)
	rts

CALC_AUTOTUNNELTRAJECT1:
	lea	cam_tbl,a4
	lea	sine_tbl,a2
	move.w	$4bc.w,d0
	sub.w	raytunstarttime,d0
	move.w	d0,d1
	lsr.w	#4,d0
	lsr.w	#2,d1
	;move.w	d1,camparam4(a4)
	Do_SinModulo	d1
	Get_SinCos	a2,d1,d0,d1
	asr.w	#4,d0
	asr.w	#3,d1
	move.w	d0,camparam1(a4)
	move.w	d1,camparam2(a4)
	asr.w	#1,d1
	eori.w	#$8000,d1
	Do_SinModulo	d1
	Get_Sin	a2,d1,d0
	asr.w	#2,d0
	move.w	$4bc.w,d1
	sub.w	raytunstarttime,d1
	lsl.w	#5,d1
	move.w	d1,camparam3(a4)
	rts

CALC_AUTOTUNNELTRAJECT2:
	lea	cam_tbl,a4
	lea	sine_tbl,a2
	move.w	$4bc.w,d0
	move.w	d0,d1
	lsr.w	#4,d0
	lsr.w	#2,d1
	;move.w	d1,camparam4(a4)
	Do_SinModulo	d1
	Get_SinCos	a2,d1,d0,d1
	asr.w	#4,d0
	asr.w	#3,d1
	move.w	d0,camparam1(a4)
	move.w	d1,camparam2(a4)
	asr.w	#1,d1
	eori.w	#$8000,d1
	Do_SinModulo	d1
	Get_Sin	a2,d1,d0
	asr.w	#1,d0
	move.w	d0,camparam3(a4)
	rts

* INPUT: a1: address of gridtable
*        a4: address of cameratable
CALC_FASTRAYTUNNEL:

		RSRESET
.x0:		RS.L	1
.y0:		RS.L	1
.z0:		RS.L	1
.x1:		RS.L	1
.y1:		RS.L	1
.z1:		RS.L	1
.x2:		RS.L	1
.y2:		RS.L	1
.z2:		RS.L	1
.dx:		RS.L	1
.dy:		RS.W	1
.dz:		RS.W	1
.cornertblsize:	RS.W	1

	Do_SinModulo	camparam1(a4)
	Do_SinModulo	camparam2(a4)
	lea	sine_tbl,a0
	move.w	#tunnelxblocks*1900,d7	* x end value
	move.w	#-tunnelxblocks*1900,d0	* x start value
	swap	d7
	move.w	#tunnelyblocks*1900,d7	* y end value
	move.w	#-tunnelyblocks*1900,d1	* y start value
	lea	.corner_tbl(pc),a5

* Precalculate 3d-transformations of the corner, so you can interpolate all the
* coordinates between those.
* Calculate (x0,y0,z0) upperleft corner of grid.
	move.w	#tunneldistance,d2	* Screen distance by observer (ie. focal lenght!)
	move.w	camparam1(a4),d3	* Rotates ray on X axis.
	Get_SinCos	a0,d3,d3,d4	* Get sin(a) and cos(a).
	move.w	d3,d5
	move.w	d4,d6
	muls.w	d2,d3			* z*sin
	muls.w	d1,d4			* y*cos
	muls.w	d1,d5			* y*sin
	muls.w	d2,d6			* z*cos
	add.l	d5,d6			* Z
	sub.l	d3,d4			* Y
	add.l	d6,d6
;	add.l	d4,d4
	swap	d6
	move.l	d4,.y0(a5)
	move.w	camparam2(a4),d3	* Rotate ray on Y axis.
	Get_SinCos	a0,d3,d3,d4 	* Get sin(b) and cos(b).
	move.w	d3,d5
	move.w	d4,d2
	muls.w	d0,d3			* x*sin
	muls.w	d6,d5			* Z*sin
	muls.w	d0,d2			* x*cos
	muls.w	d6,d4			* Z*cos
	add.l	d2,d5			* X
	sub.l	d3,d4			* Z
;	add.l	d5,d5
;	add.l	d4,d4
	move.l	d5,.x0(a5)		* Store X.
	move.l	d4,.z0(a5)		* Store Z.
* Calculate (x2,y2,z2) lower left corner of grid.
	move.w	#tunneldistance,d2	* Screen distance by observer (ie. focal lenght!)
	move.w	camparam1(a4),d3	* Rotates ray on X axis.
	Get_SinCos	a0,d3,d3,d4	* Get sin(a) and cos(a).
	move.w	d3,d5
	move.w	d4,d6
	muls.w	d2,d3			* z*sin
	muls.w	d7,d4			* y*cos
	muls.w	d7,d5			* y*sin
	muls.w	d2,d6			* z*cos
	add.l	d5,d6			* Z
	sub.l	d3,d4			* Y
	add.l	d6,d6
;	add.l	d4,d4
	swap	d6
	move.l	d4,.y2(a5)
	move.w	camparam2(a4),d3	* Rotate ray on Y axis.
	Get_SinCos	a0,d3,d3,d4 	* Get sin(b) and cos(b).
	move.w	d3,d5
	move.w	d4,d2
	muls.w	d0,d3			* x*sin
	muls.w	d6,d5			* Z*sin
	muls.w	d0,d2			* x*cos
	muls.w	d6,d4			* Z*cos
	add.l	d2,d5			* X
	sub.l	d3,d4			* Z
;	add.l	d5,d5
;	add.l	d4,d4
	move.l	d5,.x2(a5)		* Store X.
	move.l	d4,.z2(a5)		* Store Z.
* Calculate (x1,y1,z1) upper right corner of grid.
	move.w	#tunneldistance,d2	* Screen distance by observer (ie. focal lenght!)
	swap	d7
	move.w	camparam1(a4),d3	* Rotates ray on X axis.
	Get_SinCos	a0,d3,d3,d4	* Get sin(a) and cos(a).
	move.w	d3,d5
	move.w	d4,d6
	muls.w	d2,d3			* z*sin
	muls.w	d1,d4			* y*cos
	muls.w	d1,d5			* y*sin
	muls.w	d2,d6			* z*cos
	add.l	d5,d6			* Z
	sub.l	d3,d4			* Y
	add.l	d6,d6
;	add.l	d4,d4
	swap	d6
	move.l	d4,.y1(a5)
	move.w	camparam2(a4),d3	* Rotate ray on Y axis.
	Get_SinCos	a0,d3,d3,d4 	* Get sin(b) and cos(b).
	move.w	d3,d5
	move.w	d4,d2
	muls.w	d7,d3			* x*sin
	muls.w	d6,d5			* Z*sin
	muls.w	d7,d2			* x*cos
	muls.w	d6,d4			* Z*cos
	add.l	d2,d5			* X
	sub.l	d3,d4			* Z
;	add.l	d5,d5
;	add.l	d4,d4
	move.l	d5,.x1(a5)		* Store X.
	move.l	d4,.z1(a5)		* Store Z.

* Interpolate all the coordinates in the grid and do the texture-calculation.
	movea.l	a1,a3
	move.w	camparam3(a4),-(sp)
* Do xloop-increment initialization.
	movem.l	.x0(a5),d4-d6
	movem.l	.x1(a5),d0-d2
	sub.l	d4,d0
	sub.l	d5,d1
	sub.l	d6,d2
	movea.l	d4,a0
	movea.l	d5,a1
	movea.l	d6,a2
	divs.l	#tunnelxblocks,d0
	divs.l	#tunnelxblocks,d1
	divs.l	#tunnelxblocks,d2
	asr.l	#8,d5
	move.w	d5,d4
	swap	d4
	swap	d5
	swap	d6
	movem.l	d4-d6,(a5)
	asr.l	#8,d1
	move.w	d1,d0
	swap	d0
	swap	d1
	swap	d2
	move.l	d0,a4
	move.l	d1,d3
	move.l	d2,a6
* Do yloop-increment initialization.
	movem.l	.x2(a5),d0-d2
	sub.l	a0,d0
	sub.l	a1,d1
	sub.l	a2,d2
	divs.l	#tunnelyblocks,d0
	divs.l	#tunnelyblocks,d1
	divs.l	#tunnelyblocks,d2
	asr.l	#8,d1
	move.w	d1,d0
	swap	d0
	swap	d1
	swap	d2
	move.l	d0,.dx(a5)
	move.w	d1,.dy(a5)
	move.w	d2,.dz(a5)
	
	moveq	#tunnelyblocks,d7
	lea	length_tbl+32768+128,a0
	lea	multiply_tbl+(32768+128)*2,a1
	lea	atan2_tbl+(32768+128)*2,a2
	move.w	(sp)+,d2

.yloop:	swap	d7
	move.w	#tunnelxblocks,d7	* x loopcounter

* t = r / sqrt(x^2 + y^2)
* v = t * z
* u = atan2(y, x)

* a0	LUT	lut[(a<<8)+b] = r / sqrt(a^2 + b^2)
* a1	LUT	lut[(a<<8)+b] = a * b
* a2	LUT	lut[(a<<8)+b] = (atan2(b, a)/PI) << 8
* a3	tunneltab
* d4	x,y	yy00XXxx
* d5	y	......YY
* d6	z	....ZZzz
* a4	dx,dy	yy00XXxx
* d3	dy	......YY
* a6	dz	....ZZzz
* d0,d1: trashed.

.xloop:	move.w	d4,d0			* 2   Combine x & y vectors.
	move.b	d5,d0			* 2
	move.w	d6,d1			* 2
	move.b	(a0,d0.w),d1		* 10? Get intersection-pos (t).
	move.w	(a1,d1.w*2),d1		* 16? v = z * t
	add.w	d2,d1
	move.w	d1,(a3)+
	move.w	(a2,d0.w*2),(a3)+	* 12? u = atan2(y, x)
	add.l	a4,d4			* 4?  / Interpolate
	addx.b	d3,d5			* 2   | direction-
	add.w	a6,d6			* 2   \ vector.
	dbra	d7,.xloop

	movem.l	(a5),d4-d6
	add.l	.dx(a5),d4
	move.w	.dy(a5),d0
	addx.w	d0,d5
	add.w	.dz(a5),d6
	movem.l	d4-d6,(a5)

	swap	d7
	dbra	d7,.yloop

	rts

.corner_tbl:
	DS.B	.cornertblsize

* INPUT: a1: address of (u,v) grid
*        a5: address of texture
PLOT_RAYTUNNEL:
	movea.l	scr,a0
	lea	(tunnelxblocks+1)*4(a1),a2
	lea	320-tunnelwidth(a0),a0
	moveq	#tunnelyblocks-1,d7	* y loop counter
	moveq	#0,d0

.scanline:
	swap	d7
	move.w	#tunnelwidth/16-1,d7	* x loop counter
	
.square:
	move.l	(a2)+,d1		* (u4,v4)
	move.l	(a1)+,a3		* (u1,v1)
	move.l	(a2),d2			* (u3,v3)
	move.l	(a1),a4			* (u2,v2)
	sub.l	a3,d1			* (u4-u1,v4-v1)
	sub.l	a4,d2			* (u3-u2,v3-v2)
	lsl.w	#3,d1
	lsl.w	#3,d2
	asr.w	#3,d1
	asr.w	#3,d2
	adda.l	a3,a3
	adda.l	a4,a4
	adda.l	a3,a3
	adda.l	a4,a4
	adda.l	a3,a3
	adda.l	a4,a4
	moveq	#8-1,d6

.Yspan:	move.l	a3,d3			* (uL,vL)
	move.l	a4,d4			* (uR,vR)
	sub.l	a3,d4			* (uR-uL,vR-vL)
	asr.l	#3,d4
	lsl.w	#3,d4
	asr.w	#3,d4

	REPT	8
	move.w	d3,d0
	move.l	d3,d5
	rol.l	#8,d5
	move.b	d5,d0
	move.l	(a5,d0.l*4),(a0)+
	add.l	d4,d3			* (u+du,v+dv)
	ENDR

	lea	(320-16)*2(a0),a0	* next span
	add.l	d1,a3			* (uL+duL,vL+dvL)
	add.l	d2,a4			* (ur+duR,vR+dvR)
	dbra	d6,.Yspan

	lea	(-8*320+16)*2(a0),a0	* next nice little square
	dbra	d7,.square

	addq	#4,a1
	addq	#4,a2
	lea	((320-tunnelwidth)+320*7)*2(a0),a0
	swap	d7
	dbra	d7,.scanline
	rts

******** END OF DEMO-EFFECT OBJECT ********