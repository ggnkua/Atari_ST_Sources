* Object skeleton used by DEMOS1.S or DASTD.S (v2.0)
* v1.0: * Monitormode selection.
*       * SET_RES routine vbl-synced.
*       * Screenaddress-setting optimised.
*
* v1.1: * Automaticly initializes screenbuffers and resolution.
*       * Returns resultcode in INIT routine.
*       * Minor optimisations.

******** OBJECT EQUS ********

unselectcolor:	=	$7cdf

******** OBJECT TABLE ********

* Must be first in object!!
msxslx_tbl:
	DC.L	MSXSLXMAINLOOP
	DC.L	INIT_MSXSLX
	DC.L	SET_MSXSLXRES
	DC.L	TRIGGER_SELECTOR
	DC.L	TRIGGER_FADEOUT
	DC.L	0

******** RESOLUTION SETTING ROUTINE ********

SET_MSXSLXRES:
	IFEQ	testmode
	move.l	#rts,vbl_gfx

	move.w	$0468.w,d0
.ck468:	cmp.w	$0468.w,d0
	beq.s	.ck468
	move.w	monitormode,d0
	cmpi.w	#vga60,d0
	beq.s	.vga60
	cmpi.w	#vga100,d0
	beq.s	.vga100
	cmpi.w	#rgb50,d0
	beq.s	.rgb50
* Unknown monitormode..
	rts
.vga60:	bra.l	vga60_16bit_320_200
.vga100:
	bra.l	vga100_16bit_320_200
.rgb50:	bra.l	rgb50_16bit_320_200
	ENDC
	rts

SET_PICRES:
	IFEQ	testmode
	move.l	#FADE_PICIN,vbl_gfx

	bsr	PLAY_SELECTEDMOD

	move.w	$0468.w,d0
.ck468:	cmp.w	$0468.w,d0
	beq.s	.ck468
	move.w	monitormode,d0
	cmpi.w	#vga60,d0
	beq.s	.vga60
	cmpi.w	#vga100,d0
	beq.s	.vga100
	cmpi.w	#rgb50,d0
	beq.s	.rgb50
* Unknown monitormode..
	rts
.vga60:	bra.l	vga60_8bit_640_400
.vga100:
	bra.l	vga100_8bit_640_400
.rgb50:	bra.l	rgb50_8bit_640_400
	ENDC
	rts

******** INIT SUBROUTINE ********

* OUTPUT: d0.l: 0   = All clear.
*               neg = Error! Not initialized!
INIT_MSXSLX:
	lea	pmpbackname_txt,a1
	bsr	LOAD_INCFILE
	move.l	d0,d0
	bmi.s	.error
	move.l	a0,pmppicadr

	lea	modfilename_lst,a1
	lea	modadr_tbl+2,a2
	moveq	#0,d7

.loadloop:
	movem.l	d7/a1/a2,-(sp)
	bsr.l	LOAD_INCFILE
	movem.l	(sp)+,d7/a1/a2
	move.l	d0,d0
	bmi.s	.error
	move.l	a0,(a2)+
	addq.w	#1,d7

.findnextnameloop:
	tst.b	(a1)+
	bne.s	.findnextnameloop

	tst.b	(a1)
	bne.s	.loadloop

	move.w	d7,modadr_tbl

	lea	pal_tbl,a1
	lea	512*2(a1),a0
	moveq	#128-1,d7

.loop:	move.w	(a1)+,-(a0)
	move.w	(a1)+,-(a0)
	dbra	d7,.loop

.success:
	moveq	#0,d0
	rts

.error:	moveq	#-1,d0
	rts

******** SCREENINIT SUBROUTINE ********

INIT_MSXSLXSCREEN:
	IFEQ	testmode
	movea.l	scr,a0
	bsr	CLEAR_320200TSCR
	ENDC
	bsr	PLOT_MODNAMES
	move.w	modselect,d0
	move.w	#$ffff,d1
	bsr	PLOT_MODNAME
	rts

******** MAINLOOP SUBROUTINE ********

MSXSLXMAINLOOP:
	movea.l	mainloopadr,a0
	jmp	(a0)

DO_INTROSCREEN:
	tst.w	frm
	bne	.end

	bsr	SET_PICRES

	lea	introdestpal_tbl,a0
	lea	pmpbackpal_tbl,a1
	move.w	#256-1,d7

.loop:	move.w	(a1)+,d0
	swap	d0
	move.b	(a1)+,d0
	move.l	d0,(a0)+
	dbra	d7,.loop

	lea	intropal_tbl,a0
	move.l	#$ffff00ff,d0
	move.w	#256-1,d7
.sloop:	move.l	d0,(a0)+
	dbra	d7,.sloop

	addq.w	#1,frm
	movea.l	bigscradr,a0
	movea.l	pmppicadr,a1
	move.w	#400-1,d7

.yloop:	REPT	160
	move.l	(a1)+,(a0)+
	ENDR	
	dbra	d7,.yloop
	
	move.l	bigscradr,d0
	move.l	d0,d1
	lsr.w	#8,d0
	move.l	d0,$ffff8200.w
	move.b	d1,$ffff820d.w

.end:	move.w	$468.w,d0
.test468:
	cmp.w	$468.w,d0
	beq.s	.test468

	move.l	frmcnt,lastframecount

	rts

DO_MSXSLXSCREEN:
	IFEQ	testmode
	move.w	$468.w,.old468
	ENDC

	move.l	frmcnt,d0
	sub.l	lastframecount,d0
	subq.l	#1,d0
	bne.s	.res_done
	move.l	d0,-(sp)
	bsr	SET_MSXSLXRES
	move.l	(sp)+,d0
.res_done:
	cmpi.l	#3,d0
	bhs.s	.end_screeninit
	bsr	INIT_MSXSLXSCREEN
.end_screeninit:

	move.w	$4bc.w,d0
	btst	#10,d0
	beq.s	.snatchmymatch
	move.l	#snatchtexture_dat,textureadr
	bra.s	.end_snatchy
.snatchmymatch:
	move.l	#toriamostexture_dat,textureadr
.end_snatchy:
	lsr.w	#3,d0
	andi.w	#$01ff,d0
	move.w	(pal_tbl,d0.w*2),color

	tst.w	newmod
	bne.s	.end_modselect
	moveq	#0,d0
	move.b	keycode,d0
	subi.b	#$3b,d0
	bmi.s	.end_modselect
	cmpi.b	#9,d0
	bhi.s	.end_modselect
	move.w	modselect,oldmodselect
	cmp.w	oldmodselect,d0
	beq.s	.end_modselect
	move.w	d0,modselect
	move.w	#3,newmod
.end_modselect:

.set_newmod:
	cmpi.w	#3,newmod
	bne.s	.end_setnewmod
	bsr	PLAY_SELECTEDMOD
.end_setnewmod:

.plot_modname:
	move.w	newmod,d0
	subq.w	#1,d0
	bmi.s	.end_plotmodname
	move.w	d0,newmod
	move.w	modselect,d0
	move.w	#$ffff,d1
	bsr	PLOT_MODNAME
	move.w	oldmodselect,d0
	move.w	#unselectcolor,d1
	bsr	PLOT_MODNAME
.end_plotmodname:

	bsr	PLOT_OSCI

	bsr	PLOT_FX

	IFEQ	testmode
	lea	scr,a0
	move.l	(a0)+,d0
	move.l	(a0)+,d1
	move.l	(a0),-4(a0)
	move.l	d0,(a0)
	move.l	d1,-8(a0)
	move.l	d0,d1
	lsr.w	#8,d0
	move.l	d0,$ffff8200.w
	move.b	d1,$ffff820d.w

	move.w	.old468(pc),d0
.wait468:
	cmp.w	$468.w,d0
	beq.s	.wait468
	ENDC
	rts

.old468:
	DC.W	0
.startframe:
	DC.W	0

******** OBJECT DATA ********

	DATA

font_dat:
	INCBIN	FONT.DAT
tunneloffset_dat:
	INCBIN	TUNNEL.DAT
snatchtexture_dat:
	INCBIN	SNATCHTX.DAT
toriamostexture_dat:
	INCBIN	TEXTURE.DAT
pal_tbl:
	INCBIN	LINE256.PAL
	DS.W	256
pmpbackpal_tbl:
	INCBIN	PMPBACK.PAL

mainloopadr:
	DC.L	DO_INTROSCREEN

modselect:
	DC.W	0
newmod:	DC.W	0

pmpbackname_txt:
	DC.B	"PMPBACK.RAW",0

modfilename_lst:
fuzzymod_txt:
	DC.B	"FUZZY.MOD",0
existanxmod_txt:
	DC.B	"EXISTANX.MOD",0
insanemod_txt:
	DC.B	"INSANE.MOD",0
pmpmod_txt:
	DC.B	"PMP.MOD",0
satisfacmod_txt:
	DC.B	"SATISFAC.MOD",0
suckmod_txt:
	DC.B	"SUCK.MOD",0
wsnmod_txt:
	DC.B	"WSN.MOD",0
	DC.B	0
	EVEN

******** OBJECT RESERVES ********

	BSS

intropal_tbl:
	DS.L	256
introdestpal_tbl:
	DS.L	256
pmppicadr:
	DS.L	1
textureadr:
	DS.L	1
modadr_tbl:
	DS.W	1
	DS.L	10
oldmodselect:
	DS.W	1
color:	DS.W	1
frm:	DS.W	1

******** OBJECT SUBROUTINES ********

	TEXT

TRIGGER_SELECTOR:
	move.l	#DO_MSXSLXSCREEN,mainloopadr
	rts

TRIGGER_FADEOUT:
	move.l	#FADE_PICOUT,vbl_gfx
	rts

PLAY_SELECTEDMOD:
	lea	modadr_tbl,a0
	move.w	(a0)+,d0
	move.w	modselect,d1
	cmp.w	d1,d0
	ble.s	.end

	movea.l	(a0,d1.w*4),a0
	bsr	dspmod32_play_module
	lea	vbl_msx,a0
	bsr	install_dspmod32irq

.end:	rts

PLOT_MODNAMES:
	movea.l	scr,a0
	movea.l	a0,a6
	lea	font_dat,a1
	lea	modadr_tbl,a2
	move.w	(a2)+,d7
	subq.w	#1,d7
	bmi.s	.end
	move.w	#unselectcolor,d1

.loop:	movea.l	(a2)+,a3
	moveq	#20-1,d6

.charloop:
	moveq	#0,d0
	move.b	(a3)+,d0
	ori.b	#$20,d0				* -> lowercase
	subi.b	#"a",d0
	bpl.s	.do_letter
	lea	32(a0),a0
	bra.s	.end_charloop
.do_letter:
	lsl.l	#5,d0
	lea	(a1,d0.l),a4
	moveq	#16-1,d5

.scanlineloop:
	move.w	(a4)+,d0
	moveq	#16-1,d4

.pixelloop:
.plot_pixel:
	btst	d4,d0
	beq.s	.end_plotpixel
	move.w	d1,(a0)
.end_plotpixel:
	addq	#2,a0
	dbra	d4,.pixelloop

	lea	640-32(a0),a0
	dbra	d5,.scanlineloop

	lea	-16*640+32(a0),a0
.end_charloop:
	dbra	d6,.charloop

	lea	16*640(a6),a6
	movea.l	a6,a0
	dbra	d7,.loop

.end:	rts

* INPUT: d0.w: mod number (=linenumber)
*        d1.w: color
PLOT_MODNAME:
	lea	font_dat,a1
	lea	modadr_tbl,a2
	move.w	(a2)+,d7
	subq.w	#1,d7
	bmi.s	.end
	movea.l	(a2,d0.l*4),a3
	movea.l	scr,a0
	mulu.w	#640*16,d0
	adda.l	d0,a0
	movea.l	a0,a6
	moveq	#20-1,d6

.charloop:
	moveq	#0,d0
	move.b	(a3)+,d0
	ori.b	#$20,d0				* -> lowercase
	subi.b	#"a",d0
	bpl.s	.do_letter
	lea	32(a0),a0
	bra.s	.end_charloop
.do_letter:
	lsl.l	#5,d0
	lea	(a1,d0.l),a4
	moveq	#16-1,d5

.scanlineloop:
	move.w	(a4)+,d0
	moveq	#16-1,d4

.pixelloop:
.plot_pixel:
	btst	d4,d0
	beq.s	.end_plotpixel
	move.w	d1,(a0)
.end_plotpixel:
	addq	#2,a0
	dbra	d4,.pixelloop

	lea	640-32(a0),a0
	dbra	d5,.scanlineloop

	lea	-16*640+32(a0),a0
.end_charloop:
	dbra	d6,.charloop

.end:	rts

PLOT_OSCI:
	movea.l	scr,a0
	adda.l	#118*640,a0
	moveq	#32-1,d7
	move.l	#%01111011111011110111101111101111,d1
	
.yloop:	move.w	#160-1,d6

.xloop:	move.l	(a0),d0
	lsr.l	#1,d0
	and.l	d1,d0
	move.l	d0,(a0)+
	dbra	d6,.xloop

	dbra	d7,.yloop

	movea.l	scr,a0
	adda.l	#149*640,a0
	lea	640-320(a0),a2
	move.l	sdmabufadr,a1
	move.w	#160-1,d7
	moveq	#11,d2

.osciloop:
	movem.w	(a1),d0-d1
	addq	#8,a1
	asr.w	d2,d0
	asr.w	d2,d1
	addi.w	#16,d0
	addi.w	#16,d1
	move.w	d0,d5
	move.w	d1,d6
	movea.l	a0,a3
	movea.l	a2,a4
	move.w	color,d0
	lsr.w	#1,d0
	andi.w	#%0111101111101111,d0

.oscilloop:
	add.w	d0,(a3)
	lea	-640(a3),a3
	dbra	d5,.oscilloop

.oscirloop:
	add.w	d0,(a4)
	lea	-640(a4),a4
	dbra	d6,.oscirloop

	addq	#2,a0
	addq	#2,a2
	dbra	d7,.osciloop

	rts

PLOT_FX:
	IFNE	1

	movea.l	textureadr,a1
	lea	.temp_buf,a0
	
	moveq	#32-1,d7

.loop:	move.w	(a1)+,(a0)+
	dbra	d7,.loop

	movea.l	textureadr,a0
	lea	64(a0),a1
	moveq	#32-2,d7

.copyloop:
	moveq	#32-1,d6

.copyxloop:
	move.w	(a1)+,(a0)+
	dbra	d6,.copyxloop

	dbra	d7,.copyloop

	lea	.temp_buf,a1
	moveq	#32-1,d7

.recopyloop:
	move.w	(a1)+,(a0)+
	dbra	d7,.recopyloop	

	ENDC

	movea.l	scr,a0
	adda.l	#150*640,a0
	movea.l	a0,a6
	lea	tunneloffset_dat,a1
	movea.l	textureadr,a2
	moveq	#50-1,d7
	moveq	#0,d0

.yloop:	moveq	#40-1,d6

.xloop:	REPT	8
	move.w	(a1)+,d0
	move.w	(a2,d0.l),(a0)+
	ENDR
	dbra	d6,.xloop

	dbra	d7,.yloop

	rts

	BSS

.temp_buf:
	DS.W	32

	TEXT

FADE_PICIN:
	cmpi.w	#vga100,monitormode
	bne.s	.on
	move.w	$468.w,d0
	btst	#0,d0
	beq.s	.on
	rts
.on:	lea	intropal_tbl,a0
	lea	introdestpal_tbl,a1
	bra	FADE_256PAL

FADE_PICOUT:
	cmpi.w	#vga100,monitormode
	bne.s	.on
	move.w	$468.w,d0
	btst	#0,d0
	beq.s	.on
	rts
.on:	lea	intropal_tbl,a0
	lea	$ffff9800.w,a2
	move.w	#256-1,d7

.loop:
.fade_red:
	move.b	(a0),d0
	beq.s	.end_red
	subq.b	#1,d0
.end_red:
	move.b	d0,(a0)+

.fade_green:
	move.b	(a0),d0
	beq.s	.end_green
	subq.b	#1,d0
.end_green:
	move.b	d0,(a0)+

	addq	#1,a0
	addq	#1,a1

.fade_blue:
	move.b	(a0),d0
	beq.s	.end_blue
	subq.b	#1,d0
.end_blue:
	move.b	d0,(a0)+

	move.l	-4(a0),(a2)+
	dbra	d7,.loop
	rts

* INPUT: a0: actual palette
*        a1: destination palette
FADE_256PAL:
	lea	$ffff9800.w,a2
	move.w	#256-1,d7

.loop:
.fade_red:
	move.b	(a0),d0
	cmp.b	(a1)+,d0
	beq.s	.end_red
	bhi.s	.red_down
	addq.b	#1,d0
	bra.s	.end_red
.red_down:
	subq.b	#1,d0
.end_red:
	move.b	d0,(a0)+

.fade_green:
	move.b	(a0),d0
	cmp.b	(a1)+,d0
	beq.s	.end_green
	bhi.s	.green_down
	addq.b	#1,d0
	bra.s	.end_green
.green_down:
	subq.b	#1,d0
.end_green:
	move.b	d0,(a0)+

	addq	#1,a0
	addq	#1,a1

.fade_blue:
	move.b	(a0),d0
	cmp.b	(a1)+,d0
	beq.s	.end_blue
	bhi.s	.blue_down
	addq.b	#1,d0
	bra.s	.end_blue
.blue_down:
	subq.b	#1,d0
.end_blue:
	move.b	d0,(a0)+

	move.l	-4(a0),(a2)+
	dbra	d7,.loop
	rts

******** END OF DEMO-EFFECT OBJECT ********