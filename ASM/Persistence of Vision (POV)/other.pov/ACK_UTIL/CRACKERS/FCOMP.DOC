FCOMPARE V2.2

                 A powerful file compare utility by The Alien

This is really one for the programmers and hackers out there, but I've written
it in a manner that means you can use it for simple comparing jobs as well as
complex ones.

FCompare can be used in three ways. Firstly, you can run the program and type
in the various parameters required. They are explained below in the same order
as you will be asked to type them. One important difference is that if the two
files you select are of different lengths, then you will be told so and asked
if you wish to continue. In the two methods of using the program listed below,
there is no message asking you to confirm you wish to continue comparing
different length files, it will simply assume you want it to do so.

The other two methods are via the command line. You can either:

1)      Pass the filename of a file containing the parameters, or
2)      Pass the address of such a file in memory.

An example parameters file is shown below (the comments on the right-hand side
of the screen are NOT allowed in the real thing).

e:\file1.dat             1: first file
e:\file2.dat             2: second file
$0                       3: start address for printout
$0                       4: address to start comparing at
$0                       5: address to end comparing at
$0,$1,$2,$3              6: words to take note of in file 1
$0,$1,$2,$3              7: words to take note of in file 2
$0,$1,$2,$3              8: words to ignore in file1
$0,$1,$2,$3              9: words to ignore in file2
3,e:\diffs.txt          10: output type 1 = screen, 2 = printer, 3 = disk

Lines 1 and 2 contain the filenames of the files you wish to compare.

Line 3, the start address for printout is the address in memory at which your
file would normally reside, e.g. if you had two pieces of code that resided at
$10000 you would enter $10000 on this line and the printout of any differences
in the two files would use the correct address. Obviously if you are not
interested in this facility, and just want the offset within the file at which
the differences are, then you should enter $0 (if typing a value into the
program itself then Return on it's own is the same as typing $0).

Line 4, the address to start comparing at has three possible values. Firstly,
if you wish to start comparing from the start of each file, then you should use
$0. If you are using the start address facility above, then if you wished to
start comparing at address $20000 you would enter $20000, oddly enough.
Finally, if you have entered $0 for the start address, then any value you enter
here will be added to the start of the file. Again, if typing this value into
the program rather than using a parameter file, then pressing Return without
entering a number is the same as typing $0.

Line 5, the address to stop comparing at is much the same as above, but if you
enter $0 it will end at the end of the shortest file.

Line 6 can either contain up to 128 hex numbers (word size) seperated by commas
or a '-' character to signify that you do not wish to have any entries on this
line. The words you enter here are ones you wish to take special note of in the
files. For instance, if you were only interested in finding differences between
$4e71 and anything else, you would enter $4e71 in this line. When the program
finds a difference in your files, it would then check to see if the word in the
first file was $4e71, and if it wasn't, it wouldn't bother printing the
difference on screen. As stated, you can have up to 128 numbers on this line,
but they must all be on the same line, you cannot split the line in any way.

Line 7 is as above, but is for numbers you wish to take note of in the second
file, i.e. if you only wanted to see differences where the word in the second
file was $4eb9 then you'd enter $4eb9 on this line. If you wanted only to
display differences between $4e71 and $4eb9 you'd put $4e71 on the line above
and $4eb9 on this line. Again, use the '-' character if you do not wish to use
this facility. If you have entered '-' on both of these lines then a normal or
filtered search will take place.

Lines 8 and 9 are similar to the above, but are for words you wish to ignore
rather than those you wish to take note of. This facility is known as the
filter because if filters out unwanted data. If you're getting a load of zeros
appearing in the first file that you're not interested in, then entering $0 on
this line will stop them from being printed. It is not possible to use both the
filter and 'take note' facilities, so if there have been any entries made on
lines 6 and 7, or if you have typed any entries into the program at that point,
then any entries in lines 6 and 7 of a parameter file will be ignored, and if
you typed in the values to take note of, you will not even be asked for any
filter words.

Line 10 is the type of output required. This must be a number, 1 for the
screen, 2 for the printer or 3 for disk, in which case you should follow the
'3' with a comma and then the name of the file you wish to save the differences
in.

So, if you had two files that originally resided at $10000, you only wanted to
search from $11000 to $12000, you were only interested in finding a word of
value $4e71 that had been changed to $4eb9 and wanted to list the differences
to the printer, you would use the following parameters:

filename1
filename2
$10000
$11000
$12000
$4e71
$4eb9
-
-
2

Note that as we've used a start address ($10000), then the start and end
offsets are $11000 and $12000, EnotF $1000 and $2000.

Or, if you had two data files that you wished to compare, you needed to check
all the way through the files, but you weren't interested in any 4's in the
first file or 5's in the second file, and wanted the output listed to the
screen, the following would be used:

filename1
filename2
$0
$0
$0
-
-
$4
$5
1


Please note that all numbers MUST be in hex format and MUST be preceded with a
dollar ($) sign. You need not enter unnecessary leading zeroes, i.e. $0 is
perfectly acceptable for $000000 or $0000, though the latter two can be used
if you prefer. Note that the maximum number of digits is six, not eight, as the
ST only uses 24 bit addressing, so the leftmost two digits would always be 00
anyway. If you enter more than six digits, or if you enter more than four
digits for a word, only the rightmost digits will be used, i.e. $12345 for a
word will actually be $2345.

Each line of the parameter file must be ended with a carriage return ($D), so
any text editor can be used. The line feed character ($A) is ignored by the
program, and is not necessary though most text editors will insert it anyway.


Ok, so you have your parameters file. Now, you can have FCompare access it from
either memory or disk. If your file is on disk then simply supply the following
command line to FCompare:

filename_of_parameter_file

If you are a programmer and are passing the command line from your own program,
you should make sure you also include the usual leading byte, which normally
contains the length of the command line string; FCompare doesn't care, just as
long as it isn't zero.

If you have the parameter file already in memory, then you can pass the address
of the file. You can do this in two ways, either with a hex number on the
command line (not forgetting that leading byte), e.g.:

$30000

...or alternatively as an actual longword, in which case your command line
should be at an even address and should consist of a leading byte, then a '>'
character, then the longword containing the address.

FCompare has a fair amount of error checking and parameter verification, but
straying too far from the correct parameter file/command line syntax will
probably crash it so be careful. I never intended to release this program at
all, so no complaints! It doesn't do any self-checking like PoPiMenu and
PickFile either.


