* Woke up
* still in a dream.
* Nothing to say.
* Can't pronounce my name.
*
* I open my mouth,
* the words come out...
* ...but make no sense
* for a stranger's ear
*
* In a different language.
* In a foreign land.
* Like I'm an alien
* on a different planet.
*
* Back home
* I feel the same
* Nothing to say
* except for my name.
*
* I open my mouth.
* The words come out,
* but make no sense
* for my lover's ear.
*
* In my native language
* in my native land
* I still behave
* like on a different planet.
*
* It makes it clear.
* I understand.
* We're all strangers
* in a foreign land.
*
* Burn the butchers!
* Forge your head
* to the hilt!
*
* Die Krupps - To The Hilt

; 4bpl tower + background, 4bpl greets..
; todo:
; - greets appearance
; - try to keep water 1vbl, maybe thru TIB?

******** OBJECT EQUS ********

GREET_TIME:		=	100		; #vbls to next greet
FADING:			=	0		; fading in (white -> pal) yes/no
BCK_COL:		=	0	$102	; background color

			RSRESET
worddoubler_table:	RS.L	65536
bytedoubler_table:	RS.W	256

			RSRESET
sprposentryid:		RS.W	1
sprposentryx:		RS.W	1
sprposentryy:		RS.W	1
sprpossize:		RS.B	0

			RSRESET
sprlistadr:		RS.L	1
sprlistx:		RS.W	1
sprlisty:		RS.W	1
sprlistdist:		RS.W	1
sprentrysize:		RS.B	0


******** OBJECT TABLE ********

* Must be first in object!!
scape_tbl:
	DC.L	SCAPEGOATMAINLOOP
	DC.L	INIT_SCAPEGOAT
	DC.L	SET_SCAPEGOATRES
	DC.L	END_SCAPE
* Add more addresses here..
	DC.L	0

******** RESOLUTION SETTING ROUTINE ********

SET_SCAPEGOATRES:
	move.l	$466.w,scapestart466

;	move.w	#BCK_COL,back_dat+2
	movem.l	back_dat+2,d0-d7
	movem.l	d0-d7,scapepal
	movem.l	d0-d7,pal
	bsr	blue_it_up
; normal palette faded to white..
	lea	scapepal,a1
	lea	scapefadepal,a0
	bsr	CALC_SCAPEPAL
; reflected palette faded to white..
	lea	refpal,a1
	lea	reffadepal,a0
	bsr	CALC_SCAPEPAL

	bsr	make_worddoubler_table
	bsr	calc_waves

	clr.w	greets_active
	rts

******** INIT SUBROUTINE ********

INIT_SCAPEGOAT:
;	bsr	precalc_pixblocks
	bsr	calc_mask
	rts

******** MAINLOOP SUBROUTINE ********

SCAPEGOATMAINLOOP:
	move.l	frmcnt,d0
	sub.l	lastfrmcnt,d0
	bne.s	.res_done
	bsr	SET_SCAPEGOATRES
.res_done:

	tst.w	scape_ends
	beq.s	.normal

	lea	scr,a2
	movea.l	(a2)+,a0			; a0:dst (log screen)
	movea.l	(a2),a1				; a1:src (old screen)
	bsr	scale
	addi.w	#50,horizon
	clr.w	scapepal			; test!

	moveq	#3,d7				; Limit to 3 vbl speed..
	bra	.end

.normal:move.w	#160,d0
	move.l	$0466.w,d1
	sub.l	scapestart466,d1
	lsr.l	d1
	cmpi.l	#300,d1
	bls.s	.height_ok
	move.l	#300,d1
.height_ok:
	neg.l	d1
	addi.w	#300+140,d1
	move.w	d1,horizon

	movea.l	scr,a0
	move.w	d1,d0			; d0.w=ymid
	subi.w	#170,d0			; d0.w=yoff (scr)
	move.w	#200,d1			; d1.w=height
	lea	back_dat+34,a1
	bsr	copy_pic

;- greetings shit ----------------------------------------------------------

	tst.w	greets_active
	bgt.s	.yeah_greets
	bmi.s	.no_greets

	move.l	$0466.w,d0
	move.l	d0,greet_starttime
	move.w	#+1,greets_active

.yeah_greets:
	lea	greet_table,a0
	lea	greetpos_table,a1
	move.l	$0466.w,d1
	sub.l	greet_starttime,d1

	IFNE	1
	moveq	#GREET_TIME,d2
	moveq	#-1,d3
.divloop:
	addq.w	#1,d3
	sub.l	d2,d1
	bpl.s	.divloop
	move.w	d3,d1
	ELSE
	divu.w	#GREET_TIME,d1
	move.w	d1,d3
	ENDC

	cmp.w	(a0)+,d1
	blo.s	.yes_greets
	move.w	#-1,greets_active
	bra.s	.no_greets
.yes_greets:
	move.w	d1,d0
	bsr	paint_greet
.no_greets:

;- end of greet crap -------------------------------------------------------

	bsr	reflect

	moveq	#2,d7
.end:

	IFEQ	testmode
	lea	scr,a0
	move.l	(a0)+,d0
	move.l	(a0),-4(a0)
	move.l	d0,(a0)
	lsr.w	#8,d0
	move.l	d0,$ffff8200.w
	ENDC

	move.w	.old468(pc),d0
.cmp468:move.w	$468.w,d1
	move.w	d1,d2
	sub.w	d0,d1
	cmp.w	d7,d1
	blo.s	.cmp468
	move.w	d2,.old468

	move.l	frmcnt,d0
	sub.l	lastfrmcnt,d0
	bne.s	.res_done2
	bsr	TRIGGER_SCAPEPALFADE
.res_done2:
	rts

.old468:dc.w	0

******** OBJECT SUBROUTINES ********

kill_hbl:
	IFNE	FADING
	moveq	#-1,d0
	lea	$FFFF8240.w,a0
	REPT	8
	move.l	d0,(a0)+
	ENDR
	ELSE
	move.l	#$01020102,d0
	lea	$FFFF8240.w,a0
	REPT	8
	move.l	d0,(a0)+
	ENDR
	ENDC
	move	#$2700,sr
	bclr	#0,$fffffa07.w			; tib off
	bclr	#0,$fffffa13.w			; tib off
	move	#$2300,sr
	rts

END_SCAPE:
	st	scape_ends
	rts

trigger_greet_fadein:
	clr.w	faded_in
	move.w	#-1,scapefadedir
	move.l	#scapefadepal+16*32,scapefadepaladr
	move.l	#reffadepal+16*32,reffadepaladr
	rts

trigger_greet_fadeout:
	clr.w	faded_in
	clr.w	faded_out
	move.w	#+1,scapefadedir
	move.l	#scapefadepal,scapefadepaladr
	move.l	#reffadepal,reffadepaladr
	rts

blue_it_up:
	lea	pal,a1
	lea	refpal,a0
	moveq	#16-1,d7	
.loop:	move.w	(a1)+,d0
	move.w	d0,d1
	andi.w	#$7,d0
	addq.w	#3,d0
	cmpi.w	#$7,d0
	blt.s	.ok
	moveq	#$7,d0
.ok:	andi.w	#$FF8,d1
	or.w	d0,d1
	move.w	d1,(a0)+
	dbf	d7,.loop
;	move.w	#BCK_COL,-32(a0)
	rts

; extremely slow, but time is no issue here...
; todo: maybe it is, cos init is done between screens..
; doesn't need to be more than 5 sec or something..
make_worddoubler_table:
	bsr.s	double_bytes
	lea	temp_buf+worddoubler_table,a0
	lea	temp_buf+bytedoubler_table,a1
	movea.l	a1,a3
	clr.b	d7

.outer:	movea.l	a1,a2
	move.w	(a3)+,d0
	swap	d0
	clr.b	d6

.inner:	move.w	(a2)+,d0
	move.l	d0,(a0)+
	addq.b	#1,d6
	bne.s	.inner

	addq.b	#1,d7
	bne.s	.outer
	rts

double_bytes:
	lea	temp_buf+bytedoubler_table,a0
	clr.w	d6
	moveq	#%11,d2

.loop:	move.w	d6,d0

	clr.l	d1
	REPT	8
	lsl.l	#2,d1
	add.b	d0,d0
	bcc.s	*+4
	or.l	d2,d1
	ENDR

	move.w	d1,(a0)+
	addq.b	#1,d6
	bne.s	.loop
	rts

; Scales an st low screen x2.
; Works in <2vbl on st..
; Can be optimised, but who needs it?
; a0: dst
; a1: src
scale:	lea	temp_buf+worddoubler_table,a6

;	lea	160*(50+14)+40(a1),a1		; yep, it's below the center!
	lea	160*(50+10)+40(a1),a1		; yep, it's below the center!

	clr.l	d0
	moveq	#80,d4
	move.w	#160,d5
	moveq	#100-1,d7

.yloop:	moveq	#10-1,d6

.xloop:	clr.l	d0				; 4
	move.w	(a1)+,d0			; 8
	add.l	d0,d0				; 6
	add.l	d0,d0				; 6
	lea	(a6,d0.l),a2			; 12
	clr.l	d0
	move.w	(a1)+,d0
	add.l	d0,d0
	add.l	d0,d0
	lea	(a6,d0.l),a3
	clr.l	d0
	move.w	(a1)+,d0
	add.l	d0,d0
	add.l	d0,d0
	lea	(a6,d0.l),a4
	clr.l	d0
	move.w	(a1)+,d0
	add.l	d0,d0
	add.l	d0,d0
	lea	(a6,d0.l),a5
	REPT	2
	move.w	(a2)+,d0			; 8
	move.w	d0,160(a0)			; 12
	move.w	d0,(a0)+			; 8
	move.w	(a3)+,d0
	move.w	d0,160(a0)
	move.w	d0,(a0)+
	move.w	(a4)+,d0
	move.w	d0,160(a0)
	move.w	d0,(a0)+
	move.w	(a5)+,d0
	move.w	d0,160(a0)
	move.w	d0,(a0)+
	ENDR
	dbf	d6,.xloop

	adda.l	d4,a1
	adda.w	d5,a0
	dbf	d7,.yloop

	st	first_scale_done
	rts

; Calculate some whitefaded versions of the palette..
; INPUT:
; a0: dst (faded) palettes (16*16 col)
; a1: src palette (16 col)
CALC_SCAPEPAL:
	move.l	a0,-(sp)

; 1: Extract (ste) palette to easy format.
	lea	.pal_tbl(pc),a0
	moveq	#16-1,d7

.preloop:
	move.w	(a1)+,d0
	move.w	d0,d1
	move.w	d0,d2
	move.w	d0,d3
	move.w	d0,d4
	move.w	d0,d5

	andi.w	#$0700,d0
	lsr.w	#7,d0
	rol.w	#5,d3
	andi.w	#$0001,d3
	or.w	d3,d0

	andi.w	#$0070,d1
	lsr.w	#3,d1
	rol.b	#1,d4
	andi.w	#$0001,d4
	or.w	d4,d1
	
	andi.w	#$0007,d2
	add.w	d2,d2
	rol.b	#5,d5
	andi.w	#$0001,d5
	or.w	d5,d2

	move.b	d0,(a0)+
	move.b	d1,(a0)+
	move.b	d2,(a0)+

	dbra	d7,.preloop

; 2: make faded versions..
	movea.l	(sp)+,a0
	moveq	#16-1,d5
	moveq	#16-1,d7

.lowloop:
	lea	.pal_tbl(pc),a1
	moveq	#16-1,d6

.lowentryloop:
	moveq	#0,d0
	moveq	#0,d1
	moveq	#0,d2

; do the actual fade..
	move.b	(a1)+,d0
	add.b	d7,d0
	cmp.b	d5,d0
	blt.s	.r_ok
	move.b	d5,d0
.r_ok:	move.b	(a1)+,d1
	add.b	d7,d1
	cmp.b	d5,d1
	blt.s	.g_ok
	move.b	d5,d1
.g_ok:	move.b	(a1)+,d2
	add.b	d7,d2
	cmp.b	d5,d2
	blt.s	.b_ok
	move.b	d5,d2
.b_ok:

; Put in rorred format, weird STe crap..
; rokgokbokrokgokbokrokgokbokrokgokbokrokgokbokrokgokbokrokgokbokrokgokbok
	lsr.w	d0
	bcc.s	.rok
	ori.w	#%1000,d0
.rok:	lsr.w	d1
	bcc.s	.gok
	ori.w	#%1000,d1
.gok:	lsr.w	d2
	bcc.s	.bok
	ori.w	#%1000,d2
.bok:	

; Pack rgb, and store..
	lsl.w	#8,d0
	lsl.w	#4,d1
	or.w	d0,d2
	or.w	d1,d2
	move.w	d2,(a0)+
	dbf	d6,.lowentryloop

	dbf	d7,.lowloop
	rts

.pal_tbl:
	DS.B	3*16

TRIGGER_SCAPEPALFADE:
	move.w	#+1,scapefadedir
	move.l	#scapefadepal,scapefadepaladr
	move.l	#SCAPE_VBL,pal_irq
	rts

SCAPE_VBL:
	IFNE	FADING
	movea.l	scapefadepaladr,a0
	movem.l	(a0)+,d0-d7
	cmpa.l	#scapefadepal+16*32,a0
	beq.s	.dont_store
	move.l	a0,scapefadepaladr
.dont_store:
	ELSE
	movem.l	scapepal,d0-d7
	ENDC
	movem.l	d0-d7,$FFFF8240.w
	clr.w	$FFFF8240.w

	IFNE	1
	move.w	horizon,horvbl
	move	#$2700,sr
	clr.b	$fffffa1b.w
	move.b	#1,$fffffa21.w
	move.l	#start_hbl,$0120.w
	bset	#0,$fffffa07.w			; tib on
	bset	#0,$fffffa13.w			; tib on
	move.b	#8,$fffffa1b.w
	move	#$2300,sr
	ELSE
	move.w	horizon,d0
	move.w	d0,horvbl
	cmpi.w	#199,d0
	bhs.s	.end				; No raster if horizon off screen!
	move	#$2700,sr
	clr.b	$fffffa1b.w
	move.b	d0,$fffffa21.w
	move.l	#REFHBL,$0120.w
	bset	#0,$fffffa07.w			; tib on
	bset	#0,$fffffa13.w			; tib on
	move.b	#8,$fffffa1b.w
	move	#$2300,sr
	ENDC
.end:	rts

start_hbl:
	move.w	scapepal,$FFFF8240.w
	move.w	d0,-(sp)
	move.w	horvbl,d0
	cmpi.w	#199,d0
	bhs.s	.install_end_hbl			; No raster if horizon off screen!
	subq.b	#1,d0					; Adapt for 1st hbl offset..
	move	#$2700,sr
	clr.b	$fffffa1b.w
	move.b	d0,$fffffa21.w
	move.l	#REFHBL,$0120.w
	move.b	#8,$fffffa1b.w
	move.w	(sp)+,d0
	rte
.install_end_hbl:
	move	#$2700,sr
	clr.b	$fffffa1b.w
	move.b	#198,$fffffa21.w
	move.l	#REFHBL_TRASHER,$0120.w
	move.b	#8,$fffffa1b.w
	move.w	(sp)+,d0
	rte

REFHBL:	movem.l	a0-a1,-(sp)
	lea	refpal,a1
	lea	$FFFF8240.w,a0
	REPT	8
	move.l	(a1)+,(a0)+
	ENDR
	movem.l	(sp)+,a0-a1

	move.w	d0,-(sp)
	move.w	#199,d0
	move	#$2700,sr
	sub.w	horvbl,d0
	bgt.s	.oki
; special case, only 1 line is water...
;	bclr	#0,$fffffa07.w			; tib off
;	bclr	#0,$fffffa13.w			; tib off
	move.w	(sp)+,d0
	bra.s	REFHBL_TRASHER
	rte
; all other cases...
.oki:	move.l	#REFHBL_TRASHER,$120.w
	clr.b	$fffffa1b.w
;	addq.b	#1,d0				; what the hell? is 200 reached at all?
	move.b	d0,$fffffa21.w
	move.b	#8,$fffffa1b.w
	move.w	(sp)+,d0
	rte

REFHBL_TRASHER:
	movem.l	d0/a0,-(sp)
	move.l	#BCK_COL<<16+BCK_COL,d0
	lea	$FFFF8240.w,a0
	REPT	8
	move.l	d0,(a0)+
	ENDR
	movem.l	(sp)+,d0/a0
	move	#$2700,sr
	bclr	#0,$fffffa07.w			; tib off
	bclr	#0,$fffffa13.w			; tib off
	rte

* Routine that draws 4-bitplane spritedata to screen. Any size upto 320*200
* is allowed. Clipping and offscreen detection are implemented.
* INPUT: d0.w: x-mid on screen
*        d1.w: y-mid on screen
*        a1: address of spritedata buffer
PLOT_CPUFRAME:
	moveq	#0,d6				* Clear clipflags.
	movea.l	scr,a0
	movem.w	(a1)+,d5/d7
	move.w	(a1)+,d2
	lea	(a1,d2.w),a2
	move.w	d5,d2
	movea.w	d5,a5
	suba.l	a3,a3				* Mask X-increment := 0
	suba.l	a4,a4				* Sprite X-increment := 0
	move.w	d2,d3
	lsl.w	#4-1,d3
	sub.w	d3,d0
	bpl.s	.x_pos
* Left corner of sprite is negative! Handle clipping stuff.
	move.w	d0,d3
	neg.w	d3
	lsr.w	#4,d3
	cmp.w	d2,d3
	bhs	.rts
* Sprite partially clipped at the left screenside.
	sub.w	d3,d5
	move.w	d0,d3
	andi.w	#$fff0,d0
	neg.w	d0
	lsr.w	#3,d0
	movea.w	d0,a3
	lsl.w	#2,d0
	movea.w	d0,a4
	move.w	d3,d0
	andi.w	#$000f,d0
	bset	#1,d6				* Set left clipflag.
	bra.s	.x_ok
.x_pos:	move.w	#scrxbytes>>3,d3
	sub.w	d2,d3
	lsl.w	#4,d3
	cmpi.w	#scrxbytes<<1,d0
	bhs	.rts
	cmp.w	d3,d0
	blt.s	.x_ok
* Sprite partially clipped at the right screenside.
	lsl.w	#4,d2
	add.w	d0,d2
	subi.w	#scrxbytes<<1,d2
	andi.w	#$fff0,d2
	lsr.w	#1,d2
	movea.w	d2,a4
	lsr.w	#2,d2
	movea.w	d2,a3
	lsr.w	#1,d2
	sub.w	d2,d5
	bset	#0,d6				* Set right clipflag.
.x_ok:
.do_y:	move.w	d7,d3
	lsr.w	#1,d3
	move.w	d1,d2
	sub.w	d3,d2
	move.w	d2,d1
	bpl.s	.y_pos
	neg.w	d2
	cmp.w	d7,d2
	bhs	.rts
* Sprite partially clipped at top of screen.
	sub.w	d2,d7

	move.w	d2,d1

	mulu.w	d5,d1	mulu.w	d5,d2
	adda.l	d1,a1	adda.l	d2,a1
	adda.l	d1,a1	adda.l	d2,a1
	lsl.l	#3,d1	lsl.l	#3,d2
	adda.l	d1,a2	adda.l	d2,a2
	moveq	#0,d1
	;bra.s	.y_ok
.y_pos:	cmpi.w	#scrlines,d2
	bhs	.rts
* Sprite partially clipped at bottom of screen.
	subi.w	#scrlines,d2
	neg.w	d2
	cmp.w	d7,d2
	bhs.s	.y_ok
	move.w	d2,d7
.y_ok:
* Initialize yloop..
.do_init:
	move.w	d0,d2
	andi.w	#$fff0,d0
	mulu.w	#scrxbytes,d1
	sub.w	d0,d2				* d2.w := shift-value
	lea	.mask_tbl(pc),a6
	move.w	d2,d3
	lsl.w	#2,d3
	move.l	(a6,d3.w),d3
	move.l	d3,d4
	not.l	d4
	lsr.w	#1,d0
	adda.l	d1,a0
	adda.w	d0,a0
	subq.w	#1,d7

* Check clipflags and plot left or right clipped sides...
.chk_lclip:
	btst	#1,d6
	beq.s	.no_lclip

	tst.w	d2
	beq.s	.end_lclip

	movem.l	a0-a4,-(sp)			* / Save resisters for
	movem.w	d5/d7,-(sp)			* \ rest of sprite.

	move.w	a5,d0
	sub.w	d5,d0
	move.w	d0,d1
	add.w	d0,d0
	adda.w	d0,a1
	lsl.w	#2,d0
	adda.w	d0,a2

	move.w	a5,d0
	subq.w	#1,d0
	add.w	d0,d0
	movea.w	d0,a3
	lsl.w	#2,d0
	movea.w	d0,a4
	lea	(a0),a6

.lyloop:
	moveq	#$ffffffff,d0
	move.w	(a1)+,d0
	ror.l	d2,d0
	swap	d0
	and.w	d0,(a0)+
	and.w	d0,(a0)+
	and.w	d0,(a0)+
	and.w	d0,(a0)+
	subq	#8,a0
	REPT	2
	move.l	(a2)+,d1
	ror.l	d2,d1
	and.l	d4,d1
	swap	d1
	or.l	d1,(a0)+
	ENDR
	adda.l	a3,a1
	adda.l	a4,a2
	lea	scrxbytes(a6),a6
	lea	(a6),a0
	dbra	d7,.lyloop

	movem.w	(sp)+,d5/d7			* / Restore registers for
	movem.l	(sp)+,a0-a4			* \ rest of routine.

	subq.w	#1,d5
.end_lclip:
	adda.l	a3,a1
	adda.l	a4,a2
	tst.w	d5
	bgt.s	.plot_middle
	rts
.no_lclip:

.chk_rclip:
	btst	#0,d6
	beq.s	.no_rclip

	tst.w	d2
	beq.s	.end_rclip

	movem.l	a0-a4,-(sp)			* / Save resisters for
	movem.w	d5/d7,-(sp)			* \ rest of sprite.

	move.w	a5,d0
	subq.w	#1,d0
	add.w	d0,d0
	movea.w	d0,a3
	lsl.w	#2,d0
	movea.w	d0,a4

	move.w	d5,d0
	subq.w	#1,d0
	add.w	d0,d0
	adda.w	d0,a1
	lsl.w	#2,d0
	adda.w	d0,a2
	adda.w	d0,a0
	lea	(a0),a6

.ryloop:
	moveq	#$ffffffff,d0
	move.w	(a1)+,d0
	ror.l	d2,d0
	and.w	d0,(a0)+
	and.w	d0,(a0)+
	and.w	d0,(a0)+
	and.w	d0,(a0)+
	subq	#8,a0
	REPT	2
	move.l	(a2)+,d0
	ror.l	d2,d0
	and.l	d3,d0
	or.l	d0,(a0)+
	ENDR
	adda.l	a3,a1
	adda.l	a4,a2
	lea	scrxbytes(a6),a6
	lea	(a6),a0
	dbra	d7,.ryloop

	movem.w	(sp)+,d5/d7			* / Restore registers for
	movem.l	(sp)+,a0-a4			* \ rest of routine.

	subq.w	#1,d5
	addq	#2,a3
	addq	#8,a4
.end_rclip:
	tst.w	d5
	bgt.s	.plot_middle
	rts
.no_rclip:

* Plot middle (=nonclipped) part of sprite.
.plot_middle:
	subq.w	#1,d5
	lea	(a0),a6
.yloop:	move.w	d5,d6
.xloop:	moveq	#$ffffffff,d0
	move.w	(a1)+,d0
	ror.l	d2,d0
	and.w	d0,(a0)+
	and.w	d0,(a0)+
	and.w	d0,(a0)+
	and.w	d0,(a0)+
	swap	d0
	and.w	d0,(a0)+
	and.w	d0,(a0)+
	and.w	d0,(a0)+
	and.w	d0,(a0)+
	lea	-16(a0),a0
	REPT	2
	move.l	(a2)+,d0
	ror.l	d2,d0
	move.l	d0,d1
	and.l	d3,d0
	and.l	d4,d1
	swap	d1
	or.l	d0,(a0)+
	or.l	d1,4(a0)
	ENDR
.endplane:
	dbra	d6,.xloop
	adda.l	a3,a1
	adda.l	a4,a2
	lea	scrxbytes(a6),a6
	lea	(a6),a0
	dbra	d7,.yloop

.rts:	rts

.mask_tbl:
	DC.L	$ffffffff,$7fff7fff,$3fff3fff,$1fff1fff
	DC.L	$0fff0fff,$07ff07ff,$03ff03ff,$01ff01ff
	DC.L	$00ff00ff,$007f007f,$003f003f,$001f001f
	DC.L	$000f000f,$00070007,$00030003,$00010001

; Routine that draws 4-bitplane spritedata to screen. Any size upto 320*200
; is allowed. Clipping and offscreen detection are implemented.
; Note: no shifting, just a fast thing!
; INPUT:
; d0.w: x-mid on screen
; d1.w: y-mid on screen
; a1: address of spritedata buffer
COPY_CPUFRAME:
	moveq	#0,d6				* Clear clipflags.
	movea.l	scr,a0
	movem.w	(a1)+,d5/d7
	move.w	(a1)+,d2
	lea	(a1,d2.w),a2
	move.w	d5,d2
	movea.w	d5,a5
	suba.l	a3,a3				* Mask X-increment := 0
	suba.l	a4,a4				* Sprite X-increment := 0
	move.w	d2,d3
	lsl.w	#4-1,d3
	sub.w	d3,d0
	bpl.s	.x_pos
* Left corner of sprite is negative! Handle clipping stuff.
	move.w	d0,d3
	neg.w	d3
	lsr.w	#4,d3
	cmp.w	d2,d3
	bhs	.rts
* Sprite partially clipped at the left screenside.
	sub.w	d3,d5
	move.w	d0,d3
	andi.w	#$fff0,d0
	neg.w	d0
	lsr.w	#3,d0
	movea.w	d0,a3
	lsl.w	#2,d0
	movea.w	d0,a4
	move.w	d3,d0
	andi.w	#$000f,d0
	bset	#1,d6				* Set left clipflag.
	bra.s	.x_ok
.x_pos:	move.w	#scrxbytes>>3,d3
	sub.w	d2,d3
	lsl.w	#4,d3
	cmpi.w	#scrxbytes<<1,d0
	bhs	.rts
	cmp.w	d3,d0
	blt.s	.x_ok
* Sprite partially clipped at the right screenside.
	lsl.w	#4,d2
	add.w	d0,d2
	subi.w	#scrxbytes<<1,d2
	andi.w	#$fff0,d2
	lsr.w	#1,d2
	movea.w	d2,a4
	lsr.w	#2,d2
	movea.w	d2,a3
	lsr.w	#1,d2
	sub.w	d2,d5
	bset	#0,d6				* Set right clipflag.
.x_ok:
.do_y:	move.w	d7,d3
	lsr.w	#1,d3
	move.w	d1,d2
	sub.w	d3,d2
	move.w	d2,d1
	bpl.s	.y_pos
	neg.w	d2
	cmp.w	d7,d2
	bhs	.rts
* Sprite partially clipped at top of screen.
	sub.w	d2,d7

	move.w	d2,d1

	mulu.w	d5,d1	mulu.w	d5,d2
	adda.l	d1,a1	adda.l	d2,a1
	adda.l	d1,a1	adda.l	d2,a1
	lsl.l	#3,d1	lsl.l	#3,d2
	adda.l	d1,a2	adda.l	d2,a2
	moveq	#0,d1
	;bra.s	.y_ok
.y_pos:	cmpi.w	#scrlines,d2
	bhs	.rts
* Sprite partially clipped at bottom of screen.
	subi.w	#scrlines,d2
	neg.w	d2
	cmp.w	d7,d2
	bhs.s	.y_ok
	move.w	d2,d7
.y_ok:
* Initialize yloop..
.do_init:
	move.w	d0,d2
	andi.w	#$fff0,d0
	mulu.w	#scrxbytes,d1
	sub.w	d0,d2				* d2.w := shift-value
	lea	.mask_tbl(pc),a6
	move.w	d2,d3
	lsl.w	#2,d3
	move.l	(a6,d3.w),d3
	move.l	d3,d4
	not.l	d4
	lsr.w	#1,d0
	adda.l	d1,a0
	adda.w	d0,a0
	subq.w	#1,d7

* Check clipflags and plot left or right clipped sides...
.chk_lclip:
	btst	#1,d6
	beq.s	.no_lclip

	tst.w	d2
	beq.s	.end_lclip

	movem.l	a0-a4,-(sp)			* / Save resisters for
	movem.w	d5/d7,-(sp)			* \ rest of sprite.

	move.w	a5,d0
	sub.w	d5,d0
	move.w	d0,d1
	add.w	d0,d0
	adda.w	d0,a1
	lsl.w	#2,d0
	adda.w	d0,a2

	move.w	a5,d0
	subq.w	#1,d0
	add.w	d0,d0
	movea.w	d0,a3
	lsl.w	#2,d0
	movea.w	d0,a4
	lea	(a0),a6

.lyloop:move.w	(a1)+,d0
	and.w	d0,(a0)+
	and.w	d0,(a0)+
	and.w	d0,(a0)+
	and.w	d0,(a0)+
	subq	#8,a0
	move.l	(a2)+,d0
	or.l	d0,(a0)+
	move.l	(a2)+,d0
	or.l	d0,(a0)+
	adda.l	a3,a1
	adda.l	a4,a2
	lea	scrxbytes(a6),a6
	lea	(a6),a0
	dbra	d7,.lyloop

	movem.w	(sp)+,d5/d7			* / Restore registers for
	movem.l	(sp)+,a0-a4			* \ rest of routine.

	subq.w	#1,d5
.end_lclip:
	adda.l	a3,a1
	adda.l	a4,a2
	tst.w	d5
	bgt.s	.plot_middle
	rts
.no_lclip:

.chk_rclip:
	btst	#0,d6
	beq.s	.no_rclip

	tst.w	d2
	beq.s	.end_rclip

	movem.l	a0-a4,-(sp)			* / Save resisters for
	movem.w	d5/d7,-(sp)			* \ rest of sprite.

	move.w	a5,d0
	subq.w	#1,d0
	add.w	d0,d0
	movea.w	d0,a3
	lsl.w	#2,d0
	movea.w	d0,a4

	move.w	d5,d0
	subq.w	#1,d0
	add.w	d0,d0
	adda.w	d0,a1
	lsl.w	#2,d0
	adda.w	d0,a2
	adda.w	d0,a0
	lea	(a0),a6

.ryloop:move.w	(a1)+,d0
	and.w	d0,(a0)+
	and.w	d0,(a0)+
	and.w	d0,(a0)+
	and.w	d0,(a0)+
	subq	#8,a0
	move.l	(a2)+,d0
	or.l	d0,(a0)+
	move.l	(a2)+,d0
	or.l	d0,(a0)+
	adda.l	a3,a1
	adda.l	a4,a2
	lea	scrxbytes(a6),a6
	lea	(a6),a0
	dbra	d7,.ryloop

	movem.w	(sp)+,d5/d7			* / Restore registers for
	movem.l	(sp)+,a0-a4			* \ rest of routine.

	subq.w	#1,d5
	addq	#2,a3
	addq	#8,a4
.end_rclip:
	tst.w	d5
	bgt.s	.plot_middle
	rts
.no_rclip:

* Plot middle (=nonclipped) part of sprite.
.plot_middle:
	subq.w	#1,d5
	lea	(a0),a6
.yloop:	move.w	d5,d6
.xloop:	move.l	(a2)+,(a0)+
	move.l	(a2)+,(a0)+
.endplane:
	dbra	d6,.xloop
	adda.l	a3,a1
	adda.l	a4,a2
	lea	scrxbytes(a6),a6
	lea	(a6),a0
	dbra	d7,.yloop

.rts:	rts

.mask_tbl:
	DC.L	$ffffffff,$7fff7fff,$3fff3fff,$1fff1fff
	DC.L	$0fff0fff,$07ff07ff,$03ff03ff,$01ff01ff
	DC.L	$00ff00ff,$007f007f,$003f003f,$001f001f
	DC.L	$000f000f,$00070007,$00030003,$00010001

; copies 320pix 4bpl piccy to screen, with y_clip...
; input:
; d0.w=y offset on screen
; d1.w=height
; a0: screen
; a1: piccy
copy_pic:
	move.w	horizon,.hor
	tst.w	d0
	bpl.s	.okay
; clipped at screen top.
	add.w	d0,d1

	ext.l	d0
	lsl.l	#5,d0				; d0.l=yoff*32
	move.l	d0,d2				; d2.l=yoff*32
	lsl.l	#2,d0				; d0.l=yoff*128
	add.l	d2,d0				; d0.l=yoff*(32+128)=yoff*160
	neg.l	d0				; d0.l=-160*yoff
;	muls.w	#-160,d0

	add.l	d0,a1
	move.w	.hor(pc),d1
	bra.s	.do_it

; clipped at screen bottom (possibly).
.okay:	sub.w	d0,d1
;	ble.s	.end

	cmpi.w	#200,d0
	blt.s	.blue_clipped
	move.w	#200,d0
.blue_clipped:
	subq.w	#1,d0
	bmi.s	.do_it
	clr.l	d2
	clr.l	d3
	move.l	d2,d4
	move.l	d3,d5
	move.l	d2,d6
	move.l	d3,d7
	movea.l	d2,a2
	movea.l	d3,a3
	movea.l	d2,a4
	movea.l	d3,a5
.cloop:	movem.l	d2-d7/a2-a3,(a0)
	movem.l	d2-d7/a2-a3,32(a0)
	movem.l	d2-d7/a2-a3,64(a0)
	movem.l	d2-d7/a2-a3,96(a0)
	movem.l	d2-d7/a2-a3,128(a0)
	lea	160(a0),a0
	dbf	d0,.cloop

.do_it:	subq.w	#1,d1
	bmi.s	.end
.yloop:
	IFNE	1
	REPT	40
	move.l	(a1)+,(a0)+
	ENDR
	ELSE
	movem.l	(a1)+,d0/d2-d7/a2-a4			; (7+3)*4=40
	movem.l	d0/d2-d7/a2-a4,(a0)
	movem.l	(a1)+,d0/d2-d7/a2-a4			; (7+3)*4=40
	movem.l	d0/d2-d7/a2-a4,40(a0)
	movem.l	(a1)+,d0/d2-d7/a2-a4			; (7+3)*4=40
	movem.l	d0/d2-d7/a2-a4,80(a0)
	movem.l	(a1)+,d0/d2-d7/a2-a4			; (7+3)*4=40
	movem.l	d0/d2-d7/a2-a4,120(a0)
	lea	160(a0),a0
	ENDC
	dbf	d1,.yloop
.end:	rts

.hor:	dc.w	0

; Precalc those nice waveforms for the waterreflection..
; Generates a period of 32.
calc_waves:
	lea	wavetable,a0
	move.w	#80+32-1,d7

.loop:
; get src offset..
	move.w	d7,d0
	subi.w	#32,d0
	lsl.w	#6,d0
	Do_SinModulo	d0
	lea	sine_tbl+2,a1
	Get_Sin	a1,d0,d0
	asr.w	#8,d0
	asr.w	#5,d0
	addq.w	#4,d0
	mulu.w	#160,d0
	neg.l	d0
	move.l	d0,(a0)+
	dbf	d7,.loop
	rts

; Water reflection rout.
; Source is squeezed by factor of 2.
reflect:
; setup destination..
	movea.l	scr,a0
	move.w	horizon,d0
	move.w	d0,d1
	mulu.w	#160,d0
	adda.l	d0,a0
; setup source..
	lea	-160(a0),a2
; setup wave position..
	move.w	$0468.w,d0
	andi.w	#$1F,d0
	lsl.w	#2,d0
	lea	wavetable,a3
	adda.w	d0,a3
; setup height of reflected area..
	move.w	#200-2,d7
	sub.w	horizon,d7
	cmpi.w	#200,d7
	bhs.s	.end

.loop:
; get src offset..
	move.l	(a3)+,d0
	lea	(a2,d0.l),a1

; copy line..
	movem.l	(a1)+,d0-d6/a4-a6
	movem.l	d0-d6/a4-a6,(a0)
	movem.l	(a1)+,d0-d6/a4-a6
	movem.l	d0-d6/a4-a6,40(a0)
	movem.l	(a1)+,d0-d6/a4-a6
	movem.l	d0-d6/a4-a6,80(a0)
	movem.l	(a1)+,d0-d6/a4-a6
	movem.l	d0-d6/a4-a6,120(a0)

	lea	160(a0),a0			; next dst line..
	lea	-320(a2),a2			; next src line..
	dbf	d7,.loop
.end:	rts

;---------------------------------------------------------------------------
; sprite appear routines
;---------------------------------------------------------------------------

APPEAR:=0

	IFNE	APPEAR

WIDTH:=	16
HEIGHT:=24
NUMPIX:=WIDTH*HEIGHT

precalc_pixblocks:
	lea	pixblock1,a0
	moveq	#8-1,d7
.loop:	move.w	d7,-(sp)
	bsr	precalc_pixblock
	move.w	(sp)+,d7
	dbf	d7,.loop
	rts

; precalc some random ordered list of pixels for a pixblock..
; INPUT:
; a0: pixblock
; OUTPUT:
; a0: end of pixblock
precalc_pixblock:
	movea.l	a0,a1

; 1: make the list
	moveq	#HEIGHT-1,d7

.yloop:	moveq	#WIDTH-1,d6

.xloop:	move.b	d6,(a0)+
	move.b	d7,(a0)+
	dbf	d6,.xloop

	dbf	d7,.yloop

; 2: shuffle the list
	movea.l	a1,a0
	move.l	rnd,d0
	move.w	#NUMPIX-1,d7

.sloop:
; calc next two random words..
	move.l	d0,d1
	mulu.w	d0,d0
	eor.l	d1,d0
	addq.l	#7,d0

; mod numpix both words..
	move.w	d0,d2
	andi.l	#$FFFF,d2
	move.l	d0,d3
	clr.w	d3
	swap	d3
	divu.w	#NUMPIX,d2
	divu.w	#NUMPIX-1,d3
	swap	d2
	swap	d3

; swap pixels at random positions in block..
	add.w	d2,d2
	add.w	d3,d3
	move.w	(a1,d2.w),d4
	move.w	(a1,d3.w),(a1,d2.w)
	move.w	d4,(a1,d3.w)
	dbf	d7,.sloop

	move.l	d0,rnd
	rts

	ENDC

; input:
; d0.w=greet num
paint_greet:
	lea	greet_table+2,a2
	lea	greetpos_table,a3
	add.w	d0,d0				; d0.w=2i
	move.w	2(a2,d0.w),d7
	move.w	d0,d1
	move.w	(a2,d0.w),d0
	sub.w	d0,d7

	add.w	d1,d1				; d1.w=4i
	movea.l	scr,a0
	adda.l	(a3,d1.w),a0

	lea	greets_dat+$E0,a1
	lea	greets_mask,a2

	ext.l	d0
	add.l	d0,d0				; d0.w=2y
	move.l	d0,d1				; d1.w=2y
	lsl.w	#3,d1				; d1.w=16y
	add.l	d1,d0				; d1.w=16y+2y=18y
	adda.l	d0,a2

	lsl.w	#2,d0				; d2.w=72y
	adda.l	d0,a1

	subq.w	#1,d7
.loop:
	REPT	9
	move.w	(a2),d0
	swap	d0
	move.w	(a2)+,d0
	and.l	d0,(a0)
	move.l	(a1)+,d1
	or.l	d1,(a0)+
	and.l	d0,(a0)
	move.l	(a1)+,d1
	or.l	d1,(a0)+
	ENDR
	lea	(320-144)/2(a0),a0
	dbf	d7,.loop
	rts

calc_mask:
	lea	greets_dat+$E0,a1
	lea	greets_mask,a0
	move.w	#(end_greets_dat-(greets_dat+$E0))/8-1,d7
.loop:	move.w	(a1)+,d0
; triple nand
	REPT	3
	move.w	(a1)+,d1
	not.w	d1
	and.w	d1,d0
	ENDR
	move.w	d0,(a0)+
	not.w	d0
	REPT	4
	and.w	d0,-(a1)
	ENDR
	addq	#8,a1
	dbf	d7,.loop
	rts

******** OBJECT DATA ********

	DATA

back_dat:
	INCBIN	TOWER_3.PI1

greets_dat:
	INCBIN	PART.PNT
end_greets_dat:

greet_table:
	DC.W	(.end-.start)/2-1
.start:	DC.W	0		; 0 alive
	DC.W	22		; 1 checkpoint
	DC.W	50		; 2 cream
	DC.W	70		; 3 dhs
	DC.W	91		; 4 dune
	DC.W	118		; 5 ephidrena
	DC.W	146		; 6 escape
	DC.W	172		; 7 evolution
	DC.W	194		; 8 kalms
	DC.W	222		; 9 mikro
	DC.W	248		; A mjj prod.
	DC.W	274		; B mystic bytes
	DC.W	301		; C nature
	DC.W	323		; D new beat
	DC.W	346		; E paranoia
	DC.W	369		; F phf
	DC.W	389		;10 res gods
	DC.W	436		;11 sector one
	DC.W	459		;12 toys
	DC.W	484		;13 tscc
	DC.W	507		;14 yescrew
	DC.W	529		;15 ym rockerz
	DC.W	550
.end:

greetpos_table:
	DC.L	160*50+24	; 0 alive
	DC.L	160*60+88	; 1 checkpoint
	DC.L	160*40+16	; 2 cream
	DC.L	160*80+32	; 3 dhs
	DC.L	160*30+104	; 4 dune
	DC.L	160*90+96	; 5 ephidrena
	DC.L	160*90+8	; 6 escape
	DC.L	160*70+0	; 7 evolution
	DC.L	160*60+104	; 8 kalms
	DC.L	160*80+16	; 9 mikro
	DC.L	160*20+8	; A mjj prod. -> 1?
	DC.L	160*0+0		; B mystic bytes
	DC.L	160*90+16	; C nature
	DC.L	160*80+96	; D new beat
	DC.L	160*70+8	; E paranoia
	DC.L	160*40+104	; F phf
	DC.L	160*30+8	;10 res gods
	DC.L	160*60+96	;11 sector one
	DC.L	160*90+16	;12 toys -> 2?
	DC.L	160*50+8	;13 tscc
	DC.L	160*40+112	;14 yescrew
	DC.L	160*0+0		;15 ym rockerz

******** OBJECT RESERVES ********

	BSS

scapestart466:
	DS.L	1

scape_ends:
	DS.W	1

; scaling bs, not used
towerscaleadr_tbl:
	DS.L	16

; fading crap..
scapepal:
	DS.W	16
scapefadepal:
	DS.W	16*16
scapefadedir:
	DS.W	1
scapefadepaladr:
	DS.L	1

; greets shit
greet_num:
	DS.W	1
greetpos:
	DS.L	1
old_greetpos:
	DS.L	1
greetsrc:
	DS.L	1
old_greetsrc:
	DS.L	1
greets_active:
	DS.W	1
greet_starttime:
	DS.L	1
faded_out:
	DS.W	1
faded_in:
	DS.W	1

; reflector shit
pal:	DS.W	16
refpal:	DS.W	16
reffadepal:
	DS.W	16*16
reffadepaladr:
	DS.L	1
wavetable:
	DS.L	200+32
horizon:DS.W	1
horvbl:	DS.W	1
first_scale_done:
	DS.W	1

rnd:	ds.l	1

	IFNE	APPEAR

pixblock1:
	ds.w	NUMPIX
pixblock2:
	ds.w	NUMPIX
pixblock3:
	ds.w	NUMPIX
pixblock4:
	ds.w	NUMPIX
pixblock5:
	ds.w	NUMPIX
pixblock6:
	ds.w	NUMPIX
pixblock7:
	ds.w	NUMPIX
pixblock8:
	ds.w	NUMPIX

	ENDC

greets_mask:
	DS.B	40*550

******** END OF DEMO-EFFECT OBJECT ********
