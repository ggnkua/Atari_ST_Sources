* Whatever I've done? Staring at the barrel of a gun...
*
*                    | Stone Tower |
*
* All code by EarX/fun especially for Poets of Decay...
*
*
*
* For 1MB ST with colordisplay
*

******** OBJECT EQUS ********

maxtunchunkwidth:	EQU	20
maxtunheigth:		EQU	100		;double lined!
tunnel_width:		EQU	160

******** OBJECT TABLE ********

* Must be first in object!!
tower_tbl:
	DC.L	TOWERMAINLOOP
	DC.L	INIT_TOWER
	DC.L	SET_TOWERRES
	DC.L	TRIGGER_NULLCREDITS
	DC.L	TRIGGER_CREDITS1
	DC.L	TRIGGER_CREDITS2
	DC.L	TRIGGER_CREDITS3
	DC.L	TRIGGER_CREDITS4
	DC.L	TRIGGER_CREDITS5
	DC.L	TRIGGER_FADEIN
	DC.L	TRIGGER_FADEOUT
	DC.L	TRIGGER_TOWERMOVE2
	DC.L	TRIGGER_HBLFADEOUT
	DC.L	TRIGGER_HBLFADEIN
	DC.L	TRIGGER_TOWERPAL
	DC.L	0

******** RESOLUTION SETTING ROUTINE ********

SET_TOWERRES:
	move.w	$4bc.w,towerstarttime

	IFEQ	testmode
	move.l	$0466.w,d0
.ck466:	cmp.l	$0466.w,d0
	beq.s	.ck466

	movem.l	walltext_pal,d0-d7
	movem.l	d0-d7,$ffff8240.w

	cmpi.w	#falcon,computer
	beq.s	.falc
	clr.b	$ffff8260.w
	rts

.falc:	move.w	monitormode,d0
	cmpi.w	#vga60,d0
	beq.s	.vga60
	cmpi.w	#vga100,d0
	beq.s	.vga100
	cmpi.w	#rgb50,d0
	beq.s	.rgb50
* Unknown monitormode..
	rts
.vga60:
	lea	stlowvga_fv,a0
	bsr	CHANGE_FVFAST
	rts
.vga100:
	lea	stlowvga_fv,a0
	bsr	CHANGE_FVFAST
	rts
.rgb50:	lea	stlowrgb_fv,a0
	bsr	CHANGE_FVFAST
	ENDC
	rts

******** INIT SUBROUTINE ********

INIT_TOWER:
	bsr	CALC_TOWERPAL
	bsr	MAKE_TUNNEL4
	lea	tunnel_gfx_1,a0
	bsr	MAKE_TUN4GFX
	rts

******** MAINLOOP SUBROUTINE ********

TOWERMAINLOOP:
	IFEQ	objectmode
	IFEQ	testmode
	addq.l	#1,frmcnt
	move.w	$468.w,.old468
	ENDC
	ENDC

	move.l	towmoveroutadr,a0
	jsr	(a0)

	movea.l	scr,a1
	jsr	tunnelinst_buf

	move.l	creditsroutadr,d0
	beq.s	.end_credits
	movea.l	d0,a0
	jsr	(a0)
.end_credits:

;	movea.l	scr,a0
;	lea	tunnel_gfx_1,a1
;	moveq	#64-1,d7
;
;.yloop:	movem.l	(a1)+,d0-d6/a2
;	movem.l	d0-d6/a2,(a0)
;	lea	160(a0),a0
;	dbra	d7,.yloop

	IFEQ	testmode
	lea	scr,a0
	move.l	(a0)+,d0
	move.l	(a0)+,d1
	move.l	(a0),-4(a0)
	move.l	d0,(a0)
	move.l	d1,-8(a0)
	move.l	d0,d1
	lsr.w	#8,d0
	move.l	d0,$ffff8200.w
;	move.w	.old468(pc),d0
;.cmp468:
;	move.w	$468.w,d1
;	sub.w	d0,d1
;	cmpi.w	#3,d1
;	blt.s	.cmp468
	ENDC
	rts

.old468:
	DS.W	1

******** OBJECT DATA ********

	DATA

tunnel_tbl:
	INCBIN	TOWER.DAT	;TUNNEL.DAT
walltext_pal:
	INCBIN	WALLTEXT.PAL
tunnel_gfx_1:
	INCBIN	WALLTEXT.RAW
credits_dat:
	INCBIN	CREDITS.RAW

tunchunkwidth:
	DC.W	20
tunheigth:
	DC.W	100
fadecount:
	DC.W	0
creditsroutadr:
	DC.L	0
towmoveroutadr:
	DC.L	CALC_TOWERPOS1

;------------------------------------------------------
tunloopstart:
tunnel_off1:	=	*+2
		move.l	2(a0),d0	;16 Get 1st dpix
tunnel_off2:	=	*+2
		or.l	2(a0),d0	;20 Get 2nd dpix
tunnel_off3:	=	*+2
		or.l	2(a0),d0	;20 Get 3rd dpix
tunnel_off4:	=	*+2
		or.l	2(a0),d0	;20 Get 4th dpix
tunnel_off5:	=	*+2
		movep.l	d0,2(a1)	;16
tunnel_off6:	=	*+2
		movep.l	d0,2+160(a1)	;16	total 60+48=108 for 4 pixels
tunloopend:

tunloopsize:	=	tunloopend-tunloopstart
;------------------------------------------------------

******** OBJECT RESERVES ********

	BSS

tunnel_offset:
	DS.W	1
tunnel_sine:
	DS.W	1
towerstarttime:
	DS.W	1
fadeoutstarttime:
	DS.W	1
tunnel_music_end:
	DS.L	1
tunoffset:
	DS.L	1
tungfx_buf:
	DS.L	64*64*4
tunnelinst_buf:
	DS.W	maxtunchunkwidth*maxtunheigth*tunloopsize+10
towerpal_tbl:
	DS.W	16*8				* 16 fadesteps
towerlowpal_tbl:
	DS.W	16*8				* 16 faders
	DS.W	16*8				* 16 blacksouls
towerhighpal_tbl:
	DS.W	16*8				* 16 whitesouls
	DS.W	16*8				* 16 faders
	DS.W	16*8				* 16 originals
rastercoladr:
	DS.L	1

******** OBJECT SUBROUTINES ********

	TEXT

TRIGGER_NULLCREDITS:
	clr.l	creditsroutadr
	rts

TRIGGER_CREDITS1:
	move.l	#PLOT_CREDITS1,creditsroutadr
	rts

TRIGGER_CREDITS2:
	move.l	#PLOT_CREDITS2,creditsroutadr
	rts

TRIGGER_CREDITS3:
	move.l	#PLOT_CREDITS3,creditsroutadr
	rts

TRIGGER_CREDITS4:
	move.l	#PLOT_CREDITS4,creditsroutadr
	rts

TRIGGER_CREDITS5:
	move.l	#PLOT_CREDITS5,creditsroutadr
	rts

TRIGGER_FADEIN:
	move.l	#FADEIN_TOWERPAL,pal_irq
	rts

TRIGGER_FADEOUT:
	move.l	#FADEOUT_TOWERPAL,pal_irq
	rts

TRIGGER_TOWERMOVE2:
	move.l	#CALC_TOWERPOS2,towmoveroutadr
	move.w	$4bc.w,towerstarttime
	rts

TRIGGER_HBLFADEOUT:
	move.l	#INSTALL_TOWEROUTHBL,pal_irq
	move.w	$4bc.w,fadeoutstarttime
	rts

TRIGGER_HBLFADEIN:
	move.l	#INSTALL_TOWERINHBL,pal_irq
	rts

TRIGGER_TOWERPAL:
	move.l	#SET_TOWERPAL,pal_irq
	move	#$2700,sr
	bclr	#0,$fffffa07.w
	bclr	#0,$fffffa13.w
	move	#$2300,sr
	rts

FADEIN_TOWERPAL:
	move	#$2700,sr
	bclr	#0,$fffffa07.w
	bclr	#0,$fffffa13.w
	move	#$2300,sr
	move.w	fadecount,d0
	cmpi.w	#16-1,d0
	bhs.s	.rts
	addq.w	#1,d0
	move.w	d0,fadecount
	lea	towerpal_tbl,a0
	lsl.w	#4,d0
	movem.l	(a0,d0.w),d0-d3
	movem.l	d0-d3,$ffff8250.w
.rts:	rts

FADEOUT_TOWERPAL:
	move	#$2700,sr
	bclr	#0,$fffffa07.w
	bclr	#0,$fffffa13.w
	move	#$2300,sr
	move.w	fadecount,d0
	beq.s	.rts
	subq.w	#1,d0
	move.w	d0,fadecount
	lea	towerpal_tbl,a0
	lsl.w	#4,d0
	movem.l	(a0,d0.w),d0-d3
	movem.l	d0-d3,$ffff8250.w
.rts:	rts

CALC_TOWERPAL:
	lea	walltext_pal,a1
	lea	.pal_tbl(pc),a0
	moveq	#8-1,d7

.preloop:
	move.w	(a1)+,d0
	move.w	d0,d1
	move.w	d0,d2
	move.w	d0,d3
	move.w	d0,d4
	move.w	d0,d5

	andi.w	#$0700,d0
	lsr.w	#7,d0
	rol.w	#5,d3
	andi.w	#$0001,d3
	or.w	d3,d0

	andi.w	#$0070,d1
	lsr.w	#3,d1
	rol.b	#1,d4
	andi.w	#$0001,d4
	or.w	d4,d1
	
	andi.w	#$0007,d2
	add.w	d2,d2
	rol.b	#5,d5
	andi.w	#$0001,d5
	or.w	d5,d2

	move.b	d0,(a0)+
	move.b	d1,(a0)+
	move.b	d2,(a0)+

	dbra	d7,.preloop

	lea	towerpal_tbl,a0
	moveq	#16-1,d7

.loop:	move.w	d7,d5
	subi.w	#16,d5
	neg.w	d5
	lsl.w	#4,d5
	subq.w	#1,d5

	lea	.pal_tbl(pc),a1
	moveq	#8-1,d6

.entryloop:
	moveq	#0,d0
	moveq	#0,d1
	moveq	#0,d2

	move.b	(a1)+,d0
	mulu.w	d7,d0
	move.b	(a1)+,d1
	mulu.w	d7,d1
	move.b	(a1)+,d2
	mulu.w	d7,d2

	add.w	d5,d0
	add.w	d5,d1
	add.w	d5,d2

	ror.w	#5,d0
	ror.b	#5,d1
	ror.b	#5,d2

	move.w	d0,d3
	andi.w	#$8000,d3
	lsr.w	#4,d3
	move.w	d3,d4
	move.b	d1,d3
	andi.b	#$80,d3
	or.b	d3,d4
	move.b	d2,d3
	andi.b	#$80,d3
	lsr.b	#4,d3
	or.b	d3,d4

	andi.w	#$0007,d0
	andi.w	#$0007,d1
	andi.w	#$0007,d2
	lsl.w	#8,d0
	lsl.w	#4,d1
	or.w	d0,d4
	or.w	d1,d4
	or.w	d2,d4
	move.w	d4,(a0)+
	dbra	d6,.entryloop

	dbra	d7,.loop

	lea	towerhighpal_tbl,a0
	moveq	#$ffffffff,d0
	moveq	#16-1,d7
.whiteloop:					* Whitesouls (CLOCK-DVA)
	REPT	4
	move.l	d0,(a0)+
	ENDR
	dbra	d7,.whiteloop

	lea	towerpal_tbl+15*16,a1
	moveq	#16-1,d7
.copyloop2:
	movem.l	(a1),d0-d3
	movem.l	d0-d3,(a0)
	lea	-16(a1),a1
	lea	16(a0),a0
	dbra	d7,.copyloop2

	movem.l	walltext_pal,d0-d3
	moveq	#16-1,d7
.copyloop:
	movem.l	d0-d3,(a0)
	lea	16(a0),a0
	dbra	d7,.copyloop

	lea	towerlowpal_tbl,a0
	moveq	#16-1,d7
.lowloop:
	lea	.pal_tbl(pc),a1
	moveq	#8-1,d6

.lowentryloop:
	moveq	#0,d0
	moveq	#0,d1
	moveq	#0,d2

	addq.w	#1,d7
	move.b	(a1)+,d0
	mulu.w	d7,d0
	move.b	(a1)+,d1
	mulu.w	d7,d1
	move.b	(a1)+,d2
	mulu.w	d7,d2
	subq.w	#1,d7

	ror.w	#5,d0
	ror.b	#5,d1
	ror.b	#5,d2

	move.w	d0,d3
	andi.w	#$8000,d3
	lsr.w	#4,d3
	move.w	d3,d4
	move.b	d1,d3
	andi.b	#$80,d3
	or.b	d3,d4
	move.b	d2,d3
	andi.b	#$80,d3
	lsr.b	#4,d3
	or.b	d3,d4

	andi.w	#$0007,d0
	andi.w	#$0007,d1
	andi.w	#$0007,d2
	lsl.w	#8,d0
	lsl.w	#4,d1
	or.w	d0,d4
	or.w	d1,d4
	or.w	d2,d4
	move.w	d4,(a0)+
	dbra	d6,.lowentryloop

	dbra	d7,.lowloop

	rts

.pal_tbl:
	DCB.B	3*8,0

MAKE_TUNNEL4:
	lea	tunnelinst_buf,a0
	lea	tunnel_tbl,a1
	add.l	tunoffset,a1

	moveq	#0,d7				;x offset
	move.w	tunheigth,d0
	subq.w	#1,d0
.loop1:	
	move.w	tunchunkwidth,d1
	add.w	d1,d1
	subq.w	#1,d1

	moveq	#1,d5				;what to add to d7!

.loop2:	lea	tunloopstart,a2
	move.l	a0,a3				;save position

	moveq	#tunloopsize/2-1,d2
.loop3:	move.w	(a2)+,(a0)+			;Copy instructions
	dbf	d2,.loop3			; to buffer

	move.w	(a1)+,d2			;fetch orig offset
	add.w	d2,d2
	subi.w	#64*64*8,d2
	move.w	d2,tunnel_off3-tunloopstart(a3)
	move.w	(a1)+,d2			;fetch orig offset
	add.w	d2,d2
	subi.w	#64*64*4,d2
	move.w	d2,tunnel_off2-tunloopstart(a3)
	move.w	(a1)+,d2			;fetch orig offset
	add.w	d2,d2
	addi.w	#64*64*0,d2
	move.w	d2,tunnel_off1-tunloopstart(a3)
	move.w	(a1)+,d2			;fetch orig offset
	add.w	d2,d2
	addi.w	#64*64*4,d2
	move.w	d2,tunnel_off4-tunloopstart(a3)

	;screen offsets
	move.w	d7,tunnel_off5-tunloopstart(a3)
	move.w	d7,d6
	add.w	#160,d6
	move.w	d6,tunnel_off6-tunloopstart(a3)

	add.w	d5,d7				;next scrn chunk
	eor.w	#%110,d5			;1 or 7...
	dbf	d1,.loop2

	move.w	tunchunkwidth,d1
	asl.w	#3,d1				;multiply by 8
	neg.w	d1
	move.w	d1,d2
	add.w	#320,d1
	ext.l	d1
	add.l	d1,d7
	add.w	#tunnel_width,d2
	add.w	d2,d2
	add.w	d2,a1
	dbf	d0,.loop1
	move.w	#$4e75,(a0)+			;'rts'
	rts

MAKE_TUN4GFX:
	lea	tungfx_buf,a1			* bitplane 0
	lea	64*64*4(a1),a2			* bitplane 1
	lea	64*64*4(a2),a3			* bitplane 2
	lea	64*64*4(a3),a4			* bitplane 3
	moveq	#32-1,d0			* 32 lines in block

.yloop:	moveq	#2-1,d2				* 32pixels/16 = 2 chunks

.xloop:	move.l	(a0)+,d3			* bitplanes 0, 1
	move.l	(a0)+,d4			* bitplanes 2, 3
	moveq	#16-1,d5			* pixels in chunk

.chunkloop:
	moveq	#0,d6
	moveq	#0,d7

	REPT	2
	swap	d3
	add.w	d3,d3
	scs	d6
	swap	d6
	ENDR
	REPT	2
	swap	d4
	add.w	d4,d4
	scs	d7
	swap	d7
	ENDR

	REPT	2
	and.b	#%11000000,d6
	move.b	d6,(a1)+
	swap	d6
	ENDR
	REPT	2
	and.b	#%11000000,d7
	move.b	d7,(a1)+
	swap	d7
	ENDR

	REPT	2
	lsr.b	#2,d6
	move.b	d6,(a2)+
	swap	d6
	ENDR
	REPT	2
	lsr.b	#2,d7
	move.b	d7,(a2)+
	swap	d7
	ENDR

	REPT	2
	lsr.b	#2,d6
	move.b	d6,(a3)+
	swap	d6
	ENDR
	REPT	2
	lsr.b	#2,d7
	move.b	d7,(a3)+
	swap	d7
	ENDR

	REPT	2
	lsr.b	#2,d6
	move.b	d6,(a4)+
	swap	d6
	ENDR
	REPT	2
	lsr.b	#2,d7
	move.b	d7,(a4)+
	swap	d7
	ENDR

	dbf	d5,.chunkloop

	dbf	d2,.xloop

	moveq	#16-1,d5		;copy 32 pixels

.loop4:	move.l	-128(a1),(a1)+		;  or 64 bytes..
	move.l	-128(a1),(a1)+
	move.l	-128(a2),(a2)+
	move.l	-128(a2),(a2)+
	move.l	-128(a3),(a3)+
	move.l	-128(a3),(a3)+
	move.l	-128(a4),(a4)+
	move.l	-128(a4),(a4)+
	dbf	d5,.loop4

	dbf	d0,.yloop

* Copy overspill:
	lea	tungfx_buf+32*64*4,a1
	lea	64*64*4(a1),a2
	lea	64*64*4(a2),a3
	lea	64*64*4(a3),a4
	move.w	#32*64-1,d0		

.copy:	move.l	-32*64*4(a1),(a1)+
	move.l	-32*64*4(a2),(a2)+
	move.l	-32*64*4(a3),(a3)+
	move.l	-32*64*4(a4),(a4)+
	dbf	d0,.copy
	rts

CALC_TOWERPOS1:
	move.w	tunnel_offset,d0
	move.w	$4bc.w,d0
	lsl.w	#6,d0
	neg.w	d0
	andi.w	#%0001111110000000,d0
	lea	tungfx_buf+64*64*8,a0
	adda.w	d0,a0
	move.w	d0,tunnel_offset
	rts

CALC_TOWERPOS2:
	move.w	tunnel_offset,d0
	move.w	$4bc.w,d0
	move.w	d0,d1
	lsl.w	#6,d0
	neg.w	d0
	sub.w	towerstarttime,d1
	addi.w	#512,d1
	Do_SinModulo	d1
	lea	sine_tbl,a0
	Get_Sin	a0,d1,d1
	lsr.w	#6,d1
	andi.b	#%11111100,d1
	move.b	d1,d0
	andi.w	#%0001111111111111,d0
	lea	tungfx_buf+64*64*8,a0
	adda.w	d0,a0
	move.w	d0,tunnel_offset
	rts

PLOT_CREDITS1:
	movea.l	scr,a0
	addq	#6,a0
	lea	credits_dat,a1
	moveq	#65-1,d7

.yloop:
	REPT	10
	move.w	(a1)+,(a0)
	addq	#8,a0
	ENDR
	lea	20(a1),a1
	lea	80(a0),a0
	dbra	d7,.yloop
	rts

PLOT_CREDITS2:
	movea.l	scr,a0
	lea	160*65+56+6(a0),a0
	lea	credits_dat+20,a1
	moveq	#65-1,d7

.yloop:
	REPT	7
	move.w	(a1)+,(a0)
	addq	#8,a0
	ENDR
	lea	26(a1),a1
	lea	104(a0),a0
	dbra	d7,.yloop
	rts

PLOT_CREDITS3:
	movea.l	scr,a0
	lea	160*125+104+6(a0),a0
	lea	credits_dat+40*65,a1
	moveq	#71-1,d7

.yloop:
	REPT	7
	move.w	(a1)+,(a0)
	addq	#8,a0
	ENDR
	lea	26(a1),a1
	lea	104(a0),a0
	dbra	d7,.yloop
	rts

PLOT_CREDITS4:
	movea.l	scr,a0
	lea	160*91+56+6(a0),a0
	lea	credits_dat+40*65+14,a1
	moveq	#18-1,d7

.yloop:
	REPT	7
	move.w	(a1)+,(a0)
	addq	#8,a0
	ENDR
	lea	26(a1),a1
	lea	104(a0),a0
	dbra	d7,.yloop
	rts

PLOT_CREDITS5:
	movea.l	scr,a0
	lea	160*87+40+6(a0),a0
	lea	credits_dat+40*83+14,a1
	moveq	#25-1,d7

.yloop:
	REPT	10
	move.w	(a1)+,(a0)
	addq	#8,a0
	ENDR
	lea	20(a1),a1
	lea	80(a0),a0
	dbra	d7,.yloop
	rts

INSTALL_TOWEROUTHBL:
	lea	towerhighpal_tbl+31*16,a0
	move.w	$4bc.w,d4
	sub.w	fadeoutstarttime,d4
	lsr.w	#1,d4
	move.w	d4,d5
	andi.w	#$000f,d4
	addq.w	#1,d4
	andi.w	#$01f0,d5
	suba.w	d5,a0
	move.l	a0,rastercoladr
	movem.l	(a0),d0-d3
	movem.l	d0-d3,$ffff8240.w

	move	#$2700,sr
	clr.b	$fffffa1b.w
	move.b	d4,$fffffa21.w
	move.l	#TOWERHBL,$120.w
	move.b	#8,$fffffa1b.w
	bset	#0,$fffffa07.w
	bset	#0,$fffffa13.w
	move	#$2300,sr
	rts

INSTALL_TOWERINHBL:
	lea	towerlowpal_tbl,a0
	move.w	$4bc.w,d4
	sub.w	towerstarttime,d4
	lsr.w	#1,d4
	move.w	d4,d5
	subi.w	#$00ff,d5
	ble.s	.ok
	move.w	d5,d4
	bra.s	.on
.ok:	andi.w	#$000f,d4
	addq.w	#1,d4
	neg.w	d5
	andi.w	#$00f0,d5
	addi.w	#$0010,d5
	adda.w	d5,a0

.on:	move.l	a0,rastercoladr
	movem.l	(a0),d0-d3
	movem.l	d0-d3,$ffff8240.w

	move	#$2700,sr
	clr.b	$fffffa1b.w
	move.b	d4,$fffffa21.w
	move.l	#TOWERHBL,$120.w
	move.b	#8,$fffffa1b.w
	bset	#0,$fffffa07.w
	bset	#0,$fffffa13.w
	move	#$2300,sr
	rts

SET_TOWERPAL:
	movem.l	walltext_pal,d0-d3
	movem.l	d0-d3,$ffff8240.w
	rts

TOWERHBL:
	movem.l	a0-a1,-(sp)
	movea.l	rastercoladr,a1
	lea	$ffff8240.w,a0
	move.l	(a1)+,(a0)+
	move.l	(a1)+,(a0)+
	move.l	(a1)+,(a0)+
	move.l	(a1)+,(a0)+
	move.l	a1,rastercoladr
	movem.l	(sp)+,a0-a1
	move	#$2700,sr
	clr.b	$fffffa1b.w
	move.b	#16,$fffffa21.w
	move.b	#8,$fffffa1b.w
	rte

******** END OF DEMO-EFFECT OBJECT ********