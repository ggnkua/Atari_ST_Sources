* Woke up
* still in a dream.
* Nothing to say.
* Can't pronounce my name.
*
* I open my mouth,
* the words come out...
* ...but make no sense
* for a stranger's ear
*
* In a different language.
* In a foreign land.
* Like I'm an alien
* on a different planet.
*
* Back home
* I feel the same
* Nothing to say
* except for my name.
*
* I open my mouth.
* The words come out,
* but make no sense
* for my lover's ear.
*
* In my native language
* in my native land
* I still behave
* like on a different planet.
*
* It makes it clear.
* I understand.
* We're all strangers
* in a foreign land.
*
* Burn the butchers!
* Forge your head
* to the hilt!
*
* Die Krupps - To The Hilt

; gate sprite now fully 3bpl so can be handled with faster routs and take
; less mem.
;
; ofcourse there is now room for a 1bpl overlay..
;
; sadly, no space for rasters..

******** OBJECT EQUS ********

GREET_TIME:	=	100		; #vbls to next greet

			RSRESET
scalebuf:		RS.W	1<<16
worddoubler_table:	RS.L	65536
bytedoubler_table:	RS.W	256


		RSRESET
sprposentryid:	RS.W	1
sprposentryx:	RS.W	1
sprposentryy:	RS.W	1
sprpossize:	RS.B	0

		RSRESET
sprlistadr:	RS.L	1
sprlistx:	RS.W	1
sprlisty:	RS.W	1
sprlistdist:	RS.W	1
sprentrysize:	RS.B	0

******** OBJECT TABLE ********

* Must be first in object!!
scape_tbl:
	DC.L	SCAPEGOATMAINLOOP
	DC.L	INIT_SCAPEGOAT
	DC.L	SET_SCAPEGOATRES
	DC.L	END_SCAPE
	DC.L	activate_rasters
* Add more addresses here..
	DC.L	0

******** RESOLUTION SETTING ROUTINE ********

SET_SCAPEGOATRES:
	move.l	#kill_hbl,pal_irq

;	bsr	CALC_SCALESPRITES		; Don't think we need this..

	move.w	#2000,scapeheight		* Tower is 2000 cm high.

	move.w	$0468.w,d0
.ck466:	cmp.w	$0468.w,d0
	beq.s	.ck466

	move.l	$466.w,scapestart466

	lea	scapepal,a0
; new: all in 3 planes
; background part..
	move.w	#$0003,(a0)+	#$0000,(a0)+
	move.w	#$04b3,(a0)+
	move.w	#$0291,(a0)+
	move.w	#$07e6,(a0)+
	move.w	#$03a2,(a0)+
	move.w	#$0180,(a0)+
	move.w	#$05c4,(a0)+
	move.w	#$06d5,(a0)+
; blended part..
	REPT	4
	move.l	#$0FFF0FFF,(a0)+
	ENDR

	movem.l	scapepal,d0-d7
	movem.l	d0-d7,pal

	bsr	blue_it_up
; normal palette faded to white..
	lea	scapepal,a1
	lea	scapefadepal,a0
	bsr	CALC_SCAPEPAL
; reflected palette faded to white..
	lea	refpal,a1
	lea	reffadepal,a0
	bsr	CALC_SCAPEPAL

	bsr	make_worddoubler_table
	bsr	calc_waves

	bsr	TRIGGER_SCAPEPALFADE
;	bsr	activate_rasters
	rts

******** INIT SUBROUTINE ********

INIT_SCAPEGOAT:
	rts

******** MAINLOOP SUBROUTINE ********

SCAPEGOATMAINLOOP:
	move.l	frmcnt,d0
	sub.l	lastfrmcnt,d0
	bne.s	.res_done
	move.l	d0,-(sp)
	bsr	SET_SCAPEGOATRES
	move.l	(sp)+,d0
.res_done:
	cmpi.l	#3,d0
	bhs.s	.clear_done
	movea.l	scr,a0
	bsr	CLEAR_STSCREEN
.clear_done:

	tst.w	scape_ends
	beq.s	.normal

	lea	scr,a2
	movea.l	(a2)+,a0			; a0:dst (log screen)
	movea.l	(a2),a1				; a1:src (old screen)
	bsr	scale

	moveq	#3,d7				; Limit to 3 vbl speed..
	bra	.end

.normal:move.l	$466.w,d0
	sub.l	scapestart466,d0
	add.l	d0,d0
	move.w	#5000,d1			* Tower is 5000 cm away.
	sub.w	d0,d1
	move.w	d1,scapez

	lea	towerpic_dat,a1
	move.w	#160,d0
	move.l	$0466.w,d1
	sub.l	scapestart466,d1
	lsr.l	d1
	cmpi.l	#300,d1
	bls.s	.height_ok
	move.l	#300,d1
.height_ok:
	neg.l	d1
	move.w	d1,d2
	addi.w	#300+140,d2
	move.w	d2,horizon
	addi.l	#300+78,d1

;	bsr	PLOT_CPUFRAME
	bsr	COPY_CPUFRAME

;- greetings shit ----------------------------------------------------------

	bsr	clear_greet

	tst.w	greets_active
	bgt.s	.yeah_greets
	bmi	.no_greets

	move.l	$0466.w,d0
	cmpi.l	#TRIGGER_REFPAL,pal_irq
	bne	.no_greets
	move.l	d0,greet_starttime
	move.w	#+1,greets_active
	bsr	trigger_greet_fadein

.yeah_greets:
	lea	greet_table,a0
	lea	greetpos_table,a1
	move.l	$0466.w,d1
	sub.l	greet_starttime,d1
	divu.w	#GREET_TIME,d1
	move.l	d1,d4
	swap	d4
	cmpi.w	#GREET_TIME-16,d4
	bne.s	.no_fade
	bsr	trigger_greet_fadeout
.no_fade:

	move.w	d1,d3
	cmp.w	(a0)+,d1
	blo.s	.yes_greets
	move.w	#-1,greets_active
	move.w	d3,greet_num
	move.l	greetsrc,old_greetsrc
	move.l	greetpos,old_greetpos
	bra.s	.no_greets
.yes_greets:
	add.w	d1,d1
	adda.w	d1,a0
	add.w	d1,d1
	adda.w	d1,a1
	move.l	(a1),d2
	move.w	(a0)+,d0
	move.w	(a0),d1
	sub.w	d0,d1

	cmp.w	greet_num,d3
	beq.s	.no_change
	move.w	d3,greet_num
	move.l	greetsrc,old_greetsrc
	move.l	greetpos,old_greetpos
	bsr	trigger_greet_fadein
.no_change:

	move.l	d2,greetpos
	movem.w	d0-d1,greetsrc
	bsr	paint_greet
.no_greets:

;- end of greet crap -------------------------------------------------------

	bsr	reflect

	moveq	#1,d7				; Limit to 1vbl speed..
.end:

;	movea.l	scr,a0
;;	move.l	#%0000000111111110000111100001111,(a0)+
;;	move.l	#%0011011001100110101010101010101,(a0)+
;	move.l	#%0101010101010101001101100110011,(a0)+
;	move.l	#%0000111100001111000000011111111,(a0)+

; d7.w=#vbls to wait (omitted)
	IFEQ	testmode
	lea	scr,a0
	move.l	(a0)+,d0
	move.l	(a0),-4(a0)
	move.l	d0,(a0)
	lsr.w	#8,d0
	move.l	d0,$ffff8200.w

	subq.w	#1,d7
.loop:	move.w	$468.w,d0
.cmp468:cmp.w	$468.w,d0
	beq.s	.cmp468
	dbf	d7,.loop

	ENDC
	rts

.old468:
	DS.W	1

******** OBJECT SUBROUTINES ********

kill_hbl:
	move	#$2700,sr
	bclr	#0,$fffffa07.w			; tib off
	bclr	#0,$fffffa13.w			; tib off
	move	#$2300,sr
	rts

END_SCAPE:
	st	scape_ends
	rts

activate_rasters:
	move.l	#TRIGGER_REFPAL,pal_irq
	rts

trigger_greet_fadein:
	clr.w	faded_in
	move.w	#-1,scapefadedir
	move.l	#scapefadepal+16*32,scapefadepaladr
	move.l	#reffadepal+16*32,reffadepaladr
	rts

trigger_greet_fadeout:
	clr.w	faded_in
	clr.w	faded_out
	move.w	#+1,scapefadedir
	move.l	#scapefadepal,scapefadepaladr
	move.l	#reffadepal,reffadepaladr
	rts

TRIGGER_REFPAL:
; lower part of palette..
	movem.l	pal,d0-d3
	movem.l	d0-d3,$FFFF8240.w

; upper part..
	tst.w	scapefadedir
	beq	.normal
	bmi.s	.fade_in

.fade_out:
	movea.l	scapefadepaladr,a1
	cmpa.l	#scapefadepal+16*32,a1
	bne.s	.go_on
	move.l	#scapefadepal+15*32,scapefadepaladr
	st	faded_out
	clr.w	scapefadedir
	bra	.normal
.go_on:	lea	$FFFF8250.w,a0
	REPT	4
	move.l	(a1)+,(a0)+
	ENDR
	lea	16(a1),a1
	move.l	a1,scapefadepaladr

; reflected overlay part..
	movea.l	reffadepaladr,a2
	movem.l	(a2),d0-d3
	movem.l	d0-d3,refpal+16
	lea	32(a2),a2
	move.l	a2,reffadepaladr
	bra.s	.end_fade

.fade_in:
	movea.l	scapefadepaladr,a1
	cmpa.l	#scapefadepal,a1
	bne.s	.go_on2
	move.l	#scapefadepal,scapefadepaladr
	st	faded_in
	clr.w	scapefadedir
	bra.s	.normal
.go_on2:lea	$FFFF8260.w,a0
	lea	-16(a1),a1
	REPT	4
	move.l	-(a1),-(a0)
	ENDR
	move.l	a1,scapefadepaladr

; reflected overlay part..
	movea.l	reffadepaladr,a2
	lea	-32(a2),a2
	movem.l	(a2),d0-d3
	movem.l	d0-d3,refpal+16
	move.l	a2,reffadepaladr
	bra.s	.end_fade

.normal:
	movea.l	scapefadepaladr,a1
	movem.l	(a1),d0-d3
	movem.l	d0-d3,$FFFF8250.w

.end_fade:

; raster bs...
	tst.w	first_scale_done
	bne.s	.end

	move.w	horizon,d0
	cmpi.w	#199,d0
	bhs.s	.end				; No raster if horizon off screen!

	move	#$2700,sr
	clr.b	$fffffa1b.w
	move.b	d0,$fffffa21.w
	move.l	#REFHBL,$120.w
	bset	#0,$fffffa07.w			; tib on
	bset	#0,$fffffa13.w			; tib on
	move.b	#8,$fffffa1b.w
	move	#$2300,sr
.end:	rts

REFHBL:	movem.l	a0-a1,-(sp)
	lea	refpal,a1
	lea	$FFFF8240.w,a0
	REPT	8
	move.l	(a1)+,(a0)+
	ENDR
	movem.l	(sp)+,a0-a1

	move.w	#199,d0
	move	#$2700,sr
	sub.w	horizon,d0
	bgt.s	.oki
	bclr	#0,$fffffa07.w			; tib off
	bclr	#0,$fffffa13.w			; tib off
	rte
.oki:	move.l	#REFHBL_TRASHER,$120.w
	clr.b	$fffffa1b.w
	addq.b	#1,d0
	move.b	d0,$fffffa21.w
	move.b	#8,$fffffa1b.w
	rte

REFHBL_TRASHER:
	movem.l	a0-a1,-(sp)
	lea	pal,a1
	lea	$FFFF8240.w,a0
	REPT	4
	move.l	(a1)+,(a0)+
	ENDR
	movem.l	(sp)+,a0-a1
	move	#$2700,sr
	bclr	#0,$fffffa07.w			; tib off
	bclr	#0,$fffffa13.w			; tib off
	rte

blue_it_up:
	lea	pal,a1
	lea	refpal,a0
	moveq	#16-1,d7	
.loop:	move.w	(a1)+,d0
	move.w	d0,d1
	andi.w	#$7,d0
	addq.w	#3,d0
	cmpi.w	#$7,d0
	blt.s	.ok
	moveq	#$7,d0
.ok:	andi.w	#$FF8,d1
	or.w	d0,d1
	move.w	d1,(a0)+
	dbf	d7,.loop
	rts

; extremely slow, but time is no issue here...
; todo: maybe it is, cos init is done between screens..
; doesn't need to be more than 5 sec or something..
make_worddoubler_table:
	bsr	double_bytes
	lea	temp_buf+worddoubler_table,a0
	lea	temp_buf+bytedoubler_table,a1
	movea.l	a1,a3
	clr.b	d7

.outer:	movea.l	a1,a2
	move.w	(a3)+,d0
	swap	d0
	clr.b	d6

.inner:	move.w	(a2)+,d0
	move.l	d0,(a0)+
	addq.b	#1,d6
	bne.s	.inner

	addq.b	#1,d7
	bne.s	.outer
	rts

double_bytes:
	lea	temp_buf+bytedoubler_table,a0
	clr.w	d6
	moveq	#%11,d2

.loop:	move.w	d6,d0

	clr.l	d1
	REPT	8
	lsl.l	#2,d1
	add.b	d0,d0
	bcc.s	*+4
	or.l	d2,d1
	ENDR

	move.w	d1,(a0)+
	addq.b	#1,d6
	bne.s	.loop
	rts

; Scales an st low screen x2.
; Works in <2vbl on st..
; Can be optimised, but who needs it?
; a0: dst
; a1: src
scale:	lea	temp_buf+worddoubler_table,a6
	lea	160*(50+14)+40(a1),a1		; yep, it's below the center!
	clr.l	d0
	moveq	#80,d4
	move.w	#160,d5
	moveq	#100-1,d7

.yloop:	moveq	#10-1,d6

.xloop:	clr.l	d0				; 4
	move.w	(a1)+,d0			; 8
	add.l	d0,d0				; 6
	add.l	d0,d0				; 6
	lea	(a6,d0.l),a2			; 12
	clr.l	d0
	move.w	(a1)+,d0
	add.l	d0,d0
	add.l	d0,d0
	lea	(a6,d0.l),a3
	clr.l	d0
	move.w	(a1)+,d0
	add.l	d0,d0
	add.l	d0,d0
	lea	(a6,d0.l),a4
	clr.l	d0
	move.w	(a1)+,d0
	add.l	d0,d0
	add.l	d0,d0
	lea	(a6,d0.l),a5
	REPT	2
	move.w	(a2)+,d0			; 8
	move.w	d0,160(a0)			; 12
	move.w	d0,(a0)+			; 8
	move.w	(a3)+,d0
	move.w	d0,160(a0)
	move.w	d0,(a0)+
	move.w	(a4)+,d0
	move.w	d0,160(a0)
	move.w	d0,(a0)+
	move.w	(a5)+,d0
	move.w	d0,160(a0)
	move.w	d0,(a0)+
	ENDR
	dbf	d6,.xloop

	adda.l	d4,a1
	adda.w	d5,a0
	dbf	d7,.yloop

	st	first_scale_done
	rts

; Calculate some whitefaded versions of the palette..
; INPUT:
; a0: dst (faded) palettes (16*16 col)
; a1: src palette (16 col)
CALC_SCAPEPAL:
	move.l	a0,-(sp)

; 1: Extract (ste) palette to easy format.
	lea	.pal_tbl(pc),a0
	moveq	#16-1,d7

.preloop:
	move.w	(a1)+,d0
	move.w	d0,d1
	move.w	d0,d2
	move.w	d0,d3
	move.w	d0,d4
	move.w	d0,d5

	andi.w	#$0700,d0
	lsr.w	#7,d0
	rol.w	#5,d3
	andi.w	#$0001,d3
	or.w	d3,d0

	andi.w	#$0070,d1
	lsr.w	#3,d1
	rol.b	#1,d4
	andi.w	#$0001,d4
	or.w	d4,d1
	
	andi.w	#$0007,d2
	add.w	d2,d2
	rol.b	#5,d5
	andi.w	#$0001,d5
	or.w	d5,d2

	move.b	d0,(a0)+
	move.b	d1,(a0)+
	move.b	d2,(a0)+

	dbra	d7,.preloop

; 2: make faded versions..
	movea.l	(sp)+,a0
	moveq	#16-1,d5
	moveq	#16-1,d7

.lowloop:
	lea	.pal_tbl(pc),a1
	moveq	#16-1,d6

.lowentryloop:
	moveq	#0,d0
	moveq	#0,d1
	moveq	#0,d2

; do the actual fade..
	move.b	(a1)+,d0
	add.b	d7,d0
	cmp.b	d5,d0
	blt.s	.r_ok
	move.b	d5,d0
.r_ok:	move.b	(a1)+,d1
	add.b	d7,d1
	cmp.b	d5,d1
	blt.s	.g_ok
	move.b	d5,d1
.g_ok:	move.b	(a1)+,d2
	add.b	d7,d2
	cmp.b	d5,d2
	blt.s	.b_ok
	move.b	d5,d2
.b_ok:

; Put in rorred format, weird STe crap..
; rokgokbokrokgokbokrokgokbokrokgokbokrokgokbokrokgokbokrokgokbokrokgokbok
	lsr.w	d0
	bcc.s	.rok
	ori.w	#%1000,d0
.rok:	lsr.w	d1
	bcc.s	.gok
	ori.w	#%1000,d1
.gok:	lsr.w	d2
	bcc.s	.bok
	ori.w	#%1000,d2
.bok:	

; Pack rgb, and store..
	lsl.w	#8,d0
	lsl.w	#4,d1
	or.w	d0,d2
	or.w	d1,d2
	move.w	d2,(a0)+
	dbf	d6,.lowentryloop

	dbf	d7,.lowloop
	rts

.pal_tbl:
	DS.B	3*16

TRIGGER_SCAPEPALFADE:
	move.w	#+1,scapefadedir
	move.l	#scapefadepal,scapefadepaladr
	move.l	#SCAPE_VBL,pal_irq
	rts

SCAPE_VBL:
	tst.w	scapefadedir
	beq	.end

.fade_in:
	move.w	$468.w,d0
	move.w	d0,d1
	andi.w	#1,d1
	bne.s	.end
; colours 1..F
	movea.l	scapefadepaladr,a1
	cmpa.l	#scapefadepal+16*32,a1
	bne.s	.go_on
	clr.w	scapefadedir
	bsr	activate_rasters
	bra.s	.end
.go_on:	lea	$FFFF8240.w,a0
	REPT	8
	move.l	(a1)+,(a0)+
	ENDR
	move.l	a1,scapefadepaladr
.end:	rts

CALC_SCALESPRITES:
	lea	scaleoffset_tbl,a3
	lea	towerscaleadr_tbl,a4
	lea	tower_dat,a2
	movem.w	(a2)+,d0-d1
	lea	temp_buf+scalebuf,a0
	move.w	(a3)+,d7

.scaleloop:
	moveq	#0,d2
	move.w	(a3)+,d2
	move.l	d2,d3
	lsl.l	#8,d3
	divu.w	d0,d3
	move.w	d3,d4				* scalefactor
	mulu.w	d1,d3
	lsr.l	#8,d3

	movem.l	a2-a4,-(sp)
	movem.w	d0/d1/d7,-(sp)
	bsr	SCALE_SPRITE
	movem.w	(sp)+,d0/d1/d7
	movem.l	(sp)+,a2-a4

	move.l	a1,(a4)+
	movea.l	a1,a0
	dbra	d7,.scaleloop
	rts

* INPUT: d0.l: original width
*        d1.l: original height
*        d2.l: destination width
*        d3.l: destination height
*        d4.w: 8:8 scalefactor
*        a0: destination spritedata
*        a2: source spritedata
* OUTPUT: a1: endaddress of destination spritedata
SCALE_SPRITE:
* Calculate counters and sprite data and mask addresses.
	movea.w	d4,a4				* scalefactor
	move.w	d0,d7
	andi.w	#$fff0,d7
	lsr.w	#3,d7
	move.w	d7,.xorigsize
	move.w	d3,d7				* Ylines
	move.w	d0,d3
	mulu.w	d1,d3
	lsr.l	#3,d3
	lea	(a2,d3.l),a3			* source bitplane address
	move.w	d2,d3
	addi.w	#$000f,d3			* / Round to
	andi.w	#$fff0,d3			* | next
	lsr.w	#3,d3				* \ Xchunk.
	moveq	#0,d5
	move.w	d3,d5
	swap	d5
	move.w	d2,d5
	andi.w	#$000f,d5
	movea.l	d5,a5				* dest Xchunks<<16 | X mod 16
	mulu.w	d7,d3				* dest. Xchunks * Ylines
	lea	(a0,d3.l),a1			* dest. bitplane address
	subq.w	#1,d7				* Ylines - 1

* d7.w: lines - 1
* a0: destination mask
* a1: destination bitplanes
* a2: source mask
* a3: source bitplanes
* a4.w: scalefactor (= stepvalue)
* a5.l: dest Xchunks<<16 | X mod 16

.yloop:	move.l	a5,d6
	moveq	#0,d4

.chunkloop:
	swap	d6
	move.w	#16-1,d6
	moveq	#0,d3

.pixloop:
	move.w	d4,d0
	move.w	d5,d1
	lsr.w	#8,d0
	lsr.w	#8,d1
	mulu.w	.xorigsize(pc),d1
	add.w	d0,d1
	andi.w	#$fff0,d0
	sub.w	d0,d1
	subi.w	#$000f,d1
	neg.w	d1				* bitnumber
	lsr.w	#3,d0

	move.w	(a2,d0.w),d3
	move.w	(a0),d2
	btst	d1,d3
	beq.s	.nosetmask
	bset	d1,d2
.nosetmask:
	move.w	d2,(a0)

	lsl.w	#2,d0

	move.w	(a3,d0.w),d3
	move.w	(a1),d2
	btst	d1,d3
	beq.s	.nosetplane0
	bset	d1,d2
.nosetplane0:
	move.w	d2,(a1)

	move.w	2(a3,d0.w),d3
	move.w	2(a1),d2
	btst	d1,d3
	beq.s	.nosetplane1
	bset	d1,d2
.nosetplane1:
	move.w	d2,2(a1)

	move.w	4(a3,d0.w),d3
	move.w	4(a1),d2
	btst	d1,d3
	beq.s	.nosetplane2
	bset	d1,d2
.nosetplane2:
	move.w	d2,4(a1)

	move.w	6(a3,d0.w),d3
	move.w	6(a1),d2
	btst	d1,d3
	beq.s	.nosetplane3
	bset	d1,d2
.nosetplane3:
	move.w	d2,6(a1)

	add.w	a4,d4
	add.w	a4,d5
	dbra	d6,.pixloop

	addq	#2,a0
	addq	#8,a1
	swap	d6
	dbra	d6,.chunkloop

	dbra	d7,.yloop
	rts

.xorigsize:
	DC.W	0

PLOT_SCALEGROUND:
	movea.l	scr,a0
	lea	groundpic_dat,a1
	move.w	scapeheight,d0
	lsr.w	#7,d0
	addi.w	#100,d0
	move.w	d0,d7
	subi.w	#199,d7
	neg.w	d7
	mulu.w	#160,d0
	adda.l	d0,a0

.yloop:	REPT	160/8
	move.l	#$ffffffff,(a0)+
	move.l	#$ffffffff,(a0)+
	ENDR
	dbra	d7,.yloop

	rts

PLOT_ZOOMTOWER:
	movea.l	scr,a0
	move.w	scapeheight,d0

	

	rts

	IFNE	0
* Rotates the scapegoat scenery around.. (turns the observer from north
* to west, south, east, etc.)
* INPUT: d0.w: rotation
ROTATE_SCENERY:
	lea	sceneryposini_tbl,a1
	lea	scenerypos_tbl,a0
	move.w	(a1)+,d7
	move.w	d7,(a0)+
	subq.w	#1,d7
	bmi.s	.rts
	Do_SinModulo	d0
	lea	sine_tbl,a2
	Get_SinCos	a2,d0,d0,d1
	move.w	d0,d2
	neg.w	d2
.loop:	move.w	sprposentryx(a1),d3
	move.w	sprposentryy(a1),d4
	move.w	d3,d5
	move.w	d4,d6
	muls.w	d1,d3				* Cos * X
	muls.w	d0,d4				* Sin * Y
	muls.w	d2,d5				* -Sin * X
	muls.w	d1,d6				* Cos * Y
	add.l	d3,d4
	add.l	d5,d6
	add.l	d4,d4
	add.l	d6,d6
	swap	d4
	swap	d6
	move.w	d4,sprposentryx(a0)
	move.w	d6,sprposentryy(a0)
	addq	#sprpossize,a0
	addq	#sprpossize,a1
	dbra	d7,.loop
.rts:	rts
	ENDC

* Routine that draws 4-bitplane spritedata to screen. Any size upto 320*200
* is allowed. Clipping and offscreen detection are implemented.
* INPUT: d0.w: x-mid on screen
*        d1.w: y-mid on screen
*        a1: address of spritedata buffer
PLOT_CPUFRAME:
	moveq	#0,d6				* Clear clipflags.
	movea.l	scr,a0
	movem.w	(a1)+,d5/d7
	move.w	(a1)+,d2
	lea	(a1,d2.w),a2
	move.w	d5,d2
	movea.w	d5,a5
	suba.l	a3,a3				* Mask X-increment := 0
	suba.l	a4,a4				* Sprite X-increment := 0
	move.w	d2,d3
	lsl.w	#4-1,d3
	sub.w	d3,d0
	bpl.s	.x_pos
* Left corner of sprite is negative! Handle clipping stuff.
	move.w	d0,d3
	neg.w	d3
	lsr.w	#4,d3
	cmp.w	d2,d3
	bhs	.rts
* Sprite partially clipped at the left screenside.
	sub.w	d3,d5
	move.w	d0,d3
	andi.w	#$fff0,d0
	neg.w	d0
	lsr.w	#3,d0
	movea.w	d0,a3
	lsl.w	#2,d0
	movea.w	d0,a4
	move.w	d3,d0
	andi.w	#$000f,d0
	bset	#1,d6				* Set left clipflag.
	bra.s	.x_ok
.x_pos:	move.w	#scrxbytes>>3,d3
	sub.w	d2,d3
	lsl.w	#4,d3
	cmpi.w	#scrxbytes<<1,d0
	bhs	.rts
	cmp.w	d3,d0
	blt.s	.x_ok
* Sprite partially clipped at the right screenside.
	lsl.w	#4,d2
	add.w	d0,d2
	subi.w	#scrxbytes<<1,d2
	andi.w	#$fff0,d2
	lsr.w	#1,d2
	movea.w	d2,a4
	lsr.w	#2,d2
	movea.w	d2,a3
	lsr.w	#1,d2
	sub.w	d2,d5
	bset	#0,d6				* Set right clipflag.
.x_ok:
.do_y:	move.w	d7,d3
	lsr.w	#1,d3
	move.w	d1,d2
	sub.w	d3,d2
	move.w	d2,d1
	bpl.s	.y_pos
	neg.w	d2
	cmp.w	d7,d2
	bhs	.rts
* Sprite partially clipped at top of screen.
	sub.w	d2,d7

	move.w	d2,d1

	mulu.w	d5,d1	mulu.w	d5,d2
	adda.l	d1,a1	adda.l	d2,a1
	adda.l	d1,a1	adda.l	d2,a1
	lsl.l	#3,d1	lsl.l	#3,d2
	adda.l	d1,a2	adda.l	d2,a2
	moveq	#0,d1
	;bra.s	.y_ok
.y_pos:	cmpi.w	#scrlines,d2
	bhs	.rts
* Sprite partially clipped at bottom of screen.
	subi.w	#scrlines,d2
	neg.w	d2
	cmp.w	d7,d2
	bhs.s	.y_ok
	move.w	d2,d7
.y_ok:
* Initialize yloop..
.do_init:
	move.w	d0,d2
	andi.w	#$fff0,d0
	mulu.w	#scrxbytes,d1
	sub.w	d0,d2				* d2.w := shift-value
	lea	.mask_tbl(pc),a6
	move.w	d2,d3
	lsl.w	#2,d3
	move.l	(a6,d3.w),d3
	move.l	d3,d4
	not.l	d4
	lsr.w	#1,d0
	adda.l	d1,a0
	adda.w	d0,a0
	subq.w	#1,d7

* Check clipflags and plot left or right clipped sides...
.chk_lclip:
	btst	#1,d6
	beq.s	.no_lclip

	tst.w	d2
	beq.s	.end_lclip

	movem.l	a0-a4,-(sp)			* / Save resisters for
	movem.w	d5/d7,-(sp)			* \ rest of sprite.

	move.w	a5,d0
	sub.w	d5,d0
	move.w	d0,d1
	add.w	d0,d0
	adda.w	d0,a1
	lsl.w	#2,d0
	adda.w	d0,a2

	move.w	a5,d0
	subq.w	#1,d0
	add.w	d0,d0
	movea.w	d0,a3
	lsl.w	#2,d0
	movea.w	d0,a4
	lea	(a0),a6

.lyloop:
	moveq	#$ffffffff,d0
	move.w	(a1)+,d0
	ror.l	d2,d0
	swap	d0
	and.w	d0,(a0)+
	and.w	d0,(a0)+
	and.w	d0,(a0)+
	and.w	d0,(a0)+
	subq	#8,a0
	REPT	2
	move.l	(a2)+,d1
	ror.l	d2,d1
	and.l	d4,d1
	swap	d1
	or.l	d1,(a0)+
	ENDR
	adda.l	a3,a1
	adda.l	a4,a2
	lea	scrxbytes(a6),a6
	lea	(a6),a0
	dbra	d7,.lyloop

	movem.w	(sp)+,d5/d7			* / Restore registers for
	movem.l	(sp)+,a0-a4			* \ rest of routine.

	subq.w	#1,d5
.end_lclip:
	adda.l	a3,a1
	adda.l	a4,a2
	tst.w	d5
	bgt.s	.plot_middle
	rts
.no_lclip:

.chk_rclip:
	btst	#0,d6
	beq.s	.no_rclip

	tst.w	d2
	beq.s	.end_rclip

	movem.l	a0-a4,-(sp)			* / Save resisters for
	movem.w	d5/d7,-(sp)			* \ rest of sprite.

	move.w	a5,d0
	subq.w	#1,d0
	add.w	d0,d0
	movea.w	d0,a3
	lsl.w	#2,d0
	movea.w	d0,a4

	move.w	d5,d0
	subq.w	#1,d0
	add.w	d0,d0
	adda.w	d0,a1
	lsl.w	#2,d0
	adda.w	d0,a2
	adda.w	d0,a0
	lea	(a0),a6

.ryloop:
	moveq	#$ffffffff,d0
	move.w	(a1)+,d0
	ror.l	d2,d0
	and.w	d0,(a0)+
	and.w	d0,(a0)+
	and.w	d0,(a0)+
	and.w	d0,(a0)+
	subq	#8,a0
	REPT	2
	move.l	(a2)+,d0
	ror.l	d2,d0
	and.l	d3,d0
	or.l	d0,(a0)+
	ENDR
	adda.l	a3,a1
	adda.l	a4,a2
	lea	scrxbytes(a6),a6
	lea	(a6),a0
	dbra	d7,.ryloop

	movem.w	(sp)+,d5/d7			* / Restore registers for
	movem.l	(sp)+,a0-a4			* \ rest of routine.

	subq.w	#1,d5
	addq	#2,a3
	addq	#8,a4
.end_rclip:
	tst.w	d5
	bgt.s	.plot_middle
	rts
.no_rclip:

* Plot middle (=nonclipped) part of sprite.
.plot_middle:
	subq.w	#1,d5
	lea	(a0),a6
.yloop:	move.w	d5,d6
.xloop:	moveq	#$ffffffff,d0
	move.w	(a1)+,d0
	ror.l	d2,d0
	and.w	d0,(a0)+
	and.w	d0,(a0)+
	and.w	d0,(a0)+
	and.w	d0,(a0)+
	swap	d0
	and.w	d0,(a0)+
	and.w	d0,(a0)+
	and.w	d0,(a0)+
	and.w	d0,(a0)+
	lea	-16(a0),a0
	REPT	2
	move.l	(a2)+,d0
	ror.l	d2,d0
	move.l	d0,d1
	and.l	d3,d0
	and.l	d4,d1
	swap	d1
	or.l	d0,(a0)+
	or.l	d1,4(a0)
	ENDR
.endplane:
	dbra	d6,.xloop
	adda.l	a3,a1
	adda.l	a4,a2
	lea	scrxbytes(a6),a6
	lea	(a6),a0
	dbra	d7,.yloop

.rts:	rts

.mask_tbl:
	DC.L	$ffffffff,$7fff7fff,$3fff3fff,$1fff1fff
	DC.L	$0fff0fff,$07ff07ff,$03ff03ff,$01ff01ff
	DC.L	$00ff00ff,$007f007f,$003f003f,$001f001f
	DC.L	$000f000f,$00070007,$00030003,$00010001

; Routine that draws 4-bitplane spritedata to screen. Any size upto 320*200
; is allowed. Clipping and offscreen detection are implemented.
; Note: no shifting, just a fast thing!
; INPUT:
; d0.w: x-mid on screen
; d1.w: y-mid on screen
; a1: address of spritedata buffer
COPY_CPUFRAME:
	moveq	#0,d6				* Clear clipflags.
	movea.l	scr,a0
	movem.w	(a1)+,d5/d7
	move.w	(a1)+,d2
	lea	(a1,d2.w),a2
	move.w	d5,d2
	movea.w	d5,a5
	suba.l	a3,a3				* Mask X-increment := 0
	suba.l	a4,a4				* Sprite X-increment := 0
	move.w	d2,d3
	lsl.w	#4-1,d3
	sub.w	d3,d0
	bpl.s	.x_pos
* Left corner of sprite is negative! Handle clipping stuff.
	move.w	d0,d3
	neg.w	d3
	lsr.w	#4,d3
	cmp.w	d2,d3
	bhs	.rts
* Sprite partially clipped at the left screenside.
	sub.w	d3,d5
	move.w	d0,d3
	andi.w	#$fff0,d0
	neg.w	d0
	lsr.w	#3,d0
	movea.w	d0,a3
	lsl.w	#2,d0
	movea.w	d0,a4
	move.w	d3,d0
	andi.w	#$000f,d0
	bset	#1,d6				* Set left clipflag.
	bra.s	.x_ok
.x_pos:	move.w	#scrxbytes>>3,d3
	sub.w	d2,d3
	lsl.w	#4,d3
	cmpi.w	#scrxbytes<<1,d0
	bhs	.rts
	cmp.w	d3,d0
	blt.s	.x_ok
* Sprite partially clipped at the right screenside.
	lsl.w	#4,d2
	add.w	d0,d2
	subi.w	#scrxbytes<<1,d2
	andi.w	#$fff0,d2
	lsr.w	#1,d2
	movea.w	d2,a4
	lsr.w	#2,d2
	movea.w	d2,a3
	lsr.w	#1,d2
	sub.w	d2,d5
	bset	#0,d6				* Set right clipflag.
.x_ok:
.do_y:	move.w	d7,d3
	lsr.w	#1,d3
	move.w	d1,d2
	sub.w	d3,d2
	move.w	d2,d1
	bpl.s	.y_pos
	neg.w	d2
	cmp.w	d7,d2
	bhs	.rts
* Sprite partially clipped at top of screen.
	sub.w	d2,d7

	move.w	d2,d1

	mulu.w	d5,d1	mulu.w	d5,d2
	adda.l	d1,a1	adda.l	d2,a1
	adda.l	d1,a1	adda.l	d2,a1
	lsl.l	#3,d1	lsl.l	#3,d2
	adda.l	d1,a2	adda.l	d2,a2
	moveq	#0,d1
	;bra.s	.y_ok
.y_pos:	cmpi.w	#scrlines,d2
	bhs	.rts
* Sprite partially clipped at bottom of screen.
	subi.w	#scrlines,d2
	neg.w	d2
	cmp.w	d7,d2
	bhs.s	.y_ok
	move.w	d2,d7
.y_ok:
* Initialize yloop..
.do_init:
	move.w	d0,d2
	andi.w	#$fff0,d0
	mulu.w	#scrxbytes,d1
	sub.w	d0,d2				* d2.w := shift-value
	lea	.mask_tbl(pc),a6
	move.w	d2,d3
	lsl.w	#2,d3
	move.l	(a6,d3.w),d3
	move.l	d3,d4
	not.l	d4
	lsr.w	#1,d0
	adda.l	d1,a0
	adda.w	d0,a0
	subq.w	#1,d7

* Check clipflags and plot left or right clipped sides...
.chk_lclip:
	btst	#1,d6
	beq.s	.no_lclip

	tst.w	d2
	beq.s	.end_lclip

	movem.l	a0-a4,-(sp)			* / Save resisters for
	movem.w	d5/d7,-(sp)			* \ rest of sprite.

	move.w	a5,d0
	sub.w	d5,d0
	move.w	d0,d1
	add.w	d0,d0
	adda.w	d0,a1
	lsl.w	#2,d0
	adda.w	d0,a2

	move.w	a5,d0
	subq.w	#1,d0
	add.w	d0,d0
	movea.w	d0,a3
	lsl.w	#2,d0
	movea.w	d0,a4
	lea	(a0),a6

.lyloop:move.w	(a1)+,d0
	and.w	d0,(a0)+
	and.w	d0,(a0)+
	and.w	d0,(a0)+
	and.w	d0,(a0)+
	subq	#8,a0
	move.l	(a2)+,d0
	or.l	d0,(a0)+
	move.l	(a2)+,d0
	or.l	d0,(a0)+
	adda.l	a3,a1
	adda.l	a4,a2
	lea	scrxbytes(a6),a6
	lea	(a6),a0
	dbra	d7,.lyloop

	movem.w	(sp)+,d5/d7			* / Restore registers for
	movem.l	(sp)+,a0-a4			* \ rest of routine.

	subq.w	#1,d5
.end_lclip:
	adda.l	a3,a1
	adda.l	a4,a2
	tst.w	d5
	bgt.s	.plot_middle
	rts
.no_lclip:

.chk_rclip:
	btst	#0,d6
	beq.s	.no_rclip

	tst.w	d2
	beq.s	.end_rclip

	movem.l	a0-a4,-(sp)			* / Save resisters for
	movem.w	d5/d7,-(sp)			* \ rest of sprite.

	move.w	a5,d0
	subq.w	#1,d0
	add.w	d0,d0
	movea.w	d0,a3
	lsl.w	#2,d0
	movea.w	d0,a4

	move.w	d5,d0
	subq.w	#1,d0
	add.w	d0,d0
	adda.w	d0,a1
	lsl.w	#2,d0
	adda.w	d0,a2
	adda.w	d0,a0
	lea	(a0),a6

.ryloop:move.w	(a1)+,d0
	and.w	d0,(a0)+
	and.w	d0,(a0)+
	and.w	d0,(a0)+
	and.w	d0,(a0)+
	subq	#8,a0
	move.l	(a2)+,d0
	or.l	d0,(a0)+
	move.l	(a2)+,d0
	or.l	d0,(a0)+
	adda.l	a3,a1
	adda.l	a4,a2
	lea	scrxbytes(a6),a6
	lea	(a6),a0
	dbra	d7,.ryloop

	movem.w	(sp)+,d5/d7			* / Restore registers for
	movem.l	(sp)+,a0-a4			* \ rest of routine.

	subq.w	#1,d5
	addq	#2,a3
	addq	#8,a4
.end_rclip:
	tst.w	d5
	bgt.s	.plot_middle
	rts
.no_rclip:

* Plot middle (=nonclipped) part of sprite.
.plot_middle:
	subq.w	#1,d5
	lea	(a0),a6
.yloop:	move.w	d5,d6
.xloop:	move.l	(a2)+,(a0)+
	move.l	(a2)+,(a0)+
.endplane:
	dbra	d6,.xloop
	adda.l	a3,a1
	adda.l	a4,a2
	lea	scrxbytes(a6),a6
	lea	(a6),a0
	dbra	d7,.yloop

.rts:	rts

.mask_tbl:
	DC.L	$ffffffff,$7fff7fff,$3fff3fff,$1fff1fff
	DC.L	$0fff0fff,$07ff07ff,$03ff03ff,$01ff01ff
	DC.L	$00ff00ff,$007f007f,$003f003f,$001f001f
	DC.L	$000f000f,$00070007,$00030003,$00010001

; Precalc those nice waveforms for the waterreflection..
; Generates a period of 32.
calc_waves:
	lea	wavetable,a0
	move.w	#80+32-1,d7

.loop:
; get src offset..
	move.w	d7,d0
	subi.w	#32,d0
	lsl.w	#6,d0
	Do_SinModulo	d0
	lea	sine_tbl+2,a1
	Get_Sin	a1,d0,d0
	asr.w	#8,d0
	asr.w	#5,d0
	addq.w	#4,d0
	mulu.w	#160,d0
	neg.l	d0
	move.l	d0,(a0)+
	dbf	d7,.loop
	rts

; Water reflection rout.
; Source is squeezed by factor of 2.
reflect:
; setup destination..
	movea.l	scr,a0
	move.w	horizon,d0
	move.w	d0,d1
	mulu.w	#160,d0
	adda.l	d0,a0
; setup source..
	lea	-160(a0),a2
; setup wave position..
	move.w	$0468.w,d0
	andi.w	#$1F,d0
	lsl.w	#2,d0
	lea	wavetable,a3
	adda.w	d0,a3
; setup height of reflected area..
	move.w	#200-1,d7
	sub.w	horizon,d7
	cmpi.w	#200,d7
	bhs.s	.end

.loop:
; get src offset..
	move.l	(a3)+,d0
	lea	(a2,d0.l),a1

; copy line..
	movem.l	(a1)+,d0-d6/a4-a6
	movem.l	d0-d6/a4-a6,(a0)
	movem.l	(a1)+,d0-d6/a4-a6
	movem.l	d0-d6/a4-a6,40(a0)
	movem.l	(a1)+,d0-d6/a4-a6
	movem.l	d0-d6/a4-a6,80(a0)
	movem.l	(a1)+,d0-d6/a4-a6
	movem.l	d0-d6/a4-a6,120(a0)

	lea	160(a0),a0			; next dst line..
	lea	-320(a2),a2			; next src line..
	dbf	d7,.loop
.end:	rts

; INPUT:
; d0.w=y start
; d1.w=height
; d2.l=screen offset
paint_greet:
	movea.l	scr,a0
	adda.l	d2,a0
	addq	#6,a0				; 3rd bitplane
	lea	greets_pic+62,a1
	mulu.w	#20,d0
	adda.l	d0,a1
	subq.w	#1,d1
.loop:
	REPT	10
	move.w	(a1)+,(a0)
	addq	#8,a0
	ENDR

; next scanline..
	lea	80(a0),a0
	dbf	d1,.loop	
	rts

clear_greet:
	movea.l	scr,a0
	adda.l	old_greetpos,a0
	addq	#6,a0				; 3rd bitplane
	move.w	old_greetsrc+2,d1
	beq.s	.end
	subq.w	#1,d1
	clr.w	d0
.loop:
	REPT	10
	move.w	d0,(a0)
	addq	#8,a0
	ENDR

; next scanline..
	lea	80(a0),a0
	dbf	d1,.loop	
.end:	rts

******** OBJECT DATA ********

	DATA

scaleoffset_tbl:
	DC.W	(.end-.start)/2-1
.start:	DC.W	1
	DC.W	2
	DC.W	4
	DC.W	8
	DC.W	12
	DC.W	16
	DC.W	24
	DC.W	32
	DC.W	40
	DC.W	48
	DC.W	56
	DC.W	64
	DC.W	80
	DC.W	96
	DC.W	112
	DC.W	128
.end:

towerpic_dat:
;	INCBIN	TOWER.FRM
	INCBIN	GATE.FRM

tower_dat:
	DC.W	64,128
	;INCBIN	...

groundpic_dat:
	;INCBIN	...

greets_pic:
	INCBIN	GREETS.IFF

greet_table:
	DC.W	(.end-.start)/2-1
.start:	DC.W	5
	DC.W	32
	DC.W	79
	DC.W	102
	DC.W	125
	DC.W	147
	DC.W	190
	DC.W	239
	DC.W	260
	DC.W	286
	DC.W	282+29
	DC.W	328+29
	DC.W	375+29
	DC.W	400+29
	DC.W	422+29
	DC.W	442+29
	DC.W	468+29
	DC.W	512+29
	DC.W	538+29
	DC.W	585+29
	DC.W	606+29
	DC.W	630+29
	DC.W	670+29
.end:

greetpos_table:
	DC.L	160*50+24
	DC.L	160*60+88
	DC.L	160*40+16
	DC.L	160*80+32
	DC.L	160*30+104
	DC.L	160*20+96
	DC.L	160*90+8
	DC.L	160*70+0
	DC.L	160*60+104
	DC.L	160*80+16
	DC.L	160*20+0
	DC.L	160*0+0
	DC.L	160*90+16
	DC.L	160*80+96
	DC.L	160*70+0
	DC.L	160*40+104
	DC.L	160*30+0
	DC.L	160*60+96
	DC.L	160*90+0
	DC.L	160*50+8
	DC.L	160*30+112
	DC.L	160*0+80

******** OBJECT RESERVES ********

	BSS

scapeheight:
	DS.W	1
scapez:	DS.W	1
scapestart466:
	DS.L	1

scape_ends:
	DS.W	1

; scaling bs, not used
towerscaleadr_tbl:
	DS.L	16

; fading crap..
scapepal:
	DS.W	16
scapefadepal:
	DS.W	16*16
scapefadedir:
	DS.W	1
scapefadepaladr:
	DS.L	1

; greets shit
greet_num:
	DS.W	1
greetpos:
	DS.L	1
old_greetpos:
	DS.L	1
greetsrc:
	DS.L	1
old_greetsrc:
	DS.L	1
greets_active:
	DS.W	1
greet_starttime:
	DS.L	1
faded_out:
	DS.W	1
faded_in:
	DS.W	1

; reflector shit
pal:	DS.W	16
refpal:	DS.W	16
reffadepal:
	DS.W	16*16
reffadepaladr:
	DS.L	1
wavetable:
	DS.L	200+32
horizon:DS.W	1
first_scale_done:
	DS.W	1

******** END OF DEMO-EFFECT OBJECT ********
