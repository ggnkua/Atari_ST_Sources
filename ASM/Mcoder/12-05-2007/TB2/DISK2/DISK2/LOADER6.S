	OPT	O+,x+
DEMO=15
ECRAN0=$F0000
ECRAN1=$F8000
PLANSCROLLER=4
PLANLOADING=6
PLANSTARS=0
SCROLLER_SPEED=2


	move	#DEMO,d0
	subq	#1,d0
	asl	#2,d0
	move.l	messages(pc,d0.w),a0
	move.l	A0,ptrmess
	move.l	A0,debutmess
	bra.S	convert
messages:
	dc.l	mess1,mess2
	dc.l	mess3,mess4
	dc.l	mess5,mess6
	dc.l	mess7,mess8
	dc.l	mess9,mess10
	dc.l	mess11,mess12
	dc.l	mess13,mess14
	dc.l	mess15
convert:
	clr	d0
	move.b	(a0),d0
	bmi.s	.fini

	lea	.alphabet,a1
.search	move.b	(a1)+,d1
	bmi.s	.space
	cmp.b	d1,d0
	bne.s	.search
	move.l	a1,d0
	sub.l	#.alphabet+1,d0
	move.b	d0,(a0)+
	bra.S	convert
.space	clr.b	(a0)+
	bra.S	convert
.alphabet
	dc.b	" ![]"
	dc.b	"'(),.:;?0123456789"
	dc.b	"ABCDEFGHIJKLMNOPQRSTUVWXYZ-"
	DC.B	-1
	EVEN
.fini
	bsr	init_stars
	BSR	INIT_PRG
	clr	shift
	clr	cptbuf

	clr.l	-(sp)
	MOVE	#$20,-(SP)
	TRAP	#1
	ADDQ	#6,SP

	move.b	$fffffa07.w,savfa07
	move.b	$fffffa09.w,savfa09
	clr.b	$fffffa07.w
	clr.b	$fffffa09.w
	move.l	$70.w,savvbl
	move.l	#vbl_vec,$70.w

	stop	#$2300
	stop	#$2300

	MOVE.B	$FFFF8260.W,SAV8260
	MOVE.L	$FFFF8200.W,SAV8200
	MOVEM.L	$FFFF8240.W,D0-D7
	MOVEM.L	D0-D7,SAVPAL

	CLR.B	$FFFF8260.W
	MOVEM.L	PALETTE,D0-D7
	MOVEM.L	D0-D7,$FFFF8240.W

	lea	ECRAN0,a0
	lea	ECRAN1,a1
	move	#32000/4-1,d0
	moveq	#0,d1
cls:	move.l	d1,(a0)+
	move.l	d1,(a1)+
	dbra	d0,cls

TEST
	cmp.b	#$f,$fffffc02.w
	bne.s	.nocpu
	move	#$555,$ffff8240.w
.nocpu
	move	sync,d0
.ww	cmp	sync,d0
	beq.s	.ww
	clr	$ffff8240.w

	BSR	replay+4
	BSR	VBL
	bsr	affiche_stars

	MOVE.L	ADR_ECRAN,D0
	LSR	#8,D0
	MOVE.L	D0,$FFFF8200.W

	EOR.L	#ECRAN0^ECRAN1,ADR_ECRAN


	CMPI.B	#$39,$FFFFFC02.W
	BNE.S	TEST

	stop	#$2300
	stop	#$2300

	MOVE.B	SAV8260,$FFFF8260.W
	MOVE.L	SAV8200,$FFFF8200.W
	MOVEM.L	SAVPAL,D0-D7
	MOVEM.L	D0-D7,$FFFF8240.W

	move.L	#$08080000,$ffff8800.w
	move.L	#$09090000,$ffff8800.w
	move.L	#$0a0a0000,$ffff8800.w

.VIDE	TST.B	$FFFFFC02.W
	MOVEQ.L	#$81,D0
	AND.B	$FFFFFC00.W,D0
	BNE.S	.VIDE

	move.l	savvbl,$70.w
	move.b	savfa07,$fffffa07.w
	move.b	savfa09,$fffffa09.w
	move.l	sp,usp
	move	#$300,sr

	illegal

	CLR	-(SP)
	TRAP	#1
vbl_vec:
	addq	#1,sync
	rte
PALETTE:
	DC.W	0
;	DCB.W	1,$007
;	DCB.W	2,$700
;	dcb.w	4,$555
;	dcb.w	4,$777
;	dcb.w	4,$333

	dcb.w	1,$455
	dcb.w	1,$677
	dcb.w	1,$233

;	DCB.W	4,$007
;	DCB.W	8,$700
	DCB.W	4,$334
	DCB.W	8,$740

savvbl:	ds.l	1
SAVPAL:	DS.W	16
SAV8200:DS.L	1
SAV8260:DS.B	1
savfa07:ds.b	1
savfa09:ds.b	1
	EVEN


RND	MACRO
	MULU	#9,D7
	ADDQ	#1,D7
	ENDM

COEF=16
PROFMAX=600
prof1=80*2*2
prof2=200*2*2

ROT:	MACRO
	DC.W	\1,-10*COEF,\3*(-COEF2),\2/16
	ENDM

nb_stars=250
deplacements:
;	dc.w	100,0,0,2
;	dc.w	300,20*COEF,30*COEF,0
;	dc.w	100,0,0,-2

	DC.W	100,20*COEF,-30*COEF,0

	DC.W	100,-20*COEF,-30*COEF,0

COEF2=30/2

	ROT	0,-2,47
	ROT	0,-3,47
	ROT	0,-6,46
	ROT	0,-8,47
	ROT	0,-10,46
	ROT	0,-13,45
	ROT	0,-15,45
	ROT	0,-17,44
	ROT	0,-19,43
	ROT	0,-21,42
	ROT	0,-23,41
	ROT	0,-25,40
	ROT	0,-27,38
	ROT	0,-29,38
	ROT	0,-31,35
	ROT	0,-33,34
	ROT	0,-34,33
	ROT	0,-35,31
	ROT	0,-38,29
	ROT	0,-38,27
	ROT	0,-40,25
	ROT	0,-41,23
	ROT	0,-42,21
	ROT	0,-43,19
	ROT	0,-44,17
	ROT	0,-45,15
	ROT	0,-45,13
	ROT	0,-46,10
	ROT	0,-47,8
	ROT	0,-46,6
	ROT	0,-47,3
	ROT	0,-47,2
	ROT	0,-48,-2
	ROT	0,-47,-3
	ROT	0,-46,-6
	ROT	0,-47,-8
	ROT	0,-46,-10
	ROT	0,-45,-13
	ROT	0,-45,-15
	ROT	0,-44,-17
	ROT	0,-43,-19
	ROT	0,-42,-21
	ROT	0,-41,-23
	ROT	0,-40,-25
	ROT	0,-38,-27
	ROT	0,-38,-29
	ROT	0,-35,-31
	ROT	0,-34,-33
	ROT	0,-33,-34
	ROT	0,-31,-35
	ROT	0,-29,-38
	ROT	0,-27,-38
	ROT	0,-25,-40
	ROT	0,-23,-41
	ROT	0,-21,-42
	ROT	0,-19,-43
	ROT	0,-17,-44
	ROT	0,-15,-45
	ROT	0,-13,-45
	ROT	0,-10,-46
	ROT	0,-8,-47
	ROT	0,-6,-46
	ROT	0,-3,-47
	ROT	0,-1,-47
	ROT	0,1,-48
	ROT	0,3,-47
	ROT	0,6,-46
	ROT	0,8,-47
	ROT	0,10,-46
	ROT	0,13,-45
	ROT	0,15,-45
	ROT	0,17,-44
	ROT	0,19,-43
	ROT	0,21,-42
	ROT	0,23,-41
	ROT	0,25,-40
	ROT	0,27,-38
	ROT	0,29,-38
	ROT	0,31,-35
	ROT	0,33,-34
	ROT	0,34,-33
	ROT	0,35,-31
	ROT	0,38,-29
	ROT	0,38,-27
	ROT	0,40,-25
	ROT	0,41,-23
	ROT	0,42,-21
	ROT	0,43,-19
	ROT	0,44,-17
	ROT	0,45,-15
	ROT	0,45,-13
	ROT	0,46,-10
	ROT	0,47,-8
	ROT	0,46,-6
	ROT	0,47,-3
	ROT	0,47,-1
	ROT	0,48,1
	ROT	0,47,3
	ROT	0,46,6
	ROT	0,47,8
	ROT	0,46,10
	ROT	0,45,13
	ROT	0,45,15
	ROT	0,44,17
	ROT	0,43,19
	ROT	0,42,21
	ROT	0,41,23
	ROT	0,40,25
	ROT	0,38,27
	ROT	0,38,29
	ROT	0,35,31
	ROT	0,34,33
	ROT	0,33,34
	ROT	0,31,35
	ROT	0,29,38
	ROT	0,27,38
	ROT	0,25,40
	ROT	0,23,41
	ROT	0,21,42
	ROT	0,19,43
	ROT	0,17,44
	ROT	0,15,45
	ROT	0,13,45
	ROT	0,10,46
	ROT	0,8,47
	ROT	0,6,46
	ROT	0,3,47
	ROT	0,2,48


	IFEQ	1
	dc.w	100,20*COEF,30*COEF,0


	ROT	0,-2,47
	ROT	0,-3,47
	ROT	0,-6,46
	ROT	0,-8,47
	ROT	0,-10,46
	ROT	0,-13,45
	ROT	0,-15,45
	ROT	0,-17,44
	ROT	0,-19,43
	ROT	0,-21,42
	ROT	0,-23,41
	ROT	0,-25,40
	ROT	0,-27,38
	ROT	0,-29,38
	ROT	0,-31,35
	ROT	0,-33,34
	ROT	0,-34,33
	ROT	0,-35,31
	ROT	0,-38,29
	ROT	0,-38,27
	ROT	0,-40,25
	ROT	0,-41,23
	ROT	0,-42,21
	ROT	0,-43,19
	ROT	0,-44,17
	ROT	0,-45,15
	ROT	0,-45,13
	ROT	0,-46,10
	ROT	0,-47,8
	ROT	0,-46,6
	ROT	0,-47,3
	ROT	0,-47,2
	ROT	0,-48,-2
	ROT	0,-47,-3
	ROT	0,-46,-6
	ROT	0,-47,-8
	ROT	0,-46,-10
	ROT	0,-45,-13
	ROT	0,-45,-15
	ROT	0,-44,-17
	ROT	0,-43,-19
	ROT	0,-42,-21
	ROT	0,-41,-23
	ROT	0,-40,-25
	ROT	0,-38,-27
	ROT	0,-38,-29
	ROT	0,-35,-31
	ROT	0,-34,-33
	ROT	0,-33,-34
	ROT	0,-31,-35
	ROT	0,-29,-38
	ROT	0,-27,-38
	ROT	0,-25,-40
	ROT	0,-23,-41
	ROT	0,-21,-42
	ROT	0,-19,-43
	ROT	0,-17,-44
	ROT	0,-15,-45
	ROT	0,-13,-45
	ROT	0,-10,-46
	ROT	0,-8,-47
	ROT	0,-6,-46
	ROT	0,-3,-47
	ROT	0,-1,-47
	ROT	0,1,-48
	ROT	0,3,-47
	ROT	0,6,-46
	ROT	0,8,-47
	ROT	0,10,-46
	ROT	0,13,-45
	ROT	0,15,-45
	ROT	0,17,-44
	ROT	0,19,-43
	ROT	0,21,-42
	ROT	0,23,-41
	ROT	0,25,-40
	ROT	0,27,-38
	ROT	0,29,-38
	ROT	0,31,-35
	ROT	0,33,-34
	ROT	0,34,-33
	ROT	0,35,-31
	ROT	0,38,-29
	ROT	0,38,-27
	ROT	0,40,-25
	ROT	0,41,-23
	ROT	0,42,-21
	ROT	0,43,-19
	ROT	0,44,-17
	ROT	0,45,-15
	ROT	0,45,-13
	ROT	0,46,-10
	ROT	0,47,-8
	ROT	0,46,-6
	ROT	0,47,-3
	ROT	0,47,-1
	ROT	0,48,1
	ROT	0,47,3
	ROT	0,46,6
	ROT	0,47,8
	ROT	0,46,10
	ROT	0,45,13
	ROT	0,45,15
	ROT	0,44,17
	ROT	0,43,19
	ROT	0,42,21
	ROT	0,41,23
	ROT	0,40,25
	ROT	0,38,27
	ROT	0,38,29
	ROT	0,35,31
	ROT	0,34,33
	ROT	0,33,34
	ROT	0,31,35
	ROT	0,29,38
	ROT	0,27,38
	ROT	0,25,40
	ROT	0,23,41
	ROT	0,21,42
	ROT	0,19,43
	ROT	0,17,44
	ROT	0,15,45
	ROT	0,13,45
	ROT	0,10,46
	ROT	0,8,47
	ROT	0,6,46
	ROT	0,3,47
	ROT	0,2,48
	ENDC

fin_deplacements:


init_stars:
	lea	stars,a0
	moveq	#0,d7		;RND
	move	#nb_stars-1,d6
.init
	RND
	move	d7,(a0)+	;X
	RND
	move	d7,(a0)+	;Y

	RND
	MOVE	D7,D0
	BPL.S	1$
	NEG	D0
	AND	#511,D0
	NEG	D0
	BRA.S	2$
1$
	AND	#511,D0
2$
	move	d0,(a0)+	;Z
	dbra	d6,.init

	LEA	PREDIV,A0
	MOVEQ	#1,D7
.NEXT
	MOVE.L	#$7FFF,D0
	DIVS	D7,D0
	MOVE	D0,(A0)+

	ADDQ	#1,D7
	CMP	#PROFMAX,D7
	BLO.S	.NEXT
	CLR	push1
	CLR	push2			;nb points
	MOVE.L	#push1,push_stars
	clr	cptdep
	move.l	#deplacements,ptrdep
	rts

affiche_stars:
	tst	cptdep
	bne.s	.cont
	move.l	ptrdep,a0
	move	(a0)+,cptdep
	move	(a0)+,xdep
	move	(a0)+,ydep
	move	(a0)+,zdep
	cmp.l	#fin_deplacements,a0
	blo.s	.ok
	lea	deplacements,a0
.ok
	move.l	a0,ptrdep
	bra.s	.cont2
.cont	subq	#1,cptdep
.cont2
	move.l	push_stars,a4
	moveq	#0,d0
	move.l	ADR_ECRAN,a6
	IFNE	PLANSTARS
	addq	#PLANSTARS,a6
	ENDC
	move	(a4)+,d7		;nb points
	lsr	#1,d7
	bcc.s	.eff0
	move	(a4)+,d1
	move	d0,(a6,d1.w)
.eff0
	lsr	#1,d7
	bcc.s	.eff1
	move	(a4)+,d1
	move	d0,(a6,d1.w)
	move	(a4)+,d1
	move	d0,(a6,d1.w)
.eff1
	lsr	#1,d7
	bcc.s	.eff2
	movem	(a4)+,d1/d2/d3/d4
	move	d0,(a6,d1.w)
	move	d0,(a6,d2.w)
	move	d0,(a6,d3.w)
	move	d0,(a6,d4.w)
.eff2
	subq	#1,d7
	bmi.s	.fini
.loopeff
	movem	(a4)+,d1/d2/d3/d4/d5/d6/a0/a1
	move	d0,(a6,d1.w)
	move	d0,(a6,d2.w)
	move	d0,(a6,d3.w)
	move	d0,(a6,d4.w)
	move	d0,(a6,d5.w)
	move	d0,(a6,d6.w)
	move	d0,(a6,a0.w)
	move	d0,(a6,a1.w)
	dbra	d7,.loopeff
.fini

	move.l	push_stars,a4
	addq	#2,a4
	lea	stars,a6
	move.l	ADR_ECRAN,a5
	IFNE	PLANSTARS
	addq	#PLANSTARS,a5
	ENDC
	LEA	PREDIV,A3
	move	xdep,d4
	move	ydep,d5
	move	zdep,d6
	move	#PROFMAX,a2
	LEA	MUL160,A1


PLOT	MACRO
	movem	(a6)+,d0-d2	;d0=X,d1=Y,d2=Z
	add	d4,d0
	add	d5,d1
	add	d6,d2
	movem	d0-d2,-6(a6)

	CMP	a2,D2
	BHS.S	.noproj\@

	ADD	D2,D2
	MOVE	(A3,D2.W),D3
	MULS	D3,D0
	MULS	D3,D1
	ADD.L	D0,D0
	ADD.L	D1,D1
	SWAP	D0
	SWAP	D1

	add	#160,d0
	add	#100,d1
	cmp	#320,d0
	bhs.s	.noproj\@
	cmp	#200,d1
	bhs.s	.noproj\@

	moveq	#15,d3
	eor	d3,d0
	and	d0,d3
	eor	d3,d0
	lsr	#1,d0

	ADD	D1,D1
	ADD	(A1,D1.W),D0

	clr	d1
	bset	d3,d1
	cmp	#prof1,d2
	ble.s	.proj1\@
	cmp	#prof2,d2
	ble.s	.proj2\@
	or	d1,(a5,d0.w)
	move	d0,(a4)+
.proj1\@
	addq	#2,d0
.proj2\@
	or	d1,(a5,d0.w)
	move	d0,(a4)+
.noproj\@
	ENDM

	move	#nb_stars/10-1,d7
.aff
	rept	10
	PLOT
	endr
	dbra	d7,.aff

	move.l	push_stars,a0
	move.l	a4,d0
	sub.l	a0,d0
	lsr	#1,d0
	subq	#1,d0
	move	d0,(a0)

	lea	push1,a0
	move.l	push_stars,a4
	cmp.l	a0,a4
	bne.s	.comm
	lea	push2,a0
.comm	move.l	a0,push_stars
	rts

INIT_PRG:
	lea	music(pc),a0
	moveq	#1,d0
	bsr	replay

*	GENERATION DU CODE EFFACANT LA SURFACE AFFICHEE

	MOVE	#5*160,D4
	LEA	CLS_SCREEN(PC),A1
	LEA	CODE,A2

	MOVE	#200-10-1,D7
BC_LIGNE2
	MOVEQ	#0,D0
	MOVE.B	(A1)+,D0

	moveq	#$f,d2
	and	d0,d2		;longueur
	eor	d2,d0		;coordonn‚e
	LSR	#1,D0
	add	D4,D0

BC_DEPACK
	MOVE	#$3140,(A2)+	;MOVE D0,D16(A0)
	MOVE	D0,(A2)+	;OFFSET
	ADDQ	#8,D0
	DBRA	D2,BC_DEPACK
	ADD	#160,D4
	DBRA	D7,BC_LIGNE2
	MOVE	#$4E75,(A2)+	;RTS DE FIN

*	COPIE DE LA TABLE DE COORDONNEE
;	LEA	TABLE_COORD(PC),A0
;	LEA	FIN_TABLE_COORD(PC),A1
;	MOVE	#1279,D0
;.BC_COPY
;	MOVE.L	(A0)+,(A1)+
;	DBRA	D0,.BC_COPY

	LEA	TABLE_COORD(PC),A0
	LEA	FIN_TABLE_COORD(PC),A1
	CLR	D0
	CLR	D1
	move	#5120/4-1,d7
.depk
	ADD.B	(A0)+,D0
	ADD.B	(A0)+,D1
	EXT	D0
	EXT	D1
	MOVE	D0,(A1)+
	MOVE	D1,(A1)+
	dbra	d7,.depk

	LEA	FIN_TABLE_COORD(PC),A0
	LEA	TABLE_COORD(PC),A1
	MOVE	#5120/4-1,D0
.COPY	MOVE.L	(A0)+,(A1)+
	DBRA	D0,.COPY

	*GENERATION DU CODE ET DE LA TABLE POUR LE TRACE DE LIGNE
*LIGNE NORMALE

	LEA	DRTX(PC),A0
	LEA	DRTY,A2
	LEA	DRT45(PC),A4
	LEA	TABLE_JMP_X(PC),A1
	LEA	TABLE_JMP_Y(PC),A3
	LEA	TABLE_JMP_45(PC),A5
	MOVE	#$8000,D0		;DECALAGE

	MOVEQ	#19,D7
BC_BLOC
BC_PIXEL
	MOVE	#$0050,(A0)+	OR #$XXXX,(A0)
	MOVE	D0,(A0)+
	MOVE.L	A0,(A1)+
	MOVE	#$D845,(A0)+	ADD D5,D4
	MOVE	#$6402,(A0)+	BCC.S PC+2
	MOVE	#$D0C6,(A0)+	ADD D6,A0

	MOVE	#$0050,(A2)+	OR #$XXXX,(A0)
	MOVE	D0,(A2)+
	MOVE	#$D0C6,(A2)+	ADD D6,A0
	MOVE	#$DA44,(A2)+	ADD D4,D5
	MOVE	#$64F6,(A2)+	BCC.S PC-8
	MOVE.L	A2,(A3)+

	MOVE	#$0050,(A4)+	OR #$XXXX,(A0)
	MOVE	D0,(A4)+
	MOVE.L	A4,(A5)+
	MOVE	#$D0C6,(A4)+	ADD D6,A0

	ROR	#1,D0
	bcc.S	BC_PIXEL

	MOVE	#$5048,(A0)+	ADDQ #8,A0
	MOVE	#$5048,(A2)+
	MOVE	#$5048,(A4)+
	DBRA	D7,BC_BLOC

*LIGNE COURTE
	LEA	DRTX_CRT,A0
	LEA	TABLE_JMP_X_CRT,A1

	MOVEQ	#19,D7
BC_BLOC2

BC_PIXEL2
	MOVE	#$0050,(A0)+	OR	#$XXXX,(A0)
	MOVE	D0,(A0)+
	MOVE.L	A0,(A1)+
	MOVE	#$9845,(A0)+	SUB	D5,D4
	MOVE	#$6A04,(A0)+	BPL.S	PC+4
	MOVE	#$D0C6,(A0)+	ADD	D6,A0
	MOVE	#$D843,(A0)+	ADD	D3,D4

	ROR	#1,D0
	bcc.S	BC_PIXEL2
	MOVE	#$5048,(A0)+	ADDQ	#8,A0
	DBRA	D7,BC_BLOC2
	RTS

*DEBUT DE LA ROUTINE D'AFFICHAGE

VBL
	bsr	scroller
	MOVE.L	ADR_ECRAN(PC),A0
	IFNE	PLANLOADING
	ADDQ	#PLANLOADING,A0
	ENDC
	MOVEQ	#0,D0
;	subq	#2,a0
;	MOVEQ	#-1,D0
	JSR	CODE		;EFFACE L'ECRAN

	LEA	TABLE_COORD,A1
	ADD	OFFSET(PC),A1
	SUB	#40,OFFSET
;	CMP	#5120,OFFSET
;	BLO.S	OK_OFFSET
	BHS.S	OK_OFFSET
	ADD	#5120,OFFSET
OK_OFFSET

	MOVE	COEFF1,D0
	MOVE	COEFF2,D1
	MULS	COEFF_TOT,D0
	MULS	COEFF_TOT,D1
	MOVE	D0,COEFF1_FLAG
	MOVE	D1,COEFF2_FLAG

	LEA	OPTIM1,A0
	MOVEQ	#(FINOPTIM1-OPTIM1)/2-1,D7	;NB POINTS A PROJETER
	LEA	PROJETE,A6
	MOVE	#100,A3
	MOVE	#160,A4

	MOVE	COEFF1_FLAG(PC),D2
	MOVE	COEFF2_FLAG(PC),D3
.PROJ
	MOVE	(A0)+,D0
	MOVEM	(A1,D0),D0/D1

	MULS	D2,D0
	MULS	D3,D1

	ADD.L	D0,D0
	ADD.L	D1,D1
	SWAP	D0
	SWAP	D1

	ADD	A4,D0
	ADD	A3,D1
	MOVE	D0,(A6)+
	MOVE	D1,(A6)+

	DBRA	D7,.PROJ

	MOVE.L	ADR_ECRAN(PC),A0
	IFNE	PLANLOADING
	ADDQ	#PLANLOADING,A0
	ENDC
	MOVE.L	A0,USP
	LEA	PTS1,A2
	LEA	PROJETE,A1
	MOVEQ	#(FINPTS1-PTS1)/4-1,D7		;58 VECTEURS A AFFICHER
BC_VECTEURS
	MOVE	(A2)+,D0
	MOVEM	(A1,D0),D0/D2
	MOVE	(A2)+,D1
	MOVEM	(A1,D1),D1/D3
	BSR	LINE
	DBRA	D7,BC_VECTEURS

*	NOT	$FFFF8240.W
	BSR.S	DEF_X
	BSR	DEF_Y
*	NOT	$FFFF8240.W

	CMPI.B	#$3B,$FFFFFC02.W
	BNE.S	PAS_F1
	ADDQ	#1,COEFF_TOT
	CMP	#127,COEFF_TOT
	BGT.S	.CTOT
	RTS
.CTOT	MOVE	#127,COEFF_TOT
	RTS
PAS_F1	CMPI.B	#$3C,$FFFFFC02.W
	BNE.S	PAS_F2
	SUBQ	#1,COEFF_TOT
	BMI.S	.CTOT
	RTS
.CTOT	CLR	COEFF_TOT
PAS_F2	RTS

DEF_X	TST.B	MOUVEMENT1
	BNE.S	MVT1_2
MVT1_1	ADDQ	#2,COEFF1
	CMP	#257,COEFF1
	BGE.S	OK_MVT1_1
	RTS
OK_MVT1_1	NOT.B	MOUVEMENT1
	MOVE	#256,COEFF1
	RTS
MVT1_2	SUBQ	#2,COEFF1
	CMP	#-257,COEFF1
	BLE.S	OK_MVT1_2
	RTS
OK_MVT1_2	NOT.B	MOUVEMENT1
	MOVE	#-256,COEFF1
	RTS


DEF_Y	TST.B	MOUVEMENT2
	BNE.S	MVT2_2
MVT2_1	ADDQ	#1,COEFF2
	CMP	#257,COEFF2
	BGE.S	OK_MVT2_1
	RTS
OK_MVT2_1	NOT.B	MOUVEMENT2
	MOVE	#256,COEFF2
	RTS
MVT2_2	SUBQ	#1,COEFF2
	CMP	#-257,COEFF2
	BLE.S	OK_MVT2_2
	RTS
OK_MVT2_2	NOT.B	MOUVEMENT2
	MOVE	#-256,COEFF2
	RTS

ADR_ECRAN	DC.L	ECRAN0
OFFSET		DC.W	0
COEFF1		DC.W	256
COEFF2		DC.W	256
COEFF_TOT	DC.W	0    <=COEFF. D'AGRANDISSEMENT SUR 7 BITS
COEFF1_FLAG	DC.W	0
COEFF2_FLAG	DC.W	0
MOUVEMENT1	DC.B	0
MOUVEMENT2	DC.B	-1

LINE
	MOVEQ	#0,D4
	MOVEQ	#0,D5

	CMP	D0,D1
	BGT.S	OK_SENS1
	EXG	D0,D1
	EXG	D2,D3
OK_SENS1
	MOVEQ	#-16,D6
	AND	D0,D6
	LSR	#1,D6
	MOVE.L	USP,A0
	ADD	D6,A0

	MOVE	D2,D6
	ADD	D6,D6
	ADD	MUL160(PC,D6),A0

	MOVE	#160,D6

	MOVE	D3,D5
	SUB	D2,D5	;Y
	BPL.S	OK_SENS2
	NEG	D5
	NEG	D6
OK_SENS2
	BEQ.S	DROITE_HORIZONTALE

	MOVE	D1,D4
	SUB	D0,D4	;X
	BEQ	DROITE_VERTICALE

	CMP	D4,D5
	BEQ	DROITE_45
	BGT	DROITE_Y

DROITE_X
	CMP	#20,D5
	BLE	DRT_X_CRT		;ALG. DE BRESENHAM

	ADDQ	#1,D5
	CMP.W	D4,D5
	BNE.S	OK_X
	SUBQ	#1,D5
OK_X	SWAP	D5
	DIVU	D4,D5
DROITE_HORIZONTALE
	LEA	TABLE_JMP_X(PC),A5
	ADD	D1,D1	;XB
	ADD	D1,D1
	MOVE.L	(A5,D1),A6
	MOVE	#$4E75,(A6)

	ADD	D0,D0	;XA
	ADD	D0,D0
	MOVE.L	(A5,D0),A5
	MOVEQ	#0,D4
	JSR	-4(A5)
	MOVE	#$D845,(A6)
	RTS

MUL160
A	SET	0
	REPT	200
	DC.W	A
A	SET	A+160
	ENDR

DROITE_45	LEA	TABLE_JMP_45(PC),A5

	ADD	D1,D1	;XB
	ADD	D1,D1
	MOVE.L	(A5,D1),A6
	MOVE	#$4E75,(A6)

	ADD	D0,D0	;XA
	ADD	D0,D0
	MOVE.L	(A5,D0),A5
	JSR	-4(A5)
	MOVE	#$D0C6,(A6)
	RTS

*AFFICHAGE DE LA DROITE DE COMPOSANTE EN Y

DROITE_Y
	ADDQ	#1,D4
	CMP.W	D4,D5
	BNE.S	OK_Y
	SUBQ	#1,D4
OK_Y	SWAP	D4
	DIVU	D5,D4

	LEA	TABLE_JMP_Y(PC),A5

	ADD	D1,D1	;XB
	ADD	D1,D1
	MOVE.L	(A5,D1),A6
	MOVE	(A6),D1
	MOVE	#$4E75,(A6)

	ADD	D0,D0	;XA
	ADD	D0,D0
	MOVE.L	(A5,D0),A5
	MOVEQ	#0,D5
	JSR	-10(A5)
	MOVE	D1,(A6)
	RTS

DROITE_VERTICALE
	MOVEQ	#$F,D1
	EOR	D1,D0
	AND	D0,D1
	CLR	D0
	BSET	D1,D0
;	AND	#$F,D0
;	ADD	D0,D0
;	MOVE	TABLE_DECALAGE(PC,D0),D0
	OR	D0,(A0)
	DBRA	D5,BC_AFFICHE_VERTICALE
	RTS
BC_AFFICHE_VERTICALE
	ADD	D6,A0
	OR	D0,(A0)
	DBRA	D5,BC_AFFICHE_VERTICALE
	RTS

;TABLE_DECALAGE
;	DC.W	$8000,$4000,$2000,$1000
;	DC.W	$0800,$0400,$0200,$0100
;	DC.W	$0080,$0040,$0020,$0010
;	DC.W	$0008,$0004,$0002,$0001

;ALGO. DE BRESENHAM
DRT_X_CRT	LEA	TABLE_JMP_X_CRT(PC),A5
	ADD	D1,D1	;XB
	ADD	D1,D1
	MOVE.L	(A5,D1),A6
	MOVE	#$4E75,(A6)

	ADD	D0,D0	;XA
	ADD	D0,D0
	MOVE.L	(A5,D0),A5
	MOVE	D4,D3
	JSR	-4(A5)
	MOVE	#$9845,(A6)
	RTS
;
; SCROLLER 8*8 MINIMUM
;
scroller
	move	shift,d7
	lea	buffer,a0
	move	d7,d0
	mulu	#8*40*2/SCROLLER_SPEED,d0
	add	d0,a0
	add	cptbuf,a0

	move.l	ADR_ECRAN,a1
	lea	192*160+PLANSCROLLER(a1),a1
	moveq	#8-1,d0
afflig:
	rept	20
	move.b	(a0)+,(a1)+
	move.b	(a0)+,(a1)+
	addq	#8-2,a1
	endr
	lea	40(a0),a0
	dbra	d0,afflig

	move.l	ptrmess,a6
	clr	d0
	move.b	(a6)+,d0
	asl	#3,d0
	lea	fonte,a4
	add	d0,a4		;a4=caractŠre … gauche

	clr	d0
	lea	fonte,a5
	move.b	(a6),d0
	bpl.s	.ok
	move.l	debutmess,a6
	move.b	(a6),d0
.ok
	asl	#3,d0
	add	d0,a5		;a5=caractŠre … droite

	move	shift,d7
	lea	buffer,a0
	move	d7,d0
	mulu	#8*40*2/SCROLLER_SPEED,d0
	add	d0,a0
	add	cptbuf,a0

x	set	0
y	set	0
	rept	8
	movep	x(a5),d0
	move.b	(a4)+,d0
	rol	d7,d0
	move.b	d0,y(a0)
	move.b	d0,y+40(a0)
x	set	x+1
y	set	y+80
	endr

	addq	#SCROLLER_SPEED,shift
	and	#7,shift
	bne.s	no16

	move.l	a6,ptrmess

	addq	#1,cptbuf
	cmp	#40,cptbuf
	blo.s	no16
	clr	cptbuf
no16:
	rts

mess1:
	DC.B	"              PLEASE WAIT A WHILE, I'M LOADING AND DEPACKING THE MAIN-MENU. "
	DC.B	"PRESS THE SPACE BAR WHEN [LOADED] APPEARS. "
	DC.B	"THIS LITTLE LOADER-SCREEN HAS BEEN "
	DC.B	"CODED AND DESIGNED BY XERCES (FROM [GENESIS]) "
	DC.B	"AND MCODER (FROM [THE LONELY CODER]), AND THE MUSIC IS "
	DC.B	"FROM MADMAX. "
	DC.B	"OTHER CREDITS : THE INTRODUCTION SCREEN WAS CODED BY TERENCE (FROM [THE PENDRAGONS]), "
	DC.B	"GRAPHICS BY THE SERGEANT (FROM [THE BUSHWACKERS]) AND BY KRAZY REX (FROM [ST CONNEXION]) "
	DC.B	"AND MUSIC BY THE BIG ALEC "
	DC.B	"(FROM [OFF-BEAT]). THE MAIN-MENU WAS MADE BY THE OVERLANDERS, READ ITS SCROLLER "
	DC.B	"FOR MORE INFORMATIONS... "
	DC.B	"ALL THE SCROLLERS IN THE LOADER WERE WRITTEN BY MCODER "
	DC.B	"AND INVOLVE ONLY ME (I'M REFERING TO THE FACT THAT I KNOW "
	DC.B	"ONLY A FEW GROUPS WHO PARTICIPATED IN THIS DISK...). "
	DC.B	-1
mess2:
	DC.B	"              PLEASE WAIT A WHILE, I'M LOADING AND DEPACKING THE EQUINOX SCREEN. "
	DC.B	"PRESS THE SPACE BAR WHEN [LOADED] APPEARS. "
	DC.B	"THIS SCREEN WAS CODED IN ONE NIGHT WHILE THE WHOLE TEAM "
	DC.B	"WAS COMPLETELY DRUNK !!! "
	DC.B	"WE ARE LOOKING FOR THEIR LONG-AWAITED-SOON-FINISHED MEGA-DEMO "
	DC.B	"(CALLED [THE VODKA DEMO] -GUESS WHY-) "
	DC.B	"WHICH ALREADY FEATURES SOME REALLY IMPRESSIVE SCREENS...     "
	DC.B	"HEY GUYS, WHAT ABOUT YOUR 3D SCREEN ?"
	DC.B	-1

mess3:
	DC.B	"              PLEASE WAIT A WHILE, I'M LOADING AND DEPACKING THE ART OF CODE SCREEN NUMBER 1. "
	DC.B	"PRESS THE SPACE BAR WHEN [LOADED] APPEARS. "
	DC.B	"THIS GROUP SIGNS HERE THEIR FIRST APPEARANCE IN A MEGADEMO WITH AN ORIGINAL SCREEN "
	DC.B	"CALLED KNUCKLE BUSTER 2 (EXCUSE ME FOR MY BEHAVIOUR AT THE TRANS 2 BUT I WAS SO UPSET). "
	DC.B	"ORIGINAL BUT FUCKING SCREEN COZ I SCRATCHED MY HARD-DISK AND 3 OF MY DISKS "
	DC.B	"WHILE TRYING TO COPY IT !!! I SUSPECT THEY DID IT ON PURPOSE. "
	DC.B	"NO, I'M NOT PARANOIAC, NO, NO, NOT THE CAMISOLE, NOOOOOOOOOO..."
	DC.B	-1

mess4:
	DC.B	"              PLEASE WAIT A WHILE, I'M LOADING AND DEPACKING THE ART OF CODE SCREEN NUMBER 2. "
	DC.B	"PRESS THE SPACE BAR WHEN [LOADED] APPEARS. "
	DC.B	"REBELOTE, A NEW SCREEN FROM ART OF CODE WHICH WAS THE MOST PRODUCTIVE GROUP AT THIS PARTY "
	DC.B	"AFTER MCODER -ME- AND THE PENDRAGONS (BUT WE ARE VERY EXPENSIVE. AH, AH). "
	DC.B	-1

mess5:
	DC.B	"              PLEASE WAIT A WHILE, I'M LOADING AND DEPACKING THE MCS SCREEN. "
	DC.B	"PRESS THE SPACE BAR WHEN [LOADED] APPEARS. "
	DC.B	"MCS HAS WON SOMETHING AT THE TRANSBEAUCE 2 : ONE OF THEIR CODER WON THE DRINK COMPETITION "
	DC.B	"AGAINST EQUINOX !!! HE HAS EXPLODED STARLION AT VODKA'S ABSORPTION !!! "
	DC.B	"HE WAS THE FUCKING BEST DRINKER AT THIS DEMO-PARTY (ALTHOUGH HE'S NOT REPRESENTATIVE OF THIS GROUP). "
	DC.B	"SORRY, GUY, BUT YOUR SCREEN WAS TOO BIG AND DIDN'T WORK ON MY SHIFTERS "
	DC.B	"(OTHERWISE, MCS COULD HAVE 2 SCREENS IN THE DEMO)."
	DC.B	-1

mess6:
	DC.B	"              PLEASE WAIT A WHILE, I'M LOADING AND DEPACKING THE BLACK CATS SCREEN. "
	DC.B	"PRESS THE SPACE BAR WHEN [LOADED] APPEARS. "

	DC.B	"GOOD SURPRISE WITH THIS SCREEN WHICH WON A PRIZE. "
	DC.B	"SORRY, THE SCREEN COULDN'T RUN ON THE FIRST DISK BECAUSE OF ITS LENGTH. "
	DC.B	"THE SECOND PART OF THE DEMO IS A GREAT IDEA BASED UPON THE GRAPHICS OF GOTLIB. "
	DC.B	"FOR THE STRANGERS, GOTLIB IS A FRENCH DESIGNER WHICH IS WELL KNOWN "
	DC.B	"AND APPRECIATED FOR HIS [FRENCH] HUMOUR."
	DC.B	-1
mess7:
	DC.B	"              PLEASE WAIT A WHILE, I'M LOADING AND DEPACKING THE ARTIS MAGIA SCREEN. "
	DC.B	"PRESS THE SPACE BAR WHEN [LOADED] APPEARS. "
	DC.B	"READ THE SCROLL FOR MORE INFORMATIONS."
	DC.B	-1
mess8:
	DC.B	"              PLEASE WAIT A WHILE, I'M LOADING AND DEPACKING THE CYBERNETICS SCREEN. "
	DC.B	"PRESS THE SPACE BAR WHEN [LOADED] APPEARS. "
	DC.B	"A COOL SCREEN FROM A NEW GROUP (TO MY KNOWLEDGE)."
	DC.B	-1
mess9:
	DC.B	"              PLEASE WAIT A WHILE, I'M LOADING AND DEPACKING THE DEFCON 4 SCREEN. "
	DC.B	"PRESS THE SPACE BAR WHEN [LOADED] APPEARS. "
	DC.B	"NICE SCREEN. READ THE SCROLL FOR MORE INFORMATIONS. "
	DC.B	-1
mess10:
	DC.B	"              PLEASE WAIT A WHILE, I'M LOADING AND DEPACKING THE HOLOCAUST SCREEN. "
	DC.B	"PRESS THE SPACE BAR WHEN [LOADED] APPEARS. "
	DC.B	"A DEMO CALLED [ORIGINAL DEMO], I WOULD LIKE TO KNOW WHY..."
	DC.B	-1

mess11:
	DC.B	"              PLEASE WAIT A WHILE, I'M LOADING AND DEPACKING THE SILVERS SCREEN. "
	DC.B	"PRESS THE SPACE BAR WHEN [LOADED] APPEARS. "
	DC.B	"THEIR SECOND PARTICIPATION TO A MEGADEMO (AFTER THE EUROPEAN DEMOS)."
	DC.B	-1
mess12:
	DC.B	"              PLEASE WAIT A WHILE, I'M LOADING AND DEPACKING THE MISFITS SCREEN. "
	DC.B	"PRESS THE SPACE BAR WHEN [LOADED] APPEARS. "
	DC.B	"READ THE SCROLL FOR MORE INFORMATIONS."
	DC.B	-1

mess13:
	DC.B	"              PLEASE WAIT A WHILE, I'M LOADING AND DEPACKING THE TSB SCREEN. "
	DC.B	"PRESS THE SPACE BAR WHEN [LOADED] APPEARS. "
	DC.B	"WHAT MEANS TSB ??? "
	DC.B	"READ THE SCROLLS FOR MORE INFORMATIONS."
	DC.B	-1

mess14:
	DC.B	"              PLEASE WAIT A WHILE, I'M LOADING AND DEPACKING THE MEGABUSTERS SCREEN. "
	DC.B	"PRESS THE SPACE BAR WHEN [LOADED] APPEARS. "
	DC.B	"THEIR DEMO IS CALLED [UTS]. IF YOU WANT TO KNOW WHY, "
	DC.B	"READ THE SCROLL."

mess15:
	DC.B	"              PLEASE WAIT A WHILE, I'M LOADING AND DEPACKING THE VOYAGERS SCREEN. "
	DC.B	"PRESS THE SPACE BAR WHEN [LOADED] APPEARS. "
	DC.B	"THE REAL NAME OF THIS GROUP IS [THE VOYAGERS FROM ENIGMA]. "
	DC.B	"READ THE SCROLL FOR MORE INFORMATIONS."
	DC.B	-1

	even
fonte:	incbin	newfnt8.bin
	DC.B	0,0,0,%1111100,0,0,0,0

***	TABLES DES VECTEURS	:
***		TOUT LES VECTEURS NON VERTICAUX SONT
***		DECOUPES EN PETIT MORCEAUX POUR DONNER
***		UN EFFET D'ARRONDI
***		A LA RIGUEUR ON PEUT LES SUPPRIMER POUR
***		GAGNER DU TEMPS, MAIS ON PERDRA BEAUCOUP
***		EN BEAUTE (VOIR LE <L> OU ENCORE LE <N>)


OPTIM	DC.W	$3C,$10,$60,$B0
	DC.W	$100,$150,$194,$19C
	DC.W	$1F0,$240,$290,$2DC
	DC.W	$2D4,$280,$230,$1E0
	DC.W	$324,$330,$464,$470
	DC.W	$328,$378,$3C8,$418
	DC.W	$468,$370,$3C0,$410
	DC.W	$4B0,$4C0,$510,$560
	DC.W	$5B0,$5FC,$5F4,$5A0
	DC.W	$550,$500,$690,$6E0
	DC.W	$730,$6F0,$6A0,$740
	DC.W	$7D0,$7E0,$824,$878
	DC.W	$8CC,$920,$910,$AA4
	DC.W	$A50,$A00,$9B0,$964
	DC.W	$96C,$9C0,$A10,$A60
	DC.W	$AAC,$AA8,$A58,$A08
FINOPTIM:

PTS	DC.W	0,4,4,8
	DC.W	8,$C,$C,$10
	DC.W	$10,$14,$18,$1C
	DC.W	$1C,$20,$20,$24
	DC.W	$24,$28,$28,$2C
	DC.W	$2C,$30,$30,$34
	DC.W	$34,$38,$38,$3C
	DC.W	$3C,$18,$40,$44
	DC.W	$48,$4C,$50,$54
	DC.W	$54,$58,$58,$5C
	DC.W	$5C,$60,$40,$64
	DC.W	$64,$68,$68,$6C
	DC.W	$6C,$48,$70,$74
	DC.W	$74,$78,$78,$7C
	DC.W	$7C,$80,$80,$84
	DC.W	$84,$88,$88,$8C
	DC.W	$8C,$90,$90,$94
	DC.W	$94,$70,$98,$9C
	DC.W	$9C,$A0,$9C,$A4
	DC.W	$A8,$A4,$A4,$AC
	DC.W	$B0,$B4,$B0,$B8
	DC.W	$B8,$BC,$BC,$C0
	DC.W	$C0,$C4,$C4,$C8
	DC.W	$CC,$D0,$D0,$D4
	DC.W	$D4,$D8,$D8,$DC
	DC.W	$DC,$E0,$E0,$E4
	DC.W	$E4,$E8,$E8,$EC
	DC.W	$EC,$F0,$F0,$F4
	DC.W	$F4,$F8,$F8,$FC
FINPTS

OPTIM1	DC.W	$3C,$10,$60,$B0
	DC.W	$100,$150,$194,$19C
	DC.W	$1F0,$240,$290,$2DC
	DC.W	$2D4,$280,$230,$1E0
	DC.W	$324,$330,$464,$470
	DC.W	$328,$378,$3C8,$418
	DC.W	$468,$370,$3C0,$410
	DC.W	$4B0,$4C0,$510,$560
	DC.W	$5B0,$5FC,$5F4,$5A0
	DC.W	$550,$500,$640,$648
	DC.W	$650,$690,$6E0,$730
	DC.W	$780,$698,$6E8,$6A0
	DC.W	$6F0,$740,$790,$7D0
	DC.W	$7E0,$830,$880,$8D0
	DC.W	$91C,$914,$8C0,$870
	DC.W	$820
FINOPTIM1

PTS1	DC.W	0,4,4,8
	DC.W	8,$C,$C,$10
	DC.W	$10,$14,$18,$1C
	DC.W	$1C,$20,$20,$24
	DC.W	$24,$28,$28,$2C
	DC.W	$2C,$30,$30,$34
	DC.W	$34,$38,$38,$3C
	DC.W	$3C,$18,$40,$44
	DC.W	$48,$4C,$50,$54
	DC.W	$54,$58,$58,$5C
	DC.W	$5C,$60,$40,$64
	DC.W	$64,$68,$68,$6C
	DC.W	$6C,$48,$70,$74
	DC.W	$74,$78,$78,$7C
	DC.W	$7C,$80,$80,$84
	DC.W	$84,$88,$88,$8C
	DC.W	$8C,$90,$90,$94
	DC.W	$94,$70,$98,$9C
	DC.W	$9C,$A0,$98,$A4
	DC.W	$A4,$A8,$A8,$AC
	DC.W	$AC,$B0,$9C,$B4
	DC.W	$B4,$B8,$A0,$BC
	DC.W	$BC,$C0,$C0,$C4
	DC.W	$C4,$C8,$CC,$D0
	DC.W	$D0,$D4,$D4,$D8
	DC.W	$D8,$DC,$DC,$E0
	DC.W	$E0,$E4,$E4,$E8
	DC.W	$E8,$EC,$EC,$F0
	DC.W	$F0,$CC
FINPTS1

replay:	incbin	mmme.bin
music:	incbin	atomino1.mus

CLS_SCREEN
;	DC.B	0,0,$91,$91,$83
	DC.B	$83,$83,$83
	DC.B	$84,$75,$75,$75,$75,$75,$75,$75
	DC.B	$67,$67,$67,$67,$67,$67,$67,$67
	DC.B	$67,$67,$67,$68,$59,$59,$59,$59
	DC.B	$59,$59,$59,$59,$59,$59,$59,$59
	DC.B	$59,$59,$59,$59,$59,$5A

	DC.B	$4B,$4B
	DC.B	$4B,$4B,$4B,$4B,$4B,$4B,$4B,$4B
	DC.B	$4B,$4B,$4B,$4B,$4B,$4B,$4B,$4B
	DC.B	$4B,$4B,$4B,$4B,$4B,$4B,$4B,$4B
	DC.B	$4B,$4B,$4B,$4B,$4B,$4B,$4B,$4B

	DCB.B	6,$4B		;$4C
	DCB.B	29,$4B		;$3D
	DCB.B	6,$4B		;$4C

	DC.B	$4B,$4B,$4B,$4B,$4B,$4B,$4B
	DC.B	$4B,$4B,$4B,$4B,$4B,$4B,$4B,$4B
	DC.B	$4B,$4B,$4B,$4B,$4B,$4B,$4B,$4B
	DC.B	$4B,$4B,$4B,$4B,$4B,$4B,$4B,$4B
	DC.B	$4B,$4B,$4B
	DC.B	$5A,$59,$59,$59,$59
	DC.B	$59,$59,$59,$59,$59,$59,$59,$59
	DC.B	$59,$59,$59,$59,$59,$68,$67,$67
	DC.B	$67,$67,$67,$67,$67,$67,$67,$67
	DC.B	$67,$75,$75,$75,$75,$75,$75,$75
	DC.B	$84,$83,$83
;	DC.B	$83,$83,$91,$91,0
	EVEN

TABLE_COORD	INCBIN	coord4.img
	DS.B	5120/2
	section	bss
FIN_TABLE_COORD	DS.B	5120
	EVEN

TABLE_JMP_X	DS.L	320
TABLE_JMP_45	DS.L	320
TABLE_JMP_Y	DS.L	320
TABLE_JMP_X_CRT	DS.L	320

DRTX	DS.B	20*(16*10+2)+2
DRT45	DS.B	20*(16*6+2)+2
DRTY	DS.B	20*(16*10+2)+2
DRTX_CRT:DS.B	20*(16*12+2)+2

buffer:	ds.b	40*2*8*8/SCROLLER_SPEED

sync:	ds.w	1
shift:	ds.w	1
cptbuf:	ds.w	1
ptrmess:ds.l	1
debutmess:ds.l	1
ptrdep:	ds.l	1
cptdep:	ds.w	1
xdep:	ds.w	1
ydep:	ds.w	1
zdep:	ds.w	1
push_stars:ds.l	1
push1:	ds.w	nb_stars*2+1
push2:	ds.w	nb_stars*2+1
PREDIV:	DS.W	PROFMAX
stars:	ds.w	6*nb_stars
PROJETE:DS.B	(FINOPTIM-OPTIM)*2
CODE	DS.B	7914
