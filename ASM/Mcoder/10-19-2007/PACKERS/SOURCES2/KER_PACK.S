
	****************
	* THE FAST III *
	* PACKER V7.07 *
	****************

	OPT	O+
	
	MOVEA.L	A7,A5
	MOVEA.L	4(A5),A5
	MOVE.L	$C(A5),A0
	ADD.L	$14(A5),A0
	ADD.L	$1C(A5),A0
	LEA	$200(A0),A0
	MOVE.L	A0,-(A7)
	MOVE.L	A5,-(A7)
	MOVE.L	#$4A0000,-(A7)
	TRAP	#1
	LEA	$C(A7),A7

	DC.W	$A00A	HIDE MOUSE
START	CLR.L	-(A7)	SUPERVISOR
	MOVE	#$20,-(A7)
	TRAP	#1
	ADDQ	#6,A7
	MOVE.L	D0,STACK	SAVE ANC STACK

	MOVE.L	$44E.W,A0	GET SCREEN ADDR
	MOVE	#7999,D0	CLEAR SCREEN
CLS	CLR.L	(A0)+
	DBF	D0,CLS

	MOVE	#$100,OFFSET	SET DEFAULT OFFSET
	MOVE	$FFFF8240.W,BKG_COL	SAVE COL ZERO
	LEA	TITLE(PC),A0	PRINT BONJOUR
	BSR.S	PRINT
PAGE	LEA	TEXT2(PC),A0
	BSR.S	PRINT
	PEA	INPUT(PC)	INPUT OFFSET ?
	MOVE	#$A,-(A7)
	TRAP	#1
	ADDQ	#6,A7
	TST	D0
	BEQ.S	PRG_DAT
	CMPI	#4,D0	FOUR DIGITS MAX
	BGT.S	PAGE
	BSR	NUMERIC	CONVERT STRING TO HEXA
	TST	D2
	BMI.S	PAGE	TST NEW OFFSET
	MOVE	D2,OFFSET	SAVE IF VALID
PRG_DAT	LEA	TEXT3(PC),A0	ASK *.EXE OR *.DAT ?
	BSR	GET_KEY
	CMP.B	#$31,D0
	BEQ.S	PRG	*.EXE
	CMP.B	#$32,D0
	BNE.S	PRG_DAT
	MOVE.B	#1,TYPE	*.DAT
	BRA.S	DAT
PRINT	MOVE.L	A0,-(A7)	HERE IS PRINT ROUT
	MOVE	#9,-(A7)	TO OPTIMISE MOST
	TRAP	#1		BSR CALLS IN .S
	ADDQ	#6,A7
	RTS
GET_KEY	BSR.S	PRINT		IDEM
	MOVE	#1,-(A7)
	TRAP	#1
	ADDQ	#2,A7
	RTS

PRG	LEA	TEXT10(PC),A0	ASK FLASH OR NOT ?
	BSR.S	GET_KEY
	CMP.B	#$31,D0
	BEQ.S	RELOC
	CMP.B	#$32,D0
	BNE.S	PRG
NOFLASH	MOVE.L	#$4E714E71,NOP0	DISABLE FLASH
RELOC	LEA	TEXT4(PC),A0	ASK RELOCATE OR NOT ?
	BSR.S	GET_KEY
	CMP.B	#$D,D0
	BEQ.S	DAT
	OR.B	#$20,D0
	CMP.B	#$79,D0
	BEQ.S	DAT
	CMP.B	#$6E,D0
	BNE.S	RELOC
	MOVE	#$5FFE+SKIP0-BRA0,BRA0	DISABLE RELOCATION
	*MOVE	#$5FFE+SKIP1-BRA1,BRA1

DAT	LEA	TEXT5(PC),A0	ASK FOR FILE
	BSR.S	PRINT		NAME TO LOAD
	PEA	PATH(PC)
	MOVE	#$A,-(A7)
	TRAP	#1
	ADDQ	#6,A7
	LEA	PATH+2(PC),A1
	ADDA	D0,A1
	CLR.B	(A1)
	PEA	TPA_ADR(PC)	SET TPA ADR
	MOVE	#$1A,-(A7)
	TRAP	#1
	ADDQ	#6,A7
	CLR	-(A7)
	PEA	PATH+2(PC)
	MOVE	#$4E,-(A7)	GET SIZE
	TRAP	#1
	ADDQ	#8,A7
	TST.L	D0
	BNE.S	DAT
	MOVE.L	FREERAM(PC),-(A7)	RESERVE MEMORY
	MOVE	#$48,-(A7)
	TRAP	#1
	ADDQ	#6,A7
	TST	D0
	BMI	SYSTEM	NOT ENOUGH MEMORY
	MOVE.L	D0,MEMORY
	MOVE.L	D0,MEMORY2
	MOVE	#2,-(A7)
	PEA	PATH+2(PC)
	MOVE	#$3D,-(A7)	OPEN FILE
	TRAP	#1
	ADDQ	#8,A7
	MOVE	D0,HANDLER
	TST	D0
	BMI	QUIT
	MOVE.L	MEMORY(PC),-(A7)	LOAD FILE
	MOVE.L	FREERAM(PC),-(A7)	IN MEMORY
	MOVE	HANDLER(PC),-(A7)
	MOVE	#$3F,-(A7)
	TRAP	#1
	LEA	$C(A7),A7
	TST	D0
	BMI	QUIT	ERROR ?
	BSR	F_CLOSE		CLOSE FILE
	MOVE.L	FREERAM(PC),D1
	ADD.L	MEMORY(PC),D1
	MOVE.L	D1,ENDRAM
	LEA	TEXT6(PC),A0	PLEASE WAIT ' CAUSE
	BSR	PRINT
	*MOVE	#$2700,SR
	BSR	CRUNCH		IT'S TIME TO WORK !

	MOVE	BKG_COL(PC),$FFFF8240.W	RESTORE COLOR
	MOVE.L	STACK(PC),-(A7)	RESTORE STACK
	MOVE	#$20,-(A7)
	TRAP	#1
	ADDQ	#6,A7
SAVE	LEA	TEXT7(PC),A0	ASK FOR SAVE NAME
	BSR	PRINT
	PEA	PATH(PC)
	MOVE	#$A,-(A7)
	TRAP	#1
	ADDQ	#6,A7
	TST.B	D0
	BEQ.S	SAVE
	LEA	PATH+2(PC),A1
	ADDA	D0,A1
	CLR.B	(A1)
	CLR	-(A7)	F_CREAT
	PEA	PATH+2(PC)
	MOVE	#$3C,-(A7)
	TRAP	#1
	ADDQ	#8,A7
	TST	D0
	BMI	QUIT
	MOVE	D0,HANDLER
	CMP.B	#1,TYPE
	BEQ.S	SKIP11

	LEA	PARAM-DEPACK,A6
	LEA	-$20(A2),A5	SAVE *.EXE
	ADDA.L	A6,A5
	MOVE.L	A5,HEADER
	LEA	DEPACK(PC),A5	INSERT DEPACKING
	BSR.S	F_WRITE		MODULE

SKIP11	MOVEA.L	MEMORY(PC),A5	SAVE
	MOVEA.L	A2,A6		MAIN PRG
	BSR.S	F_WRITE
	BSR.S	F_CLOSE
	
	LEA	TEXT8(PC),A0	AN OTHER
	BSR	GET_KEY		CRUNCH ?
	OR.B	#$20,D0
	CMP.B	#$6E,D0
	BEQ.S	QUIT		NO = QUIT
	
	MOVE.L	MEMORY(PC),-(A7)	FREE ALLOCATED
	MOVE	#$49,-(A7)	MEMORY
	TRAP	#1
	TST.L	D0
	BNE.S	QUIT
	CLR.B	TYPE
	BRA	START		YES = RESTART
	
SYSTEM	LEA	TEXT9(PC),A0	NOT ENOUGH RAM !
	BSR	GET_KEY
QUIT	DC.W	$A009
	CLR	-(A7)	BYE !
	TRAP	#1
	
	*******************
	* CLASSICAL ROUTS *
	*******************
	
	
F_WRITE	MOVE.L	A5,-(A7)
	MOVE.L	A6,-(A7)
	MOVE	HANDLER(PC),-(A7)
	MOVE	#$40,-(A7)
	TRAP	#1
	LEA	$C(A7),A7
	TST	D0
	BMI.S	QUIT
	RTS


F_CLOSE	MOVE	HANDLER(PC),-(A7)
	MOVE	#$3E,-(A7)
	TRAP	#1
	ADDQ	#4,A7
	TST	D0
	BMI.S	QUIT
	RTS
	
NUMERIC	LEA	DIGIT(PC),A1	CONVERT STRING TO HEXA
	SUBQ.B	#1,D0	D0=NB OF DIGITS
	MOVEQ	#0,D2	A1=STRING START ADDR
	MOVEQ	#0,D4	D2=HEXA VALUE OR -1
LOOP03	MOVEQ	#0,D3
	MOVE.B	(A1,D0),D3
	CMPI.B	#$30,D3
	BLT.S	ERROR
	CMPI.B	#$39,D3
	BLE.S	SKIP13
	BSR.S	HEXA
SKIP13	SUBI.B	#$30,D3
	LSL	D4,D3
	ADD	D3,D2
	ADDQ	#4,D4
	SUBQ.B	#1,D0
	BPL.S	LOOP03
	RTS
HEXA	CMPI.B	#$46,D3	TST A TO F
	BLE.S	HEXA46	AND a TO f
	CMPI.B	#$61,D3
	BGT.S	HEXA61
ERROR	MOVEQ	#-1,D2	ERROR
	RTS
HEXA61	SUB.B	#$20,D3
HEXA46	SUBQ.B	#7,D3
	RTS

	*************
	* CRUNCHING *
	* ALGORYTHM *
	*************


CRUNCH	MOVEA.L	MEMORY(PC),A0
	MOVEA.L	ENDRAM(PC),A1
	MOVEA.L	MEMORY2(PC),A2
	MOVEQ	#1,D2
	MOVEQ	#0,D1
	MOVEQ	#0,D7
FORNEXT	BSR.S	PACK
	MOVE	A0,$FFFF8240.W
	TST.B	D0
	BEQ.S	NEXT5
	ADDQ	#1,D1
	CMPI	#$108,D1
	BNE.S	NEXT5
	BSR	ALGO_03
NEXT5	CMP.L	A0,A1
	BGT.S	FORNEXT
	BSR	ALGO_03
	
	MOVE.L	D2,(A2)+
	EOR.L	D2,D7
	
	MOVE.L	D7,(A2)+
	MOVE.L	MEMORY(PC),A0
	MOVE.L	ENDRAM(PC),D2
	SUB.L	A0,D2
	MOVE.L	D2,(A2)+
	CLR.L	(A2)+
	SUB.L	A0,A2
	RTS


PACK	MOVEA.L	A0,A3
	ADDA	OFFSET(PC),A3
	CMPA.L	A1,A3
	BLE.S	SKIP10
	MOVEA.L	A1,A3
SKIP10	MOVEQ	#1,D5
	LEA	1(A0),A5
LOOP00	MOVE.B	(A0),D3
	MOVE.B	1(A0),D4
LOOP01	CMP.B	(A5)+,D3
	BNE.S	SKIP6
	CMP.B	(A5),D4
	BEQ.S	SKIP7
SKIP6	CMPA.L	A5,A3
	BGT.S	LOOP01
	BRA.S	EXIT2
SKIP7	SUBQ	#1,A5
	MOVEA.L	A0,A4
LOOP02	MOVE.B	(A4)+,D3
	CMP.B	(A5)+,D3
	BNE.S	EXIT1
	CMPA.L	A5,A3
	BGT.S	LOOP02
EXIT1	MOVE.L	A4,D3
	SUB.L	A0,D3
	SUBQ.L	#1,D3
	CMP.L	D3,D5
	BGE.S	NEXT4
	MOVE.L	A5,D4
	SUB.L	A4,D4
	CMP.L	#4,D3
	BLE.S	SKIP9
	MOVEQ	#6,D6
	CMP.L	#$100,D3
	BLE.S	SKIP8
	MOVE	#$100,D3
	BRA.S	SKIP8
SKIP9	MOVE	D3,D6
	SUBQ	#2,D6
	LSL	#1,D6
SKIP8	LEA	OFFDAT(PC),A6
	CMP	0(A6,D6),D4
	BGE.S	NEXT4
	MOVE	D3,D5
	MOVE	D4,REGIS0
	MOVE.B	D6,REGIS1
NEXT4	CMPA.L	A5,A3
	BGT.S	LOOP00
EXIT2	CMP	#1,D5
	BEQ.S	ALGO_00
	BSR.S	ALGO_03
	MOVEQ	#0,D3
	MOVE.B	REGIS1(PC),D6
	MOVE	REGIS0(PC),D3
	MOVE	8(A6,D6),D0
	BSR.S	ALGO_01
	MOVE	$10(A6,D6),D0
	BEQ.S	SKIP15
	MOVE	D5,D3
	SUBQ	#1,D3
	BSR.S	ALGO_01
SKIP15	MOVE	$18(A6,D6),D0
	MOVE	$20(A6,D6),D3
	BSR.S	ALGO_01
	ADDA	D5,A0
	CLR.B	D0
	RTS
ALGO_00	MOVE.B	(A0)+,D3
	MOVEQ	#8,D0
	BSR.S	ALGO_01
	MOVEQ	#1,D0
RETURN	RTS
ALGO_03	TST	D1
	BEQ.S	RETURN
	MOVE	D1,D3
	CLR	D1
	CMP	#9,D3
	BGE.S	ALGO_02
	SUBQ	#1,D3
	MOVEQ	#5,D0
	BRA.S	ALGO_01
ALGO_02	SUBI	#9,D3
	OR	#$700,D3
	MOVEQ	#$B,D0
ALGO_01	SUBQ	#1,D0
LOOP0	LSR.L	#1,D3
	ROXL.L	#1,D2
	BCC.S	NEXT6
	MOVE.L	D2,(A2)+
	EOR.L	D2,D7
	MOVEQ	#1,D2
NEXT6	DBF	D0,LOOP0
	RTS


	
	**************
	* DECRUNCHER *
	**************

DEPACK	BRA.S	MAIN

HEADER	DS.L	6
	DC.W	$FFFF
     	
MAIN	MOVEA.L	4(A7),A5
	MOVEA.L	$10(A5),A1
	LEA	END(PC),A2
	MOVE.L	A1,(A2)
	MOVEA.L	8(A5),A1
	LEA	PRGM(PC),A2
	MOVE.L	A1,(A2)
	LEA	$300(A1),A1
	LEA	BEGIN(PC),A2
	MOVE.L	A1,(A2)

	CLR.L	-(A7)
	MOVE	#$20,-(A7)
	TRAP	#1
	ADDQ	#6,A7
	LEA	STACK2(PC),A6
	MOVE.L	D0,(A6)
	BSR	UNPACK
	MOVE	ANC_COL(PC),$FFFF8240.W
	MOVE.L	$4C6.W,A2
	MOVE.L	STACK2(PC),-(A7)
	MOVE	#$20,-(A7)
	TRAP	#1
	ADDQ	#6,A7
	MOVEA.L	PRGM(PC),A5
	LEA	-$100(A5),A5
	MOVEA.L	BEGIN(PC),A3
	ADDQ	#2,A3
BRA0	MOVEA.L	(A3)+,A0
	ADDA.L	(A3)+,A0
	ADDA.L	4(A3),A0
	LEA	$12(A3),A1
	ADDA.L	A1,A0
	MOVE.L	8(A5),D0
	TST.B	4(A0)
	BEQ.S	EXIT0
	ADDA.L	(A0)+,A1
LOOP2	ADD.L	D0,(A1)
	MOVEQ	#0,D1
NEXT0	MOVE.B	(A0)+,D1
	TST.B	D1
	BEQ.S	EXIT0
	CMP.B	#1,D1
	BNE.S	NEXT1
	LEA	$FE(A1),A1
	BRA.S	NEXT0
NEXT1	ADDA	D1,A1
	BRA.S	LOOP2
EXIT0	SUBQ	#8,A3
SKIP0	LEA	$C(A5),A5
	MOVE.L	(A3)+,D1
	MOVE.L	D1,(A5)+
	ADD.L	-8(A5),D1
	MOVE.L	D1,(A5)+
	ADD.L	(A3),D1
	MOVE.L	(A3)+,(A5)+
	MOVE.L	D1,(A5)+
	MOVE.L	(A3),(A5)
BUFFER	LEA	COPY1(PC),A1
COPY0	MOVEM.L	(A1),D0-D5
	MOVEM.L	D0-D5,(A2)
	MOVEA.L	BEGIN(PC),A1
	LEA	$1C(A1),A1
	MOVE.L	LENGHT(PC),D2
	LSR.L	#3,D2
	MOVEA.L	PRGM(PC),A4
	MOVEA.L	A4,A3
*	MOVEA.L	BOTTOM(PC),A6
	JMP	(A2)
COPY1	MOVE.L	(A1)+,(A3)+
	MOVE.L	(A1)+,(A3)+
	DBF	D2,COPY1
*BRA1	MOVEA.L	4(A7),A1
*	MOVEA.L	$18(A1),A3
*CLEAR0	CLR.L	(A3)+
*	CMPA.L	A6,A3
*	BLT.S	CLEAR0
SKIP1	JMP	(A4)

UNPACK	LEA	ANC_COL(PC),A2
	MOVE	$FFFF8240.W,(A2)
	MOVEA.L	END(PC),A0
	MOVEA.L	BEGIN(PC),A1
	MOVEA.L	-(A0),A2
	LEA	LENGHT(PC),A3
	MOVE.L	A2,(A3)
	ADDA.L	A1,A2
	CLR.B	(A2)
*	LEA	BOTTOM(PC),A3
*	MOVE.L	A2,(A3)
	MOVE.L	-(A0),D5
	MOVE.L	-(A0),D0
	EOR.L	D0,D5
NEXXT	LSR.L	#1,D0
	BNE.S	SKIP3
	BSR.S	ALGO0
SKIP3	BCS.S	EXIT3
	MOVEQ	#8,D1
	MOVEQ	#1,D3
	LSR.L	#1,D0
	BNE.S	SKIP4
	BSR.S	ALGO0
SKIP4	BCS.S	EXIT5
	MOVEQ	#3,D1
	MOVEQ	#0,D4
LOOP6	BSR.S	ALGO1
	MOVE	D2,D3
	ADD	D4,D3
LOOP5	MOVEQ	#7,D1
LOOP4	LSR.L	#1,D0
	BNE.S	SKIP2
	BSR.S	ALGO0
SKIP2	ROXL.L	#1,D2
	DBF	D1,LOOP4
	MOVE.B	D2,-(A2)
	DBF	D3,LOOP5
	BRA.S	NEXT3
LOOP04	MOVEQ	#8,D1
	MOVEQ	#8,D4
	BRA.S	LOOP6
EXIT3	MOVEQ	#2,D1
	BSR.S	ALGO1
	CMP.B	#2,D2
	BLT.S	EXIT4
	CMP.B	#3,D2
	BEQ.S	LOOP04
	MOVEQ	#8,D1
	BSR.S	ALGO1
	MOVE	D2,D3
	MOVEQ	#$C,D1
	BRA.S	EXIT5
EXIT4	MOVEQ	#9,D1
	ADD	D2,D1
	ADDQ	#2,D2
	MOVE	D2,D3
EXIT5	BSR.S	ALGO1
LOOP3	MOVE.B	-1(A2,D2),-(A2)
	DBF	D3,LOOP3
NEXT3	
NOP0	ADDQ	#1,$FFFF8240.W
	CMPA.L	A2,A1
	BLT.S	NEXXT
	RTS

ALGO0	MOVE.L	-(A0),D0
	EOR.L	D0,D5
	MOVE.B	#$10,CCR
	ROXR.L	#1,D0
	RTS

ALGO1	SUBQ	#1,D1
	MOVEQ	#0,D2
LOOP1	LSR.L	#1,D0
	BNE.S	NEXT2
	MOVE.L	-(A0),D0
	EOR.L	D0,D5
	MOVE.B	#$10,CCR
	ROXR.L	#1,D0
NEXT2	ROXL.L	#1,D2
	DBF	D1,LOOP1
	RTS
	DATA
STACK2	DC.L	0
END	DC.L	0
BEGIN	DC.L	0
LENGHT	DC.L	0
PRGM	DC.L	0
ANC_COL	DC.W	0
*BOTTOM	DC.L	0
PARAM			*do not touch
	DC.W	0
REGIS0	DC.W	0
REGIS1	DC.W	0
OFFDAT	DC.W	$0100,$0200,$0400,$1000
	DC.W	$0008,$0009,$000A,$000C
	DC.W	0,0,0,8,2,3,3,3,1,4,5,6
STACK	DC.L	0
BKG_COL	DC.W	0
MEMORY	DC.L	0
MEMORY2	DC.L	0
ENDRAM	DC.L	0
HANDLER	DC.W	0
OFFSET	DC.W	0	
	DC.W	$1000
TYPE	DC.W	0
TPA_ADR	DS.W	13
FREERAM	DS.W	9
PATH	DC.W	$3000
	DS.W	24
INPUT	DC.W	$500
DIGIT	DC.W	0,0,0
TITLE	DC.B	$1B,"Y  KERN PACKER",0
TEXT2	DC.B	$1B,$59,$22," OFFSET [$100] $",7,0
TEXT3	DC.B	$1B,$59,$24," 1] *.EXE"
	DC.B	$1B,$59,$25," 2] *.DAT"
	DC.B	$1B,$59,$26," >",0
TEXT10	DC.B	$1B,$59,$24,$2B,"1] FLASH"
	DC.B	$1B,$59,$25,$2B,"2] NO FLASH"
	DC.B	$1B,$59,$26,$2B,">",0
TEXT4	DC.B	$1B,$59,$28," RELOCATE [Y]: ",7,0
TEXT5	DC.B	$1B,$59,$2A," SOURCE: ",7,0
TEXT6	DC.B	$1B,$59,$2C," PACKING...",0
TEXT7	DC.B	$1B,$59,$2E," TARGET: ",7,0
TEXT8	DC.B	$1B,$59,$30," PACK AGAIN [Y]: ",7,0
TEXT9	DC.B	$A,$D,"OUT OF RAM.",7,0

