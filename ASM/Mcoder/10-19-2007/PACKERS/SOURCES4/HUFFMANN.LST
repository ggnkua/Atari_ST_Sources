'
' Programme d'analyse de data
'
' Indicateur du coefficient de compression
'
Fileselect "\*.*","",File$
If File$=""
  End
Endif
I%=Instr(File$,".")
If I%=0
  Filout$=File$+".OUT"
Else
  Filout$=Left$(File$,I%)+"OUT"
Endif
Open "o",#2,Filout$
Print #2
Print #2,"DATANALYSIS"
Print #2
Print #2,"LECTURE DU FICHIER ";File$
Print #2
Open "i",#1,File$
Length%=Lof(#1)
Option Base 0
Dim Ir%(255)
For I%=1 To Length%
  Inc Ir%(Asc(Input$(1,#1)))
Next I%
Close #1
'
' Affichage
'
Print #2,"OCTETS TROUVES DANS ";File$;" TRIES DANS L'ORDRE DECROISSANT"
Print #2
'
' Attribution d'un code pour chaque octet
'
Dim Code%(255)
For I%=0 To 255
  Code%(I%)=I%
Next I%
'
' Tri des occurences
'  Par ordre d‚croissant num‚rique et par code
'
For I%=0 To 254
  L%=I%
  For J%=I%+1 To 255
    If Ir%(L%)<Ir%(J%)
      L%=J%
    Else
      If Ir%(L%)=Ir%(J%)
        If Code%(L%)>Code%(J%)
          L%=J%
        Endif
      Endif
    Endif
  Next J%
  If L%<>I%
    K%=Ir%(I%)
    Ir%(I%)=Ir%(L%)
    Ir%(L%)=K%
    K%=Code%(I%)
    Code%(I%)=Code%(L%)
    Code%(L%)=K%
  Endif
Next I%
'
' Fr‚quence des occurences
'
Dim P(255)
For I%=0 To 255
  P(I%)=Ir%(I%)/Length%
Next I%
'
' Affichage des occurences
'
For K%=0 To 60 Step 20
  Print #2,Tab(K%);"BYTE COUNT    %";
Next K%
Print #2
For I%=0 To 63
  K%=1
  For J%=I% To I%+256-64 Step 64
    Print #2,Tab(K%);"$";Right$("0"+Hex$(Code%(J%)),2);
    Print #2,Tab(K%+4);Using "#####",Ir%(J%);
    Print #2,Tab(K%+10);Using "###.##",P(J%);
    Add K%,20
  Next J%
  Print #2
Next I%
'
' Calcul de l'entropie
'
Print #2
Print #2,"ANALYSE DE L'ENTROPIE"
Print #2
E=0
For I%=0 To 255
  If P(I%)>0
    E=E-P(I%)*Log(P(I%))/Log(2)
  Endif
Next I%
B1%=Int(E*Length%+1)        !on ajoute un bit au maximum
B2%=Length%*8
B3=(B2%-B1%)/B2%*100
B4%=Int((B1%+7)/8)          !on arrondit … l'octet sup‚rieur
Print #2,"Entropie : ";
Print #2,Using "##.##",E;
Print #2," bits par octet"
Print #2
Print #2,File$;" contient ";Length%;" octets soient ";B2%;" bits"
Print #2
Print #2,"Compression statistique th‚orique : ";Using "###.##",B3;
Print #2,"%"
Print #2
Print #2,"Taille du fichier aprŠs compression : ";
Print #2,B1%;" bits soient ";B4%;" octets"
'
' CALCUL DES CODES DE HUFFMANN
'
Print #2
Print #2,"CALCUL DES CODES DE HUFFMAN"
Print #2
Nb%=255
While Ir%(Nb%)=0
  Dec Nb%
Wend
'
Dim Tree%(Nb%*(Nb%+1)/2,2)
For I%=0 To Nb%
  Tree%(I%,0)=Ir%(I%)         ! valeur pour Hu-Tucker algorithm
  Tree%(I%,1)=-1              ! lien nul pour la feuille gauche
  Tree%(I%,2)=-1              ! lien nul pour la feuille droite
Next I%
Do
  '
  ' recherche des 2 valeurs les plus petites
  '
  ' Pour cela, on explore tous les noeuds
  ' et … chaque fois, on calcule la somme des 2 valeurs les plus basses
  '
  ' M1% pointe sur la valeur la plus haute des deux
  ' M2% pointe donc sur la valeur la plus basse trouv‚e
  '
  M1%=-1             ! indique qu'il faut trouver 2 valeurs quelconques
  M2%=-1
  For I%=0 To Nb%
    If Tree%(I%,0)<>0         ! si noeud vide -> au suivant
      If M2%=-1
        M2%=I%
      Else
        If M1%=-1
          If Tree%(I%,0)<Tree%(M2%,0)
            M1%=M2%
            M2%=I%
          Else
            M1%=I%
          Endif
        Else
          If Tree%(I%,0)<Tree%(M1%,0)
            If Tree%(I%,0)<Tree%(M2%,0)
              M1%=M2%
              M2%=I%
            Else
              M1%=I%
            Endif
          Endif
        Endif
      Endif
    Endif
  Next I%
  Exit If M1%=-1             ! s'il ne reste plus qu'une valeur, c'est fini !!!
  '
  ' A partir des 2 valeurs trouv‚es, on cr‚e un noeud ayant pour valeur
  '  la somme des 2 valeurs
  '
  S%=Tree%(M1%,0)+Tree%(M2%,0)
  Inc Nb%
  Tree%(Nb%,0)=S%
  Tree%(Nb%,1)=M1%        ! pointe sur la composante de gauche
  Tree%(Nb%,2)=M2%        ! pointe sur la composante de droite
  '
  ' Ensuite on efface les 2 noeuds trouv‚s
  '   mais on garde leurs pointeurs
  Tree%(M1%,0)=0
  Tree%(M2%,0)=0
Loop
'
' A pr‚sent M2% pointe sur la racine de l'arbre
'
' On calcule ici les codes de Huffmann de chaque ‚l‚ment
'
@Dicho(M2%,0,0)
Close #2
End
'
' On parcourt l'arbre … la recherche des noeuds terminaux
'
' I%=numero du noeud examin‚
' B%=code Huffmann en cours de d‚calage
' N%=nombre de bits du code de Huffmann
'
Procedure Dicho(I%,B%,N%)
  If Tree%(I%,2)=-1
    ' si le noeud examin‚ est un noeud terminal
    ' on donne imm‚diatement son code
    Print #2,"CODE DE $";Right$("0"+Hex$(Code%(I%)),2);"=";Right$("00000000"+Bin$(B%),N%)
  Else
    @Dicho(Tree%(I%,2),B%*2,N%+1)
    @Dicho(Tree%(I%,1),B%*2+1,N%+1)
  Endif
Return
