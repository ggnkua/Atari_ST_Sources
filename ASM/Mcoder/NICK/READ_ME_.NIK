Jean-Charles MEYRIGNAC
49, rue de Pontault
77330 Ozoir-la-Ferrière				Ozoir, the 1st of November.
FRANCE
			Dear Nick,


	I receive your letter on the 30th of October.
	I hope you will learn something new in this text.
	I'm very proud of your confidence and I promise to never swap what
you give me (informations and code). In fact, I don't know anybody who is
good on ST -I'm a self made man- and I don't know any group except the
STARFIRES (their demos are in GFABASIC).
	I send you this disk full of my own code.
	Your TCBBALL demo doesn't work on 520ST and your GRODAN demo
doesn't display the bottom of the screen (the 8 last lines) on the old shifters
(the big scroller is cut but the scroll is readable), and I have a 520ST with
an old shifter !!! However I have seen your demos on a 1040ST with a new
shifter and it looks good (but sounds awful). The red indicator at the top
of the screen is always stable on the old and new shifters. Do you try your
hardware scroller on STE ??? Does it work in 60 Hz ???
I'll send you my own version in my next letter (when I'll begin and finish
it !!!) and I will try to obtain the lowest number of scanlines taken
(perhaps 2 or 3 ???).

	I must mention that I've just coded an overscan screen and I have
learnt how to count cycles, so I give you my own cycle-counter which can
count with a precision of 1 cycle !!! I think the only reason somebody has
to learn cycles counting is to code an overscan screen. You are wrong when
you say that DBRA takes 16 cycles, it takes 12 cycles when the branch is
taken and 16 however.
All the instructions with 4n+2 cycles take on ST 4n+4 cycles except
 LEA d(An,Dn),An which takes 16 cycles (instead of 12) -so it's slower to
LEA (A0,D0),A1 than MOVE.L A0,A1 ADD D0,A1 !!!- and the access to sound
registers takes +4 cycles per instruction
	ex:
		MOVEP	D0,$8800(A0)	=16+4=20 cycles
		MOVEP.L	D0,$8800(A0)	=24+4=28 cycles
I think it's because the PSG runs at 2Mhz and the ST must synchronise with
it when accessing PSG registers. I didn't try to time other protected areas.
The following routine (108 cycles) is equivalent (for the sound quality)
to your MOVEP.W MOVEP.L :

	MOVEQ	#0,D0			;4
	MOVE.B	(A0)+,D0		;8
	ASL	#3,D0			;12
	MOVE.L	(A1,D0.W),D1		;20
	MOVE.L	4(A1,D0.W),$8800.W	;32+4
	MOVEP.L	D1,$8800(A2)		;24+4

	Your protection principle is great with absolute code (this protection
must be not relocatable) because it is difficult to decrypt but it's much
more difficult to crypt (I know how to encrypt very easily trace code -you only
have to change the decoding routine to a coding one- but not with
EOR.B $8209.W,D0).
I have written an Huffmann depacker in exactly 100 bytes (it decodes the
encoded tree and the code at a speed of 25Kb/s) so I will put it in my
boot code (which will be decoded with Prefetch tricks and HBL decoder).
Another shortcoming of your XOR 8209 is that it doesn't work in 50Hz
as in 60Hz and my game could work -and boot- on both these frequencies.
A good advice is that the whole code must be packed and Xored at the same
time (even if you don't earn bytes) -if you wish I can send you my little
Huffmann packer- to prevent partial decoding (ex: I have cracked your boot
sector without tracing it, just because you use a XOR -the XOR protection
can be very easily cracked without knowing the decoding routine !!!-).
Another trick is to fill the empty disk space with random datas to prevent
insertion of an intro (I will use the second side of the disk to store 400Kb
of digit which will be played like in Carrier Command).
I have created a physical disk protection on ST with a 20Kb routine of Atari
format on Amiga (gaps are F4,F5,F6,F7,F8 with no A1 before, and
1024-bytes-sectors are numbered F4,F5,F6,F7,F8)

	As you asked me, I timed my shifting sprite routine (I don't save
background), here are the timings for a 33*32 sprite (33 pixels width takes
the same time as 32 with a boost-sprite-routine) :

	shifts		cycles	(computed on 100 frames with CHRONOSP.S)
	  0		11949
	1,2,14,15	28880
	3,4,12,13	30018
	5,6,10,11	31189
	7,8,9		32323

	average time : 469266/16=29329 cycles per sprite
			/512=57 scanlines
	You beat me because I shift the mask so I have 16 real colours
instead of 15 with OR.L masking.
Anyhow, I use my general sprite routine only for the sprites which are not
too numerous and the shifting one for the ship.
I have rewritten my sprite routine to try to beat you and I succeed !!!
Its average time is now 38 scanlines (19803 cycles per 32*32 sprite).
This routine computes the mask by ORing the planes but doesn't save
the background...
The scanlines are not a good method for timing measures. So here are
the cycles timing to display 16 pixels (4 words) :

	nb shifts	cycles
	 0		 136
	1,2,14,15	 232
	3,4,12,13	 240
	5,6,10,11	 248
	7,8,9		 256

You must add 28 cycles if you want to push the background.

With my cycle counter, I found that my boost-sprite-rout takes 104 cycles
instead of 98 cycles (computed by hand with the 68000 book) :
	MOVE.L	(A0)+,D0	;12
	MOVE.L	D0,D1		;4
	AND.L	(A1)+,D0	;16
	OR.L	(A0)+,D0	;16
	AND.L	(A1)+,D1	;16
	OR.L	(A0)+,D1	;16
	MOVEM.L	D0/D1,-8(A1)	;28
		or MOVEM.L D0/D1,-(A1)
For more than 16 pixels wide, I use this procedure (for each pair of registers)
with D0-D7 registers and I MOVEM.L D0-D7,-(A1) at the end...
This procedure is faster than yours for 2 and 4 registers, but you beat me
for more than 4 registers (thanks -I'm quite masochist-).

The best tricks I have found for my general sprite routine are :
	1) instead of :
		nbcol	equr	d6
		nblig	equr	d7
		loop1:	move	nbcol,d0
		loop2:
			...
			dbra	d0,loop2
			dbra	nblig,loop1
	use :
			mulu	#nbbytes,nbcol
			lea	loop2(pc,nbcol.w),a4
		loop1:	jmp	(a4)
		loop2:	...
			dbra	nblig,loop1

	2) because I use all the registers -except A7 and USP-
	I stored NBLIG in A6 register and I use it as follows
		loop1:	move	nblig,a6
			...
			move	a6,nblig
			dbeq	nblig,loop1	;earns 4 cycles

I don't have to rewrite the code generator coz the optimisations made are
always the better. If you want to know how looks the generated code look
at my demo files.

Here are my new records of masking sprites per frame (established in 4 days) :

	1) 51 sprites 17*17 8 colours+a scroller which goes up and down
		(it must be cleared)
	2) 152 sprites 8*8 4 colours +a low border scroller
	3) 4 sprites 97*96 8 colours but displayed in 4 planes+a low border
		scroller
	4) 8 sprites 65*64 8 colours but displayed on 4 planes+a low border
		scroller.
In all these cases, the background is filled with color 0 and the scroller
is a monoplane scroller 4 pixels per 4 pixels and 16 pixels high (it eats
about 20 scanlines !!!) and the balls are bouncing (it takes a lot of time).

My scroller is optimal but takes a big place in memory (code generated
+8 buffers+preshifted fonts). This scroller was written at first for
a demo in which I scrolled 128 lines in 4 planes 2 per 2 pixels (it takes
about 400Kb) and I had time to pick up 17 stars, 11 sprites and a 2 bitplanes
distorting logo. I coded this demo in 6 months (I was working at Titus) and
the result was a big... deception coz the demo is not astonishing (see DEMO1.TOS).
The shortcomings of this scroller are that it can't distort vertically, it
can't change of speed (but it can stop) and it scrolls only with a power of
2 pixels (1,2,4,8,16...) taking always the same time. I don't have to shift
while scrolling because I use a multi circular buffer (it's rather complicated
but it goes faster than any other scroll technique).

The sprites were displayed with my first code-generator. I have really
improved it (I rewrite it entirely 2 times) and it takes the following average
time to display a sprite (I used a ball sprite not vertically symetrical -hum-
and I mask with the background) :

	 size	nb planes	average time (cycles)	nb bytes
	17*17	4 planes	2030			6768
	17*17	3 planes	1831			6908
	17*17	2 planes	1396			5776
	65*64	4 planes	10665			33236
	65*64	3 planes	10241			41744
	8*8	4 planes	708			2458
	8*8	3 planes	623			2426
	8*8	2 planes	503			2218
	97*96	4 planes	19248			59296
	97*96	3 planes	19077			80470

I can now generate code in any configuration (1,2,3 or 4 bitplanes).

	My vector graphics (polygon filled) uses Cohen-Sutherland algorithm
for the clipping (and DIVide/MULtiply to compute the incident pixel when
low resolution is needed), a presort of coordinates ('flag algorithm')
and a conjonction of Bresenham algorithm to compute the X coordinates of
the horizontal displayed line and a technique of MOVEM.L for the display
(all the current games use MOVE.L Dn,(An)+ repeated 40 times, and I use
MOVEM.L Dn-Dn,-(An) so I display from right to left more faster).
When I disassembled the Union Demo (I cracked it very simply : the code is
not packed) I didn't find the TNT routines very efficient (unless it uses
code generation, in that case the code is hard to read).
The best calculation routines are in INTERPHASE and the best display
routines (that I beat easily) are in CARRIER COMMAND (INTERPHASE use
them too !!!). I must confess that I didn't have the time to code entirely
the final polygon display but my first version (see POLY10.S) can display
100 random big polygons per second at full speed (there is still bugs in
the clipping).
I hope your line routine displays more than 10000 pixels per seconds
because it means only 200 pixels per frame -see The Globe Demo-.

	I think the ATARI has the same principle of DMA than the AMIGA :
the screen takes the odd cycles and the DISK takes cycles in the border
(when no pixel is displayed).
My cycle counter is more reliable than yours because it works like this :
it counts the number of times a routine can be executed in n frames.
I choose n=10 for convenience and I use n=100 when I want to have more
precision. The cycle determination is done like that :
	(160000*n/nb iterations)-time needed to count and branch
in my case I use :
	LOOP:
		ADDQ.L	#1,D7	;8
		BRA.S	LOOP	;12
		and n=10
so :
	1600000/d7-20+1 (+1 because of the rounding errors, and
			  because it is 160256 instead of 160000)

I have found a strange thing :
LOOP:	ADDQ.L	#1,D7
	MOVE.L	0.W,D0
	NOT.L	D0
	BRA.S	LOOP	;takes 40 cycles
but :
LOOP:	MOVE.L	0.W,D0
	NOT.L	D0
	ADDQ.L	#1,D7
	BRA.S	LOOP	;takes 44 cycles !!!!
How could you explain that ??? (I think the prefetch has little problems...)

Here are some more timings :
	MOVEQ	#n,D0
LOOP	DBRA	D0,LOOP
takes 20+12n cycles

	MOVEQ	#n,D0
LOOP	NOP
	DBRA	D0,LOOP
takes 24+16n cycles

	MOVEQ	#n,D0
LOOP	NOP
	NOP
	DBRA	D0,LOOP
takes 28+20n cycles

	How do you create your curves ?
My actual method is the summation of sinus values :
	x=sin(i*a+b)+sin(i*c+d)+sin(i*e+f).

I use a good trick to separate bits of a register :

 instead of :
	MOVE	D0,D1
	AND	#$F,D0
	AND	#$FFF0,D1	or LSR #1,D1 AND #$FFF8,D1

 use :
	MOVE	D0,D1
	AND	#$F,D0
	EOR	D0,D1		or SUB D0,D1

	earns 4 cycles
 this trick is useful for sprite routines or screen offset calculation.


	The vertical synchro can be done without VBL with the following code:

		MOVE	#$2700,SR
		LEA	$FFFF8209.W,A0
	JITT1	TST.B	(A0)		;PREVENTS BUGS
		BEQ.S	JITT1

	JITT2	MOVEQ	#20,D7
	JITT3	TST.B	(A0)
		DBNE	D7,JITT3
		BNE.S	JITT2

	JITT4	MOVE.B	(A0),D7
		BEQ.S	JITT4
		NOT	D7
		ASL	D7,D7		;THANK YOU FOR THIS VERY GOOD TRICK

I must say that there is a problem with the VBL vector. When you disable the
interruptions, the VBL interruption is memorised so when you enable VBL,
it jumps directly to VBL !!!
This problem could happen if you :
		MOVE	#$2700,SR
		big calculations here
		CLR	SYNC
		MOVE	#$2300,SR
	WAITVBL	TST	SYNC
		BEQ.S	WAITVBL
		MOVE.B	#2,$FFFF820A.W
		CLR.B	$FFFF8260.W
sometimes, it will bug so move the CLR SYNC after the MOVE #$2300,SR.
Another problem is that the ST is not always synchronised with the 4 cycles.
I have seen once that my overscan screen displayed the 4 left pixels which
are usually hidden and it never happens again. As all the instructions are
4 cycles multiple you can't change the timing with the 68000 !!!
In fact there is perhaps a solution for your horizontal scroller :
you must set 60Hz during one frame then set 50Hz and perhaps the screen will
be synchronised (I've seen the bug you mentioned, it's very strange).

Your VBL calculation was right, there is 512*313=160256 cycles in 50Hz
and 508*263=133604 cycles in 60Hz (just a little more than the theoretical
values...).

	Since I'm coding an overscan screen, I've discovered a lot of things
like cycles counting and digi-sound improvement.
The best possible overscan (the biggest horizontal resolution) is achieved
with :

	;A0=820A
	;A1=8260
	;D0=0
	;D1=2

	MOVE.B	D1,(A1)
	MOVE.B	D0,(A1)
	88*4 cycles here
	MOVE.B	D0,(A0)
	MOVE.B	D1,(A0)
	16*4 cycles here
	MOVE.B	D1,(A1)
	MOVE.B	D0,(A1)
	12*4 cycles here

total : 512 cycles

Last minute :
	THIS DOESN'T WORK ON EVERY ST !!!
	There is a lot of different incompatible shifters,
	 at least 3 only in my region !!!

I use this routine from lines 1 to 199 then from lines 201 to 269 then
from lines 301 to 313.
The lines 200 and 300 have another routine which pull up the lower and
the upper border (on my old shifter).
The lines 270 to 299 are free because the spot must return to the top.
This trick only works with old shifters, so I have to find the good values
for the new shifter when I'll have one.

	I known all the animation tricks you told me because I have already
use them in my precedent games -on others machines-. I didn't know that it
was possible to hardware scroll the screen but I understand your trick now
(the fact that you must work on one screen sometimes is choking me because
I used this technique only on little machines...).
Your hardware-scroller is the best technique for vertical scrolling because
I need to use only 4 screens instead of 9 and I have to refresh 4 lines
each frame instead of 9, but the refresh didn't take more than 4 scanlines
and your hardware scroller takes 2 scanlines only for the synchronisation...
To remove the upper border I have seen a lot of methods but yours is perhaps
the slowest (because you use VBL synchro). I have noticed that the TIMER C
could be set up to 50 Hz so all 160000 cycles exactly an interruption is
generated. To achieve the perfect stability, I only have to loose 256 cycles.
I don't have yet programmed the hardware scroller but now I do know how to
make it.

	Finally, I have a look at your Cuddly demos main menu and I found
some improvements. You'll say that I gain only few cycles. Ok, but more
we earn time, more we can move screen... (And it's better to take good habits)
Note : I use always ASL instead of LSL because I have worked more than 2 years
ago on 6502 Oric and C64...

 instead of :
		MOVE.L	#adress,A2
 use:		LEA	adress,A2	;with (PC) possible

 instead of :
		MOVE.L	D1,0(A0)
 use:		OPT	O+,OW-	;optimises backward branches and 0 offsets
				;and disables optimisation warnings

 instead of :
		MOVEM.L	(A1)+,D0-D3
		...
		MOVEM.L	D0-D3,-(A1)
		LEA	320(A1),A1
 use :
	X	SET	0
		REPT	n
		MOVEM.L	X(A1),D0-D3
		...
		MOVEM.L	D0-D3,X(A1)
	X	SET	X+320
		ENDR

 instead of :
	LOOP:
		MOVE	D0,-(A7)
		...
		MOVE	(A7)+,D0
		DBRA	D0,LOOP
 use :
		MOVE	#n,-(A7)
	LOOP:
		...
		SUBQ	#1,(A7)
		BNE.S	LOOP
		ADDQ	#2,A7

 instead of :
		MOVE	D0,D1
		AND	#$F,D0
		ASR	#4,D1
		CMP	#$12,D1
		BHI	SOMEWHERE
		ASL	#3,D1

 use :
		MOVE	D0,D1
		AND	#$F,D0
		EOR	D0,D1
		CMP	#$12*16,D1
		BHI	SOMEWHERE
		LSR	#1,D1

 instead of :
		MOVE.L	(A0)+,160(A1)
		MOVE.L	(A0)+,164(A1)
		MOVE.L	(A0)+,168(A1)
		MOVE.L	(A0)+,172(A1)
 use :
		LEA	160(A1),A1
		MOVE.L	(A0)+,(A1)+
		MOVE.L	(A0)+,(A1)+
		MOVE.L	(A0)+,(A1)+
		MOVE.L	(A0)+,(A1)+
 or :		MOVEM.L	(A0)+,D0-D3
		MOVEM.L	D0-D3,160(A1)

 instead of :
		LSL	#1,Dn	;a lot of LSL #1 in your GRODAN demo (argh!!)
 use :		ADD	Dn,Dn

 instead of :	LSL	#2,Dn
 use :		ADD	Dn,Dn
		ADD	Dn,Dn

 instead of :	ROXL	#1,Dn
 use :		ADDX	Dn,Dn

 instead of :	BTST	#7,...
		BNE	branch
 use :		TST.B	...
		BMI	branch

 instead of :	BTST	#0,D0
		BNE	branch
 use :		LSR	#1,D0
		BCS	branch

 instead of :	MOVE	#$11,CCR	;set X and C
 use :		TAS	D0
		NEG.B	D0		;set X and C !!!
					;I'm the first to use this trick
					;see my depacker...

 instead of :	MOVE	#0,CCR		;clear X and C
 use :		SUB	D0,D0

 instead of :	MOVEQ	#0,D0
		MOVE.B	(A0)+,D0
		ASL.L	#8,D0
		ASL.L	#2,D0
 use :		MOVEQ	#0,D0
		MOVE.B	(A0)+,D0
		ASL	#8,D0
		ADD.L	D0,D0
		ADD.L	D0,D0
 or :		MOVEQ	#0,D0
		MOVEP	0(A0),D0
		CLR.B	D0
		ADDQ	#1,A0
		ADD.L	D0,D0
		ADD.L	D0,D0

 instead of :	MOVEQ	#0,D0
		MOVE	(A0)+,D0
		SWAP	D0
		LSR.L	D1,D0
		MOVE	D0,(A1)
		SWAP	D0
		OR	D0,(A1)
 use :		MOVE	(A0)+,D0
		ROR	D1,D0
		MOVE	D0,(A1)

 instead of :	MOVEQ	#0,D0
		MOVE.B	$FFFF8201.W,D0
		ASL	#8,D0
		MOVE.B	$FFFF8203.W,D0
		ASL.L	#8,D0
 use :		MOVEQ	#0,D0
		MOVE.B	$FFFF8201.W,D0
		SWAP	D0
		MOVE.B	$FFFF8203.W,D0
		ASL	#8,D0
 or :		SUB.L	A0,A0
		MOVEP.L	$FFFF8201(A0),D0
		LSR.L	#8,D0
		CLR.B	D0

 instead of :	MOVE.L	SCREEN,D0
		LSR.L	#8,D0
		MOVE.B	D0,$FFFF8203.W
		LSR	#8,D0
		MOVE.B	D0,$FFFF8201.W
 use :		MOVE.L	SCREEN,D0
		LSR	#8,D0
		MOVE.L	D0,$FFFF8200.W
 or :		MOVE.B	SCREEN+2,$FFFF8203.W
		MOVE.B	SCREEN+1,$FFFF8201.W

 instead of :	MOVE	#$4E75,ADDRESS
		JSR	SUBROUTINE
		MOVE	#LEA,ADDRESS
 use :		LEA	RETURN(PC),A6
		JMP	LASTSUBROUTINE
	RETURN	...

	LASTSUBROUTINE
		...
		JMP	(A6)

 When you have to copy only 1 or 2 planes the best trick is to transfer
from memory to memory instead of using MOVEM !!!
 in your code generator, you should add the LEA feature, as follows :
		MOVE.L	D0,160(A1)
		MOVE.L	#$1234,164(A1)
		MOVE.L	#$1236,320(A1)
		MOVE.L	#$1238,324(A1)
		MOVE.L	#$123A,328(A1)

 use :		MOVE.L	D0,160(A1)
		MOVE.L	#$1234,164(A1)
		LEA	320(A1),A1
		MOVE.L	#$1236,(A1)+
		MOVE.L	#$1238,(A1)+
		MOVE.L	#$123A,(A1)+
this means that the LEA must be included when there is more than 2 offsets !!!
My code generator includes some other features like MOVEP, CLR.B, TAS, ST
when needed !!!

	A funny information : I gone to a french software-house called Loriciel.
I showed them your demos and they said me that Atari France gave them the
Union Demo and Atari wanted to order a good demo but Loriciel didn't
accept (perhaps they can't)... (so, if you want to earn money with your demos,
you can address Atari France !!!)

	Finally, you are very good in hardware use, but I think that I'm a
little stronger than you in code optimisation (I optimise while coding !!!).

PS :	I found a new trick to improve the speed of the digirout.
Instead of storing 8 bits values, I store 16 bits pointers :
	MOVE	(A6)+,D7	;D7 could be a multiple of 6
	MOVE.L	(A4,D7.W),D6
	MOVE	(A4,D7.W),D7
	...
It earns 16 cycles but this doubles the size of the digit. However, this
trick is perfect for an overscan screen and it could improve the sound
quality of your 3 voices-digi-shitty-rout (you have to precalculate the
sound pointers).
The following routine is optimal for maximum overscan resolution and
minimal taken time :
	;A0=820A
	;A1=8260
	;D0=0
	;D1=2
	;A7=ptr to digi-table

	MOVE.B	D1,(A1)
	MOVE.B	D0,(A1)
	88*4 cycles here
	MOVE.B	D0,(A0)
	MOVE.B	D1,(A0)
	20 cycles here
	MOVE	(A6)+,D7	;D7 could be a multiple of 6
	MOVE.L	(A7,D7.W),D6
	MOVE	4(A7,D7.W),D7
	MOVE.B	D1,(A1)
	MOVE.B	D0,(A1)
	MOVEP.L	D6,$FFFF8800-$FFFF820A(A0)
	MOVEP	D7,$FFFF8800-$FFFF820A(A0)
Last minute :
	Always the same thing, this doesn't work on very old shifters.

	About protections...
All the TRACE protections are simple to crack (simpler to crack than to
create) because the only difficulty is to revectorize the TRACE routine
and copy the decoded code elsewhere. I understood these tricks when
I cracked the Rob Northen protection : I received a bad copy of a game
called Soldier of Light and I wanted to crack the protection to see how
it works. At first, I trace one line by one line but I left after 40000 lines.
To crack this protection, I used SEKA (MONST2 can't crack these type of
protections). I sourced -with MONST2- the TRACE routine and I modified it
to copy the decoded instruction in an other part of memory. With this trick,
I cracked the code in 1 hour !!!
And now, I can crack these kinds of protection very fast.
The lacks of this prot were :
	- the TRACE vector is modified only once at the beginning.
	- the code behind the prot used TOS so the protection is entirely
	   PC relative and doesn't scratch ROM vectors.
	- the TRACE routine was easy to modify.
Another trick to crack some protections under MONST2 when there is an
untracable decoder in action is to change SR from supervisor to user mode
and CTRL-Run the code. The programmers always use privileged instructions
or access protected memory after the decryption.
The Union Demo is not very difficult to crack but they included 2 tests
of protection :
	- one in the loader during your intro screen
	- one in their raster-copier
The second protection is very hard to remove cause the rastercopier is
packed with HUFFMANN's method, but it's not impossible because the packer
used is already known (it's HARTMANN's packer a little bit improved for
pictures compression), nobody's perfect !

So if you want to have a very good protection :
	- use a fast new packer
	My packer, for example. It's a 4 passes packer and a 1 passe depacker.
	The byte-compression takes 2 passes (1 passe uses a coroutine algorithm)
	and uses the best byte-compressions known.
	The Huffmann compression takes 2 passes (very fast: 5 sec for 32K !!!)
	See the file MEGABAL2.TOS for my depacker...
	- initialize the program during the protection
	  so the cracker has to rewrite the initialisation
	  (ex: send keyboard codes, change MFP values, color palette...)
	- use an absolute TRACE protection
	 here is mine :
			SUB.L	D3,(A3)
			MOVE	6(A7),A3	;only the first 32Kbytes !!!
			MOVE.L	-4(A3),D3
			ADD	A3,D3
			ROR.L	#4,D3
			ADD.L	D3,(A3)
			RTE
	- prevent 'RESET' cracking with CLR.L $426.W more than once
	- clear the memory and test it
			MOVE.L	#$0055AAFF,D0
			LEA	$40000-$1000,A0
		SETUP:	LEA	$1000(A0),A0
			MOVE.L	D0,(A0)
			SUB.L	D0,(A0)
			BEQ.S	SETUP
		here A0=top of memory
	- use overlay code
	the game must be saved packed on the disk in a lot of parts :
		1) the presentation
		2) the game
		3) the scores
	each part must test the protection (I've made one prot per track !!!)
	This architecture is very good for games which need a lot of memory
	because you don't have to store the whole code at any moment.
	Of course, each part must have its own loader.
Re-PS:
If you make scrolling games, don't forget the flip-flop key F10 to change
the frequency (50Hz/60Hz). It's always a pleasure to play -or to look at
the game ?- in 60Hz.
When I say I cracked games, I mean I cracked the game for myself (I like to look
at the code of other good programmers) and I never spread any cracking of me
(except the texts in the Union Demo and in your demos -I never gave your code
to anybody, it's hard to crack though-).
Could your next demo boot on any drive ? This is because I only have an internal
single-sided drive and an external double-sided. (Use bit 0 of $446.W which
contains the number of the booting drive).
Your Cuddly Demos hang on STE in the boot sector (the ROM has been moved
to $E00000 -the ATARI engineers can't write little programms-).

Content of this disk (don't spread anything, please) :
always press TAB to see the resting time

\GRAPHICS\
	POLICE.*	an exemple of my generation technique
			(try to improve something)
	P?1TO???.*	a very useful transformer of PC1 to PI1
			or PI1 to PC1 or PI1 to IFF
			(but easily modifiable for any format...)
	POLY10.S	my first very fast polygon filled show
			(there is a lot of bugs in the clipping, though...
			 and now I know how to go faster...)
\JC_DEMOS\
	DEMO1.TOS	my first demo on ST
			(not fantastic but try to crack the code !!!)
	DEMO2.TOS	preview of a future -I've lost its source- demo
			(press F1 to F4 to change music)
	DEMO3.TOS	preview of a future overscan DEMO
			(there's still upper border on new shifters,
			the white lines indicate the resting time
			-7 scanlines- so I will animate a little sprite
			and add some more text)
\MUSIC\
	GLIDER2.S	musics ripped from GLIDER RIDER and ELEKTRA GLIDE
			-Amstrad Games.
			The playing routine takes 4 scanlines to execute
			-if Mad Max is interested by the optimisations-
	MAGNUM.TOS	a music-loader which loads the second side
			of the UNION DEMO disk on any ST
			(I coded this utility because I wanted to know
			how it sounds)
\PACKERS\
	TETRA?.*
	TRI*.*		2 very good Amiga packers and their ST source
			(there are still little bugs, but it works)
			(only for image files)
	MEGABALL.TOS	your Megaball demo packed with TRILOGY
			(it hanges, sorry...)
	MEGABAL2.TOS	your Megaball demo packed with my packer
			(look at the best packer on ST)
			(it takes 1500 bytes less than the TRILOGY packer
			which is the second best packer on Amiga)
\SPRITES\
	*.*		some tests with my code-generator
			(look at the generated code)
			(these mini-demos had been done in only 2 days
			 so I didn't change the texts, sorry)
			-my record : 72 sprites 17*17 in 2 planes-

OPTIM.DOC	an old file -in french- containing all the optimisations
		I knew one year ago
*.INF		trashy files
DEMOCOPY.PRG	a prerelease of my copier
		(its code is typically my style of programming, very good routs)
		-uses at the present time a 'Twist' formatter, it means
		 a fast format for the old ROMs-
MONST2.TOS
GENST2.*	my version of GENST2 (2.08 the lastest on ST)
		I never see the bugs you mention
AMIGA3.S	an amiga relocator (loads a file and relocates it)
		works under SEKA
CHRONO.S	my cycle-counter (precision of 1 cycle !!!)
		works under SEKA
		use as follows :
			- modify the code below EXEC:
			- change the number of frames at TRAME:
			- assemble it and run with G
			- if the keyboard hanges type <RETURN>
			- d7 contains the number of iterations
			 so the number of cycles is :
				160256*nb frames/d7
			only type :
			 ?d7
			 ?160256*nb frames/d7 register
			add 1 to the result to round it...
		It freezes all interrupts during cycle counting
		 so the result is reliable !!!
CHRONOSP.S	version of cycle-counter used to time my sprite routine
EXTRACT.*	a very useful utility which removes the $1C first bytes
		of a .PRG or .TOS file
		it verifies if the file is relocatable
		Useful under GENST2 because it's faster
		 to INCBIN than to INCLUDE, so I write great portions of
		 code totally relocatable and without external reference
		 and I use INCBIN instead of INCLUDE to earn time during
		 assembly
SEKA.TOS	the lastest version -1.06- of the SEKA assembler (known
		 as ZEN on Amstrad) very useful for little programms
		If you want a doc, I could send it to you the next time

Sorry, no preview of my game cause my graphist didn't came since 1 month
so I didn't progress...
Could you send me some good utilities (an assembler or a curve designer or...)

Letter finished in 6 days.
