

VBL_COUNT	EQU	$465		;adresse du compteur VBL
AFFCPU		EQU	0 
EFFSCR		EQU	0
AFFTEXTE	EQU	1
DEBUG		EQU	1
COMPTEIMAGE	EQU	0
MULS		EQU	0		;0= 0 muls
					;1= 4 muls
					;2=14 muls

CLIPPING	EQU	0
CLIPSIZE	EQU	4096
NBLINE		EQU	150
NBPOINTS	EQU	64
CIRCLESIZE	EQU	1024
CIRCLEMARGE	EQU	CIRCLESIZE-NBLINE
ZCLIPDIST	EQU	16


MFP_BASE	EQU	$FFFFFA00
MFP_GPIP	EQU	$FFFFFA01
MFP_AER		EQU	$FFFFFA03
MFP_DDR		EQU	$FFFFFA05
MFP_IERA	EQU	$FFFFFA07
MFP_IERB	EQU	$FFFFFA09
MFP_IPRA	EQU	$FFFFFA0B
MFP_IPRB	EQU	$FFFFFA0D
MFP_ISRA	EQU	$FFFFFA0F
MFP_ISRB	EQU	$FFFFFA11
MFP_IMRA	EQU	$FFFFFA13
MFP_IMRB	EQU	$FFFFFA15
MFP_VR		EQU	$FFFFFA17
MFP_TACR	EQU	$FFFFFA19
MFP_TBCR	EQU	$FFFFFA1B
MFP_TCDCR	EQU	$FFFFFA1D
MFP_TADR	EQU	$FFFFFA1F
MFP_TBDR	EQU	$FFFFFA21
MFP_TCDR	EQU	$FFFFFA23
MFP_TDDR	EQU	$FFFFFA25







		SECTION TEXT

***********************************************************
*		programme principal :			  *
*							  *
*		- basse resolution			  *
*		- sauvegarde de la palette		  *
*		- installation nouvelle VBL		  *
*							  *
***********************************************************

SUPER	MACRO
	CLR.L	-(SP)			superviseur
	MOVE	#$20,-(SP)
	TRAP	#1
	ADDQ	#6,SP
	ENDM

START
	BRA	BEGIN
	DC.B	'3D Optimized routines library : '
	DC.B	'ALL Coding by C.Levastre, JC.Meyrignac, V.Pennet - '
	DC.B	'This program is not for public domain'
	EVEN
BEGIN
	MOVE.L	4(SP),A3
	MOVE.L	#MYSTACK,SP
	MOVE.L	$C(A3),D0
	ADD.L	$14(A3),D0
	ADD.L	$1C(a3),D0
	ADD.L	#$100,D0
	MOVE.L	D0,-(SP)
	MOVE.L	A3,-(SP)

	CLR	-(SP)			reserve
	MOVE	#$4A,-(SP)
	TRAP	#1
	LEA	12(SP),SP

	SUPER
	MOVE.L	D0,USERSTACK
	MOVE.B	$FFFF8260.W,SYS_RES	resolution



	MOVE	#37,-(SP)
	TRAP	#14
	ADDQ	#2,SP
	CLR	$FFFF8260.W

	MOVE.L	$44E.W,D0		adresse ecran
	MOVE.L	D0,SYS_SCREEN

	LEA	RTE(PC),A0		div 0
	MOVE.L	A0,$14.W

	MOVE.L	D0,SYS_SCR1
	MOVE.L	#screen2,D0		adresse des ecrans
	ADD.L	#255,D0
	CLR.B   D0
	MOVE.L	D0,sys_scr2
	ADD.L	#32000,D0
	MOVE.L	D0,sys_scr3
	ADD.L	#32000,D0
	MOVE.L	D0,sys_scr4
	ADD.L	#32000,D0
	MOVE.L	D0,sys_scr5
	ADD.L	#32000,D0
	MOVE.L	D0,sys_scr6

	LEA	$FFFF8240.W,A0
	LEA	SYS_PALETTE,A1
	JSR	COPY8L(PC)		sauve la palette courante

	MOVE.L	A0,A1			installe nouvelle palette
	LEA	PALETTE,A0
	JSR	COPY8L(PC)





	MOVE	#2,-(SP)
	MOVE	#2,-(SP)
	TRAP	#13
	ADDQ	#4,SP



	JSR	MAIN(PC)

	LEA	SYS_PALETTE,A0
	LEA	$FFFF8240.W,A1
	JSR	COPY8L(PC)		restore la palette courante

	CLR	D0
	MOVE.B	SYS_RES,D0
	MOVE	D0,-(SP)		resolution d'origine
    	MOVE.L	SYS_SCREEN,-(SP)	et ecran d'origine
    	MOVE.L	SYS_SCREEN,-(SP)
    	MOVE	#5,-(SP)
    	TRAP	#14
    	LEA	12(SP),SP

	MOVE.L	USERSTACK,-(SP)		mode utilisateur
	MOVE	#$20,-(SP)
	TRAP	#1
	ADDQ	#6,SP
BYE
	CLR	-(SP)			fin du programme
	MOVE	#$4C,-(SP)
	TRAP	#1
RTE
	NOT	$FFFF8240.W
	RTE

;----------- recopie de 8 mots long ---------------------------------

COPY8L
	MOVEM.L	(A0),D0-D7
	MOVEM.L	D0-D7,(A1)
	RTS

;------------- g‚n‚ration du fastcls ---------------------------

GENFASTCLS
	LEA	bfastcls,A0
	MOVE.L	#$48E0FF7E,D0
	MOVE	#570,D1
GFCREP
	MOVE.L	D0,(A0)+		genere les movem
	DBF	D1,GFCREP
	MOVE.L	#$48E00300,(A0)+	dernier movem
	MOVE	#$4E75,(A0)		rts
	RTS

*****************************************************************
*	macro de swapping des 2 ecrans 				*
*****************************************************************

SWAPPER MACRO
	IFEQ	AFFCPU
	MOVE	#$700,$FFFF8240.W
	ENDC
SWAPWAIT
	TST.B	VBL_COUNT
	BEQ.S	SWAPWAIT
	CLR.B	VBL_COUNT
	IFEQ	AFFCPU
	CLR	$FFFF8240.W
	ENDC
	LEA	SYS_SCR1,A0
	MOVEM.L	(A0)+,D0/D1/D2/D3/D4/D5
	MOVE.L	D0,D6
	MOVEM.L	D1/D2/D3/D4/D5/D6,-(A0)
	LSR	#8,D5
	MOVE.L	D5,$FFFF8200.W
	ENDM

*****************************************************************
*	programme principal					*
*****************************************************************

MAIN
	MOVE.L	USP,A0
	MOVE.L	A0,-(SP)

	JSR	INITCLIPPING
	JSR	GENFASTCLS(PC)

	MOVE.L	objetcourant(PC),A2	;descripteur d'objet
	MOVE.L	(A2),animcourante

REPEAT
	IFEQ	EFFSCR
 	JSR	ffastcls
	ENDC

	JSR	CALCPROJ(PC)

	MOVE.L	animcourante(PC),A3	lire la prochaine animation
	MOVE	(A3)+,D0		adresse de l'objet
	BGE.S	.PASFINANIM		c'est la derniŠre image
	ADD	D0,A3
	MOVE	(A3)+,D0
.PASFINANIM
	MOVE.L	A3,A2
	ADD	D0,A2
	MOVE.L	A3,animcourante


	LEA	PROJETES,A1

	jsr	CALCOBJ(PC)

	MOVE	(A2)+,D0
	ADD	D0,A2

	jsr	DRAWOBJECT(PC)

	SWAPPER

	add	#1,compteurimage

	move.b	$FFFFFC02.W,D0

	cmp.b	#$4E,D0
	bne.s	pasplus
	addq	#4,DIST
	bra	REPEAT
pasplus
	cmp.b	#$4A,D0
	bne.s	pasmoins
	subq	#4,DIST
	bra	REPEAT
pasmoins
	cmp	#500,DIST
	bls.s	passpace

	MOVE.L	objetcourant(PC),A0	;passe objet suivant
	lea	18(A0),A0
	tst.l	(A0)
	bne.s	pasfbobj
	lea	objets,A0


pasfbobj
	MOVE.L	A0,objetcourant

	MOVE.L	(A0)+,animcourante
	move	(A0)+,VROTX
	move	(A0)+,VROTY
	move	(A0)+,VROTZ
	move.w	(A0)+,DIST

	move.b	(A0)+,D1
	ext.w	D1
	add	D1,D1
	add	D1,D1
	move	D1,OBS_ROTX

	move.b	(A0)+,D1
	ext.w	D1
	add	D1,D1
	add	D1,D1
	move	D1,OBS_ROTY

	move.b	(A0)+,D1
	ext.w	D1
	add	D1,D1
	add	D1,D1
	move	D1,OBS_ROTZ

	move.b	(A0)+,D1
	ext.w	D1
	move	D1,VDIST

	move	(A0),cptwaiting

	bra	REPEAT
passpace

	cmp.b	#$39,$FFFFFC02.W

	bne	REPEAT

	MOVE.L	(SP)+,A0
	MOVE.L	A0,USP


	rts

objetcourant:
	DC.L	objets
animcourante:
	DC.L	0
compteurimage:
	DC.W	0
compteurvbl:
	DC.W	0
nombreimage
	DC.W	0

*------------- interruption vbl ----------------------------

new_vbl:
	ADD.B	#1,VBL_COUNT



	CLR	$FFFF8240.W

;	NOT	color1
;	MOVE	color1(PC),$FFFF8242.W

	MOVE	#$013,$FFFF8244.W
	MOVE	#$035,$FFFF8248.W
	MOVE	#$720,$FFFF8250.W
	clr.b	MFP_TBCR
	move.b	#199-10,MFP_TBDR
	move.b	#8,MFP_TBCR

	MOVEM.L	D0-D7/A0/A1/A2/A3/A6,-(SP)

	IFEQ	COMPTEIMAGE

	sub	#1,compteurvbl
	bgt	pas50vbl
	move	#50,compteurvbl
	move	compteurimage(PC),nombreimage
	clr	compteurimage
pas50vbl

	MOVE.L	sys_scr6,A0
	ADDQ	#2,A0
	MOVE	nombreimage(PC),D0
	ADD	D0,D0
	ADD	D0,D0
	jmp	zeroa99(PC,D0.W)
zeroa99
	INCBIN	'ZEROA99.BIN'
	ENDC

	tst.b	cptwaiting
	bgt.s	noincdist

	MOVE	VDIST(PC),D0
	ADD	D0,DIST

	bra.s	gescurseur
noincdist
	subq	#1,cptwaiting
gescurseur

	MOVEM.L	(SP)+,D0-D7/A0/A1/A2/A3/A6
	RTE

it1_timerb:
	MOVE	#$002,$FFFF8240.W
	MOVE	#$077,$FFFF8242.W
	MOVE	#$055,$FFFF8244.W
	MOVE	#$044,$FFFF8248.W
	MOVE	#$033,$FFFF8250.W

	CLR.B	MFP_TBCR
	RTE

color1:
	DC.W	$FF0
waiting
	DC.W	0
cptwaiting
	DC.W	10000

	EVEN


*****************************************************************
*								*
*	routine d'affichage d'objet 				*
*	avec clipping et tramage, 1 plan, 4 plans	        *
*								*
*	* polygones jusqu'a 8 cotes				*
*	* cercles						*
*	* sprites						*
*	* lignes						*
*								*
*	- calcul des droites dans une table 		        *
*	- remplissage par movem.l (4 plans)		        *
*	- tramage 16 couleurs en movem.l (4 plans)		*
*	- clipping automatique en X				*
*								*
* APPEL : en mode superviseur obligatoire			*
*								*
*****************************************************************

;------------- d‚finition des registres -------------------------

MINY		EQUR		D6      r‚serv‚s dans tous le calcul
MAXY		EQUR		D7

ROUTTYPEOBJ	EQUR		A0
PROJPOINTS	EQUR		A1
PTROBJECT	EQUR		A2
PTRSEGMENT	EQUR		A6	pointeur sur segment


					

;------------ trace d'un objet 3D --------------------------------------


LIT3	MACRO
	LEA	PROJETES+10(PC),PROJPOINTS
	MOVEM	(PTROBJECT)+,D0/D1/D2
	MOVE.L	(PROJPOINTS,D0.W),D0	XA/YA
	MOVE.L	(PROJPOINTS,D1.W),D1	XB/YB
	MOVE.L	(PROJPOINTS,D2.W),D2	XC/YC
	ENDM

FSUIV	MACRO
	MOVE.L	(PTROBJECT)+,ROUTTYPEOBJ
	JMP	(ROUTTYPEOBJ)
	ENDM

TESTV	MACRO
	LIT3
	MOVE	D1,D5
	SUB	D0,D5			XB-XA
	MOVE	D2,D6
	SUB	D1,D6			XC-XB
	SWAP	D0
	SWAP	D1
	SWAP	D2
	MOVE	D0,D3
	SUB	D1,D3			YA-YB
	MOVE	D2,D4
	SUB	D1,D4			YC-YB
	MULS	D4,D5
	MULS	D3,D6
	ADD.L	D5,D6
	ENDM

;------------- TEST DE VISIBILITE D'UNE FACE --------------------

TESTVFACE
	TESTV	
	BLE.S	.FACECACHEE
	ADD	(PTROBJECT),PTROBJECT
	FSUIV
.FACECACHEE
	ADDQ	#2,PTROBJECT
	FSUIV

;------------- AFFICHAGE D'UN SPRITE : (C) M-CODER --------------
;
;	A6=d‚but du bitmap du sprite
;	A1=adresse base ‚cran
;	d1=coord X
;	d2=coord Y
;	D3=nb octets de largeur=((largeur en pixels+15)and $FFF0)/2
;	d4=hauteur
;

LARGEUR	EQU	320

SPRITE
	LEA	PROJETES+10(PC),PROJPOINTS
	MOVE	(PTROBJECT)+,D0
	ADD	D0,PROJPOINTS
	MOVE	(PROJPOINTS)+,D2
	MOVE	(PROJPOINTS),D1
	MOVE.L	A2,A6
	ADD	(A2)+,A6

	MOVE	(A6)+,D3
	MOVE	(A6)+,D4

	ASR	#3,D1
	ADD	#LARGEUR/2,D1

	LSR	#1,D3
	SUB	D3,D1
	ADDQ	#7,D3
	AND	#$FFF8,D3
	MOVE	D4,D5
	LSR	#1,D5
	SUB	D5,D2

	CMP	#NBLINE,D2
	BLO.S	.CLIPHAUT
	BGE	.RETSP			trop en bas
	NEG	D2
	SUB	D2,D4
	BLS	.RETSP
	MULU	D3,D2
	ADD	D2,A6
	MOVE	MULS160(PC),D2
	BRA.S	.NOCLIPBAS
.CLIPHAUT
	MOVE	D2,D0
	ADD	D4,D0
	ADD	D2,D2
	LEA	MULS160(PC),A1
	MOVE	(A1,D2.W),D2		D2=offset ‚cran
	SUB	#NBLINE,D0
	BLS.S	.NOCLIPBAS
	SUB	D0,D4
.NOCLIPBAS
	MOVEQ	#$F,D0			isole d‚calage et efface flags clipping
	AND	D1,D0
	SUB	D0,D1
	ADD	D0,D0			*4
	ADD	D0,D0

	ASR	#1,D1			(X and $FFF0)/2
	CMP	#LARGEUR/2,D1		<160 ?
	BLO.S	.CLIPGAU
	BGE.S	.RETSP			sprite trop … droite
	NEG	D1
	SUB	D1,D3			calcule nb plans restants
	BLO.S	.RETSP
	MOVE	D1,A3
	ADD	A3,A6
	OR.B	#$40,D0			indique clipping … gauche
	BRA.S	.NOCLIPDRO
.CLIPGAU
	SUB.L	A3,A3
	ADD	D1,D2			offset Y
	ADD	D3,D1
	SUB	#LARGEUR/2,d1		>nb plans dans une ligne ?
	BLO.S	.NOCLIPDRO
	TAS	D0			indique clipping … droite
	SUB	D1,D3			calcul nb plans restants
	MOVE	D1,A3
.NOCLIPDRO
	MOVE.L	sys_scr6,A1
	ADD	D2,A1
	MOVE	#160,A0
	SUB	D3,A0
	SUBQ	#1,D4
	LSR	#3,D3
	LEA	.SPRITEROUT(PC),A4
	JSR	(A4,D0.W)
.RETSP
	FSUIV
.SPRITEROUT
	INCBIN	'SPRITE2.BIN'

;------------- EXECUTION D'UNE SOUS ROUTINE ---------

ASMROUT
	JSR	(PTROBJECT)
	FSUIV

;------------ AFFICHAGE D'UNE LIGNE 1 PLAN -----------------

L_DX	EQUR	D1
L_DY	EQUR	D0
L_X1	EQUR	D3
L_Y1	EQUR	D2
L_X2	EQUR	D5
L_Y2	EQUR	D4
L_CUMUL	EQUR	D6
L_CX1	EQUR	D7

L_ECR1	EQUR	A0
L_ECR2	EQUR	A1
L_PTR	EQUR	A3

LMAXX	=	319
LMAXY	=	NBLINE-1


FINLINEZ
	ADDQ	#2,PTROBJECT
FINLINE
	FSUIV
DRAWLINEP
LINE:
	LEA	PROJETES+8(PC),L_ECR1
	MOVE.L	L_ECR1,L_ECR2
	ADD	(PTROBJECT)+,L_ECR1
	ADD	(PTROBJECT)+,L_ECR2
	MOVEM	(L_ECR1),L_DX/L_Y1/L_X1
	MOVEM	(L_ECR2),L_DY/L_Y2/L_X2

	MOVEQ	#16,L_CUMUL

	CMP	L_DX,L_DY
	BLT.S	.DXSUPDY
	EXG	L_ECR1,L_ECR2
	EXG	L_DX,L_DY
	EXG	L_Y1,L_Y2
	EXG	L_X1,L_X2
.DXSUPDY
	CMP	L_CUMUL,L_DY
	BGE.S	.TOTVISIBLE
	CMP	L_CUMUL,L_DX
	BLE.S	FINLINEZ

	SUB	L_DX,L_DY		;L_DY-L_DX->L_DY
	MOVE.L	-4(L_ECR2),L_X2
	MOVE.L	-4(L_ECR1),L_CX1
	ASR.L	#8,L_X2
	ASR.L	#8,L_CX1

	SUB	L_CX1,L_X2		;L_X2-L_X1
	SUB	L_DX,L_CUMUL		;DIST-L_DX
	MULS	L_CUMUL,L_X2
	DIVS	L_DY,L_X2
	ADD	L_CX1,L_X2
	ASR	#4,L_X2

	MOVE.L	-8(L_ECR2),L_Y2
	MOVE.L	-8(L_ECR1),L_CX1
	ASR.L	#8,L_Y2
	ASR.L	#8,L_CX1

	SUB	L_CX1,L_Y2		;L_X2-L_X1
	MULS	L_CUMUL,L_Y2
	DIVS	L_DY,L_Y2
	ADD	L_CX1,L_Y2
	ASR	#4,L_Y2
	ADD	#NBLINE/2,L_Y2

	BRA.S	.OKCLIPZ
.TOTVISIBLE
	ASR	#3,L_X2
.OKCLIPZ
	ASR	#3,L_X1

	MOVE.L	sys_scr6(PC),L_ECR1
	ADD	(PTROBJECT)+,L_ECR1

	ADD	#160,L_X1
	ADD	#160,L_X2

	CMP	L_Y1,L_Y2
	BGE.S	.NOSWAP1	tri par y croissants
	EXG	L_Y1,L_Y2
	EXG	L_X1,L_X2
.NOSWAP1
	MOVE	L_Y2,L_DY	Droite dans ‚cran?
	BLT	FINLINE
	CMP	#LMAXY,L_Y1	
	BGT	FINLINE
	SUB	L_Y1,L_DY	calcul DY
	MOVE	L_X2,L_DX		
	SUB	L_X1,L_DX	calcul DX

	CMP	#LMAXY,L_Y2	Doit on clipper?
	BLE.S	.NOCLIPBAS
	SUB	#LMAXY,L_Y2	clipping en bas
	MULS	L_DX,L_Y2
	DIVS	L_DY,L_Y2
	SUB	L_Y2,L_X2
	MOVE	#LMAXY,L_Y2
.NOCLIPBAS
	TST	L_Y1
	BGE.S	.NOCLIPHAUT	doit on clipper ?
	MULS	L_DX,L_Y1
	DIVS	L_DY,L_Y1
	SUB	L_Y1,L_X1	clipping en haut
	CLR	L_Y1
.NOCLIPHAUT
	CMP	L_X1,L_X2
	BGE.S	.NOSWAP2
	EXG	L_X1,L_X2
	EXG	L_Y1,L_Y2
	NEG	L_DX
	NEG	L_DY
.NOSWAP2
	TST	L_X2		Droite visible?
	BLT	FINLINE
	CMP	#LMAXX,L_X1
	BGT	FINLINE
	CMP	#LMAXX,L_X2	Doit on clipper?
	BLE.S	.NOCLIPDROITE
	SUB	#LMAXX,L_X2
	MULS	L_DY,L_X2
	DIVS	L_DX,L_X2
	SUB	L_X2,L_Y2
	MOVE	#LMAXX,L_X2
.NOCLIPDROITE
	TST	L_X1
	BGE.S	.NOCLIPGAUCHE
	MULS	L_DY,L_X1
	DIVS	L_DX,L_X1
	SUB	L_X1,L_Y1
	CLR	L_X1
.NOCLIPGAUCHE
	MOVE	L_X2,L_DX
	SUB	L_X1,L_DX	
	MOVE	L_Y2,L_DY
	SUB	L_Y1,L_DY

	ADD	L_Y2,L_Y2		Y2*2
	ADD	L_Y1,L_Y1
	LEA	MULS160(PC),L_PTR
	MOVE.L	L_ECR1,L_ECR2
	ADD	(L_PTR,L_Y2.W),L_ECR2	adresse ecran	
	ADD	(L_PTR,L_Y1.W),L_ECR1

	MOVEQ	#$F,L_Y2
	EOR	L_Y2,L_X2
	AND	L_X2,L_Y2		X2 and $F
	EOR	L_Y2,L_X2
	LSR	#1,L_X2
	ADD	L_X2,L_ECR2
	CLR	L_X2
	BSET	L_Y2,L_X2		X2=pattern

	MOVEQ	#$F,L_Y1
	EOR	L_Y1,L_X1
	AND	L_X1,L_Y1		X2 and $F
	EOR	L_Y1,L_X1
	LSR	#1,L_X1
	ADD	L_X1,L_ECR1
	CLR	L_X1
	BSET	L_Y1,L_X1		X2=pattern

	MOVE	#-160,L_Y2		off ligne = 160
	TST	L_DY			
	BGE.S	.DYSUP0
	NEG	L_DY
	NEG	L_Y2			off ligne = -160
.DYSUP0				
	CMP	L_DX,L_DY
	BGE	DYGEDX
.DYLTDX
	MOVE	L_DX,L_CUMUL		cumul
	ASR	#1,L_CUMUL
	MOVE	L_CUMUL,L_Y1
	ADD	L_Y1,L_Y1
	ADD	L_Y1,L_Y1
	JMP	.JMP1(PC,L_Y1.W)
.JMP1
CPT	SET	28
	REPT	160-1
	BRA	FDYLTDX-CPT
CPT	SET	CPT+28
	ENDR

MLINE1	MACRO
.LI2REP.\@
	OR	L_X2,(L_ECR2)
	OR	L_X1,(L_ECR1)
	SUB	L_DY,L_CUMUL
	BGE.S	.LI2NOSTEP1.\@
	ADD	L_DX,L_CUMUL
	ADD	L_Y2,L_ECR2
	SUB	L_Y2,L_ECR1
.LI2NOSTEP1.\@
	ADD	L_X2,L_X2
	BCC.S	.LI2NOSTEP2.\@
	SUBQ	#8,L_ECR2
	MOVEQ	#1,L_X2
.LI2NOSTEP2.\@
	ROR	L_X1
	BCC.S	.LI2NOSTEP3.\@
	ADDQ	#8,L_ECR1
.LI2NOSTEP3.\@
	ENDM

	REPT	160
	MLINE1
	ENDR
FDYLTDX
	FSUIV

DYGEDX
	MOVE	L_DY,L_CUMUL
	ASR	#1,L_CUMUL		cumul=dy/2
	MOVE	L_CUMUL,L_Y1			dy
	ADD	L_Y1,L_Y1
	ADD	L_Y1,L_Y1
	JMP	.JMP2(PC,L_Y1.W)
.JMP2 
CPT	SET	28
	REPT	NBLINE/2
	BRA	FDYGEDX-CPT
CPT	SET	CPT+28
	ENDR

MLINE2	MACRO
.LI1REP.\@
	OR	L_X2,(L_ECR2)
	OR	L_X1,(L_ECR1)
	SUB	L_DX,L_CUMUL
	BGE.S	.LI1NOSTEP2.\@
	ADD	L_DY,L_CUMUL
	ADD	L_X2,L_X2
	BCC.S	.LI1NOSTEP.\@
	SUBQ	#8,L_ECR2
	MOVEQ	#1,L_X2
.LI1NOSTEP.\@
	ROR	L_X1
	BCC.S	.LI1NOSTEP2.\@
	ADDQ	#8,L_ECR1
.LI1NOSTEP2.\@
	ADD	L_Y2,L_ECR2
	SUB	L_Y2,L_ECR1
	ENDM

	REPT	(NBLINE/2)+1
	MLINE2
	ENDR
FDYGEDX

	FSUIV

;------------- AFFICHAGE D'UNE LIGNE 16 COULEURS ------

DRAWLINE
	FSUIV

;------------- AJOUT D'UN POINT CENTRAL ----------

PLOT12
	LEA	PROJETES(PC),PROJPOINTS
	MOVE	(PTROBJECT)+,D0
	MOVEM.L	(PROJPOINTS,D0.W),D0/D1/D2
	MOVE	(PTROBJECT)+,D3
	MOVEM.L	(PROJPOINTS,D3.W),D3/D4/D5
	SWAP	D2
	SWAP	D5
	ADD.L	D0,D3
	ADD.L	D1,D4
	ADD	D2,D5
	ASR.L	#1,D3
	ASR.L	#1,D4
	ASR	#1,D5
	ADD	(PTROBJECT)+,PROJPOINTS
	MOVE.L	D3,(PROJPOINTS)+
	MOVE.L	D4,(PROJPOINTS)+
	MOVE	D5,(PROJPOINTS)+
	DIVS	D5,D3
	DIVS	D5,D4
	ADD	#NBLINE/2,D3
	MOVE	D3,(PROJPOINTS)+
	MOVE	D4,(PROJPOINTS)+
	FSUIV



;------------- POLYGONE 3 cot‚s ------------------

HIDEPOLYG3
	ADDQ	#4,PTROBJECT
	FSUIV
POLYG3
	TESTV
	BLE.S	HIDEPOLYG3
	LEA	SEGMENTS(PC),PTRSEGMENT
	MOVEM.L	D0/D1/D2,(PTRSEGMENT)
	MOVEQ	#3,MINY
	MOVE	(PTROBJECT)+,MAXY
	ADD	(PTROBJECT),PTROBJECT
	MOVE.L	PTROBJECT,-(SP)
	JSR	POLYGONE(PC)
	MOVE.L	(SP)+,PTROBJECT
DRAWOBJECT
	FSUIV
POLYG3V
	LIT3
	SWAP	D0
	SWAP	D1
	SWAP	D2
	LEA	SEGMENTS(PC),PTRSEGMENT
	MOVEM.L	D0/D1/D2,(PTRSEGMENT)
	MOVEQ	#3,MINY
	MOVE	(PTROBJECT)+,MAXY
	MOVE.L	PTROBJECT,-(SP)
	JSR	POLYGONE(PC)
	MOVE.L	(SP)+,PTROBJECT
	FSUIV

;-------------- polygone 4 cotes --------------------

HIDEPOLYG4
	ADDQ	#6,PTROBJECT
	FSUIV
POLYG4
	TESTV
	BLE.S	HIDEPOLYG4
	MOVE	(PTROBJECT)+,D3
	MOVE.L	(PROJPOINTS,D3.W),D3
	SWAP	D3
	LEA	SEGMENTS(PC),PTRSEGMENT
	MOVEM.L	D0/D1/D2/D3,(PTRSEGMENT)
	MOVEQ	#4,MINY
	MOVE	(PTROBJECT)+,MAXY
	ADD	(PTROBJECT),PTROBJECT
	MOVE.L	PTROBJECT,-(SP)
	JSR	POLYGONE(PC)
	MOVE.L	(SP)+,PTROBJECT
	FSUIV
POLYG4V
	LEA	PROJETES+10(PC),PROJPOINTS
	MOVEM	(PTROBJECT)+,D0/D1/D2/D3
	MOVE.L	(PROJPOINTS,D0.W),D0	XA/YA
	MOVE.L	(PROJPOINTS,D1.W),D1	XB/YB
	MOVE.L	(PROJPOINTS,D2.W),D2	XC/YC
	MOVE.L	(PROJPOINTS,D3.W),D3	XC/YC
	SWAP	D0
	SWAP	D1
	SWAP	D2
	SWAP	D3
	LEA	SEGMENTS(PC),PTRSEGMENT
	MOVEM.L	D0/D1/D2/D3,(PTRSEGMENT)
	MOVEQ	#4,MINY
	MOVE	(PTROBJECT)+,MAXY
	MOVE.L	PTROBJECT,-(SP)
	JSR	POLYGONE(PC)
	MOVE.L	(SP)+,PTROBJECT
	FSUIV

;-------------- polygone 6 cotes --------------------

HIDEPOLYG6
	LEA	10(PTROBJECT),PTROBJECT
	FSUIV
POLYG6
	TESTV
	BLE.S	HIDEPOLYG6
	MOVE	(PTROBJECT)+,D3
	MOVE.L	(PROJPOINTS,D3.W),D3
	SWAP	D3
	MOVE	(PTROBJECT)+,D4
	MOVE.L	(PROJPOINTS,D4.W),D4
	SWAP	D4
	MOVE	(PTROBJECT)+,D5
	MOVE.L	(PROJPOINTS,D5.W),D5
	SWAP	D5
	LEA	SEGMENTS(PC),PTRSEGMENT
	MOVEM.L	D0/D1/D2/D3/D4/D5,(PTRSEGMENT)
	MOVEQ	#6,MINY
	MOVE	(PTROBJECT)+,MAXY
	ADD	(PTROBJECT),PTROBJECT
	MOVE.L	PTROBJECT,-(SP)
	JSR	POLYGONE(PC)
	MOVE.L	(SP)+,PTROBJECT
	FSUIV
POLYG6V
	LEA	PROJETES+10(PC),PROJPOINTS
	MOVEM	(PTROBJECT)+,D0/D1/D2/D3/D4/D5
	MOVE.L	(PROJPOINTS,D0.W),D0	XA/YA
	MOVE.L	(PROJPOINTS,D1.W),D1	XB/YB
	MOVE.L	(PROJPOINTS,D2.W),D2	XC/YC
	MOVE.L	(PROJPOINTS,D3.W),D3	XC/YC
	MOVE.L	(PROJPOINTS,D4.W),D4	XC/YC
	MOVE.L	(PROJPOINTS,D5.W),D5	XC/YC
	SWAP	D0
	SWAP	D1
	SWAP	D2
	SWAP	D3
	SWAP	D4
	SWAP	D5
	LEA	SEGMENTS(PC),PTRSEGMENT
	MOVEM.L	D0/D1/D2/D3/D4/D5,(PTRSEGMENT)
	MOVEQ	#6,MINY
	MOVE	(PTROBJECT)+,MAXY
	MOVE.L	PTROBJECT,-(SP)
	JSR	POLYGONE(PC)
	MOVE.L	(SP)+,PTROBJECT
	FSUIV

;-------------- polygone 7 cotes --------------------

HIDEPOLYG7
	LEA	12(PTROBJECT),PTROBJECT
	FSUIV
POLYG7
	TESTV
	BLE.S	HIDEPOLYG7
	MOVE	(PTROBJECT)+,D3
	MOVE.L	(PROJPOINTS,D3.W),D3
	SWAP	D3
	MOVE	(PTROBJECT)+,D4
	MOVE.L	(PROJPOINTS,D4.W),D4
	SWAP	D4
	MOVE	(PTROBJECT)+,D5
	MOVE.L	(PROJPOINTS,D5.W),D5
	SWAP	D5
	MOVE	(PTROBJECT)+,D6
	MOVE.L	(PROJPOINTS,D6.W),D6
	SWAP	D6
	LEA	SEGMENTS(PC),PTRSEGMENT
	MOVEM.L	D0/D1/D2/D3/D4/D5/D6,(PTRSEGMENT)
	MOVEQ	#7,MINY
	MOVE	(PTROBJECT)+,MAXY
	ADD	(PTROBJECT),PTROBJECT
	MOVE.L	PTROBJECT,-(SP)
	JSR	POLYGONE(PC)
	MOVE.L	(SP)+,PTROBJECT
	FSUIV
POLYG7V
	LEA	PROJETES+10(PC),PROJPOINTS
	MOVEM	(PTROBJECT)+,D0/D1/D2/D3/D4/D5/D6
	MOVE.L	(PROJPOINTS,D0.W),D0	XA/YA
	MOVE.L	(PROJPOINTS,D1.W),D1	XB/YB
	MOVE.L	(PROJPOINTS,D2.W),D2	XC/YC
	MOVE.L	(PROJPOINTS,D3.W),D3	XC/YC
	MOVE.L	(PROJPOINTS,D4.W),D4	XC/YC
	MOVE.L	(PROJPOINTS,D5.W),D5	XC/YC
	MOVE.L	(PROJPOINTS,D6.W),D6	XC/YC
	SWAP	D0
	SWAP	D1
	SWAP	D2
	SWAP	D3
	SWAP	D4
	SWAP	D5
	SWAP	D6
	LEA	SEGMENTS(PC),PTRSEGMENT
	MOVEM.L	D0/D1/D2/D3/D4/D5/D6,(PTRSEGMENT)
	MOVEQ	#7,MINY
	MOVE	(PTROBJECT)+,MAXY
	MOVE.L	PTROBJECT,-(SP)
	JSR	POLYGONE(PC)
	MOVE.L	(SP)+,PTROBJECT
	FSUIV

	


;-------------- fin de lecture d'un objets -----------------------------

ENDDRAWOBJECT
	RTS

;-------------- calcul et clipping d'une ligne verticale ---------------



ZA		EQUR		D0
ZB		EQUR		D1

XA		EQUR		D2	;extremit‚s de la droite
YA		EQUR		D3
XB		EQUR		D4
YB		EQUR		D5

REGDATA		EQUR		D1

REGLINE		EQUR		A0	;NBLINE

;MINY		EQUR		D6      r‚serv‚s dans tous le calcul
;MAXY		EQUR		D7

;PROJPOINTS	EQUR		A1
;PTROBJECT	EQUR		A2

PTRY		EQUR		A3	pointeur tabley
JMP		EQUR		A4	adresse debut du saut


PTRPTS1		EQUR		A5
PTRPTS2		EQUR		A6



;
;	CALCUL DE LA DROITE :
;
;	XA,YA,XB,YB
;	PTRY,REGLINE,REGDATA,JMPLINE
;
;

CALCRETOUR2
	REPT	NBLINE/2	ligne verticale
	MOVE.L	XA,(PTRY)+
	ENDR
RETOURVERT
	RTS
VERTLINE
	CMP	REGLINE,YA	clipping
	BLS.S	.YASUPZERO
	BGT.S	RETOURVERT
	MOVEQ	#0,YA
.YASUPZERO
	CMP	REGLINE,YB
	BLS.S	.YBINFMAX
	BLT.S	RETOURVERT
	MOVE	REGLINE,YB
.YBINFMAX
	CMP	MAXY,YB		tester maximum
	BLE.S	.PASMAXIMUM
	MOVE	YB,MAXY
.PASMAXIMUM
	CMP	MINY,YA		tester minimum
	BGE.S	.PASMINIMUM
	MOVE	YA,MINY
.PASMINIMUM
	SUB	YA,YB		YB=DY
	ADD	YA,YA
	ADD	YA,PTRY		debut de table
	MOVE	XA,YA
	SWAP	XA
	MOVE	YA,XA
	BCLR	#0,YB
	BEQ.S	.VERTPAIR
	MOVE	XA,(PTRY)+	
.VERTPAIR
	NEG	YB
	JMP	RETOURVERT-2(PC,YB.W)
CALCRETOUR
	RTS

;-------------- d‚but calcul des points d'une ligne -----------------

CALCLINE
	MOVE	USP,PTRY	adresse de la table des X
	CMP	YA,YB		c'est un ligne montante ?
	BEQ.S	CALCRETOUR	ligne horizontale -> fin
	BGE.S	.YBSUPYA
	EXG	XA,XB		‚change les points
	EXG	YA,YB
	LEA	NBLINE*2+CIRCLEMARGE*2(PTRY),PTRY  c'est une ligne montante
.YBSUPYA
	SUB	XA,XB		DX
	BEQ.S	VERTLINE	c'est une ligne verticale
	MOVE	YB,REGDATA	pr‚pare calcul du DY
	SUB	YA,REGDATA	DY

	EXT.L	XB		calcul de la pente
	ASL.L	#4,XB		DX*16 (et *8)
	DIVS	REGDATA,XB	divise par DY

	EXT.L	XB		extention du r‚sultat
	CMP	REGLINE,YA	clipping haut
	BLS.S	.YASUP0
	BGT.S	CALCRETOUR	ligne invisible
	MULS	XB,YA		clipping
	LSR.L	#4,YA		divise par 16
	SUB	YA,XA		addition … XA
	MOVEQ	#0,YA		YA=0
	MOVE	YB,REGDATA	nombre de ligne=YB
.YASUP0
	CMP	REGLINE,YB
	BLS.S	.YBINFMAX
	BLT.S	CALCRETOUR
	MOVE	REGLINE,YB	moins de lignes
	MOVE	YB,REGDATA	
	SUB	YA,REGDATA	calcul DY
.YBINFMAX
	CMP	MAXY,YB		tester maximum
	BLE.S	.PASMAXIMUM
	MOVE	YB,MAXY
.PASMAXIMUM
	CMP	MINY,YA		tester minimum
	BGE.S	.PASMINIMUM
	MOVE	YA,MINY
.PASMINIMUM
	ADD	YA,YA		adresse tableau lignes
	ADD	YA,PTRY
	ADD	REGDATA,REGDATA offset pour le saut
	ADD	REGDATA,REGDATA
	NEG	REGDATA
	SWAP	XB
	SWAP	XA
	ASR.L	#4,XB
	MOVE	XB,XA
	BEQ.S	.LINEENTIER	;coef de pente entier
	SWAP	XA
	SWAP	XB
;	ADDQ	#4,XA
	ADD	#.LINE3-.LINE0,REGDATA
	JMP	.LINE0(PC,REGDATA.W)
.LINE0

;---------- cas d'une ligne … coefficient entier -----------

.LINEENTIER
	SWAP	XA
	SWAP	XB
	ADD	#.LINE2-.LINE1,REGDATA
	JMP	.LINE1(PC,REGDATA.W)
.LINE1
	REPT	NBLINE-1	;fill tower
	MOVE	XA,(PTRY)+	;stocke point
	ADD	XB,XA		;calcul avec coef entier
	ENDR
.LINE2
	MOVE	XA,(PTRY)	;plot dernier point
	RTS

;-------------- cas d'une droite coeficient fractionnaire ----

	REPT	NBLINE-1	;fill tower
	MOVE	XA,(PTRY)+	;stocke point
	ADDX.L	XB,XA		;ajout pente
	ENDR
.LINE3
	MOVE	XA,(PTRY)	;stocke dernier points
	RTS

;-------------- affichage d'un polygone ----------------------

POLYGCLIPZ
	LEA	TABLEYMAX(PC),PTRY	adresse table des minx maxx
	MOVE	PTRY,USP		USP=adresse table
	MOVE	#NBLINE-1,REGLINE	no maximum de ligne
	MOVE	MINY,REGDATA		nombre de points
	SWAP	MAXY			mise … l'ecart du nombre de
	CLR	MAXY			maxy=0
	MOVE	REGLINE,MINY		miny=y maximum
	LEA	CALCLINE(PC),JMP	adresse du calcul de droite
	LEA	PROJETES+8(PC),PROJPOINTS

	MOVE.L	PROJPOINTS,PTRPTS1
	MOVE.L	PROJPOINTS,PTRPTS2
	ADD	(PTROBJECT)+,PTRPTS1
	ADD	(PTROBJECT),PTRPTS2
;	MOVE	(PTRPTS1),ZA/YA/XA
;	MOVE	(PTRPTS2),ZB/YB,XB
	CMP	ZA,ZB
;	BLE.S	ZBINFZA
	EXG	ZA,ZB
	EXG	YA,YB
	EXG	XA,XB
;.ZBINFZA
	CMP	#16,ZA
	
	
	
	




POLYGONE
	LEA	TABLEYMAX(PC),PTRY	adresse table des minx maxx
	MOVE	PTRY,USP		adresse TABLEYMAX
	MOVE	#NBLINE-1,REGLINE	no maximum de ligne
	MOVE	MINY,REGDATA		nombre de points
	SWAP	MAXY			mise … l'ecart couleur
	CLR	MAXY			maxy=0
	MOVE	REGLINE,MINY		miny=y maximum
	LEA	CALCLINE(PC),JMP	adresse du calcul de droite

	ADD	REGDATA,REGDATA
	JMP	JUMPLINE-6(PC,REGDATA.W)
JUMPLINE
	BRA.S	LINE3
	BRA.S	LINE4
	BRA.S	LINE5
	BRA.S	LINE6
	BRA.S	LINE7
LINE8
	MOVEM	(PTRSEGMENT),XA/YA/XB/YB 
	ADDQ	#4,PTRSEGMENT
	JSR	(JMP)
LINE7
	MOVEM	(PTRSEGMENT),XA/YA/XB/YB 
	ADDQ	#4,PTRSEGMENT
	JSR	(JMP)
LINE6
	MOVEM	(PTRSEGMENT),XA/YA/XB/YB 
	ADDQ	#4,PTRSEGMENT
	JSR	(JMP)
LINE5
	MOVEM	(PTRSEGMENT),XA/YA/XB/YB 
	ADDQ	#4,PTRSEGMENT
	JSR	(JMP)
LINE4
	MOVEM	(PTRSEGMENT),XA/YA/XB/YB 
	ADDQ	#4,PTRSEGMENT
	JSR	(JMP)
LINE3
	MOVEM	(PTRSEGMENT),XA/YA/XB/YB 
	ADDQ	#4,PTRSEGMENT
	JSR	(JMP)
LINE2
	MOVEM	(PTRSEGMENT),XA/YA/XB/YB 	
	ADDQ	#4,PTRSEGMENT
	JSR	(JMP)
LINE1
	MOVE	(PTRSEGMENT)+,XA	 ;derniŠre droite
	MOVE	(PTRSEGMENT),YA
	LEA	SEGMENTS(PC),PTRSEGMENT
	MOVE	(PTRSEGMENT)+,XB
	MOVE	(PTRSEGMENT),YB
	JSR	(JMP)

REG1		EQUR		D0
REG2		EQUR		D1
REG3		EQUR		D2
REG4		EQUR		A2
REG5		EQUR		A3
REG6		EQUR		A4

X1		EQUR		D3
OFFGAU		EQUR		D4
X0		EQUR		D5
OFFDRO		EQUR		D6

PTRTABLE1	EQUR		A0	pointeur table des MINX-MAXX
ECRAN		EQUR		A1	adresse ecran
PTRTABLE2	EQUR		A2

PTRCLIPX	EQUR		A5
LECRAN		EQUR		A6


*--------------- AFFICHAGE PATTERN DE LIGNE GAUCHE ------------

MACRO16	MACRO
	MOVE.L	-(ECRAN),OFFGAU		;cette routine doit
	EOR.L	REG2,OFFGAU		;obligatoirement faire
	AND.L	X1,OFFGAU		;16 octets
	EOR.L	OFFGAU,(ECRAN)
	MOVE.L	-(ECRAN),OFFGAU
	EOR.L	REG1,OFFGAU
	AND.L	X1,OFFGAU
	EOR.L	OFFGAU,(ECRAN)
	ENDM

*---------------- AFFICHAGE DES LIGNES DU POLYGONE ------------

DRAWPOLYGONE
	SUB	MINY,MAXY
	BLE.S	NOPOLY
	SWAP	MAXY
	ADD	MAXY,MAXY

	BCS	DRAWONEPLANE
	BMI	DRAWTRAME16

*---------------- AFFICHAGE 16 COULEURS NON TRAME -------------

DRAW16NOTRAME
	LEA	TABCOLOR(PC),PTRTABLE1
	MOVEM.L	(PTRTABLE1,MAXY.W),REG1/REG2
	LEA	TABLEYMAX(PC),PTRTABLE1
	SWAP	MAXY
	ADD	MINY,MINY
	ADD	MINY,PTRTABLE1
	LEA	MULS160(PC),PTRCLIPX
	MOVE.L	sys_scr6,LECRAN
	ADDQ	#4,LECRAN
	ADD	(PTRCLIPX,MINY.W),LECRAN
	MOVE.L	REG1,REG3
	MOVE.L	REG2,REG4
	MOVE.L	REG1,REG5
	MOVE.L	REG2,REG6
	LEA	MLIMIT,PTRCLIPX
	MOVE.L	PTRCLIPX,USP
	LEA	NBLINE*2+CIRCLEMARGE*2(PTRTABLE1),PTRCLIPX
	BRA.S	DLREP16BRA2
NOPOLY
	RTS
DLREP16
	MACRO16
DLREP16BRA
	LEA	160(LECRAN),LECRAN
DLREP16BRA2
	MOVEQ	#-8,X0
	AND	(PTRTABLE1)+,X0
	MOVE.L	USP,ECRAN
	ADD	X0,ECRAN
	MOVE.L	(ECRAN)+,X0
	MOVE	(ECRAN),OFFDRO

	MOVEQ	#-8,X1
	AND	(PTRCLIPX)+,X1
	MOVE.L	USP,ECRAN
	ADD	X1,ECRAN
	MOVE.L	(ECRAN)+,X1
	MOVE	(ECRAN),OFFGAU

	MOVE.L	LECRAN,ECRAN
	ADD	OFFDRO,ECRAN

	SUB	OFFGAU,OFFDRO
	BLE.S	ONELONG

	MOVE.L	(ECRAN),OFFGAU		;masque 2 mots
	EOR.L	REG2,OFFGAU
	AND.L	X0,OFFGAU
	EOR.L	REG2,OFFGAU
	MOVE.L	OFFGAU,(ECRAN)

	MOVE.L	-(ECRAN),OFFGAU		;masque 2 mots
	EOR.L	REG1,OFFGAU
	AND.L	X0,OFFGAU
	EOR.L	REG1,OFFGAU
	MOVE.L	OFFGAU,(ECRAN)

	ADD	OFFDRO,OFFDRO
	ADD	OFFDRO,OFFDRO
	JMP	FFILL0-32(PC,OFFDRO.W)	;appel transfert par movem
ONELONG
	BNE.S	LSUIV
	EOR.L	X0,X1
	MOVE.L	-(ECRAN),OFFGAU
	EOR.L	REG1,OFFGAU
	AND.L	X1,OFFGAU
	EOR.L	OFFGAU,(ECRAN)+
	MOVE.L	(ECRAN),OFFDRO
	EOR.L	REG2,OFFDRO
	AND.L	X1,OFFDRO
	EOR.L	OFFDRO,(ECRAN)
LSUIV
	DBF	MAXY,DLREP16BRA
	RTS
FFILL0
	DBF	MAXY,DLREP16
	MACRO16
	RTS
	DS.B	10
FFILL1
	MOVE.L	REG2,-(ECRAN)
	MOVE.L	REG1,-(ECRAN)
	DBF	MAXY,DLREP16
	MACRO16
	RTS
	DS.B	6
FFILL2
	MOVEM.L	REG1/REG2/REG3/REG4,-(ECRAN)
	DBF	MAXY,DLREP16
	MACRO16
	RTS
	DS.B	6
FFILL3
	MOVEM.L	REG1/REG2/REG3/REG4/REG5/REG6,-(ECRAN)
	DBF	MAXY,DLREP16
	MACRO16
	RTS
	DS.B	6
FFILL4
	MOVEM.L	REG1/REG2/REG3/REG4/REG5/REG6,-(ECRAN)
	MOVEM.L REG1/REG2,-(ECRAN)
	DBF	MAXY,DLREP16
	MACRO16
	RTS
		DS.B	2
FFILL5
	MOVEM.L	REG1/REG2/REG3/REG4/REG5/REG6,-(ECRAN)
	MOVEM.L	REG1/REG2/REG3/REG4,-(ECRAN)
	DBF	MAXY,DLREP16
	MACRO16
	RTS
	DS.B	2
FFILL6
	MOVEM.L	REG1/REG2/REG3/REG4/REG5/REG6,-(ECRAN)
	MOVEM.L	REG1/REG2/REG3/REG4/REG5/REG6,-(ECRAN)
	DBF	MAXY,DLREP16
FFILL6BRA
	MACRO16
	RTS
	DS.B	2
FFILL7
	MOVEM.L	REG1/REG2/REG3/REG4/REG5/REG6,-(ECRAN)
	MOVEM.L	REG1/REG2/REG3/REG4/REG5/REG6,-(ECRAN)
	MOVEM.L	REG1/REG2,-(ECRAN)
	DBF	MAXY,DLREP16
	BRA.S	FFILL6BRA
	DS.B	32-18
FFILL8
	MOVEM.L	REG1/REG2/REG3/REG4/REG5/REG6,-(ECRAN)
	MOVEM.L	REG1/REG2/REG3/REG4/REG5/REG6,-(ECRAN)
	MOVEM.L	REG1/REG2/REG3/REG4,-(ECRAN)
	DBF	MAXY,DLREP16
	BRA.S	FFILL6BRA
	DS.B	32-18
FFILL9
	MOVEM.L	REG1/REG2/REG3/REG4/REG5/REG6,-(ECRAN)
	MOVEM.L	REG1/REG2/REG3/REG4/REG5/REG6,-(ECRAN)
	MOVEM.L	REG1/REG2/REG3/REG4/REG5/REG6,-(ECRAN)
	DBF	MAXY,DLREP16
	BRA.S	FFILL6BRA
	DS.B	32-18
FFILL10
	MOVEM.L	REG1/REG2/REG3/REG4/REG5/REG6,-(ECRAN)
	MOVEM.L	REG1/REG2/REG3/REG4/REG5/REG6,-(ECRAN)
	MOVEM.L	REG1/REG2/REG3/REG4/REG5/REG6,-(ECRAN)
	MOVEM.L REG1/REG2,-(ECRAN)
	DBF	MAXY,DLREP16
	BRA	FFILLFIN
	DS.B	32-24
FFILL11
	MOVEM.L	REG1/REG2/REG3/REG4/REG5/REG6,-(ECRAN)
	MOVEM.L	REG1/REG2/REG3/REG4/REG5/REG6,-(ECRAN)
	MOVEM.L	REG1/REG2/REG3/REG4/REG5/REG6,-(ECRAN)
	MOVEM.L	REG1/REG2/REG3/REG4,-(ECRAN)
	DBF	MAXY,DLREP16
	BRA	FFILLFIN
	DS.B	32-24
FFILL12
	MOVEM.L	REG1/REG2/REG3/REG4/REG5/REG6,-(ECRAN)
	MOVEM.L	REG1/REG2/REG3/REG4/REG5/REG6,-(ECRAN)
	MOVEM.L	REG1/REG2/REG3/REG4/REG5/REG6,-(ECRAN)
	MOVEM.L	REG1/REG2/REG3/REG4/REG5/REG6,-(ECRAN)
	DBF	MAXY,DLREP16
	BRA	FFILLFIN
	DS.B	32-24
FFILL13
	MOVEM.L	REG1/REG2/REG3/REG4/REG5/REG6,-(ECRAN)
	MOVEM.L	REG1/REG2/REG3/REG4/REG5/REG6,-(ECRAN)
	MOVEM.L	REG1/REG2/REG3/REG4/REG5/REG6,-(ECRAN)
	MOVEM.L	REG1/REG2/REG3/REG4/REG5/REG6,-(ECRAN)
	MOVEM.L	REG1/REG2,-(ECRAN)
	DBF	MAXY,DLREP16
	BRA	FFILLFIN
	DS.B	32-28
FFILL14
	MOVEM.L	REG1/REG2/REG3/REG4/REG5/REG6,-(ECRAN)
	MOVEM.L	REG1/REG2/REG3/REG4/REG5/REG6,-(ECRAN)
	MOVEM.L	REG1/REG2/REG3/REG4/REG5/REG6,-(ECRAN)
	MOVEM.L	REG1/REG2/REG3/REG4/REG5/REG6,-(ECRAN)
	MOVEM.L	REG1/REG2/REG3/REG4,-(ECRAN)
	DBF	MAXY,DLREP16
	BRA	FFILLFIN
	DS.B	32-28
FFILL15
	MOVEM.L	REG1/REG2/REG3/REG4/REG5/REG6,-(ECRAN)
	MOVEM.L	REG1/REG2/REG3/REG4/REG5/REG6,-(ECRAN)
	MOVEM.L	REG1/REG2/REG3/REG4/REG5/REG6,-(ECRAN)
	MOVEM.L	REG1/REG2/REG3/REG4/REG5/REG6,-(ECRAN)
	MOVEM.L	REG1/REG2/REG3/REG4/REG5/REG6,-(ECRAN)
	DBF	MAXY,DLREP16
	BRA.S	FFILLFIN
	DS.B	32-26
FFILL16
	MOVEM.L	REG1/REG2/REG3/REG4/REG5/REG6,-(ECRAN)
	MOVEM.L	REG1/REG2/REG3/REG4/REG5/REG6,-(ECRAN)
	MOVEM.L	REG1/REG2/REG3/REG4/REG5/REG6,-(ECRAN)
	MOVEM.L	REG1/REG2/REG3/REG4/REG5/REG6,-(ECRAN)
	MOVEM.L	REG1/REG2/REG3/REG4/REG5/REG6,-(ECRAN)
	MOVEM.L	REG1/REG2,-(ECRAN)
	DBF	MAXY,DLREP16
	BRA.S	FFILLFIN
	DS.B	32-30
FFILL17
	MOVEM.L	REG1/REG2/REG3/REG4/REG5/REG6,-(ECRAN)
	MOVEM.L	REG1/REG2/REG3/REG4/REG5/REG6,-(ECRAN)
	MOVEM.L	REG1/REG2/REG3/REG4/REG5/REG6,-(ECRAN)
	MOVEM.L	REG1/REG2/REG3/REG4/REG5/REG6,-(ECRAN)
	MOVEM.L	REG1/REG2/REG3/REG4/REG5/REG6,-(ECRAN)
	MOVEM.L	REG1/REG2/REG3/REG4,-(ECRAN)
	DBF	MAXY,DLREP16
	BRA.S	FFILLFIN
	DS.B	32-30
FFILL18
	MOVEM.L	REG1/REG2/REG3/REG4/REG5/REG6,-(ECRAN)
	MOVEM.L	REG1/REG2/REG3/REG4/REG5/REG6,-(ECRAN)
	MOVEM.L	REG1/REG2/REG3/REG4/REG5/REG6,-(ECRAN)
	MOVEM.L	REG1/REG2/REG3/REG4/REG5/REG6,-(ECRAN)
	MOVEM.L	REG1/REG2/REG3/REG4/REG5/REG6,-(ECRAN)
	MOVEM.L	REG1/REG2/REG3/REG4/REG5/REG6,-(ECRAN)
	DBF	MAXY,DLREP16
FFILLFIN:
	MACRO16
	RTS

;------------------- POLYGONE 16 COULEUR TRAME -------------------

DRAWTRAME16
	LEA	TABCOLOR(PC),PTRTABLE1
	AND	#$0FFF,MAXY
	MOVEM.L	(PTRTABLE1,MAXY.W),REG1/REG2
	LEA	TABLEYMAX(PC),PTRTABLE1
	SWAP	MAXY
	ADD	MINY,MINY
	ADD	MINY,PTRTABLE1

	LEA	MULS160(PC),PTRCLIPX
	MOVE.L	sys_scr6,LECRAN
	ADDQ	#4,LECRAN
	ADD	(PTRCLIPX,MINY.W),LECRAN

	MOVE.L	REG1,REG3		;charge reg couleur
	MOVE.L	REG2,REG4
	MOVE.L	REG1,REG5
	MOVE.L	REG2,REG6

	LEA	MLIMIT,PTRCLIPX
	MOVE.L	PTRCLIPX,USP

	SUBQ	#1,MAXY
	MOVE	MAXY,X0
	ASR	#1,X0
	SUB	X0,MAXY

	MOVE	X0,-(SP)
	MOVE.L	PTRTABLE1,-(SP)
	MOVE.L	LECRAN,-(SP)
	JSR	T1DLREP16BRA2(PC)
	MOVE.L	(SP)+,LECRAN
	MOVE.L	(SP)+,PTRTABLE1
	MOVE	(SP)+,MAXY
	LEA	160(LECRAN),LECRAN
	ADDQ	#2,PTRTABLE1
	ROR	REG1
	SWAP	REG1
	ROR	REG1
	SWAP	REG1
	ROR	REG2
	SWAP	REG2
	ROR	REG2
	SWAP	REG2
	MOVE.L	REG1,REG3
	MOVE.L	REG2,REG4
	MOVE.L	REG1,REG5
	MOVE.L	REG2,REG6
	BRA.S	T1DLREP16BRA2
T1DLREP16
	MACRO16
T1DLREP16BRA
	LEA	320(LECRAN),LECRAN		;place ici pour
T1DLREP16BRA2
	MOVEQ	#-8,X0
	AND	(PTRTABLE1),X0
	MOVE.L	USP,ECRAN
	ADD	X0,ECRAN
	MOVE.L	(ECRAN)+,X0
	MOVE	(ECRAN),OFFDRO

	MOVEQ	#-8,X1
	AND	NBLINE*2+CIRCLEMARGE*2(PTRTABLE1),X1
	ADDQ	#4,PTRTABLE1
	MOVE.L	USP,ECRAN
	ADD	X1,ECRAN
	MOVE.L	(ECRAN)+,X1
	MOVE	(ECRAN),OFFGAU

	MOVE.L	LECRAN,ECRAN
	ADD	OFFDRO,ECRAN

	SUB	OFFGAU,OFFDRO
	BLE.S	T1ONELONG

	MOVE.L	(ECRAN),OFFGAU		;masque 2 mots
	EOR.L	REG2,OFFGAU
	AND.L	X0,OFFGAU
	EOR.L	REG2,OFFGAU
	MOVE.L	OFFGAU,(ECRAN)

	MOVE.L	-(ECRAN),OFFGAU		;masque 2 mots
	EOR.L	REG1,OFFGAU
	AND.L	X0,OFFGAU
	EOR.L	REG1,OFFGAU
	MOVE.L	OFFGAU,(ECRAN)

	ADD	OFFDRO,OFFDRO
	ADD	OFFDRO,OFFDRO
	JMP	T1FFILL0-32(PC,OFFDRO.W)		;appel transfert par movem
T1ONELONG
	BNE.S	T1LSUIV					;a enlever
	EOR.L	X0,X1
	MOVE.L	(ECRAN),OFFGAU
	EOR.L	REG2,OFFGAU
	AND.L	X1,OFFGAU
	EOR.L	OFFGAU,(ECRAN)
	MOVE.L	-(ECRAN),OFFDRO
	EOR.L	REG1,OFFDRO
	AND.L	X1,OFFDRO
	EOR.L	OFFDRO,(ECRAN)
T1LSUIV
	DBF	MAXY,T1DLREP16BRA
	RTS
T1FFILL0
	DBF	MAXY,T1DLREP16
	MACRO16
	RTS
	DS.B	10
T1FFILL1
	MOVE.L	REG2,-(ECRAN)
	MOVE.L	REG1,-(ECRAN)
	DBF	MAXY,T1DLREP16
	MACRO16
	RTS
	DS.B	6
T1FFILL2
	MOVEM.L	REG1/REG2/REG3/REG4,-(ECRAN)
	DBF	MAXY,T1DLREP16
	MACRO16
	RTS
	DS.B	6
T1FFILL3
	MOVEM.L	REG1/REG2/REG3/REG4/REG5/REG6,-(ECRAN)
	DBF	MAXY,T1DLREP16
	MACRO16
	RTS
	DS.B	6
T1FFILL4
	MOVEM.L	REG1/REG2/REG3/REG4/REG5/REG6,-(ECRAN)
	MOVEM.L REG1/REG2,-(ECRAN)
	DBF	MAXY,T1DLREP16
	MACRO16
	RTS
	DS.B	2
T1FFILL5
	MOVEM.L	REG1/REG2/REG3/REG4/REG5/REG6,-(ECRAN)
	MOVEM.L	REG1/REG2/REG3/REG4,-(ECRAN)
	DBF	MAXY,T1DLREP16
	MACRO16
	RTS
	DS.B	2
T1FFILL6
	MOVEM.L	REG1/REG2/REG3/REG4/REG5/REG6,-(ECRAN)
	MOVEM.L	REG1/REG2/REG3/REG4/REG5/REG6,-(ECRAN)
	DBF	MAXY,T1DLREP16
T1FFILL6BRA
	MACRO16
	RTS
	DS.B	2
T1FFILL7
	MOVEM.L	REG1/REG2/REG3/REG4/REG5/REG6,-(ECRAN)
	MOVEM.L	REG1/REG2/REG3/REG4/REG5/REG6,-(ECRAN)
	MOVEM.L	REG1/REG2,-(ECRAN)
	DBF	MAXY,T1DLREP16
	BRA.S	T1FFILL6BRA
	DS.B	32-18
T1FFILL8
	MOVEM.L	REG1/REG2/REG3/REG4/REG5/REG6,-(ECRAN)
	MOVEM.L	REG1/REG2/REG3/REG4/REG5/REG6,-(ECRAN)
	MOVEM.L	REG1/REG2/REG3/REG4,-(ECRAN)
	DBF	MAXY,T1DLREP16
	BRA.S	T1FFILL6BRA
	DS.B	32-18
T1FFILL9
	MOVEM.L	REG1/REG2/REG3/REG4/REG5/REG6,-(ECRAN)
	MOVEM.L	REG1/REG2/REG3/REG4/REG5/REG6,-(ECRAN)
	MOVEM.L	REG1/REG2/REG3/REG4/REG5/REG6,-(ECRAN)
	DBF	MAXY,T1DLREP16
	BRA.S	T1FFILL6BRA
	DS.B	32-18
T1FFILL10
	MOVEM.L	REG1/REG2/REG3/REG4/REG5/REG6,-(ECRAN)
	MOVEM.L	REG1/REG2/REG3/REG4/REG5/REG6,-(ECRAN)
	MOVEM.L	REG1/REG2/REG3/REG4/REG5/REG6,-(ECRAN)
	MOVEM.L REG1/REG2,-(ECRAN)
	DBF	MAXY,T1DLREP16
	BRA	T1FFILLFIN
	DS.B	32-24
T1FFILL11
	MOVEM.L	REG1/REG2/REG3/REG4/REG5/REG6,-(ECRAN)
	MOVEM.L	REG1/REG2/REG3/REG4/REG5/REG6,-(ECRAN)
	MOVEM.L	REG1/REG2/REG3/REG4/REG5/REG6,-(ECRAN)
	MOVEM.L	REG1/REG2/REG3/REG4,-(ECRAN)
	DBF	MAXY,T1DLREP16
	BRA	T1FFILLFIN
	DS.B	32-24
T1FFILL12
	MOVEM.L	REG1/REG2/REG3/REG4/REG5/REG6,-(ECRAN)
	MOVEM.L	REG1/REG2/REG3/REG4/REG5/REG6,-(ECRAN)
	MOVEM.L	REG1/REG2/REG3/REG4/REG5/REG6,-(ECRAN)
	MOVEM.L	REG1/REG2/REG3/REG4/REG5/REG6,-(ECRAN)
	DBF	MAXY,T1DLREP16
	BRA	T1FFILLFIN
	DS.B	32-24
T1FFILL13
	MOVEM.L	REG1/REG2/REG3/REG4/REG5/REG6,-(ECRAN)
	MOVEM.L	REG1/REG2/REG3/REG4/REG5/REG6,-(ECRAN)
	MOVEM.L	REG1/REG2/REG3/REG4/REG5/REG6,-(ECRAN)
	MOVEM.L	REG1/REG2/REG3/REG4/REG5/REG6,-(ECRAN)
	MOVEM.L	REG1/REG2,-(ECRAN)
	DBF	MAXY,T1DLREP16
	BRA	T1FFILLFIN
	DS.B	32-28
T1FFILL14
	MOVEM.L	REG1/REG2/REG3/REG4/REG5/REG6,-(ECRAN)
	MOVEM.L	REG1/REG2/REG3/REG4/REG5/REG6,-(ECRAN)
	MOVEM.L	REG1/REG2/REG3/REG4/REG5/REG6,-(ECRAN)
	MOVEM.L	REG1/REG2/REG3/REG4/REG5/REG6,-(ECRAN)
	MOVEM.L	REG1/REG2/REG3/REG4,-(ECRAN)
	DBF	MAXY,T1DLREP16
	BRA	T1FFILLFIN
	DS.B	32-28
T1FFILL15
	MOVEM.L	REG1/REG2/REG3/REG4/REG5/REG6,-(ECRAN)
	MOVEM.L	REG1/REG2/REG3/REG4/REG5/REG6,-(ECRAN)
	MOVEM.L	REG1/REG2/REG3/REG4/REG5/REG6,-(ECRAN)
	MOVEM.L	REG1/REG2/REG3/REG4/REG5/REG6,-(ECRAN)
	MOVEM.L	REG1/REG2/REG3/REG4/REG5/REG6,-(ECRAN)
	DBF	MAXY,T1DLREP16
	BRA.S	T1FFILLFIN
	DS.B	32-26
T1FFILL16
	MOVEM.L	REG1/REG2/REG3/REG4/REG5/REG6,-(ECRAN)
	MOVEM.L	REG1/REG2/REG3/REG4/REG5/REG6,-(ECRAN)
	MOVEM.L	REG1/REG2/REG3/REG4/REG5/REG6,-(ECRAN)
	MOVEM.L	REG1/REG2/REG3/REG4/REG5/REG6,-(ECRAN)
	MOVEM.L	REG1/REG2/REG3/REG4/REG5/REG6,-(ECRAN)
	MOVEM.L	REG1/REG2,-(ECRAN)
	DBF	MAXY,T1DLREP16
	BRA.S	T1FFILLFIN
	DS.B	32-30
T1FFILL17
	MOVEM.L	REG1/REG2/REG3/REG4/REG5/REG6,-(ECRAN)
	MOVEM.L	REG1/REG2/REG3/REG4/REG5/REG6,-(ECRAN)
	MOVEM.L	REG1/REG2/REG3/REG4/REG5/REG6,-(ECRAN)
	MOVEM.L	REG1/REG2/REG3/REG4/REG5/REG6,-(ECRAN)
	MOVEM.L	REG1/REG2/REG3/REG4/REG5/REG6,-(ECRAN)
	MOVEM.L	REG1/REG2/REG3/REG4,-(ECRAN)
	DBF	MAXY,T1DLREP16
	BRA.S	T1FFILLFIN
	DS.B	32-30
T1FFILL18
	MOVEM.L	REG1/REG2/REG3/REG4/REG5/REG6,-(ECRAN)
	MOVEM.L	REG1/REG2/REG3/REG4/REG5/REG6,-(ECRAN)
	MOVEM.L	REG1/REG2/REG3/REG4/REG5/REG6,-(ECRAN)
	MOVEM.L	REG1/REG2/REG3/REG4/REG5/REG6,-(ECRAN)
	MOVEM.L	REG1/REG2/REG3/REG4/REG5/REG6,-(ECRAN)
	MOVEM.L	REG1/REG2/REG3/REG4/REG5/REG6,-(ECRAN)
	DBF	MAXY,T1DLREP16
T1FFILLFIN:
	MACRO16
	RTS

;------------- routine affichage de polygone 1 plan ------------------

DRAWONEPLANE:
	BMI	ONEPLANETRAME
	LEA	TABLEYMAX(PC),PTRTABLE1		;adresse table
	ADD	MINY,MINY
	ADD	MINY,PTRTABLE1			;pointe table des X
	LEA	NBLINE*2+CIRCLEMARGE*2(PTRTABLE1),PTRTABLE2

	LEA	MULS160(PC),PTRCLIPX
	MOVE.L	sys_scr6,LECRAN
	ADD	(PTRCLIPX,MINY.W),LECRAN	;pointe ligne ecran
	MOVEQ	#$F,REG2			;decalage plan no
	AND	MAXY,REG2
	ADD	REG2,LECRAN
	SWAP	MAXY				;recupere nombre de lignes

	MOVEQ	#-1,REG1			;pattern $FFFF

	LEA	MLIMIT+2,PTRCLIPX		;table clipping X
DLREP1
	MOVEQ	#-8,X0
	AND	(PTRTABLE1)+,X0
	MOVE.L	(PTRCLIPX,X0.W),X0
	MOVEQ	#-8,X1
	AND	(PTRTABLE2)+,X1
	MOVE.L	(PTRCLIPX,X1.W),X1

	SUB	X0,X1
	BGE.S	ONELONG1

	MOVE.L	LECRAN,ECRAN
	ADD	X0,ECRAN
	SWAP	X0
	NOT	X0
	OR	X0,(ECRAN)
	ADD	X1,ECRAN
	ASR	#1,X1
	JMP	FFILLPLAN+4(PC,X1.W)
ONELONG1
	BNE.S	LSUIV1
	EOR.L	X0,X1		;gain 2 swap
	SWAP	X1
	OR	X1,(LECRAN,X0.W)
LSUIV1
	LEA	160(LECRAN),LECRAN
	DBF	MAXY,DLREP1
	RTS

CPT	SET	18*8
	REPT	18
	MOVE	REG1,CPT(ECRAN)
CPT	SET	CPT-8
	ENDR
FFILLPLAN
	SWAP	X1
	OR	X1,(ECRAN)
	LEA	160(LECRAN),LECRAN
FDLREP1
	DBF	MAXY,DLREP1
	RTS

;---------------- routine polygone trame 1 plan -----------------

ONEPLANETRAME:
	LEA	TABLEYMAX(PC),PTRTABLE1		;adresse table
	ADD	MINY,MINY
	ADD	MINY,PTRTABLE1			;pointe table des X
	LEA	NBLINE*2+CIRCLEMARGE*2(PTRTABLE1),PTRTABLE2
	LEA	MULS160(PC),PTRCLIPX
	MOVE.L	sys_scr6,LECRAN
	ADD	(PTRCLIPX,MINY.W),LECRAN	;pointe ligne ecran
	MOVEQ	#$F,REG2			;decalage plan no
	AND	MAXY,REG2
	ADD	REG2,LECRAN
	SWAP	MAXY				;recupere nombre de lignes

	MOVE.L	#$AAAA5555,REG1
	BTST	#1,MINY
	BEQ.S	.TRAMEPAIR
	SWAP 	REG1
.TRAMEPAIR
	LEA	MLIMIT+2,PTRCLIPX		;table clipping X
.EDLREP1
	MOVEQ	#-8,X0
	AND	(PTRTABLE1)+,X0
	MOVE.L	(PTRCLIPX,X0.W),X0

	MOVEQ	#-8,X1
	AND	(PTRTABLE2)+,X1
	MOVE.L	(PTRCLIPX,X1.W),X1

	SUB	X0,X1
	BGE.S	.EONELONG1

	MOVE.L	LECRAN,ECRAN
	ADD	X0,ECRAN
	SWAP	X0
	NOT	X0
	AND	REG1,X0
	OR	X0,(ECRAN)
	ADD	X1,ECRAN
	ASR	#1,X1
	JMP	.EFFILLPLAN+4(PC,X1.W)
.EONELONG1
	BNE.S	.ELSUIV1
	EOR.L	X0,X1		;gain 2 swap
	SWAP	X1
	AND	REG1,X1
 	OR	X1,(LECRAN,X0.W)
.ELSUIV1
	SWAP	REG1
	LEA	160(LECRAN),LECRAN
	DBF	MAXY,.EDLREP1
	RTS

CPT	SET	18*8
	REPT	18
	MOVE	REG1,CPT(ECRAN)
CPT	SET	CPT-8
	ENDR
.EFFILLPLAN
	SWAP	X1
	AND	REG1,X1
	OR	X1,(ECRAN)
	LEA	160(LECRAN),LECRAN
.EFDLREP1
	SWAP	REG1
	DBF	MAXY,.EDLREP1
	RTS

;------------- routine affichage de polygone 1 XOR ------------------

DRAWNOTPLANE:
	LEA	TABLEYMAX(PC),PTRTABLE1		;adresse table
	ADD	MINY,MINY
	ADD	MINY,PTRTABLE1			;pointe table des X
	LEA	NBLINE*2+CIRCLEMARGE*2(PTRTABLE1),PTRTABLE2

	LEA	MULS160(PC),PTRCLIPX
	MOVE.L	sys_scr6,LECRAN
	ADD	(PTRCLIPX,MINY.W),LECRAN	;pointe ligne ecran
	MOVEQ	#$F,REG2			;decalage plan no
	AND	MAXY,REG2
	ADD	REG2,LECRAN
	SWAP	MAXY				;recupere nombre de lignes

	LEA	MLIMIT+2,PTRCLIPX		;table clipping X
.NOTDLREP1
	MOVEQ	#-8,X0
	AND	(PTRTABLE1)+,X0
	MOVE.L	(PTRCLIPX,X0.W),X0
	MOVEQ	#-8,X1
	AND	(PTRTABLE2)+,X1
	MOVE.L	(PTRCLIPX,X1.W),X1

	SUB	X0,X1
	BGE.S	.NOTLONG1

	MOVE.L	LECRAN,ECRAN
	ADD	X0,ECRAN
	SWAP	X0
	OR	X0,(ECRAN)
	NOT	(ECRAN)
	ADD	X1,ECRAN
	ASR	#1,X1
	JMP	.NOTFFILLPLAN+4(PC,X1.W)
.NOTLONG1
	BNE.S	.NOTLSUIV1
	EOR.L	X0,X1		;gain 2 swap
	SWAP	X1
	OR	X1,(LECRAN,X0.W)
.NOTLSUIV1
	LEA	160(LECRAN),LECRAN
	DBF	MAXY,.NOTDLREP1
	RTS

CPT	SET	18*8
	REPT	18
	NOT	CPT(ECRAN)
CPT	SET	CPT-8
	ENDR
.NOTFFILLPLAN
	SWAP	X1
	OR	X1,(ECRAN)
	LEA	160(LECRAN),LECRAN
.NOTFDLREP1
	DBF	MAXY,.NOTDLREP1
	RTS

*----------------------------------------------------------------
*	affichage d'une sphere (C) Vincent Pene
*----------------------------------------------------------------
	
; D1 = Rayon du cercle
; D2 = Position Y de centre du cercle
; D3 = Position X du centre du cercle

SPH_X	EQUR	D3
SPH_Y	EQUR	D2
SPH_R	EQUR	D1
SPH_CR	EQUR	D7
SPH_P1	EQUR	A0
SPH_P2	EQUR	A4
SPH_P3	EQUR	A1
SPH_P4	EQUR	A5
SPH_P5	EQUR	A6
SPH_P6	EQUR	A3
SPH_D1	EQUR	D4
SPH_D2	EQUR	D5
SPH_D3	EQUR	D0
SPH_D4	EQUR	D6


NOSPHERE
	ADDQ	#2,PTROBJECT
	FSUIV
SPHERE
	LEA	PROJETES+8(PC),PROJPOINTS				table de projection
	MOVEM	(PTROBJECT)+,SPH_X/SPH_CR			point,rayon
	MOVEM	(PROJPOINTS,SPH_X.W),SPH_Y/SPH_X/SPH_D4		Y,X,Zoom
	CMP	#ZCLIPDIST,SPH_D4
	BLT.S	NOSPHERE

	EXT.L	SPH_CR
	ASL.L	#6,SPH_CR
	DIVS	SPH_D4,SPH_CR

;-------------- calcul des points du cercle -------------------

CIRCLE
	CMP	#1,SPH_CR		rayon inferieur … 1 -> fin
	BLE	NOCIRCLE

	MOVE	SPH_CR,SPH_R		copie du rayon
	MOVE	SPH_R,SPH_Y		
	ADD	SPH_R,SPH_Y		rayon * 2
	LEA	TABLEYMAX(PC),SPH_P1	points droits 
	MOVE.l	SPH_P1,SPH_P2		point droit haut
	ADD	SPH_Y,SPH_P1		point droit milieu
	MOVE.l	SPH_P1,SPH_P3		point droit milieu
	MOVE.l	SPH_P1,SPH_P4		point droit bas
	ADD	SPH_Y,SPH_P4
	LEA	NBLINE*2+CIRCLEMARGE*2(SPH_P2),SPH_P5	
	MOVE.l	SPH_P5,SPH_P6		point gauche milieu
	ADD	SPH_Y,SPH_P6

	MOVE	SPH_R,SPH_D1		
	ASL	#3,SPH_D1		multiplie rayon par 8

	MOVE	SPH_X,SPH_D2
	SUB	SPH_D1,SPH_D2		(X-rayon)*8
	ADD	SPH_X,SPH_D1		(X+rayon)*8
	
	MOVE	SPH_R,SPH_Y		
	ASR	#1,SPH_Y		rayon / 2

	MULS	#23170/2,SPH_CR
	
	ASR.L	#6,SPH_CR
	ASR.L	#8,SPH_CR
	
	CLR	SPH_D3
	MOVE	SPH_X,SPH_D4
	EXG	SPH_X,SPH_CR
.CIRCLE1
	ADD	SPH_D3,SPH_Y
	BLT.S	.OK
.TST
	SUBQ	#1,SPH_R
	SUBQ	#8,SPH_D1
	ADDQ	#8,SPH_D2
	
	MOVE	SPH_D4,(SPH_P2)+
	MOVE	SPH_D4,-(SPH_P4)
	MOVE	SPH_CR,(SPH_P5)+
	MOVE	SPH_CR,NBLINE*2+CIRCLEMARGE*2(SPH_P4)

	SUB	SPH_R,SPH_Y
	BGE.S	.TST
.OK
	ADDQ	#1,SPH_D3
	ADDQ	#8,SPH_D4
	SUBQ	#8,SPH_CR
	MOVE	SPH_D1,-(SPH_P1)
	MOVE	SPH_D1,(SPH_P3)+
	MOVE	SPH_D2,NBLINE*2+CIRCLEMARGE*2(SPH_P1)
	MOVE	SPH_D2,(SPH_P6)+
	DBRA	SPH_X,.CIRCLE1

;affichage

	MOVE	(PTROBJECT)+,SPH_CR
	MOVE.L	PTROBJECT,-(SP)

	
	MOVE	#199,MAXY
	MOVE.L	#-1,REG1
	MOVE.L	#-1,REG2

	LEA	TABLEYMAX(PC),PTRTABLE1
	MOVE.L	sys_scr6,LECRAN
	ADDQ	#4,LECRAN
	MOVE.L	REG1,REG3
	MOVE.L	REG2,REG4
	MOVE.L	REG1,REG5
	MOVE.L	REG2,REG6
	LEA	MLIMIT,PTRCLIPX
	MOVE.L	PTRCLIPX,USP
	LEA	NBLINE*2+CIRCLEMARGE*2(PTRTABLE1),PTRCLIPX
	BSR	DLREP16BRA2

	MOVE.L	(SP)+,PTROBJECT

	FSUIV
NOCIRCLE
	ADDQ	#2,PTROBJECT
	FSUIV


*------------- TABLE DES OFFSETS LIGNE --------------------------

	DCB.W	100,-1
MULS160
CPT	SET	0
	REPT	NBLINE
	DC.W	CPT
CPT	SET	CPT+160
	ENDR
	DCB.W	100,-1

*****************************************************************
*             INITIALISATION DE LA TABLE DE CLIPPING EN X 	*
*			   DES POLYGONES                        *
*---------------------------------------------------------------*
*	Attention : Ces routines sont 'scratch‚es' d‚s que les	*
*	polygones sont affiches					*
*****************************************************************


TABLEYMAX

DROUTSCRATCH

;-------------- calcul de la table de clipping ------------------

INITCLIPPING
	LEA	LLIMIT,A0		;table limites gauches
	MOVE	#CLIPSIZE-1,D0		;taille limite gauche
.RRLIMIT
	MOVE.L	#-1,(A0)+		;remplissage
	CLR.L	(A0)+			;offset=0
	DBF	D0,.RRLIMIT		;dernier ?

	MOVEQ	#0,D0			;compteur pixel
	CLR.L	D1
	MOVE	#$FFFF,D1		;masque droit
	MOVEQ	#0,D2
.RCLIMIT
	MOVE	D1,(A0)+		;stocke trame1
	MOVE	D1,(A0)+		;2 fois
	MOVE	D2,(A0)+		;stocke offset
	MOVE	D2,(A0)+
	LSR.L	#1,D1			;decalage masque
	BNE.S	.2
	MOVE	#$FFFF,D1		;mise en place masque
	ADDQ	#8,D2			;decalage offset 8
.2
	ADDQ	#1,D0			;un pixel de plus
	CMP	#319,D0			;pixel 319 ?
	BLE.S	.RCLIMIT		;non, continuer
	MOVE	#CLIPSIZE-1,D0
.RLLIMIT
	CLR.L	(A0)+			;init limite droite
	MOVE.L	#$00980098,(A0)+
	DBF	D0,.RLLIMIT

;--------- relocation des objets ------------------------------

RELOCOBJECTS
	LEA	STARTOBJECT(PC),A0
	LEA	ENDOBJECT(PC),A1
.REPRELOC
	MOVE.L	(A0),D0
	LEA	TABRELOC(PC),A3
.REPSEARCH
	MOVE.L	(A3)+,D1
	BEQ.S	.FINDABORT
	CMP.L	D1,D0
	BEQ.S	.FINDSEARCH
	ADDQ	#4,A3
	BRA.S	.REPSEARCH
.FINDSEARCH
	MOVE.L	(A3)+,(A0)+
	BRA.S	.CONTRELOC
.FINDABORT
	ADDQ	#2,A0
.CONTRELOC
	CMP.L	A1,A0
	BLT.S	.REPRELOC


;--------- calcul de la table des couleurs --------------------

CALCCOLORT:
	MOVEQ		#0,D0
	LEA		TABCOLOR(PC),A0
.CALCCREP:
CPT	SET		0
	REPT		4
	BTST		#CPT,D0
	SNE		D1
	EXT		D1
	AND		#$AAAA,D1
	BTST		#CPT+4,D0
	SNE		D2
	EXT		D2
	AND		#$5555,D2
	OR		D1,D2
	MOVE		D2,(A0)+
CPT	SET		CPT+1
	ENDR

	ADDQ		#1,D0
	CMP		#255,D0
	BLE.S		.CALCCREP
	RTS

TABRELOC
	DC.L		'LINP',DRAWLINEP
	DC.L		'LINE',DRAWLINE
	DC.L		'ASM_',ASMROUT
	DC.L		'SPR_',SPRITE
	DC.L		'TST_',TESTVFACE
	DC.L		'PY3_',POLYG3
	DC.L		'PY4_',POLYG4
	DC.L		'PY6_',POLYG6
	DC.L		'PY7_',POLYG7
	DC.L		'PY3V',POLYG3V
	DC.L		'PY4V',POLYG4V
	DC.L		'PY6V',POLYG6V
	DC.L		'PY7V',POLYG7V
	DC.L		'SPH_',SPHERE
	DC.L		'END_',ENDDRAWOBJECT
	DC.L		'PL12',PLOT12
	DC.L		0

FROUTSCRATCH

	DS.B		NBLINE*4+CIRCLEMARGE*4-(FROUTSCRATCH-DROUTSCRATCH)
	EVEN



CALCPROJ:
	IFEQ	MULS-2

NXTANG	MACRO
	MOVE	\1(PC),D0	;ROT
	ADD	\2(PC),D0
	AND	#$3FF,D0
	MOVE	D0,\2
	ADD	D0,D0
	ADD	D0,D0
	MOVEM	(A0,D0.W),\3
	ENDM

; SX=SIN/COS ANGLE X,SY=SIN/COS ANGLE Y,SZ=SIN/COS ANGLE Z
; L14=ANGLE ROT X,L16=ANGLE ROT Y,L3C=ANGLE ROT Z
; ROTX,ROTY,ROTZ=ANGLES COURANTS


SX	EQUR	D2
CX	EQUR	D3
SY	EQUR	D4
CY	EQUR	D5
SZ	EQUR	D6
CZ	EQUR	D7


;
; CHANGEMENT D'ANGLE DE ROTATION
;

	LEA	SINCOS(PC),A0
	NXTANG	VROTX,ROTX,SX/CX	;SX
	NXTANG	VROTY,ROTY,SY/CY	;SY
	NXTANG	VROTZ,ROTZ,SZ/CZ	;SZ
;
; CALCULE LA MATRICE DE PROJECTION
;
	LEA	MATRIX(PC),A0

	MOVE	CY,D0
	MULS	CZ,D0
	ADD.L	D0,D0
	SWAP	D0
	MOVE	D0,(A0)+

	MOVE	SY,(A0)+

	MOVE	CY,D0
	MULS	SZ,D0
	ADD.L	D0,D0
	SWAP	D0
	NEG	D0
	MOVE	D0,(A0)+

	MOVE	SX,D1
	MULS	SZ,D1
	MOVE	CX,D0
	MULS	SY,D0
	ADD.L	D0,D0
	SWAP	D0
	MULS	CZ,D0
	SUB.L	D0,D1
	ADD.L	D1,D1
	SWAP	D1
	MOVE	D1,(A0)+

	MOVE	CX,D0
	MULS	CY,D0
	ADD.L	D0,D0
	SWAP	D0
	MOVE	D0,(A0)+	;$10

	MOVE	SX,D1
	MULS	CZ,D1
	MOVE	CX,D0
	MULS	SY,D0
	ADD.L	D0,D0
	SWAP	D0
	MULS	SZ,D0
	ADD.L	D1,D0
	ADD.L	D0,D0
	SWAP	D0
	MOVE	D0,(A0)+	;$14

	MOVE	CX,D1
	MULS	SZ,D1
	MOVE	SX,D0
	MULS	SY,D0
	ADD.L	D0,D0
	SWAP	D0
	MULS	CZ,D0
	ADD.L	D1,D0
	ADD.L	D0,D0
	SWAP	D0
	MOVE	D0,(A0)+	;$18

	MOVE	SX,D0
	MULS	CY,D0
	ADD.L	D0,D0
	SWAP	D0
	NEG	D0
	MOVE	D0,(A0)+	;$1C

	MOVE	CX,D1
	MULS	CZ,D1
	MOVE	SX,D0
	MULS	SY,D0
	ADD.L	D0,D0
	SWAP	D0
	MULS	SZ,D0
	SUB.L	D0,D1
	ADD.L	D1,D1
	SWAP	D1
	MOVE	D1,(A0)+

	ENDC
	IFEQ	MULS-1
Matrix_pointer	equr	a0
Trigo_table	equr	a1

X_angle		equr	d4
Y_angle		equr	d5
Z_angle		equr	d6
Trigo_mask	equr	d7

	LEA	MATRIX(PC),Matrix_pointer
	LEA	SINCOS2(PC),Trigo_table

;	MOVE	VROTX(PC),D0
	ADD	#4*4,ROTX
;	MOVE	VROTY(PC),D0
	ADD	#8*4,ROTY
;	MOVE	VROTZ(PC),D0
	ADD	#12*4,ROTZ

	move	ROTX(PC),X_angle
	move	ROTY(PC),Y_angle
	move	ROTZ(PC),Z_angle
	MOVE	#$3FF*4,Trigo_mask

	MOVE	Y_angle,D0		;Y
	MOVE	D0,D1
	ADD	Z_angle,D1		;Y+Z
	SUB	Z_angle,D0		;Y-Z
	AND	Trigo_mask,D0
	AND	Trigo_mask,D1
	MOVE.L	0(Trigo_table,D0),D0		;S(Y-Z)|C(Y-Z)/2
	MOVE.L	0(Trigo_table,D1),D1		;S(Y+Z)|C(Y+Z)/2

	ADD	D1,D0
	MOVE	D0,(Matrix_pointer)+		;(C(Y+Z)+C(Y-Z))/2
	;OK

;1
	SWAP	D0
	SWAP	D1
	SUB	D1,D0
	MOVE	D0,(Matrix_pointer)+		;(S(Y+Z)-S(Y-Z))/2
	;OK

;2
	AND	Trigo_mask,Y_angle
	MOVE	0(Trigo_table,Y_angle),D0
	ADD	D0,D0
	NEG	D0
	MOVE	D0,(Matrix_pointer)+		;-S(Y)
	;OK

	move	X_angle,D0		;X+Y
	MOVE	D0,D1
	ADD	Y_angle,D0		;X+Y
	SUB	Y_angle,D1		;X-Y
	AND	Trigo_mask,D0
	AND	Trigo_mask,D1
	MOVE.L	0(Trigo_table,D0),D0
	MOVE.L	0(Trigo_table,D1),D1
	move	d0,d2
	sub	d1,d2
	and	Trigo_mask,Z_angle
	move	0(Trigo_table,Z_angle),d3
	muls	d2,d3
	muls	2(Trigo_table,Z_angle),d2
	swap	d0
	swap	d1
	add	d1,d0
	neg	d0
	add.l	d2,d2
	add.l	d2,d2
	swap	d2
	move	d2,(Matrix_pointer)+
	add.l	d3,d3
	add.l	d3,d3
	swap	d3
	move	d3,(Matrix_pointer)+
	move	d0,(Matrix_pointer)+
	move	X_angle,d0
	move	d0,d1
	add	Z_angle,d0
	sub	Z_angle,d1
	and	Trigo_mask,d0
	and	Trigo_mask,d1
	MOVE.L	0(Trigo_table,d0),d0
	MOVE.L	0(Trigo_table,d1),d1
	add	d1,d0
	add	d0,-4(Matrix_pointer)
	swap	d0
	swap	d1
	sub	d1,d0
	sub	d0,-6(Matrix_pointer)

	move	X_angle,D0		;X+Y
	MOVE	D0,D1
	ADD	Y_angle,D0		;X+Y
	SUB	Y_angle,D1		;X-Y
	AND	Trigo_mask,D0
	AND	Trigo_mask,D1
	MOVE.L	0(Trigo_table,D0),D0
	MOVE.L	0(Trigo_table,D1),D1
	add	d1,d0
	swap	d0
	swap	d1
	move	d0,d2
	sub	d1,d2
	move	0(Trigo_table,Z_angle),d3
	muls	d2,d3
	muls	2(Trigo_table,Z_angle),d2
	swap	d0
	add.l	d2,d2
	add.l	d2,d2
	swap	d2
	move	d2,(Matrix_pointer)+
	add.l	d3,d3
	add.l	d3,d3
	swap	d3
	move	d3,(Matrix_pointer)+
	move	d0,(Matrix_pointer)+
	move	X_angle,d0
	move	d0,d1
	add	Z_angle,d0
	sub	Z_angle,d1
	and	Trigo_mask,d0
	and	Trigo_mask,d1
	MOVE.L	0(Trigo_table,d0),d0
	MOVE.L	0(Trigo_table,d1),d1
	sub	d1,d0
	sub	d0,-6(Matrix_pointer)
	swap	d0
	swap	d1
	add	d1,d0
	add	d0,-4(Matrix_pointer)
	ENDC
	IFEQ	MULS
Matrix_pointer	equr	a0
Trigo_table1	equr	a1
Trigo_table2	equr	a2

Save1		equr	a3
Save2		equr	a4
Save3		equr	a5
Save4		equr	a6
Save5		equr	d3
Save6		equr	a2 (!)

X_angle		equr	d4
Y_angle		equr	d5
Z_angle		equr	d6
Trigo_mask	equr	d7

	LEA	MATRIX(PC),Matrix_pointer
	LEA	SINCOS2(PC),Trigo_table1
	LEA	$1000(Trigo_table1),Trigo_table2

;	MOVE	VROTX(PC),D0
	ADD	#4*4,OBS_ROTX
;	MOVE	VROTY(PC),D0
	ADD	#8*4,OBS_ROTY
;	MOVE	VROTZ(PC),D0
	ADD	#12*4,OBS_ROTZ

	move	OBS_ROTX(PC),X_angle
	move	OBS_ROTY(PC),Y_angle
	move	OBS_ROTZ(PC),Z_angle
	MOVE	#$3FF*4,Trigo_mask

	MOVE	Y_angle,D0		;Y
	MOVE	D0,D1
	ADD	Z_angle,D1		;Y+Z
	SUB	Z_angle,D0		;Y-Z
	AND	Trigo_mask,D1
	AND	Trigo_mask,D0
	MOVE.L	0(Trigo_table1,D0),D0		;S(Y-Z)|C(Y-Z)/2
	MOVE.L	0(Trigo_table1,D1),D1		;S(Y+Z)|C(Y+Z)/2

	ADD	D1,D0
	MOVE	D0,(Matrix_pointer)+		;(C(Y+Z)+C(Y-Z))/2
	;OK

;1
	SWAP	D0
	SWAP	D1
	SUB	D1,D0
	MOVE	D0,(Matrix_pointer)+		;(S(Y+Z)-S(Y-Z))/2
	;OK

;2
	MOVE	Y_angle,D0
	AND	Trigo_mask,D0
	MOVE	(Trigo_table1,D0.W),D0
	ADD	D0,D0
	NEG	D0
	MOVE	D0,(Matrix_pointer)+		;-S(Y)
	;OK

;3
	move	X_angle,D0		;X+Y
	ADD	Y_angle,D0		;X+Y
	MOVE	D0,D1
	ADD	Z_angle,D0		;X+Y+Z
	SUB	Z_angle,D1		;X+Y-Z
	AND	Trigo_mask,D0
	AND	Trigo_mask,D1

	MOVE.L	0(Trigo_table2,D0),D0		;S(X+Y+Z)/4|C(X+Y+Z)/4
	MOVE.L	0(Trigo_table2,D1),D1		;S(X+Y-Z)/4|C(X+Y-Z)/4
	MOVE.L	D0,Save1
	MOVE.L	D1,Save2

	ADD	D1,D0		;cos	;C(X+Y+Z)+C(X+Y-Z)/4
	SWAP	D0
	SWAP	D1
	SUB	D1,D0		;sin	;C(X+Y+Z)+C(X+Y-Z)|S(X+Y+Z)-S(X+Y-Z)/4

	MOVE	X_angle,D1
	SUB	Y_angle,D1
	MOVE	D1,D2
	ADD	Z_angle,D1		;X-Y+Z
	SUB	Z_angle,D2		;X-Y-Z
	AND	Trigo_mask,D1
	AND	Trigo_mask,D2
	MOVE.L	0(Trigo_table2,D1),D1		;S(X-Y+Z)|C(X-Y+Z)/4
	MOVE.L	0(Trigo_table2,D2),D2		;S(X-Y-Z)|C(X-Y-Z)/4
	MOVE.L	D1,Save3
	MOVE.L	D2,Save4

	ADD	D2,D1		;cos
	SWAP	D1
	SWAP	D2
	SUB	D2,D1		;sin	;(C(X-Y+Z)+C(X-Y-Z))/4|(S(X-Y+Z)-S(X-Y-Z))/4

	SUB	D1,D0		;sin
	SWAP	D0
	SWAP	D1
	SUB	D1,D0		;cos

	MOVE	X_angle,D1
	MOVE	D1,D2
	ADD	Z_angle,D1		;X+Z
	SUB	Z_angle,D2		;X-Z
	AND	Trigo_mask,D1
	AND	Trigo_mask,D2
	MOVE.L	0(Trigo_table1,D1),D1		;S(X+Z)|C(X+Z)/2
	MOVE.L	0(Trigo_table1,D2),D2		;S(X-Z)|C(X-Z)/2
	MOVE.L	D1,Save5
	MOVE.L	D2,Save6

	ADD	D2,D1		;cos	;(C(X+Z)+C(X-Z))/2
	SWAP	D1
	SWAP	D2
	SUB	D2,D1		;sin	;(C(X+Z)+C(X-Z))/2|(S(X+Z)-S(X-Z))/2

	ADD	D0,D1		;cos
	SWAP	D0
	SWAP	D1

	sub	D0,d1		;sin

	MOVE.L	D1,(Matrix_pointer)+

;	OK


;45
	MOVE	X_angle,D0
	MOVE	D0,D1
	ADD	Y_angle,D0
	SUB	Y_angle,D1
	AND	Trigo_mask,D0
	AND	Trigo_mask,D1

	MOVE	0(Trigo_table1,D0),D0
	ADD	0(Trigo_table1,D1),D0

	NEG	D0
	MOVE	D0,(Matrix_pointer)+
	;OK

;6
	MOVE.L	Save1,d1
	MOVE.L	Save2,d0
	sub	d1,d0
	swap	d0
	swap	d1
	add	d1,d0		;C(X+Y-Z)-C(X+Y+Z)/4|S(X+Y-Z)+S(X+Y+Z)/4

	MOVE.L	Save3,d1
	MOVE.L	Save4,d2
	sub	d2,d1
	swap	d1
	swap	d2
	add	d2,d1

	sub	d1,d0
	swap	d0
	swap	d1
	add	d1,d0
	neg	d0

	MOVE.L	Save5,d1
	MOVE.L	Save6,d2

	sub	d2,d1
	swap	d1
	swap	d2
	add	d2,d1

	add	d1,d0
	swap	d0
	swap	d1
	sub	d1,d0

	SWAP	D0
	MOVE.L	D0,(Matrix_pointer)+

	MOVE	X_angle,D0
	ADD	Y_angle,D0
	SUB	Y_angle,X_angle
	AND	Trigo_mask,D0
	AND	Trigo_mask,X_angle
	MOVE	2(Trigo_table1,d0),D0
	ADD	2(Trigo_table1,X_angle),D0
	MOVE	D0,(Matrix_pointer)


	ENDC

	RTS


; REGISTRES UTILISES :
;	A0-A6 SAUF A1
;	A2 PEUT ETRE LIBERE
;
; 	D1-D7 SAUF D4
;
; registres libres :
;
;	A1,D0,D4
;

CALCOBJ
	LEA	MATRIX(PC),A6
	MOVE	(A2)+,D5

; OCCUPES :
;	D0/D1/D2/D3/D4/D6/D7
;	A1/A2/A4/A6
; LIBRES :
;	D5
;	A0/A3/A5 TRANSLATION X,Y,Z

	MOVE.L	OBS_X,A0
	MOVE.L	OBS_Y,A3
	MOVE	OBS_Z,A5

	SUB	DIST(PC),A5
	MOVEQ	#-8,D4
.BCPT
	MOVE.L	A6,A4
	MOVEM	(A2)+,D1/D2/D3

	MOVE	D1,D6
	MULS	(A4)+,D6	;X
	MOVE	D2,D7
	MULS	(A4)+,D7
	ADD.L	D7,D6
	MOVE	D3,D7
	MULS	(A4)+,D7
	ADD.L	D7,D6

	MOVE	D1,D7
	MULS	(A4)+,D7	;Y
	MOVE	D2,D0
	MULS	(A4)+,D0
	ADD.L	D0,D7
	MOVE	D3,D0
	MULS	(A4)+,D0
	ADD.L	D0,D7

	MULS	(A4)+,D1	;Z
	MULS	(A4)+,D2
	ADD.L	D2,D1
	MULS	(A4)+,D3
	ADD.L	D3,D1

	SWAP	D1
	ADD	A5,D1
	NEG	D1

	ADD.L	A0,D6
	ADD.L	A3,D7
	MOVE.L	D7,(A1)+	;Y
	MOVE.L	D6,(A1)+	;X
	ASR.L	#8,D7
	ASR.L	#5,D6
	MOVE	D1,(A1)+	;Z
	DIVS	D1,D6
	DIVS	D1,D7

	ADD	#NBLINE/2,D7

	MOVE	D7,(A1)+	;Y
	MOVE	D6,(A1)+	;X
.FBCPT
	DBF	D5,.BCPT
	RTS




OBS_X		DC.L	0
OBS_Y		DC.L	0
OBS_Z		DC.W	0
VROTX		DC.W	1
VROTY		DC.W	2
VROTZ		DC.W	3
DIST		DC.W	70
OBS_ROTX	DC.W	$20
OBS_ROTY	DC.W	$0
OBS_ROTZ	DC.W	$0

VDIST   	DC.W	$4

	even

	IFEQ	MULS-2
SINCOS	incbin		'SINCOS.BIN'
	ENDC
	IFEQ	MULS-1
SINCOS2	incbin		'SINCOS2.BIN'
	ENDC
	IFEQ	MULS
SINCOS2	incbin		'SINCOS4.BIN'
SINCOS4	incbin		'SINCOS8.BIN'
	ENDC


;----------------- effacement de l'ecran 4 plans --------------


ffastcls:
	MOVE.L		sys_scr6(PC),A0
	LEA		NBLINE*160(A0),A0
	moveq		#0,D0
	MOVE.L		D0,D1
	MOVE.L		D0,D2
	MOVE.L		D1,D3
	MOVE.L		D0,D4
	MOVE.L		D1,D5
	MOVE.L		D0,D6
	MOVE.L		D1,D7
	MOVE.L		D0,A1
	MOVE.L		D1,A2
	MOVE.L		D0,A3
	MOVE.L		D1,A4
	MOVE.L		D0,A5
	MOVE.L		D1,A6
	bra		bfastcls

************************************************************
	SECTION DATA
************************************************************


listobjet
	DC.L		0,0,0
	

objets:
	DC.L		SPHEREO		objets
	DC.W		4*4,8*4,12*4	rotations
	DC.W		100		distance
	DC.B		64,0,0,4	xrot,yrot,zrot,eloign
	DC.W		1000		temps
	DC.L		0



*********************************************************
*	LES OBJETS					*
*********************************************************

STARTOBJECT
SPHEREO	INCBIN	CUBELINE.3D

ENDOBJECT

PALETTE
	INCBIN	'CYP2.COL'


************************************************************
    SECTION 	BSS
************************************************************
MATRIX:		DS.W	9
PROJETES2:	DS.W	NBPOINTS*7
PROJETES:	DS.W	NBPOINTS*7
SEGMENTS	DS.L	NBPOINTS
TABCOLOR	DS.L	256*2
SYS_VBL		DS.L	1		;adresse ancienne vbl
SYS_RES		DS	1		;resolution systŠme
SYS_PALETTE	DS	16		;couleurs du systŠme
SYS_SCREEN	DS.L	1		;adresse ecran systŠme
SYS_SCR1	DS.L	1		;adresse ecran visualis‚
sys_scr2:	DS.L	1		;adresse ecran a visualiser
sys_scr3:	DS.L	1
sys_scr4:	DS.L	1
sys_scr5:	DS.L	1
sys_scr6:	DS.L	1
bfastcls:	DS.L	4000
screen2		DS.B	96256+32000*2

;----------- table de clipping en X ---------------------

LLIMIT		DS.L	CLIPSIZE*2
TLIMIT		DS.L	160*2
MLIMIT		DS.L	160*2
RLIMIT		DS.L	CLIPSIZE*2

;------------ pile -------------------------------------

USERSTACK	DS.L	1
ENDSTACK	DS.L	1000
MYSTACK
	END





