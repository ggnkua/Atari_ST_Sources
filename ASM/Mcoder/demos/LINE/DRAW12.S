;
; nouvelle version 16/04/90
;  affichage dans un bitplane en m‚moire
;
OFFSET_GAUCHE	EQU	64
OFFSET_DROIT	EQU	256	;PAR EXEMPLE
LARGE		EQU	192
PLAN0=LARGE/8	;NB OCTETS DANS UNE LIGNE (160 SI 4 PLANS)
PLAN1=1		;NB PLANS (1->2 OCTETS,4->8 OCTETS)
;
; 3Šme essai de fast-draw (SUPER)
;  avantage : marche dans tous les cas !
;  d‚faut   : n'affiche que 42 points au maximum
;
; am‚liorations :
;	- transformer SUB/ADD par DIV dans le cas de longues droites
;	- ajouter routines de droites horizontales/verticales
;
	opt	o+,OW-,T-
	ORG	$800
;
; D6 et A2 sont libres !!!
;
; ADRESSE ECRAN=USP !!!
;
FRE1	EQUR	D2	;BROUILLON OU D0
CUMUL	EQUR	D3	;CUMUL
DX	EQUR	D4	;DELTAX
DY	EQUR	D5	;DELTAY
PAT	EQUR	D7	;PATTERN
ECRAN	EQUR	A0	;ECRAN
FRE3	EQUR	A3	;BROUILLON
FRE4	EQUR	A4	;BROUILLON
RETOUR1	EQUR	D6	;$4ED7=JMP(A7)
;
milieu		equ	160
;
; OFFSET=32=4*8 A GAUCHE=4*16 PIXELS A GAUCHE=OFFSET GAUCHE DE 64 PIXELS
;
; 12*8 BYTES DE LARGE=12*16 PIXELS DE LARGE=192 PIXELS DE LARGE
;
; REGISTRES UTILISES :
;
;	D3=CUMUL
;	D4=DX
;	DY=DY
;	D7=PATTERN
;	A0=ECRAN
;
; REGISTRES CONSTANTS :
;
; A1=MUL160(PC)
; USP=BASE ECRAN
; A7=RETURN\W
; A6=ADRESSE RETOUR APPELANT
;
	OPT	O+
RETOUR	MACRO
	JMP	(A6)		;SPEEDUP
	ENDM

DRAWV	MACRO
	OR	PAT,\1(ECRAN)
	SUB	DX,CUMUL
	BHS.S	.\@
	ADD	DY,CUMUL
	ADD	PAT,PAT
	BCC.S	.\@
	ADDX	PAT,PAT
	SUBQ	#PLAN1*2,ECRAN
.\@
	ENDM

CODE2	MACRO
	DC.W	.1
	DC.W	.2
	DC.W	.3
	DC.W	.4
	DC.W	.5
	DC.W	.6
	DC.W	.7
	DC.W	.8
	DC.W	.9
	DC.W	.10
	DC.W	.11
	DC.W	.12
	DC.W	.13
	DC.W	.14
	DC.W	.15
	DC.W	.16
	DC.W	.17
	DC.W	.18
	DC.W	.19
	DC.W	.20
	DC.W	.21
	DC.W	.22
	DC.W	.23
	DC.W	.24
	DC.W	.25
	DC.W	.26
	DC.W	.27
	DC.W	.28
	DC.W	.29
	DC.W	.30
	DC.W	.31
	DC.W	.32
	DC.W	.33
	DC.W	.34
	DC.W	.35
	DC.W	.36
	DC.W	.37
	DC.W	.38
	DC.W	.39
	DC.W	.40
	DC.W	.41
	DC.W	.42

	DC.W	.43
	DC.W	.43
	DC.W	.43
	DC.W	.43
.43
	ILLEGAL

.42	DRAWV	\1*41
.41	DRAWV	\1*40
.40	DRAWV	\1*39
.39	DRAWV	\1*38
.38	DRAWV	\1*37
.37	DRAWV	\1*36
.36	DRAWV	\1*35
.35	DRAWV	\1*34
.34	DRAWV	\1*33
.33	DRAWV	\1*32
.32	DRAWV	\1*31
.31	DRAWV	\1*30
.30	DRAWV	\1*29
.29	DRAWV	\1*28
.28	DRAWV	\1*27
.27	DRAWV	\1*26
.26	DRAWV	\1*25
.25	DRAWV	\1*24
.24	DRAWV	\1*23
.23	DRAWV	\1*22
.22	DRAWV	\1*21
.21	DRAWV	\1*20
.20	DRAWV	\1*19
.19	DRAWV	\1*18
.18	DRAWV	\1*17
.17	DRAWV	\1*16
.16	DRAWV	\1*15
.15	DRAWV	\1*14
.14	DRAWV	\1*13
.13	DRAWV	\1*12
.12	DRAWV	\1*11
.11	DRAWV	\1*10
.10	DRAWV	\1*9
.9	DRAWV	\1*8
.8	DRAWV	\1*7
.7	DRAWV	\1*6
.6	DRAWV	\1*5
.5	DRAWV	\1*4
.4	DRAWV	\1*3
.3	DRAWV	\1*2
.2	DRAWV	\1*1
.1
	ENDM

DRAW3	MACRO
	MOVE	DY,CUMUL
	LSR	#1,CUMUL
	MOVE	DY,D2
	ADD	D2,D2
	LEA	DRW3(PC),FRE3
	MOVE	(FRE3,D2.W),FRE3
	JMP	(FRE3)
	ENDM
DRAW4	MACRO
	MOVE	DY,CUMUL
	LSR	#1,CUMUL
	MOVE	DY,D2
	ADD	D2,D2
	LEA	DRW4(PC),FRE3
	MOVE	(FRE3,D2.W),FRE3
	JMP	(FRE3)
	ENDM

OCTANT4
;
; dX<0,dY<0
;
	NEG	DY

	CMP	DX,DY
	BLO.S	DRAW22		;X0=DROIT,Y0=BAS
; PT DEPART=X0Y1
	MOVEQ	#$F,D2
	EOR	D2,D0		;INVERSE LES 4 BITS
	AND	D0,D2
	EOR	D2,D0
	ASR	#(7-PLAN1)/2,D0
	ADD	D3,D3
	ADD	(A1,D3.W),D0
	ADD	D0,ECRAN
	BSET	D2,PAT
	DRAW4
DRAW22
;X0=DROIT,Y0=BAS
	MOVEQ	#-16,D1		;RIEN A FAIRE DE D1 !!!
	AND	D2,D1		;BUG CORRIGE !!!

	ADD	D2,D2
	ADD	D0,D0

	ASR	#(7-PLAN1)/2,D1
	ADD	D3,D3		;YHAUT
	ADD	(A1,D3.W),D1
	ADD	D1,ECRAN

	LEA	OFFSETS1+(LARGE/2)*2(PC),FRE3
	MOVE	(FRE3,D2.W),FRE4
	MOVE	(FRE3,D0.W),FRE3

	MOVE	DX,CUMUL
	LSR	#1,CUMUL

	MOVE	(FRE3),FRE1
	MOVE	RETOUR1,(FRE3)		;JMP (An)
	JMP	-4(FRE4)
OCTANT3
	NEG	DX

	MOVE	D3,DY
	SUB	D1,DY		;dY
	BMI.S	OCTANT4
;
; dX<0,dY>=0
;
	CMP	DX,DY
	BLO.S	DRAW12		;X0=DROITE,Y0=HAUT
; PT DEPART=X0Y1
	MOVEQ	#$F,D2
	EOR	D2,D0		;INVERSE LES 4 BITS
	AND	D0,D2
	EOR	D2,D0
	ASR	#(7-PLAN1)/2,D0
	ADD	D3,D3
	ADD	(A1,D3.W),D0
	ADD	D0,ECRAN
	BSET	D2,PAT
	DRAW3
DRAW12
;X0=DROITE,Y0=HAUT

	MOVEQ	#-16,D1		;RIEN A FAIRE DE D1 !!!
	AND	D2,D1		;BUG CORRIGE !!

	ADD	D2,D2
	ADD	D0,D0

	ASR	#(7-PLAN1)/2,D1
	ADD	D3,D3
	ADD	(A1,D3.W),D1
	ADD	D1,ECRAN

	LEA	OFFSETS2+(LARGE/2)*2(PC),FRE3
	MOVE	(FRE3,D2.W),FRE4
	MOVE	(FRE3,D0.W),FRE3

	MOVE	DX,CUMUL
	LSR	#1,CUMUL
	MOVE	(FRE3),FRE1
	MOVE	RETOUR1,(FRE3)		;JMP (An)
	JMP	-4(FRE4)
;
; A1=MUL160
; USP=ADRESSE ECRAN
; ECRAN=PTR DYNAMIQUE
;
DRAW_IT
	MOVE.L	USP,ECRAN
	MOVEQ	#0,PAT

	MOVE	D2,DX
	SUB	D0,DX		;dX
	BMI.S	OCTANT3

	MOVE	D3,DY
	SUB	D1,DY		;dY
	BMI.S	OCTANT2
;
; dX>=0,dY>=0
;
	CMP	DX,DY
	BLO.S	DRAW21		;X0=GAUCHE,Y0=HAUT
; PT DEPART=X1Y0
	MOVEQ	#$F,D0
	EOR	D0,D2		;INVERSE LES 4 BITS
	AND	D2,D0
	EOR	D0,D2
	ASR	#(7-PLAN1)/2,D2
	ADD	D1,D1
	ADD	(A1,D1.W),D2
	ADD	D2,ECRAN
	BSET	D0,PAT
	DRAW4
DRAW21
;X0=GAUCHE,Y0=HAUT
	MOVEQ	#-16,D3			;RIEN A FAIRE DE D3 !!!
	AND	D0,D3			;BUG CORRIGE !!!
	ADD	D0,D0
	ADD	D2,D2

	ASR	#(7-PLAN1)/2,D3
	ADD	D1,D1			;YHAUT
	ADD	(A1,D1.W),D3
	ADD	D3,ECRAN

	LEA	OFFSETS1+(LARGE/2)*2(PC),FRE3
	MOVE	(FRE3,D0.W),FRE4
	MOVE	(FRE3,D2.W),FRE3

	MOVE	DX,CUMUL
	LSR	#1,CUMUL

	MOVE	(FRE3),FRE1
	MOVE	RETOUR1,(FRE3)		;JMP (An)
	JMP	-4(FRE4)

OCTANT2
;
; dX>=0,dY<0
;
	NEG	DY

	CMP	DX,DY
	BLO.S	DRAW11		;X0=GAUCHE,Y0=BAS
;PT DEPART=X1Y0
	MOVEQ	#$F,D0
	EOR	D0,D2		;INVERSE LES 4 BITS
	AND	D2,D0
	EOR	D0,D2
	ASR	#(7-PLAN1)/2,D2
	ADD	D1,D1
	ADD	(A1,D1.W),D2
	ADD	D2,ECRAN
	BSET	D0,PAT
	DRAW3
DRAW11
;X0=GAUCHE,Y0=BAS

	MOVEQ	#-16,D3			;RIEN A FAIRE DE D3 !!!
	AND	D0,D3			;BUG CORRIGE !!!

	ADD	D0,D0
	ADD	D2,D2

	ASR	#(7-PLAN1)/2,D3
	ADD	D1,D1
	ADD	(A1,D1.W),D3
	ADD	D3,ECRAN

	LEA	OFFSETS2+(LARGE/2)*2(PC),FRE3
	MOVE	(FRE3,D0.W),FRE4
	MOVE	(FRE3,D2.W),FRE3

	MOVE	DX,CUMUL
	LSR	#1,CUMUL
	MOVE	(FRE3),FRE1
	MOVE	RETOUR1,(FRE3)		;JMP (An)
	JMP	-4(FRE4)

DRW3
	CODE2	-PLAN0
	OR	PAT,(ECRAN)
	RETOUR
DRW4
	CODE2	PLAN0
	OR	PAT,(ECRAN)
	RETOUR
;
GENERE	MACRO
lab\<number>:
	ENDM

DXSUPDY	MACRO
lab\<number>:
number	set	number+1
	ifne	~\1&15
	iif	(\1&15)=0	move	#$8000,PAT
	iif	(\1&15)=1	or	#$4000,PAT
	iif	(\1&15)=2	or	#$2000,PAT
	iif	(\1&15)=3	or	#$1000,PAT
	iif	(\1&15)=4	or	#$0800,PAT
	iif	(\1&15)=5	or	#$0400,PAT
	iif	(\1&15)=6	or	#$0200,PAT
	iif	(\1&15)=7	or	#$0100,PAT
	iif	(\1&15)=8	tas	PAT
	iif	(\1&15)=9	or	#$40,PAT
	iif	(\1&15)=10	or	#$20,PAT
	iif	(\1&15)=11	or	#$10,PAT
	iif	(\1&15)=12	addq	#8,PAT
	iif	(\1&15)=13	addq	#4,PAT
	iif	(\1&15)=14	addq	#2,PAT
	SUB	DY,CUMUL
	BHS.s	\@
	or	PAT,(ECRAN)
	clr	PAT
	elseif
	OR	#1,PAT
	or	PAT,(ECRAN)+
	SUB	DY,CUMUL
	BHS.s	\@
	endc
	lea	y(ECRAN),ECRAN
	ADD	DX,CUMUL
\@
	endm

number	set	OFFSET_GAUCHE
y	set	PLAN0
x	set	OFFSET_GAUCHE
	rept	LARGE-1
	DXSUPDY	x
x	set	x+1
	endr
	GENERE
	OR	#1,PAT
	NOP			;ici est pok‚ le dernier JMP !!!
;
number	set	OFFSET_DROIT
y	set	-PLAN0
x	set	OFFSET_GAUCHE
	rept	LARGE-1
	DXSUPDY	x
x	set	x+1
	endr
	GENERE
	OR	#1,PAT
	NOP			;ici est pok‚ le dernier JMP !!!

BRANCHE	MACRO
	dc.w	lab\<number>+4
number	set	number+1
	ENDM

OFFSETS1
number	set	OFFSET_GAUCHE
	rept	LARGE
	BRANCHE
	endr
OFFSETS2
number	set	OFFSET_DROIT
	rept	LARGE
	BRANCHE
	endr

	DS.L	50		;PLACE POUR LA PILE (CA PUE !!!)
;RETURN
	OR	PAT,(ECRAN)
	MOVE	FRE1,(FRE3)
	RETOUR
