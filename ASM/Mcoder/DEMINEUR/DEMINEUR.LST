'
' programme de r‚solution du "d‚mineur"
'
' encore vachement bugg‚
'
DEFINT "a-z"
n=8             ! taille du damier
nbbombes=10
'
DIM damier(n+1,n+1)     ! tableau contenant les bombes pos‚es par le programme
DIM jeu(n+1,n+1)        ! tableau des coups jou‚s par le joueur
DIM tableau(n+1,n+1)
DIM stackx(n*n),stacky(n*n)
DIM tp(n*n),tx(n*n),ty(n*n)
'
@init_damier    !tirage des bombes et comptage des cases dans DAMIER()
@display_damier
@init_jeu       !init tableau pour le joueur
'
' au d‚but tirage al‚atoire
'
' c=RND*n*n
' @convert(c)            !convertit nn->x,y
'
' on triche un peu, on prend une case vide pour d‚part
'
FOR i=1 TO n
  FOR j=1 TO n
    IF damier(i,j)=0
      x=i
      y=j
    ENDIF
  NEXT j
NEXT i
'
IF damier(x,y)=9
  PRINT "BOUM !!!"
  jeu(x,y)=9
ELSE
  @joue_case(x,y)
ENDIF
@display_jeu
@joue
END
> PROCEDURE convert(c)
  y=c/n+1
  x=(c MOD n)+1
RETURN
> PROCEDURE joue_case(x,y)
  '
  IF jeu(x,y)<>-1
    ERROR 100
  ENDIF
  IF damier(x,y)=9
    PRINT "BOUM !"
    jeu(x,y)=damier(x,y)
  ELSE
    IF damier(x,y)=0
      @remplit(x,y)
    ELSE
      jeu(x,y)=damier(x,y)
    ENDIF
  ENDIF
RETURN
> PROCEDURE remplit(x,y)
  pile=0
  push(x,y)
  DO
    EXIT IF pile=0
    DEC pile
    x=stackx(pile)
    y=stacky(pile)
    push(x-1,y-1)
    push(x-1,y)
    push(x-1,y+1)
    push(x,y-1)
    push(x,y+1)
    push(x+1,y-1)
    push(x+1,y)
    push(x+1,y+1)
  LOOP
RETURN
> PROCEDURE push(a,b)
  IF damier(a,b)=0
    IF a>0 AND a<=n AND b>0 AND b<=n
      IF jeu(a,b)<>0
        jeu(a,b)=0
        stackx(pile)=a
        stacky(pile)=b
        INC pile
      ENDIF
    ENDIF
  ELSE
    jeu(a,b)=damier(a,b)
  ENDIF
RETURN
> PROCEDURE init_damier
  LOCAL i,j,x,y
  ARRAYFILL damier(),-1
  FOR i=0 TO n+1
    damier(i,0)=0
    damier(i,n+1)=0
    damier(0,i)=0
    damier(n+1,i)=0
  NEXT i
  FOR i=1 TO nbbombes
    DO
      a=RND*n*n
      x=a/n+1
      y=(a MOD n)+1
      EXIT IF damier(x,y)=-1
    LOOP
    damier(x,y)=9
  NEXT i
  '
  ' comptage des cases
  '
  '
  FOR i=0 TO n+1
    FOR j=0 TO n+1
      IF damier(i,j)=-1
        k=0
        IF damier(i-1,j-1)=9
          INC k
        ENDIF
        IF damier(i-1,j)=9
          INC k
        ENDIF
        IF damier(i-1,j+1)=9
          INC k
        ENDIF
        IF damier(i,j-1)=9
          INC k
        ENDIF
        IF damier(i,j+1)=9
          INC k
        ENDIF
        IF damier(i+1,j-1)=9
          INC k
        ENDIF
        IF damier(i+1,j)=9
          INC k
        ENDIF
        IF damier(i+1,j+1)=9
          INC k
        ENDIF
        damier(i,j)=k
      ENDIF
    NEXT j
  NEXT i
RETURN
> PROCEDURE display_damier
  LOCAL i,j
  FOR i=1 TO n
    FOR j=1 TO n
      PRINT RIGHT$("  "+STR$(damier(j,i)),2);" ";
    NEXT j
    PRINT
  NEXT i
  PRINT
RETURN
> PROCEDURE init_jeu
  ARRAYFILL jeu(),-1
  FOR i=0 TO n+1
    jeu(i,0)=0
    jeu(i,n+1)=0
    jeu(0,i)=0
    jeu(n+1,i)=0
  NEXT i
RETURN
> PROCEDURE display_jeu
  LOCAL i,j
  FOR i=1 TO n
    FOR j=1 TO n
      IF jeu(j,i)=-1
        PRINT "?";
      ELSE
        PRINT RIGHT$(STR$(jeu(j,i)),1);
      ENDIF
    NEXT j
    PRINT
  NEXT i
  PRINT
RETURN
> PROCEDURE jouec(x,y)
  IF jeu(x,y)=-1
    IF x>0 AND x<=n AND y>0 AND y<=n
      coupjoue=1
      joue_case(x,y)
    ENDIF
  ENDIF
RETURN
> PROCEDURE placebombe(x,y)
  IF jeu(x,y)=-1
    IF x>0 AND x<=n AND y>0 AND y<=n
      coupjoue=1
      jeu(x,y)=9
      IF damier(x,y)<>9
        ERROR 1
      ENDIF
    ENDIF
  ENDIF
RETURN
> PROCEDURE joue
  LOCAL i,j
  '
  ' … chaque coup-> display_jeu
  '
  ' 1) recherche simple pour simplification de la position
  '
  DO
    coupjoue=0
    FOR i=1 TO n
      FOR j=1 TO n
        IF jeu(i,j)<>-1
          nbbombes=0
          nblibres=0
          scan(i-1,j-1)
          scan(i-1,j)
          scan(i-1,j+1)
          scan(i,j-1)
          scan(i,j+1)
          scan(i+1,j-1)
          scan(i+1,j)
          scan(i+1,j+1)
          ' PRINT (i-1)*n+(j-1),jeu(i,j),nbbombes,nblibres
          IF nbbombes=jeu(i,j)
            '
            ' toutes les cases autour sont des cases vides
            '
            jouec(i-1,j-1)
            jouec(i-1,j)
            jouec(i-1,j+1)
            jouec(i,j-1)
            jouec(i,j+1)
            jouec(i+1,j-1)
            jouec(i+1,j)
            jouec(i+1,j+1)
          ELSE
            IF nbbombes+nblibres=jeu(i,j)
              '
              ' toutes les cases autour sont des bombes
              '
              placebombe(i-1,j-1)
              placebombe(i-1,j)
              placebombe(i-1,j+1)
              placebombe(i,j-1)
              placebombe(i,j+1)
              placebombe(i+1,j-1)
              placebombe(i+1,j)
              placebombe(i+1,j+1)
            ENDIF
          ENDIF
        ENDIF
      NEXT j
    NEXT i
    EXIT IF coupjoue=0
    @display_jeu
  LOOP
  '
  ' 2) heuristiques pour positionnement des bombes
  '
  '
  PRINT "Fini"
  PRINT
  @simplifie
  @display_tab
  @devine
RETURN
> PROCEDURE scan(x,y)
  IF jeu(x,y)=-1
    INC nblibres
  ELSE
    IF jeu(x,y)=9
      INC nbbombes
    ENDIF
  ENDIF
RETURN
> PROCEDURE simplifie
  FOR i=0 TO n+1
    FOR j=0 TO n+1
      tableau(i,j)=jeu(i,j)
    NEXT j
  NEXT i
  DO
    flag=0
    FOR i=1 TO n
      FOR j=1 TO n
        '
        ' recherche des bombes entour‚es pour ‚limination...
        '
        IF tableau(i,j)=9
          k=0
          IF tableau(i-1,j-1)<>-1
            INC k
          ENDIF
          IF tableau(i-1,j)<>-1
            INC k
          ENDIF
          IF tableau(i-1,j+1)<>-1
            INC k
          ENDIF
          IF tableau(i,j-1)<>-1
            INC k
          ENDIF
          IF tableau(i,j+1)<>-1
            INC k
          ENDIF
          IF tableau(i+1,j-1)<>-1
            INC k
          ENDIF
          IF tableau(i+1,j)<>-1
            INC k
          ENDIF
          IF tableau(i+1,j+1)<>-1
            INC k
          ENDIF
          IF k=8
            nbbombes=0
            @simple(i-1,j-1)
            @simple(i-1,j)
            @simple(i-1,j+1)
            @simple(i,j-1)
            @simple(i,j+1)
            @simple(i+1,j-1)
            @simple(i+1,j)
            @simple(i+1,j+1)
            tableau(i,j)=nbbombes
          ENDIF
        ENDIF
      NEXT j
    NEXT i
    EXIT IF flag=0
  LOOP
RETURN
> PROCEDURE simple(x,y)
  IF x>0 AND x<=n AND y>0 AND y<=n
    IF tableau(x,y)=9
      INC nbbombes
    ELSE
      IF tableau(x,y)<=0 OR tableau(x,y)>8
        ERROR 101
      ENDIF
      DEC tableau(x,y)
    ENDIF
  ENDIF
RETURN
PROCEDURE display_tab
  LOCAL i,j
  FOR i=1 TO n
    FOR j=1 TO n
      IF tableau(j,i)=-1
        PRINT "?";
      ELSE
        IF tableau(j,i)=10
          PRINT "_";
        ELSE
          PRINT RIGHT$(STR$(tableau(j,i)),1);
        ENDIF
      ENDIF
    NEXT j
    PRINT
  NEXT i
  PRINT
RETURN
PROCEDURE devine
  k=0
  FOR x=1 TO n
    FOR y=1 TO n
      IF tableau(x,y)=-1
        INC k
      ENDIF
    NEXT y
  NEXT x
  IF k=0
    PRINT "C'est fini !!!!!!!!!!"
    END
  ENDIF
  '
  ' sous-programme de recherche intelligente
  '
  ' r‚solution des cas les plus complexes
  '
  ' bombe devin‚e = 9
  ' case vide devin‚e = 10
  '
  nbsol=0
  pile=0
  niveau=0
  DO
    DO
      infini=0
      FOR x=1 TO n
        FOR y=1 TO n
          IF tableau(x,y)=-1
            '
            ' case vide, on teste si on peut mettre une bombe
            '
            j=0
            k=0
            @teste_bombe(x-1,y-1)
            @teste_bombe(x-1,y)
            @teste_bombe(x-1,y+1)
            @teste_bombe(x,y-1)
            @teste_bombe(x,y+1)
            @teste_bombe(x+1,y-1)
            @teste_bombe(x+1,y)
            @teste_bombe(x+1,y+1)
            IF k<>0 AND j+k=8
              '
              ' oui->on pose une bombe dans cette case
              '
              tableau(x,y)=9
              tp(niveau)=pile
              tx(niveau)=x
              ty(niveau)=y
              '
              ' ensuite on en d‚duit les autres bombes
              '
              @deduit2
              '
              ' ensuite on teste si la position est toujours l‚gale
              '
              @test_legal
              IF legal=0
                '
                ' si tout est bon, on empile
                '
                INC niveau
                EXIT IF TRUE
              ENDIF
              '
              ' non -> d‚piler et vider case
              '
              IF pile>tp(niveau)
                FOR i=tp(niveau) TO pile
                  tableau(stackx(i),stacky(i))=-1
                NEXT i
                pile=tp(niveau)
              ENDIF
              tableau(x,y)=-1
            ENDIF
          ENDIF
        NEXT y
      NEXT x
      '
      ' m‚moriser la solution contenue dans tableau
      '
      IF pile>0
        INC nbsol
        PRINT "Solution ";nbsol
        PRINT niveau,pile
        @display_tab
      ENDIF
      infini=1
      EXIT IF TRUE
    LOOP
    IF infini<>0
      '
      ' d‚pilement
      '
      DO
        EXIT IF niveau<=0
        DEC niveau
        '
        ' on d‚pile les cases d‚duites
        '
        IF pile>tp(niveau)
          FOR i=tp(niveau) TO pile
            tableau(stackx(i),stacky(i))=-1
          NEXT i
          pile=tp(niveau)
        ENDIF
        x=tx(niveau)
        y=ty(niveau)
        IF tableau(x,y)=9
          tableau(x,y)=10
          tp(niveau)=pile
          ' tx(niveau)=x
          ' ty(niveau)=y
          '
          ' on en d‚duit les autres bombes
          '
          @deduit2
          '
          ' ensuite on teste si la position est toujours l‚gale
          '
          @test_legal
          IF legal=0
            '
            ' si tout est bon, on empile
            '
            INC niveau
            EXIT IF TRUE
          ENDIF
        ENDIF
        '
        ' non -> d‚piler et vider case
        '
        IF pile>tp(niveau)
          FOR i=tp(niveau) TO pile
            tableau(stackx(i),stacky(i))=-1
          NEXT i
          pile=tp(niveau)
        ENDIF
        tableau(x,y)=-1
        IF niveau=1
          END
        ENDIF
      LOOP
    ENDIF
  LOOP
RETURN
PROCEDURE teste_bombe(x,y)
  IF x>0 AND x<=n AND y>0 AND y<=n
    IF tableau(x,y)<>0 AND tableau(x,y)<>10
      IF tableau(x,y)=-1 OR tableau(x,y)=9
        INC j
      ELSE
        INC k
      ENDIF
    ENDIF
  ELSE
    INC j
  ENDIF
RETURN
> PROCEDURE deduit2
  LOCAL i,j
  '
  DO
    coupjoue=0
    FOR i=1 TO n
      FOR j=1 TO n
        IF tableau(i,j)<>-1
          nbbombes=0
          nblibres=0
          scan2(i-1,j-1)
          scan2(i-1,j)
          scan2(i-1,j+1)
          scan2(i,j-1)
          scan2(i,j+1)
          scan2(i+1,j-1)
          scan2(i+1,j)
          scan2(i+1,j+1)
          ' PRINT (i-1)*n+(j-1),tableau(i,j),nbbombes,nblibres
          IF nbbombes=tableau(i,j)
            '
            ' toutes les cases autour sont des cases vides
            '
            jouec2(i-1,j-1)
            jouec2(i-1,j)
            jouec2(i-1,j+1)
            jouec2(i,j-1)
            jouec2(i,j+1)
            jouec2(i+1,j-1)
            jouec2(i+1,j)
            jouec2(i+1,j+1)
          ELSE
            IF nbbombes+nblibres=tableau(i,j)
              '
              ' toutes les cases autour sont des bombes
              '
              placebombe2(i-1,j-1)
              placebombe2(i-1,j)
              placebombe2(i-1,j+1)
              placebombe2(i,j-1)
              placebombe2(i,j+1)
              placebombe2(i+1,j-1)
              placebombe2(i+1,j)
              placebombe2(i+1,j+1)
            ENDIF
          ENDIF
        ENDIF
      NEXT j
    NEXT i
    EXIT IF coupjoue=0
  LOOP
RETURN
PROCEDURE scan2(x,y)
  IF tableau(x,y)=-1
    INC nblibres
  ELSE
    IF tableau(x,y)=9
      INC nbbombes
    ENDIF
  ENDIF
RETURN
> PROCEDURE jouec2(x,y)
  IF tableau(x,y)=-1
    IF x>0 AND x<=n AND y>0 AND y<=n
      coupjoue=1
      tableau(x,y)=10
      stackx(pile)=x
      stacky(pile)=y
      INC pile
    ENDIF
  ENDIF
RETURN
> PROCEDURE placebombe2(x,y)
  IF tableau(x,y)=-1
    IF x>0 AND x<=n AND y>0 AND y<=n
      coupjoue=1
      tableau(x,y)=9
      stackx(pile)=x
      stacky(pile)=y
      INC pile
    ENDIF
  ENDIF
RETURN
PROCEDURE test_legal
  LOCAL i,j
  '
  ' il suffit de v‚rifier que les bombes soient valides
  '
  legal=0
  FOR i=1 TO n
    FOR j=1 TO n
      IF tableau(i,j)<>-1 AND tableau(i,j)<>9
        k=0                     ! nb bombes autour de la case
        @compte(i-1,j-1)
        @compte(i-1,j)
        @compte(i-1,j+1)
        @compte(i,j-1)
        @compte(i,j+1)
        @compte(i+1,j-1)
        @compte(i+1,j)
        @compte(i+1,j+1)
        IF tableau(i,j)=0
          IF k<>0
            legal=1                 !position non l‚gale
          ENDIF
        ELSE
          IF k>tableau(i,j) OR k=0  ! si =10 >ne compte pas les cases...
            legal=1
          ENDIF
        ENDIF
      ENDIF
    NEXT j
  NEXT i
RETURN
PROCEDURE compte(x,y)
  IF tableau(x,y)=9
    INC k
  ENDIF
RETURN
