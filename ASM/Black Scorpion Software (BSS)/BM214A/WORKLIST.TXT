----------------------------------------------------------------
Bad Mood sourcecode 'responsibility' list: Last updated 13/09/96
----------------------------------------------------------------

This is a brief 'responsibility' list for each of the sourcecode
modules. Could each contributor please append their names to the
list, under the parts for which they were responsible. This
system does of course allow for overlaps, where two or more
contributors jointly hold significant responsibility for one
source module.

[DOOM.ASM]

 Function:

  > DSP56001 kernel - responsible for all intensive tasks.

 Contributors:

  > Doug Little (primary)
 
[DOOM.S]

 Function:

  > Primary (core) source unit. Includes all further sub-parts.
 
 Contributors:

  > Doug Little (primary)
  > Almost all other source contributors (secondary)
 
[BSPD.S]

 Function:

  > Binary-space-partition algorithms & related code.

 Contributors:
 
  > Doug Little (primary)
 
[CACHE.S]

 Function:

  > Surface cache - allocates, builds & manages all textures.
  
 Contributors:
 
  > Doug Little (primary)

[ENGINE.S]

 Function:

  > Drawing (graphics) module - all related sub-parts included here.
  
 Contributors:
 
  > Doug Little (primary)

[IO.S]

 Function:

  > Drawing (graphics) module - all related sub-parts included here.

 Contributors:
 
  > Dave Murphy (primary)
  
 Rewrites:
 
  > Doug Little (secondary) - required compatibility with surface cache

[KEYBOARD.S]

 Function:

  > Interprets keyboard & mouse activity for player control.

 Contributors:
 
  > Dave Murphy (primary)

[LEVELMAP.S]

 Function:

  > Draws & controls game level map.

 Contributors:
 
  > Laurent Sallafranque (primary)

[LIGHTING.S]

 Function:

  > Interprets lighting effects from level data for use in drawing module.

 Contributors:
 
  > Doug Little (primary)

[MEMORY.S]

 Function:

  > Handles allocation & deallocation of RAM for all program modules.

 Contributors:
 
  > Doug Little (primary)

[RENDER.S]

 Function:

  > Renders objects like walls and floors directly onto screen.

 Contributors:
 
  > Doug Little (primary)
  
[SCREEN.S]

 Function:

  > Responsible for screen display, video initialisation & clean exit.

 Contributors:
 
  > Doug Little (primary)

[SHARDS.S]

 Function:

  > Responsible for recovering defragmented floor & wall shards from DSP.

 Contributors:
 
  > Doug Little (primary)
  
[TABLES.S]

 Function:

  > Contains all program-related binary data tables and resources.

 Contributors:
 
  > Doug Little (primary)

[TEXTURES.S]

 Function:

  > Deals with all texture-related jobs, including management & compositing.
  
 Contributors:
 
  > Doug Little (primary)
  
[TIMING.S]

 Function:

  > Handles performance profiling & all other timing responsibilities.
  
 Contributors:
 
  > Doug Little (primary)

[VIDEO\*.*]

 Function:

  > All entries in this folder are so far unused, but will ultuimately
    account for future high-performance video modes on both VGA and RGB
    monitors.
  
 Contributors:
 
  > Anders Eriksson (primary)

[INCLUDE\DSPCONST.S]

 Function:

  > Contains settings & commands related with DSP/CPU communications.

 Contributors:
 
  > Doug Little (primary)

[INCLUDE\DSPLIB.S]

 Function:

  > DSP specific libraries (standard module)

 Contributors:
 
  > N/A
  
[INCLUDE\HEADER.S]

 Function:

  > Contains all global settings & equates

 Contributors:
 
  > Doug Little (primary)

[INCLUDE\MACROS.S]

 Function:

  > Contains both general and BM-specific program macros

 Contributors:
 
  > Doug Little (primary)

[INCLUDE\VIDEO.S]

 Function:

  > Contains all video/screen-specific settings, flags and equates

 Contributors:
 
  > Doug Little (primary)

[INCLUDE\WAD_TAB.S]

 Function:

  > Contains all WAD-specific offsets & equates. This is mostly
    duplicated in HEADER.S and will ultimately be replaced.

 Contributors:
 
  > Dave Murphy (primary)
