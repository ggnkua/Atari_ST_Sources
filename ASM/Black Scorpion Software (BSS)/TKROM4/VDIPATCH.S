*---------------------------------------------------------------*
			text
*---------------------------------------------------------------*

;	OPT		O-

*---------------------------------------------------------------*
	cnop		0,4
*---------------------------------------------------------------*
	dc.l		'XBRA'
	dc.l		ID
*---------------------------------------------------------------*
old_trap13:
*---------------------------------------------------------------*
	dc.l		0
*---------------------------------------------------------------*
new_trap13:
*---------------------------------------------------------------*
	move.l		usp,a0
	btst		#5,(sp)
	beq.s		.user
	lea		8(sp),a0
.user:	move.w		(a0),d0
*---------------------------------------------------------------*
	cmp.w		#5,d0
	beq.s		new_setexc
*---------------------------------------------------------------*
original13:
continue13:
*---------------------------------------------------------------*
	move.l		old_trap13,a0
	jmp		(a0)
*---------------------------------------------------------------*
complete13:
*---------------------------------------------------------------*
	rte

*---------------------------------------------------------------*
			rsreset
*---------------------------------------------------------------*
se_function		rs.w	1
se_vector		rs.w	1
se_address		rs.l	1
se_slen			rs.b	0

*---------------------------------------------------------------*
new_setexc:
*---------------------------------------------------------------*
	cmp.w		#$0101,2(a0)
	bne		continue13
*---------------------------------------------------------------*
	push.l		se_address(a0)
	pea		$00050101
	move.l		old_trap13,a0
	clr.w		-(sp)
	pea		.rts
	push.w		sr
	jmp		(a0)
.rts:	addq.l		#se_slen,sp
*---------------------------------------------------------------*	
	move.l		trap2.w,a0
*---------------------------------------------------------------*
.next:	cmp.l		#'XBRA',xbra_tag(a0)
	bne.s		.stop
	cmp.l		#ID,xbra_id(a0)
	beq.s		.done
	move.l		xbra_ptr(a0),a0
	bra.s		.next
*---------------------------------------------------------------*
*	Check for cookies					*
*---------------------------------------------------------------*
.stop:	move.l		cookie_jar.w,a0
	tst.l		a0
	beq.s		.hook
*---------------------------------------------------------------*
*	Look for NVDI & MiNT - remove patch if detected		*
*---------------------------------------------------------------*
.look:	move.l		(a0),d0
	beq.s		.hook
	cmp.l		#'NVDI',d0
	beq.s		.rem
;	cmp.l		#'MiNT',d0
;	beq.s		.rem
;	cmp.l		#'MagX',d0
;	beq.s		.rem
	addq.l		#8,a0
	bra.s		.look
*---------------------------------------------------------------*
*	Find our place in trap13				*
*---------------------------------------------------------------*
.rem:	move.l		trap13.w,a0
	move.l		a0,a1
*---------------------------------------------------------------*
.rnxt:	cmp.l		#'XBRA',xbra_tag(a0)
	bne.s		.done
	cmp.l		#ID,xbra_id(a0)
	beq.s		.rdon
	lea		xbra_ptr(a0),a1
	move.l		xbra_ptr(a0),a0
	bra.s		.rnxt
*---------------------------------------------------------------*
*	Remove our patch					*
*---------------------------------------------------------------*
.rdon:	move.l		old_trap13,(a1)
	bra.s		.done
*---------------------------------------------------------------*
.hook:	move.l		trap2.w,old_trap2
	move.l		#new_trap2,trap2.w
*---------------------------------------------------------------*
.done:	bra		complete13
*---------------------------------------------------------------*
	cnop		0,4
*---------------------------------------------------------------*
	dc.l		'XBRA'
	dc.l		ID
*---------------------------------------------------------------*
old_trap2:
*---------------------------------------------------------------*
	dc.l		0
*---------------------------------------------------------------*
new_trap2:
*---------------------------------------------------------------*
	cmp.w		#115,d0
	bne		ignore2
*---------------------------------------------------------------*
patched2:
*---------------------------------------------------------------*
*	Swap superstack for parameter stack			*
*---------------------------------------------------------------*
	movec		a0,msp
	move.l		usp,a0
	btst		#5,(sp)
	beq.s		.user
	move.l		sp,a0
.user:	move.l		sp,d0
	move.l		a0,sp
	move.l		d0,-(sp)
	movec		msp,a0
*---------------------------------------------------------------*
	move.w		([d1.l]),d0
*---------------------------------------------------------------*
	cmp.w		#2,d0
	beq		new_clswk
	cmp.w		#109,d0
	beq.s		new_rastercopy
	cmp.w		#121,d0
	beq.s		new_rastercopy
*---------------------------------------------------------------*
continue2:
*---------------------------------------------------------------*
	move.l		(sp)+,sp	
	moveq		#115,d0
*---------------------------------------------------------------*
ignore2:
*---------------------------------------------------------------*
	jmp		([old_trap2])
*---------------------------------------------------------------*
complete2:
*---------------------------------------------------------------*
	move.l		(sp)+,sp
	rte

*---------------------------------------------------------------*
new_rastercopy:
*---------------------------------------------------------------*
	movem.l		a0-2/d0-2,-(sp)
*---------------------------------------------------------------*
	tst.l		stram_buffer_size
	bne		buffer_allocated
*---------------------------------------------------------------*
*	VDI extended inquire funcion 102			*
*---------------------------------------------------------------*
	lea		control,a0
	move.w		#$66,(a0)+	
	move.l		#$00000006,(a0)+	
	move.l		#$0001002d,(a0)+	
	move.l		(d1.l),a1
	move.l		10(a1),(a0)+
	move.w		#0,int_in
*---------------------------------------------------------------*
	clr.w		-(sp)
	pea		.rts
	push.w		sr
	move.l		#vdipb,d1
	moveq		#115,d0
	jmp		([old_trap2])
*---------------------------------------------------------------*
*	Check for valid screen device				*
*---------------------------------------------------------------*
.rts:	move.w		int_out,d0
	beq		patch2_cont
	move.w		int_out_2,d1
	addq.w		#1,d0
	addq.w		#1,d1
	mulu.w		d1,d0
	move.l		d0,stram_buffer_size
*---------------------------------------------------------------*
	movem.l		(sp),a0-2/d0-2
*---------------------------------------------------------------*
*	VDI extended inquire funcion 102			*
*---------------------------------------------------------------*
	lea		control,a0
	move.w		#$66,(a0)+
	move.l		#$00000006,(a0)+
	move.l		#$0001002d,(a0)+	
	move.l		(d1.l),a1
	move.l		10(a1),(a0)+
	move.w		#1,int_in
*---------------------------------------------------------------*
	clr.w		-(sp)
	pea		.rts2
	push.w		sr
	move.l		#vdipb,d1
	moveq		#115,d0
	jmp		([old_trap2])
*---------------------------------------------------------------*
.rts2:	clr.l		d0
	move.w		int_out,d0
	mulu.l		stram_buffer_size,d0
	lsr.l		#3,d0
	move.l		d0,stram_buffer_size
*---------------------------------------------------------------*
	add.l		#256,d0
	clr.w		-(sp)
	push.l		d0
	push.w		#68
	trap		#1		; Mxalloc ~ ST-Ram
	addq.l		#8,sp
	move.l		d0,stram_buffer_handle
	add.l		#256-1,d0
	clr.b		d0
	move.l		d0,stram_buffer
*---------------------------------------------------------------*
	movem.l		(sp),a0-2/d0-2
*---------------------------------------------------------------*
buffer_allocated:
*---------------------------------------------------------------*
	move.l		(d1.l),a0
	move.l		([$e.w,a0]),d2
	sub.l		fastram_start,d2
	bcs.s		.sok
	cmp.l		fastram_size,d2
	bcs.s		.nok
.sok:	move.l		([$12.w,a0]),d2
	sub.l		fastram_start,d2
	bcs		patch2_cont
	cmp.l		fastram_size,d2
	bcc		patch2_cont
*---------------------------------------------------------------*
.nok:	move.l		d1,a0
*---------------------------------------------------------------*
	move.l		(a0),a1
	lea		control,a2
	moveq		#11-1,d0
.lp1:	move.w		(a1)+,(a2)+
	dbra		d0,.lp1
*---------------------------------------------------------------*
	move.l		4(a0),a1
	move.w		(a1)+,int_in
	move.l		(a1),int_in_2
	move.l		8(a0),a1
	lea		pts_in,a2
	moveq		#4-1,d0
.lp2:	move.l		(a1)+,(a2)+
	dbra		d0,.lp2
*---------------------------------------------------------------*
	move.l		(d1.l),a0
*---------------------------------------------------------------*
	move.l		$e(a0),a1
	move.l		a1,mfdb_src1_ptr
	addq.l		#4,a1
	lea		mfdb_1,a2
	move.l		stram_buffer,(a2)+
	moveq		#4-1,d0
.lp3:	move.l		(a1)+,(a2)+
	dbra		d0,.lp3
*---------------------------------------------------------------*
	move.l		$12(a0),a1
	move.l		a1,mfdb_src2_ptr
	addq.l		#4,a1
	lea		mfdb_2,a2
	move.l		stram_buffer,(a2)+
	moveq		#4-1,d0
.lp4:	move.l		(a1)+,(a2)+
	dbra		d0,.lp4
*---------------------------------------------------------------*
	move.l		([d1.l],$e.w),a1
	move.l		(a1),d2
	sub.l		fastram_start,d2
	bcs.s		mfdb_1_ok
	cmp.l		fastram_size,d2
	bcc.s		mfdb_1_ok
*---------------------------------------------------------------*
	lea		mfdb_1,a0
	move.l		a0,mfdb_1_ptr
	lea		pts_in,a2
	bsr		copy_raster
	clr.w		d0
*---------------------------------------------------------------*
mfdb_1_ok:
*---------------------------------------------------------------*
	move.l		([d1.l],$12.w),a1
	move.l		(a1),d2
	sub.l		fastram_start,d2
	bcs.s		mfdb_2_ok
	cmp.l		fastram_size,d2
	bcc.s		mfdb_2_ok
*---------------------------------------------------------------*
	lea		mfdb_2,a0
	move.l		a0,mfdb_2_ptr
*---------------------------------------------------------------*
	tst.w		d0
	bne.s		source_ok
*---------------------------------------------------------------*
	move.w		6(a0),d0
	mulu.w		12(a0),d0
	mulu.w		8(a0),d0
	cmp.l		stram_buffer_size,d0
	bcc		patch2_end
*---------------------------------------------------------------*
	lea		mfdb_1,a1
	move.w		6(a1),d0
	mulu.w		12(a1),d0
	mulu.w		8(a1),d0
	cmp.l		stram_buffer_size,d0
	bcc.s		patch2_end
*---------------------------------------------------------------*
	move.l		stram_buffer_size,d0
	lsr.l		d0
	add.l		stram_buffer,d0
	move.l		d0,mfdb_2
*---------------------------------------------------------------*
source_ok:
*---------------------------------------------------------------*
	move.l		mfdb_src2_ptr,a1
	lea		mfdb_2,a0
	lea		pts_in,a2
	bsr		copy_raster
*---------------------------------------------------------------*
mfdb_2_ok:
*---------------------------------------------------------------*
	clr.w		-(sp)
	pea		.rts
	push.w		sr
	move.l		#vdipb,d1
	moveq		#115,d0
	jmp		([old_trap2])
*---------------------------------------------------------------*
.rts:	move.l		([mfdb_src2_ptr]),d2
	sub.l		fastram_start,d2
	bcs.s		patch2_end
	cmp.l		fastram_size,d2
	bcc.s		patch2_end
*---------------------------------------------------------------*
	move.l		mfdb_src2_ptr,a0
	lea		mfdb_2,a1
	lea		pts_in,a2
	bsr		copy_raster
*---------------------------------------------------------------*
patch2_end:
*---------------------------------------------------------------*
	movem.l		(sp)+,a0-2/d0-2
	bra		complete2
*---------------------------------------------------------------*
patch2_cont:
*---------------------------------------------------------------*
	movem.l		(sp)+,a0-2/d0-2
	bra		continue2

*---------------------------------------------------------------*
new_clswk:
*---------------------------------------------------------------*
	cmp.w		#10,([4.w,d1.l])
	ble		continue2
*---------------------------------------------------------------*
	tst.l		stram_buffer
	beq		continue2
*---------------------------------------------------------------*
	movem.l		a0-2/d0-2,-(sp)
*---------------------------------------------------------------*
	push.l		stram_buffer_handle
	push.w		#$49
	trap		#1
	addq.l		#6,sp
*---------------------------------------------------------------*
	clr.l		stram_buffer
	clr.l		stram_buffer_size
	clr.l		stram_buffer_handle
*---------------------------------------------------------------*
	movem.l		(sp)+,a0-2/d0-2
*---------------------------------------------------------------*
	bra		continue2
*---------------------------------------------------------------*

*---------------------------------------------------------------*
copy_raster:
*---------------------------------------------------------------*
	move.w		6(a0),d0
	mulu.w		12(a0),d0
	mulu.w		8(a0),d0
*---------------------------------------------------------------*
	move.l		(a0),a0
	move.l		(a1),a1
*---------------------------------------------------------------*
	lsr.l		d0
	scs		d2
	beq.s		.nlc
*---------------------------------------------------------------*
.clp:	move.l		(a1)+,(a0)+
	subq.l		#1,d0
	bne.s		.clp
*---------------------------------------------------------------*
.nlc:	tst.b		d2
	beq.s		.end
	move.w		(a1),(a0)
.end:	rts

*---------------------------------------------------------------*
			data
*---------------------------------------------------------------*

fastram_size:		dc.l	$40000000
fastram_start:		dc.l	$01000000

*---------------------------------------------------------------*

vdipb:			dc.l	control
			dc.l	int_in
			dc.l	pts_in
			dc.l	int_out
			dc.l	pts_out

aespb:			dc.l	aes_control
			dc.l	aes_global
			dc.l	aes_int_in
			dc.l	aes_int_out
			dc.l	aes_addr_in
			dc.l	aes_addr_out

*---------------------------------------------------------------*
			bss
*---------------------------------------------------------------*

saveregs:		ds.l	6
stram_buffer:		ds.l	1
stram_buffer_handle:	ds.l	1
int_in:			ds.w	1
int_in_2:		ds.b	126
int_out:		ds.w	1
int_out_2:		ds.b	126
control:		ds.b	14
mfdb_1_ptr:		ds.l	1
mfdb_2_ptr:		ds.b	34
pts_in:			ds.b	64
pts_out:		ds.b	192
stram_buffer_size:	ds.l	1
mfdb_src1_ptr:		ds.l	1
mfdb_src2_ptr:		ds.l	1
mfdb_1:			ds.b	20
mfdb_2:			ds.b	20
aes_control:		ds.b	30
aes_global:		ds.b	30
aes_int_in:		ds.b	264
aes_int_out:		ds.b	280
aes_addr_in:		ds.b	64
aes_addr_out:		ds.b	4160

*---------------------------------------------------------------*
			text
*---------------------------------------------------------------*
			