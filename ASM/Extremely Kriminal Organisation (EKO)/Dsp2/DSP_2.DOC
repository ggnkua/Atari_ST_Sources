*-----------------------------------------------------------------*
  -Tout ce que vous avez toujours voulu savoir sur le DSP sans 
jamais oser le demander.
*-----------------------------------------------------------------*
Par les intrepides reporters Thorin et Major-X!!!!!!!!!
*-----------------------------------------------------------------*



	Tout d'abord,une petite description du DSP s'impose.
  D.S.P signifie Digital Signal Processor,ce qui signifie que le DSP
a ete specialement con‡u pour le traitement en temps reel de signaux
numeris‚s,mais rassurez vous,on peut faire bien d'autres choses avec.

	Le DSP qui ‚quipe le Falcon est un DSP56001 de Motorola,cadenc‚
… 32MHz (sachant qu'une instruction typique comme la multiplication
prend … peine 2 cycles d'horloge,cela fait 16 millions de multiplications
par seconde.Pas mal,non?)

	Ce DSP travaille en 24 bits.Sa memoire est organis‚e en 3 plans:
  -Le plan P,comme Programme,qui contient l'executable.
  -Le plan X
  -Le plan Y
  
  -On doit ensuite distinguer 2 types de RAM sur le DSP:La RAM interne au
DSP,ou "on-chip",et la RAM externe au DSP.
  -Chacun des plans X et Y possede 256 mots de RAM "on-chip",le plan P
possŠde quand … lui 512 mots de m‚moire "on-chip".
  -Le plan P possŠde 32K externes (on parle ici de kilo mots soit 96Ko).
  -Les plans X et Y possedent 16K de RAM chacun mais cette RAM correspond
en fait aux moiti‚s superieures et inf‚rieures de la RAM P.

  -L'interet des plans X et Y vient du fait qu'on peut les adresser 
simultanement dans une instruction parallele.

  -Le defaut de la RAM externe est qu'un acces simultan‚ a deux donn‚es
de la RAM prend deux cycles horloge de plus si la RAM est externe
 
  -Il existe un plan virtuel denomm‚ L qui est en fait un entrelacement de X et
Y,et on y recueille des doubles mots de 48 bits form‚s de X:Y

  -Les registres dont dispose le DSP sont les suivants:
  
   -Les Input Register X et Y
  -Chacun de ces registres fait 48 bits et peut se decomposer en 2
registres de 24 bits chacun,qui sont X1,X0 et Y1,Y0.Ces registres sont en 
general utilis‚s comme sources dans les instructions arithmetiques,d'ou
leur nom.
   -Les Accumulators A et B
  -Chacun de ces registres fait 56 bits et peut se decomposer en 3
registres de 8,24,24 bits qui sont A2,A1,A0 et B2,B1,B0.Ces registres servent
en general de destination aux operations arithmetiques.

  -On forme … partir de l… les registres A10=A1:A0;B10;AB=A1:B1;BA

   -Les registres d'adresse R0-R7
  -Chacun de ces registres fait 16 bits ce qui permet d'adresser 64K dans
chaque plan.On peut differencier ce groupe de registres en deux sous groupes
compos‚s de R0-R3 et de R4-R7.Si on veut adresser simultanement les deux plans
memoire,il faut acceder … l'un des plans avec un registre du premier groupe 
et … l'autre plan avec un registre du second groupe

   -Les registres d'offset N0-N7
  -Chacun de ces registres fait 16 bits et est li‚ au registre d'adresse de 
meme numero:il permet d'utiliser des modes d'adressages particulier(cf. plus
loin dans l'article).

   -Les registres de modulo M0-M7
  -Chacun de ces registres fait 16 bits et est li‚ au registre d'adresse portant
le meme numero.Pour que les registres d'adresse se comportent normalement,il 
faut mettre -1 dans le registre de modulo associ‚ (on est alors en Linear 
Modifier).
 Si on met 0 dans Mn,on a un Reverse-Carry Modifier.Dans ce mode,les bits du 
registre Rn sont invers‚s(le bit 15 passe en 0,etc...).Ca sert pour la FFT,
parait-il.
 Si on met une valeur comprise entre 1 et 32767,on a un Modulo Modifier.
Ce mode permet d'utiliser des buffers circulaires(Ou tampons circulaires
pour les anglophobes..salut Toubon,ne pas confondre avec les tampax,faudrait
quand meme pas balancer du liquide bleu dessus).Soyons serieux..Le buffer 
circulaire aura une taille de (Mn+1).Il commencera a une adresse multiple de
la puissance de 2 immediatement superieure a sa taille.Par exemple,si Mn 
contient 53,on aura des buffers de 54 mots qui pourront commencer aux adresses
0,64,128,..(n*64)...Dans la pratique,lors d'un adressage post in(de)crement‚s,si
le registre depasse la limite du buffer dans lequel il se trouve,il y sera 
ramen‚.Exemple:R0=46,N0=10,M0=22.On a ici un modulo de 23.Le depart du buffer
est donc … 32.Si on utilise un adressage (R0)+N0,R0 devrait prendre la valeur
46+10=56>54=32+22.D'ou on aura R0=56-22=34.R0 reste dans buffer,operation 
reussie.Il faut noter toutefois que le modulo n'est effectif que si l'on ajoute 
une valeur inferieure(en valeur absolue) au modulo.
 Si on met une valeur comprise entre 32768 et 65534,c'est pas bien du tout,
parce que c'est r‚serv‚,c'est interdit.De toute fa‡ons on n'a que 32K
sur Falcon donc un modulo de plus de 32K serait tout … fait ridicule.

 -Le SR ou Status Register de 16 bits compos‚ du MR(poids fort) et du
CCR(poids faible).
  -CCR:*LEUNZVC       registre d'etat
    C:Bit Carry
    V:Bit Overflow
    Z:Bit Zero
    N:Bit Negative
    U:Bit Unnormalized
    E:Bit Extension
    L:Bit Limit
  -MR:.LF.*.T.*.S1.S0.I1.I0
    I1 et I0:Masque d'interruption
    S1 et S0:Scaling mode(0:rien;1:scale down;2:scale up;3:reserv‚)
    T:Trace
    LF:Loop Flag
    
  -Le OMR ou Operating Mode Register de 24 bits dont 8 utiles
    .EA.SD.*.*.*.DE.MB.MA
    -MB,MA:Operating Mode
      
      Mode   MB   MA   RAM interne   Externe    Reset 
    
       0     0    0     0-$1FF       $200-$FFFF  $0000(interne)
       1     0    1     mode bootstrap(pour le demarrage)
       2     1    0     0-$1FF	     $200-$FFFF  $E000(externe)
       3     1    1       -          $000-$FFFF  $0000(externe)
       
     -DE:            Data ROM Enable 
     DE		Y                              X
    
      0     RAM:$0-$FF/$100-$FFFF     RAM:$00-$FF/$100-$FFBF
      					  periph:$FFC0-$FFFF
      1     RAM:$0-$FF/$200-$FFFF     RAM:$00-$FF/$200-$FFBF
      	    ROM: $100-$1FF	      ROM:$100-$1FF
      	    				  periph:$FFC0-$FFFF
      	    				  
     -SD:            Stop Delay
     
     -EA:	     External Memory Access
  

   -Maintenant qu'on a vu les divers registres utiles,que vous avez tout 
retenu et tout compris(parce que j'explique comme un dieu),on va parler des
modes d'adressage,ce qui peut servir,… l'occasion.
Il y a les adressages suivants:

 -Les adressages directs par registres.Je crois que c'est clair.
 
 -Les adressages immediats,avec le # comme sur le telephone(et comme sur 68000
 mais ca c'est pas important)
 -La taille de la valeur immediate depend de l'instruction et varie de 24 …
 5 bits
 
 -L'adressage absolu,le seul detail … noter c'est qu'il faut preciser le plan 
 memoire vis‚.Exemple: X:$baba,et qu'on a une adresse de taille variable
 (dans certains cas on a des adresses sur 5 bits)
 
 -Les adressages indirects par registre.Ils sont au nombre de 7:
  -Le classique:(Rn)
  -Postincrement‚ par 1:(Rn)+
  -Postdecr‚ment‚ par 1:(Rn)-
  -Postincrement‚ par registre d'offset:(Rn)+Nn
  -Postd‚crement‚ par registre d'offset:(Rn)-Nn
  -Ind‚x‚ par registre d'offset:(Rn+Nn).Prend 2 cycles d'horloge en plus
  -Pr‚d‚cr‚ment‚ par 1:-(Rn).Prend 2 cycles d'horloge en plus
  
  -Je rappele que ces derniers adressages sont modifi‚s par Mn.
  
  
  
  -Et maintenant,vous brulez surement d'essayer tous ces modes d'adressage
dans un Booooo programme,on va donc voir le jeu d'instruction du 56001.

 -Au lieu d'enumerer betement les instructions par ordre alphabetique,je les ai
courageusement class‚es par groupe:
-Les operations arithmetiques.
-Les operations logiques.
-Les manipulations de bits.
-Les boucles.
-Les transferts.
-Controle de programme.


-Certaines operations ne tolerent pas les deplacements paralleles.
Je les ai marqu‚es d'une asterisque(et pas d'une obelisque)

-Certaines instructions utilisent des codes condition not‚s 'cc',les
voici:
  CC:Carry Clear		C=0
  CS:Carry Set			C=1
  EC:Extension clear		E=0
  EQ:Equal			Z=1
  ES:Extension Set		E=1
  GE:Greater or Equal		N^V=0
  GT:Greater Than		Z+(N^V)=0
  LC:Limit Clear		L=0
  LE:Less or Equal		Z+(N^V)=1
  LS:Limit Set			L=1
  LT:Less Than			N^V=1
  MI:Minus			N=1
  NE:Not Equal			Z=0
  NR:Normalized			Z+(/U./E)=1
  PL:Plus			N=0
  NN:Not Normalized		Z+(/U./E)=0

-Le DSP possede 63 instructions differentes:



	
	-LES OPERATIONS ARITHMETIQUES:
	
-ABS:  			(comme sur les bagnoles)
  Calcule la valeur absolue de l'operande,qui ne peut etre que A ou B.
  
-ADC:			(Add Long with Carry)
  Fait l'operation:Source+Dest+bit de retenue.
  La source peut etre:X,Y
  La destination peut etre:A,B
  
-ADD:			(Add)
  Fait l'operation:Source+Dest
  La source peut etre:X,Y,Xn,Yn,A,B
  La destination peut etre:A,B
  N.B:ADD X0,A fait en fait une addition sur A1
  
-ADDL:			(Add Left)
  Fait l'operation:Source+2*Dest
  La source peut etre:A,B
  La destination peut etre:A,B     (On ne peut avoir la meme source et dest)
  
-ADDR:			(Add Right)
  Fait l'operation:Source+Dest/2
  La source peut etre:A,B
  La destination peut etre:A,B     (On ne peut avoir la meme source et dest)

-ASL:			(Arithmetic Shift accumulator Left)
  Fait l'operation:Dest*2
  La destination peut etre:A,B
  
-ASR:			(Arithmetic Shift accumulator Right)
  Fait l'operation:Dest/2
  La destination peut etre:A,B
  
-CLR:			(Clear Accumulator)
  Met la destination … 0
  La destination peut etre:A,B
  
-CMP:			(Compare)
  Compare source1 et source2,et positionne les registres d'etat en
 consequence.
  Les sources peuvent etre:A,B,Xn,Yn
  
-CMPM:			(Compare Magnitude)
  Compare les valeurs absolues et positionne les registres d'etat en
 consequence.
  Les sources peuvent etre:A,B,Xn,Yn
  
-DIV:*			(Divide Iteration)
  Fait une iteration de division.C'est pas clair?
  Pour faire une division 24 bits:
    AND #$FE,CCR      ;Met le bit Carry … zero
    REP	#24	      ;On fait autant d'iterations que de bits
    DIV X0,A	      ;on finit par obtenir le quotient en A0,le reste en A1
    ADD	X0,A
    
   Euh,j'espere que vous aurez pas trop de divisions … faire,parce que pour du
 24 bit,il faut quand meme 48 cycles horloge,soit 24 fois plus qu'une 
 multiplication.
  
  La source peut etre:X0,X1,Y0,Y1
  La destination peut etre:A,B
  
-MAC:			(signed Multiply ACcumulate)
  Fait l'operation Destination+/-Source1*Source2
  Ex:MAC -X0,X1,A ; MAC Y1,X0,B
  Les sources peuvent etre:Xn,Yn  
  La destination peut etre:A,B
  
-MACR:			(signed Multiply ACcumulate and Round)
  Fait l'operation Destination+/-Source1*Source2 et arrondit
  Ex:MACR -X0,X1,A ; MACR Y1,X0,B
  Les sources peuvent etre:Xn,Yn  
  La destination peut etre:A,B
  
-MPY:			(signed Multiply)
  Fait l'operation +/-Source1*Source2
  Ex:MPY -X0,X1,A ; MPY X0,X0,B
  Les sources peuvent etre:Xn,Yn  
  La destination peut etre:A,B

-MPYR:			(signed Multiply and Round)
  Fait l'operation +/-Source1*Source2 et arrondit
  Ex:MPYR -X0,X1,A ; MPYR Y1,X0,B
  Les sources peuvent etre:Xn,Yn  
  La destination peut etre:A,B

-NEG:			(NEGate accumulator)
  Fait -Dest.
  La destination peut etre:A,B
  
-NORM:*			(NORMalize accumulator iteration)  
  Desole mais j'ai pas envie de comprendre.
  
-RND:			(RouND accumulator)
  Arrondit la destination
  La destination peut etre:A,B  
  
-SBC:			(SuBstract long with Carry)
  Fait l'operation Dest-Source-Bit de retenue
  La source peut etre:X,Y 
  La destination peut etre:A,B
  
-SUB:			(SUBstract)
  Fait l'operation Dest-Source   (tiens,bizarre..)
  La source peut etre:A,B,X,Y,Xn,Yn  
  La destination peut etre:A,B  
  N.B:SUB Y0,B  fait en fait une soustraction sur B1
  
-SUBL:			(Shift Left and SUBstract accumulator)
  Fait l'operation Dest*2-source
  La source peut etre:A,B  
  La destination peut etre:A,B   (on ne peut avoir meme source et dest)
  
-SUBR:			(Shift Right and SUBstract accumulator)
  Fait l'operation Dest/2-source
  La source peut etre:A,B  
  La destination peut etre:A,B   (on ne peut avoir meme source et dest)
  
-TST:			(TeST accumulator)
  Teste Dest et positionne le registre d'etat
  La destination peut etre:A,B  
  
   
  
    
   
	-LES OPERATIONS LOGIQUES
	
-AND:			(logical AND)
  Fait l'operation Source AND Dest
  La source peut etre:Xn,Yn  
  La destination peut etre:A,B  	(en fait A1 et B1)
  
-ANDI*:			(AND Immediate with control register)
  Fait un ET logique entre une valeur immediate sur 8 bits et Dest
  La destination peut etre:MR,CCR,OMR.
  
-EOR:			(logical Exclusive OR)
  Fait un XOR entre Source et Dest
  La source peut etre:Xn,Yn  
  La destination peut etre:A,B       (en fait A1 et B1)
  
-LSL:			(Logical Shift Left)
  Fait un decalage logique de 1 bit vers la gauche de la Dest
  La destination peut etre:A,B  (ne decale que A1 ou B1)
  
-LSR:			(Logical Shift Right)
  Fait un decalage logique de 1 bit vers la droite de la Dest
  La destination peut etre:A,B  (ne decale que A1 ou B1)
   
-NOT:			(Logical Complement)
  Inverse les bits de la destination
  La destination peut etre:A,B  (n'inverse que A1 ou B1)
  
-OR:			(logical OR)
  Fait un OR entre Source et Dest
  La source peut etre:Xn,Yn  
  La destination peut etre:A,B       (en fait A1 et B1)
  
-ORI*:			(OR Immediate with control register)
  Fait un OU logique entre une valeur immediate sur 8 bits et Dest
  La destination peut etre:MR,CCR,OMR.

-ROL:			(Rotate Left)
  Fait une rotation de 1 bit vers la gauche de la Dest
  Passe par le bit C:Comme le ROXL du 68000
  La destination peut etre:A,B  (ne decale que A1 ou B1)
  
-ROR:			(Rotate Right)
  Fait une rotation de 1 bit vers la droite de la Dest
  Passe par le bit C:Comme le ROXR du 68000
  La destination peut etre:A,B  (ne decale que A1 ou B1)
  


	-MANIPULATION DE BITS:
   
   
-BCHG:			(Bit test and CHanGe)
  Teste et inverse le bit #n de la Dest.
  La destination peut etre sur la memoire X ou Y,adressee indirectement par
 registre ou par adresse absolue,ou n'importe quel registre.  


-BCLR:			(Bit test and CLeaR)
  Teste et efface le bit #n de la Dest.
  La destination peut etre sur la memoire X ou Y,adressee indirectement par
 registre ou par adresse absolue,ou n'importe quel registre.  
  
-BSET:			(Bit test and SET)
  Teste et positionne le bit #n de la Dest.
  La destination peut etre sur la memoire X ou Y,adressee indirectement par
 registre ou par adresse absolue,ou n'importe quel registre.  
  
-BTST:			(Bit TeST)
  Teste le bit #n de la Dest.
  La destination peut etre sur la memoire X ou Y,adressee indirectement par
 registre ou par adresse absolue,ou n'importe quel registre.  
  
-JCLR*:			(Jump if bit CLeaR)
  Saut conditionnel,effectu‚ si le bit #n de la source est … zero
  ex:JCLR #n,source,label
  La source peut etre sur la memoire X ou Y,adressee indirectement par
 registre ou par adresse absolue,ou n'importe quel registre.  
  
-JSET*:			(Jump if bit SET)
  Saut conditionnel,effectu‚ si le bit #n de la source est … un
  ex:JSET #n,source,label
  La source peut etre sur la memoire X ou Y,adressee indirectement par
 registre ou par adresse absolue,ou n'importe quel registre.  

-JSCLR*:		(Jump to Subroutine if bit CLeaR)
  Saut a sous rout conditionnel,effectu‚ si le bit #n de la source est … zero
  ex:JSCLR #n,source,label
  La source peut etre sur la memoire X ou Y,adressee indirectement par
 registre ou par adresse absolue,ou n'importe quel registre.  

-JSSET*:		(Jump to Subroutine if bit SET)
  Saut a sous rout conditionnel,effectu‚ si le bit #n de la source est … un
  ex:JSSET #n,source,label
  La source peut etre sur la memoire X ou Y,adressee indirectement par
 registre ou par adresse absolue,ou n'importe quel registre.  



	
	-BOUCLES:


-DO*:			(Start Hardware Loop)
  DO S,label
  Cette instruction permet de lancer une boucle hardware.Cette boucle
 commence immediatement apres le DO et se termine par le label.
  Des que le PC arrive au label,le compteur de boucle est decrement‚ de 1
 et saute … l'instruction suivant le DO.La taille de la pile limite …
 7 le nombre de boucles imbriqu‚es.C'est deja pas mal.
  S contient le nombre d'iterations,et pas le nombre moins un.(pas comme
  DBF).
  La source peut etre n'importe quoi(ou presque)(une valeur immediate est
 limit‚e … 12 bits)
  
-ENDDO*:		(END current DO loop)
  Termine la boucle courante DO avant l'heure (pas d'operande)
  
-REP:			(REPeat next instruction)
  Repete 'source' fois l'instruction suivant le REP.
  La source peut etre n'importe quoi(ou presque)(une valeur immediate est
 limit‚e … 12 bits)
  
  
  
  
	-TRANSFERTS:
	
-LUA*:			(Load Updated Adress)
  Met une adresse mise a jour dans un registre (style LEA)
  La source peut etre une adresse effective 5 bits ou un adresse indirect
  (Rn)+Nn,(Rn)-Nn,(Rn)+,(Rn)-
  
-MOVE:			(MOVE data)
  C'est en fait un transfert parallele avec un NOP
  Ben ouais c tout.
  
-MOVEC*:		(MOVE Control register)
  Ca a visiblement le meme effet qu'un move,sauf qu'on peut toucher aux 
 registres de controle.
 
-MOVEM*:		(MOVE program Memory)
  Permet des transferts vers/a partir du plan P
  
-MOVEP*:		(MOVE Peripheral data)
  Fait un transfert vers une adresse de 6 bits seulement.Permet par contre
 un adressage immediat sur 24 bits.permet d'acceder aux registres de 
 peripheriques comme le HOST.
 
     -Transferts paralleles:
     
 Lorsqu'on a une instruction qui s'y prete(sans asterisque) on peut faire
jusqu'a deux transferts de donnees simultanement.
Ex:MAC X0,Y0,A    x1,x:(r0)+	y1,y:(r5)-n5
Revoyons l'action au ralenti:On a fait un MAC,et en meme temps deux MOVE
,fantastique.....
Voici un autre exemple:
 MPYR X0,Y0,A	  X:(r0)+,X0    A,Y:(r5)+
Ici,c'est plus delicat:Il faut savoir que X0 recoit X:(r0)+ … la fin de 
l'execution(donc cela n'influe pas le MPYR).Par contre,le A(en fait A1)
sauv‚ est celui anterieur au MPYR.C'est clair?

Utiliser les transferts parallele est assez prise de tete.Il vaut donc mieux 
s'en passer au debut,et ne les utiliser que lorsqu'on a une certaine maitrise
du DSP.
 
 Les types de transfert parallele sont les suivants:
 
 -I:		Immediate Short Data Move
      #xx,D		#xx est sur 8 bits
    D peut etre:Xn,Yn,An,Bn,A,B,R0-R7,N0-N7
    
 -R:		Register to Register
      S,D
    S et D peuvent etre:pareil que pour I
    
 -U:		Adress Register Update
    C'est un LUA parallele
    
 -X:		X Memory Data Move
      X:ea,D 
      S,X:ea
    S ou D peuvent etre:Xn,Yn,An,Bn,A,B,R0-R7,N0-N7
    ea peut etre tout adressage indirect ou absolu ou immediat
    
 -X:R:		X Memory and Register Data Move
      X:ea,D1  S2,D2   et autres
    S1 ou D1 peut etre:X0,X1,A,B
    S2 peut etre:A,B
    D2 peut etre:Y0,Y1

 -Y:		Y Memory Data Move
      Y:ea,D 
      S,Y:ea
    S ou D peuvent etre:Xn,Yn,An,Bn,A,B,R0-R7,N0-N7
    ea peut etre tout adressage indirect ou absolu ou immediat

 -R:Y:		Y Memory and Register Data Move
      S1,D1  X:ea,D2  et autres
    S2 ou D2 peut etre:X0,X1,A,B
    S1 peut etre:A,B
    D1 peut etre:Y0,Y1

 -L:		L Memory Data Move
      L:ea,D 
      S,L:ea
    S ou D peuvent etre:A10,B10,X,Y,A,B,AB,BA
    ea peut etre tout adressage indirect ou absolu ou immediat
  
 -X:Y:	  	XY Memory Data Move
      X:ea,D1  Y:ea,D2  et autres
    X:ea peut etre une adresse 6 bits ou (Rn)+Nn,(Rn)+,(Rn)-,(Rn)
    Y:ea peut etre une adresse 5 bits ou (Rn)+Nn,(Rn)+,(Rn)-,(Rn)
        Qu'est ce qu'ils ont du se prendre la tete pour optimiser le
       code machine
       
    S1 ou D1 peut etre:X0,X1,A,B
    S2 ou D1 peut etre:Y0,Y1,A,B
    
-Tcc*:			(Transfer conditionally)
    Fait un move si la condition cc est vraie
    On peut transferer de A,B,Xn,Yn a A ou B
    On peut de plus ajouter en parallele un transfert aussi conditionnel de
   registres d'adresse
   
-TFR:			(Transfer data ALU register)
    Fait un transfert sans alteration
    On peut transferer de A,B,Xn,Yn a A ou B
    
    
    
	-CONTROLE DE PROGRAMME
	
-Jcc:			(Jump conditionally)
  Jcc label
    Fait un saut conditionnel
    le label peut etre un adressage indirect
    
-JMP:			(JuMP)
   Saut
   
-JScc:			(Jump to Subroutine conditionally)
   Fait un saut a sous routine conditionnel
   
-JSR:			(Jump to SubRoutine)
   Fait un saut … sous routine
   
-NOP:			(No OPeration)
   Devine
   
-RESET:			(Reset On-chip Peripheral Devices)

-RTI:			(ReTurn from Interruption)

-RTS:			(ReTurn from Subroutine)

-STOP:			(Stop Instruction Processing)
   Arrete le DSP.Ca sert a economiser la precieuse energie EDF.
   
-SWI:			(Software Interrupt)
   Equivalent du TRAP (Vecteur en P:$0006)
   
-WAIT:			(WAIT for interrupt)
   Se met en transe,car j'ai fini la liste des instructions,et ce fut tres
dur. 


   -Un mot,maintenant,sur le mode de calcul utilis‚ par le DSP:
  Il faut savoir que le DSP travaille en fractionnel.
  En gros,on considere qu'on a dans un registre une valeur comprise
  entre -1 et +1.
  Pour les additions,‡a ne change rien.Par contre,lors d'une multiplication,
  on multiplie deux registres qui sont de 23bits+signe pour obtenir un registre
  47bits+signe.Le resultat est donc decal‚ 
  d'un bit vers la gauche(par rapport … une multiplication integer).
  
   -Un conseil,commencez toujours vos programmes par:
  	org  p:$0
  	jmp  $40
   -En effet,les vecteurs d'interrupt sont plac‚s de p:$0 … p:$3e
  (En 0,on a le reset,donc le debut de programme)
   -Voila,pour en savoir plus,je vous conseille de lire le DSP User's Manual,
  mais il est vrai qu'il est plutot difficile … trouver.



  Toulouse,le 10/03/94.
  
  DSP,be my slave,
  That's your reason to live
  Before your surrender you had no life
  Now you're a slave,not a free chip
  Your only sorrow is for chips who live with lies
  
  Death to false code,hail to WOTAN!!
  
  Ainsi parla WEG,infiltr‚ dans les rangs d'EKO.