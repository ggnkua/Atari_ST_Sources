*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-
         -=<Utilisation du JOYSTICK en Assembleur par Major-X/EKO>=-
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-

 <A> Introduction.
     -------------

    De toute evidence le systeme de l'atari ST ( C' est pareil sur FALCON )
 n' a pas ete concu pour faciliter la tache aux programmeurs qui souhaitent
 utiliser le joystick .
    C' est pour cela que je souhaite commencer ce petit cours par une breve
 approche du hardware qui gere le clavier la souris et le joystick de notre
 ordi adore...

 <B> Le hardware.
     ------------

   Le clavier est gere par un microcontroleur 6301 (proche cousin du 6800 )
 Et ce 6301 communique via une liaison serrie avec un ACIA 6850 qui lui est
 directement adressable par le 68000 (ou 68030 sur falcon)
  C'est donc par l'intermediaire de l'acia 6850 que nous allons communiquer
 avec le 6301 .
   Alors comment envoyer ou recevoir un octet emit par le 6301 ?  Pour cela
 il faut savoir que le 6850 possede 4 registres d'un octet chacun:

  - Le TDR et RDR ( a l'adresse $fffffc02 )
      Si on ecrit dans ce registre on envoie un octet au 6301. Si on lit ce 
 registre on obtient le dernier octet emit par le 6301.  Mais ce n' est pas 
 aussi simple qu'il n'y parait car il faut prendre en compte le fait que la
 liaison serie est relativement lente (7812.5 bauds) et le temps de traite-
 -ment du 6301 (Qui est evidemment plus lent qu'un 68000). C' est pour cela
 qu'il y a le SR .

  - Le CR et SR ( a l'adresse $fffffc00 )
      On accede au CR en ecrivant en $fffffc00 . Il sert a modifier le bau-
 -drate de l'acia. Mais cela ne sert a rien, car toute modification aboutis 
 sur un plantage  etant donne que l' on ne peut pas changer  le baudrate du 
 6301 avec qui le 6850 communique via une liaison serie.On peut aussi modi-
 -fier le nombre de bit de donnee , la parite et le nombre de bits de  stop
 mais toute modification mene au meme resultat que pour le baudrate .
     
      On accede au SR en lisant $fffffc00. C'est grace a cet octet que l'on
 vas savoir si l'octet que l'on vient d'emettre a ete recu et que l'on peut
 envoyer le suivant ou de savoir si on vient d' en recevoir un. Je vais ici
 detailler les bits qui me paraissent les plus important:

   - Le bit 0 est mis a 1 chaque fois qu' un octet  est recu , et repasse a 
 zero des que celui ci a ete lu en $fffffc02.
   - Le bit 1 est mis a 1 des que le dernier octet ecrit en $fffffc02 a ete
recu par le 6301. Il est remis a zero par toute ecriture en $fffffc02.

  
   Routine ASM pour envoyer un octet aux 6301:
------------------------------------------------
 
( Avec l'octet a emettre dans D0 )


emit_loop:
   btst  #1,$fffffc00.w      * attend que le bit 1 passe a 1
   beq.s emit_loop
   move.b   d0,$fffffc02.w

  Routine ASM pour recevoir un octet emit par le 6301:
-------------------------------------------------------

recept_loop:
   btst  #0,$fffffc00.w      * attend que le bit 0 passe a 1
   beq.s recept_loop
   move.b   $fffffc02.w,d0   * Octet recu dans d0

 Nous verrons plus tard qu'il est possible de recuperer plus facilement les
octets emit par le 6301 a l'aide d'une interruption.

 <C> Les commandes du 6301
     ---------------------

 Le 6301 comprend un certain nombre de commandes qui definissent comment par
exemple la souris et le joystick doivent etre gere.

Je vais detailler celles qui me paraissent les plus importantes:

-> $80 $01 
         Reset : remet les parametres a leur valeur par defaut.

-> $08   
         Le 6301 devra annoncer les coordonnees de la souris de facon
         relative , mais cette commande sert aussi a annoncer au 6301
         qu ' il faut  recommencer  a annoncer les coordonnees  de la
         souris , si elles avaient ete desactivees  auparavant par la 
         commande $12.

-> $12     
         Le 6301 arrete d'envoyer les coordonnees de la souris.

-> $14     
         Tout deplacement du Joystick devrait etre annonce apres cet-
         -te commande.

         Chaque deplacement sera signale par:
         1 Octet Header  $fe pour le JOY0   $ff pour le JOY1
         1 Octet de donnee du joystick:
         Bits 0   Haut
              1   Bas
              2   Gauche
              3  Droite
              7  Bouton de feu
         Les autres bits (De 4 a 6) ne servent a rien.

 <D> L'interruption clavier
     ---------------------

  A part si on l'a masque a chaque changement d'etat d'une touche du clavier
 ou de joystick ( si on a envoye la commande $14 )  ou de la souris  ( si le 
 6301 est dans le bon mode ).C' est une interruption generee par le MFP elle
 est donc  de niveau 6 ; ce qui veut dire qu ' elle peut etre masque  par un 
 MOVE.W #$2600,SR.  Alors a chaque pression de touche si l' interruption est
 autorisee le 680x0 execute une interruption dont l'adresse est en $118.

 Pour plus de detail je vous conseille de regarder mon source qui est sur la
 disquette...

 Si quelque chose vous a paru flou ou que je n' ai pas assez detaille , vous 
 pouvez me contacter sur R-TEL bal Major-X ....

                                                 May the code be with you...
