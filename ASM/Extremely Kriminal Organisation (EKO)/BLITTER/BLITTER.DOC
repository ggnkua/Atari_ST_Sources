*****************************************************************************
*                                                                           *
*                   Article sur le BLITTER par Createur/E.K.O               *
*                                                                           *
*    Attention , il y a un exemple dans le dossier blitter avec une source. *
* A noter qu ' un autre article va etre fait toujours par CREATEUR pour HOW *
* TO CODE n2 et parlera en detail de diverses techniques d ' utilisation du *
* BLITTER et des interruptions que genere le BLITTER.                       *
*                                                                           *
* Ha,le Blitter,savez vous que le blitter du ST va plus vite que le blitter *
* de l'AMIGA ??? Le seul probleme,c' est que le blitter AMIGA va travailler *
* en  parrallele. Et  savez vous  que le blitter  du STE peut  remplir  des *
* polygones comme celui de l'Amiga ??? Et plus rapidement !!! Bon le Falcon *
* a aussi cette BETE et normallement ( j'ai pas fait le test ) il va 2 fois *
* plus vite que celui du STE.Bye l'amiga sachant qu'il ne reste qu'un point *
* qui rend  son BLITTER superieur, mais je ne vous dirai pas ce que c' est. *
* Sachez que le blitter du FALCON va  4.5 fois plus vite que le celui d' un *
* Amiga 500. ( En Ko par VBL )                                              *
*                                                                           * 
*****************************************************************************





                    Le blitter,mon ami ...
                  _________________________
                  
                  

     Nous  parlerons ici du blitter (non?) et surtout  au  niveau pratique,
la  theorie on verra plus tard... Il devrait etre joint avec cet article un
fichier contenant des macros (STE.S),je me sert de ce systeme bien pratique
et qui contrairement a une idee recue ne fait perdre aucun temps machine,et
fait gagner un registre memoire(car on a pas d'indexage...).Bon on commence
directement avec ces macros:

I) quelques macros:
----------------------

Commentaire  sur les conventions utilise sur ces  macros: 
-X pour horizontal.
-Y pour vertical.
-S pour source.
-D pour destination.

SOURCE:(Adr) C'est l'adresse de la source ( Formidable!!! )

DESTINATION:(Adr) A votre avis ???

OFFSETXS: Offset en x sur la source.

OFFSETYS:offset en y sur la destination.

OFFSETXD:offset en x sur la source.

OFFSETYD:offset en y sur la destination.

MASk1:masque de bit a gauche.

MASk2:masque de bit central.

MASk3:masque de bit a droite.

HAUTEUR:nbr de ligne a transferer.

LONGUEUR:nbr de mots a transferer.

OP:definie le "mixage":
     0:que des 1
     1:que la ram demiteinte(dont on parlera tres peu dans cette article.)
     2:la source (le gros morceau).
     3:Le 1 et 2 en meme temps...

Et on complique:

OPLOG:On a 16 possiblitees.Ca sert a mixer la source choisie en OP avec la 
destination,on retiendra:
     0:efface.
     1:source et destination.
     3:source.
     6:source XOR destination.
     7:source ou destination.
     15:remplie.
Et deux autres macros que je laisse en suspend. ( STARTBLIT,SKEW )



II) On explique !!! :
-----------------------

Bon,et a quoi servent toutes ces macros ???

     A programmer le blitter !!! C'est a dire a transferer d' enormes blocs
de donnee (sprite,scrolling...) , et tout cela au pixel pres !!!

Comment fait-on ???  

Tres simplement !!!  Mais il faut un petit exemple je pense...

 Regis veut afficher en un plan (Je ne reviendrai pas sur la definition des
plans) un ecran qu'il a deja en memoire.En outre il ne veut afficher que la
moitie.C'est a dire le bloc 0,0,160,199... ( Il est con, Regis !!! )

Comment il fait(pour afficher,hein!) ???  Simple:

 Il met l'adresse de la source en SOURCE. Puis l' adresse de la destination
en DESTINATION.

Apres cela devient plus dur... (Ndlr: Normal nous on a pas sous a AUXERRE )

On prend 1 plan de l'image source,et on affiche 1 plan  sur la destination.
On en profite pour voir la definition de OFFSETX (D  ou S).C' est le nombre
d' octets a sauter apres avoir lu un mot  ( Et depuis le  DEBUT du derniers
mot lu). Dans notre exemple on a:

          OFFSETXD  #8
          OFFSETXS  #8


Longueur ???   Simple: On a besoin d' un des plans de la moitie de l'ecran.
soit:  ( La longueur se donnant en mots )
          LONGUEUR  #(160/2)/2/4

Et  le  plus  dur,l'offset en Y ... BON la on sort une formule magique qui 
sera completee plus loin:  

OFFSETY (S ou D)=longueur de la ligne - (longueur a transferer*OFFSETX(s ou
d))+OFFSETX(s ou d)

Soit pour notre exemple:

          OFFSETYS  #160-(10*8)+8
          OFFSETYD  #160-(10*8)+8
 
Voila le plus dur est fait...
Maintemant le nombre de lignes ???  200 ???
OP ??? bah 2 (on se sert de la source)
OPLOG ??? 3 (on affiche notre dessin,on efface celui du dessous...)
Et voila , a peu de chose pres , c' est fait!
Soit le programme suivant:
          
          SOURCE         #source
          DESTINATION    #dest
          OFFSETXS       #8
          OFFSETXD       #8
          OFFSETYD       #160-(10*8)+8
          OFFSETYS       #160-(10*8)+8
          LONGUEUR       #10
          HAUTEUR        #200
          (+ quelques truc que l'on verra plus loin)
          
  Voila,Regis  viens  de  battre  son  amie  Popol,le pro du code genere...
Pas si con, Regis finallement ...

     Mais,dis l'amateur affole,a quoi ca sert?
 
 Hehe,les astuces a base de transfert de memoire sont legions,et elles sont
rappeler dans l'article du genial Deneb (que  les moules  soit avec toi) et
du non moins genialissime Jedi, dans le STMAg  N?? ...  Comme les logo  qui
tremble,les big sprite,les rouleaux,les massages thailandais,mais je m' em-
-porte...     

Mais  ,dis le lecteur pensant avoir ete arnaque,on  peut  pas transferer au
pixel pres ??? 
(Ndlr:  Ne redis jamais ca y en a plein qui vont le croire , t'es fou !!! )

III) TRANFERT AU PIXEL PRES:
-----------------------------

Mais oui,c'est possible ! Mais je dois vous expliquer quelques instructions
passees sous silence...

Les masques:  Ce sont des masques de bit,je m'explique,imaginons le masque:

       MASK1     #%0101010101010101

    A quoi sert-il ???  Deja c'est le masque de gauche, donc son action est
limite au 1er mot lu. En gros,cela permet d'afficher que s'il est en commun
avec les 1..un exemple?un exemple!

    Si  on transfert %1111111100000000 avec le masque precedent on obtient:
     
      #%0101010100000000,bref un (SOURCE) ET (MASQUE) ...

MASK1 sert pour le 1er mot, MASK3 pour le dernier, et MASK2 pour le reste.

Un  autre truc:
  SKEW, ca sert a decaller une source, donc si on veut afficher un motif en
0,2: on prend le motif,on decalle le motif,on fait un MASQUE qui efface les
2 premiers bits (on appels cela  de l'antiparasitage...).

Petit probleme:  Imaginons que l' on veuille afficher  un petit motif de 32
pixels en 2,0 , on lit les 2 mots,mais on  ecrit  sur... 3 !!!
Ce pauvre BLITTER comprend pu trop,puisqu' on lui a mis  2  en longueur ...
 Mais Atari a pense a tout  (pour une  fois!)  et on inclus deux petit bits
sympathiques... 

Bon voici quand on les met (pompe de dntpaper-3) avec: 
A,la position en X,de la source.
X,la position en X,en destination.
N c'est le nombre de mots pris en destination.
M c'est pareil mais en source.


!--------------------------------------------------------------
!  N    !  M    ! A MOD 16 ! X MOD 16 ! FXSR    ! NFSR        !
!-------------------------------------------------------------!
!       !  1    !                     ! NON     !    NON      !
!       !--------  A MOD 16<X MOD 16   -----------------------!
!       !  2    !                     !     IMPOSSIBLE        !
! N=1   ------------------------------------------------------!
!       !   1    !                    ! NON     !    NON      !
!       ----------  A MOD 16>X MOD 16 !-----------------------!
!       !   2    !                    ! OUI     !    NON      !
!-------------------------------------------------------------!
!       !  N     !                    ! NON     !    NON      !
!       !---------  A MOD 16<X MOD 16 - ----------------------!
!       !  N-1   !                    ! NON     !    OUI      !
! N>1   ------------------------------------------------------!
!       !   N    !                    ! OUI     !    OUI      !
!       ----------  A MOD 16>X MOD 16 !-----------------------!
!       !   N+1  !                    ! OUI     !    NON      !
!-------------------------------------------------------------!



   Comme vous pouvez voir,j'explique pas.M' enfin si vous voulez comprendre
le pourquoi du comment en regarder l' exemple sur le disk  ou/et  consulter
les ouvrages a la  fin de cette article...
Pour l'exemple sur le blitter,c'est peut-etre pas un cas general,le blitter
ne fait pas vraiment mieux que le 68000,m'enfin il devrait vous suffir pour
comprendre le blitter).
Bon maintenant quelques applications... ( Ndlr: Enfin des trucs !!! )
 
IV:Applications et diverses choses:
-------------------------------------

  Si c' est seulement pour les sprites ( ce qui est deja  bien ) le blitter
il est pas vraiment utile..( Ndlr: Utile ou pas ??? ) 

Bah non,vous avez tord il n'y a pas que ca !!!

    Imaginez un ecran en overscan,il est constitue d'image *.pi1,qu'il faut
coller ensemble...Le blitter le fait tres bien,en une dizaine d'instrutions
et cela rapidement...
   
    Imaginez encore que vous faites de la 3D...On peut se servir du blitter
pour remplir les polygones,ce qui est un gain acceptable: 65 ko  et  on bat
tout les codes generes qui prennent eux plus de 300ko en general !!!
 
    Mais pour la 3D,il a encore une astuce !!! Il suffit de faire  de la 3D
fil de fer et de demander gentiment de remplir les polygones  en fil de fer
interressant n' est-ce pas ??? Ceci est base sur le mode XOR , mais je vous
laisse chercher. (Ndlr: A venir nombreuses demo style SPACE BALL.)

   Encore pour la 3D,l'effacage prend  un temps assez longs.Mais le blitter
est plus rapide. Je tiens a preciser que le blitter va deux fois  plus vite
sans source,c'est a dire dans les cas  ou  on prends le masque de bit,ou on
met en "tout a 1 ou 0"...
     
    Pour  un  slide  show: En effacant  avec  un  motif  de   bit different
ou faire apparaitre un dessin en meme temps que l' autre diparait ... Sympa 
tout ca !!! Et acceptible a un debutant!!!

      Et je ne cite meme pas tout les effets simples qui ce  faisaient il y
a quelques annees encore ( genre logo qui suit une sinusoidale, concours de
sprites,big sprites,scroll de tout genres, reporter vous a la serie " Deneb 
et Jedi sont en vacance" , dans STmag.

     Pour  l'operation  appelee  "clipping  de  sprite",c'est un pros:
Le gros probleme  du clipping c' est le  sprite chevauchant les bords de l'
ecran: le blitter  se charge de ca en 4 instructions !!! Et oui, il suffira
de changer le masque !!! Qui a  plus simple ? 
(Ndlr:Moi,sur AMIGA j' avais fait une rotation avec le BLITTER,on peut tout
faire avec ce BLITTER. )

      Bref que des trucs sympa,et en plus il peut meme  servir  a  "mixer":
pas ajouter,mais mettre le 1er octet du sample 1 en 1er place,puis un octet
du  2eme...Dans un soundtracker et un decompacteur d' images  *.IFF , faire
des effets miroirs a peu de frais ( ndlr:Nous on a pas de sous a AUXERRE ),
mais bon tout ceci est bien,mais je vous livres quelques optimisations:

  
     -Le  blitter se sert de quelques une des infos que  vous  lui 
donnez,et il recopie d'autres,donc les instructions comme OFFSETxx 
sont  a  mettre  une fois,et apres,c'est  bon.Par  contre  d'autre 
instructions  sont  fondamentalles , comme celles  sur la HAUTEUR,
LONGUEUR et STARBLIT  ( Bien sur !!! )
  
     -Des  tableaux  accelerent  les choses,aussi.Et  en  plus  il
prennent  en  general  des  tailles  respectables,mon  plus   gros 
prennait  65ko,ce qui est pas vraiment gros.

     -Cherchez a en faire le plus de chosse a la fois. Le  blitter 
est long a partir,mais une fois lance il va vite:il faut effacer 4 
plans a la fois au lieu de 4 fois un plan,.

     -Le masque va deux fois plus vite qu'une source en memoire.Et 
il est parfait pour les motifs monochrome.A quoi  ca  sert ??? Par 
exemple  a  faire des sprites 1 plans,ou a masquer un sprite  a  4 
plans de 16*y,dans certains cas.      

Une remarqe en pasant:Pour des blocs inferieurs a 16 pixels,il  se
sert que du premier masque (MASK1),donc si votre motif fait  moins
de 16 pixels, faites gaffes, ca ne sert a rien de toucher a MASK 2
et 3,ils ne seront pas pris en compte...



V) Greetz et autres : 
----------------------

Comme au Cesar,je commence par les remerciments:

Merci a Zappy/hc de m'avoir presque tout apris,et d'etre super sympa.

Merci a a Deneb/les fous d'etre super cool,et de m'avoir apris beaucoup  en 
me  donnant  des  disks,et surtout par  les  fantastiques  premier articles
de "programmer dans un language chelou".

Merci  a  Nullos/Dnt pour etre bien sympa,et d'ecrire de super article dans
le DNT paper.

Merci  a Joker(un super codeur,sur pc,malheuresement),un  mec trop cool (un
ptit lemmig),a Karim(graine de fumeur,va!),Seb(gros fumeur),Mathieu ( cool)
,a Gauthier,a Youssouf( un kissman ),et a tous les autres ...

Merci a Bigfoot/mjj pour le karaoke,pour la K7 de STELLA et pour etre comme
il est ... 

Merci  a  Elric/hc( Fufu! ),Jedi (pour les CSC ),a tout fantasy et a Legacy
( je sais pas pourquoi ).

Merci a ce que je viens de fumer.

Bref, merci a tous.



VI) Maintenant la DOC:
------------------------

DNT 3 (Le principal) , DNT 2 (blitter et GEM,mes trucs sont pas tres propre
, il faut le savoir) , DNT 4 ( Des exemples pratiques ) , STMAG 70 ( Un ar-
-ticle sur le blitter , pas genial, m'enfin sont cool et n' ont pas trop de
sous comme a AUXERRE.),le livre du developpeur(Sympa, mais pas obligatoire)
Et enfin HOW TO CODE 1 , 2 , ... , N    !!!


             A la prochaine avec beaucoup d'exemples,d'applications etc ...





