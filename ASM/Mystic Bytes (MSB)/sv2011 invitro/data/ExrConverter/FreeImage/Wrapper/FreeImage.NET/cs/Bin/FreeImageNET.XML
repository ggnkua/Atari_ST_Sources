<?xml version="1.0"?>
<doc>
    <assembly>
        <name>FreeImageNET</name>
    </assembly>
    <members>
        <member name="T:FreeImageAPI.FreeImageBitmap">
            <summary>
            Encapsulates a FreeImage-bitmap.
            </summary>
        </member>
        <member name="F:FreeImageAPI.FreeImageBitmap.disposed">
            <summary>
            Indicates whether this instance is disposed.
            </summary>
        </member>
        <member name="F:FreeImageAPI.FreeImageBitmap.tag">
            <summary>
            Tab object.
            </summary>
        </member>
        <member name="F:FreeImageAPI.FreeImageBitmap.lockObject">
            <summary>
            Object used to syncronize lock methods.
            </summary>
        </member>
        <member name="F:FreeImageAPI.FreeImageBitmap.saveInformation">
            <summary>
            Holds information used by SaveAdd() methods.
            </summary>
        </member>
        <member name="F:FreeImageAPI.FreeImageBitmap.stream">
            <summary>
            The stream that this instance was loaded from or
            null if it has been cloned or deserialized.
            </summary>
        </member>
        <member name="F:FreeImageAPI.FreeImageBitmap.disposeStream">
            <summary>
            True if the stream must be disposed with this
            instance.
            </summary>
        </member>
        <member name="F:FreeImageAPI.FreeImageBitmap.frameCount">
            <summary>
            The number of frames contained by a mutlipage bitmap.
            Default value is 1 and only changed if needed.
            </summary>
        </member>
        <member name="F:FreeImageAPI.FreeImageBitmap.frameIndex">
            <summary>
            The index of the loaded frame.
            Default value is 0 and only changed if needed.
            </summary>
        </member>
        <member name="F:FreeImageAPI.FreeImageBitmap.originalFormat">
            <summary>
            Format of the sourceimage.
            </summary>
        </member>
        <member name="F:FreeImageAPI.FreeImageBitmap.dib">
            <summary>
            Handle to the encapsulated FreeImage-bitmap.
            </summary>
        </member>
        <member name="M:FreeImageAPI.FreeImageBitmap.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:FreeImageAPI.FreeImageBitmap"/> class.
            </summary>
        </member>
        <member name="M:FreeImageAPI.FreeImageBitmap.#ctor(FreeImageAPI.FIBITMAP)">
            <summary>
            Initializes a new instance of the <see cref="T:FreeImageAPI.FreeImageBitmap"/> class.
            For internal use only.
            </summary>
            <exception cref="T:System.Exception">The operation failed.</exception>
        </member>
        <member name="M:FreeImageAPI.FreeImageBitmap.#ctor(FreeImageAPI.FreeImageBitmap)">
            <summary>
            Initializes a new instance of the <see cref="T:FreeImageAPI.FreeImageBitmap"/> class
            bases on the specified image.
            </summary>
            <param name="original">The original to clone from.</param>
            <exception cref="T:System.Exception">The operation failed.</exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="original"/> is a null reference.</exception>
        </member>
        <member name="M:FreeImageAPI.FreeImageBitmap.#ctor(FreeImageAPI.FreeImageBitmap,System.Drawing.Size)">
            <summary>
            Initializes a new instance of the <see cref="T:FreeImageAPI.FreeImageBitmap"/> class
            bases on the specified image with the specified size.
            </summary>
            <param name="original">The original to clone from.</param>
            <param name="newSize">The Size structure that represent the
            size of the new <see cref="T:FreeImageAPI.FreeImageBitmap"/>.</param>
            <exception cref="T:System.Exception">The operation failed.</exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="original"/> is a null reference.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <paramref name="newSize.Width"/> or <paramref name="newSize.Height"/> are less or equal zero.
            </exception>
        </member>
        <member name="M:FreeImageAPI.FreeImageBitmap.#ctor(FreeImageAPI.FreeImageBitmap,System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:FreeImageAPI.FreeImageBitmap"/> class
            bases on the specified image with the specified size.
            </summary>
            <param name="original">The original to clone from.</param>
            <param name="width">Width of the new <see cref="T:FreeImageAPI.FreeImageBitmap"/>.</param>
            <param name="height">Height of the new <see cref="T:FreeImageAPI.FreeImageBitmap"/>.</param>
            <exception cref="T:System.Exception">The operation failed.</exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="original"/> is a null reference.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <paramref name="width"/> or <paramref name="height"/> are less or equal zero.</exception>
        </member>
        <member name="M:FreeImageAPI.FreeImageBitmap.#ctor(System.Drawing.Image)">
            <summary>
            Initializes a new instance of the <see cref="T:FreeImageAPI.FreeImageBitmap"/> class
            bases on the specified image.
            </summary>
            <param name="original">The original to clone from.</param>
            <remarks>
            Although this constructor supports creating images in both formats
            <see cref="F:System.Drawing.Imaging.PixelFormat.Format32bppPArgb"/>
            and <see cref="F:System.Drawing.Imaging.PixelFormat.Format64bppPArgb"/>, bitmaps
            created in these formats are treated like any normal 32-bit RGBA and 64-bit RGBA
            images respectively. Currently, there is no  support for automatic premultiplying images in
            <see cref="T:FreeImageAPI.FreeImageBitmap"/>.
            </remarks>
            <exception cref="T:System.Exception">The operation failed.</exception>
        </member>
        <member name="M:FreeImageAPI.FreeImageBitmap.#ctor(System.Drawing.Image,System.Drawing.Size)">
            <summary>
            Initializes a new instance of the <see cref="T:FreeImageAPI.FreeImageBitmap"/> class
            bases on the specified image with the specified size.
            </summary>
            <param name="original">The original to clone from.</param>
            <param name="newSize">The Size structure that represent the
            size of the new <see cref="T:FreeImageAPI.FreeImageBitmap"/>.</param>
            <remarks>
            Although this constructor supports creating images in both formats
            <see cref="F:System.Drawing.Imaging.PixelFormat.Format32bppPArgb"/>
            and <see cref="F:System.Drawing.Imaging.PixelFormat.Format64bppPArgb"/>, bitmaps
            created in these formats are treated like any normal 32-bit RGBA and 64-bit RGBA
            images respectively. Currently, there is no  support for automatic premultiplying images in
            <see cref="T:FreeImageAPI.FreeImageBitmap"/>.
            </remarks>
            <exception cref="T:System.Exception">The operation failed.</exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="original"/> is a null reference.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <paramref name="newSize.Width"/> or <paramref name="newSize.Height"/> are less or equal zero.
            </exception>
        </member>
        <member name="M:FreeImageAPI.FreeImageBitmap.#ctor(System.Drawing.Image,System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:FreeImageAPI.FreeImageBitmap"/> class
            bases on the specified image with the specified size.
            </summary>
            <param name="original">The original to clone from.</param>
            <param name="width">The width, in pixels, of the new <see cref="T:FreeImageAPI.FreeImageBitmap"/>.</param>
            <param name="height">The height, in pixels, of the new <see cref="T:FreeImageAPI.FreeImageBitmap"/>.</param>
            <remarks>
            Although this constructor supports creating images in both formats
            <see cref="F:System.Drawing.Imaging.PixelFormat.Format32bppPArgb"/>
            and <see cref="F:System.Drawing.Imaging.PixelFormat.Format64bppPArgb"/>, bitmaps
            created in these formats are treated like any normal 32-bit RGBA and 64-bit RGBA
            images respectively. Currently, there is no  support for automatic premultiplying images in
            <see cref="T:FreeImageAPI.FreeImageBitmap"/>.
            </remarks>
            <exception cref="T:System.Exception">The operation failed.</exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="original"/> is a null reference.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <paramref name="width"/> or <paramref name="height"/> are less or equal zero.</exception>
        </member>
        <member name="M:FreeImageAPI.FreeImageBitmap.#ctor(System.Drawing.Bitmap)">
            <summary>
            Initializes a new instance of the <see cref="T:FreeImageAPI.FreeImageBitmap"/> class
            bases on the specified image.
            </summary>
            <param name="original">The original to clone from.</param>
            <remarks>
            Although this constructor supports creating images in both formats
            <see cref="F:System.Drawing.Imaging.PixelFormat.Format32bppPArgb"/>
            and <see cref="F:System.Drawing.Imaging.PixelFormat.Format64bppPArgb"/>, bitmaps
            created in these formats are treated like any normal 32-bit RGBA and 64-bit RGBA
            images respectively. Currently, there is no  support for automatic premultiplying images in
            <see cref="T:FreeImageAPI.FreeImageBitmap"/>.
            </remarks>
            <exception cref="T:System.ArgumentNullException"><paramref name="original"/> is a null reference.</exception>
            <exception cref="T:System.Exception">The operation failed.</exception>
        </member>
        <member name="M:FreeImageAPI.FreeImageBitmap.#ctor(System.Drawing.Bitmap,System.Drawing.Size)">
            <summary>
            Initializes a new instance of the <see cref="T:FreeImageAPI.FreeImageBitmap"/> class
            bases on the specified image with the specified size.
            </summary>
            <param name="original">The original to clone from.</param>
            <param name="newSize">The Size structure that represent the
            size of the new <see cref="T:FreeImageAPI.FreeImageBitmap"/>.</param>
            <remarks>
            Although this constructor supports creating images in both formats
            <see cref="F:System.Drawing.Imaging.PixelFormat.Format32bppPArgb"/>
            and <see cref="F:System.Drawing.Imaging.PixelFormat.Format64bppPArgb"/>, bitmaps
            created in these formats are treated like any normal 32-bit RGBA and 64-bit RGBA
            images respectively. Currently, there is no  support for automatic premultiplying images in
            <see cref="T:FreeImageAPI.FreeImageBitmap"/>.
            </remarks>
            <exception cref="T:System.Exception">The operation failed.</exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="original"/> is a null reference.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <paramref name="newSize.Width"/> or <paramref name="newSize.Height"/> are less or equal zero.
            </exception>
        </member>
        <member name="M:FreeImageAPI.FreeImageBitmap.#ctor(System.Drawing.Bitmap,System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:FreeImageAPI.FreeImageBitmap"/> class
            bases on the specified image with the specified size.
            </summary>
            <param name="original">The original to clone from.</param>
            <param name="width">The width, in pixels, of the new <see cref="T:FreeImageAPI.FreeImageBitmap"/>.</param>
            <param name="height">The height, in pixels, of the new <see cref="T:FreeImageAPI.FreeImageBitmap"/>.</param>
            <remarks>
            Although this constructor supports creating images in both formats
            <see cref="F:System.Drawing.Imaging.PixelFormat.Format32bppPArgb"/>
            and <see cref="F:System.Drawing.Imaging.PixelFormat.Format64bppPArgb"/>, bitmaps
            created in these formats are treated like any normal 32-bit RGBA and 64-bit RGBA
            images respectively. Currently, there is no  support for automatic premultiplying images in
            <see cref="T:FreeImageAPI.FreeImageBitmap"/>.
            </remarks>
            <exception cref="T:System.Exception">The operation failed.</exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="original"/> is a null reference.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <paramref name="width"/> or <paramref name="height"/> are less or equal zero.</exception>
        </member>
        <member name="M:FreeImageAPI.FreeImageBitmap.#ctor(System.IO.Stream,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:FreeImageAPI.FreeImageBitmap"/> class
            bases on the specified stream.
            </summary>
            <param name="stream">Stream to read from.</param>
            <param name="useIcm">Ignored.</param>
            <exception cref="T:System.Exception">The operation failed.</exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="stream"/> is a null reference.</exception>
            <remarks>
            You must keep the stream open for the lifetime of the <see cref="T:FreeImageAPI.FreeImageBitmap"/>.
            </remarks>
        </member>
        <member name="M:FreeImageAPI.FreeImageBitmap.#ctor(System.IO.Stream)">
            <summary>
            Initializes a new instance of the <see cref="T:FreeImageAPI.FreeImageBitmap"/> class
            bases on the specified stream.
            </summary>
            <param name="stream">Stream to read from.</param>
            <exception cref="T:System.Exception">The operation failed.</exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="stream"/> is a null reference.</exception>
            <remarks>
            You must keep the stream open for the lifetime of the <see cref="T:FreeImageAPI.FreeImageBitmap"/>.
            </remarks>
        </member>
        <member name="M:FreeImageAPI.FreeImageBitmap.#ctor(System.IO.Stream,FreeImageAPI.FREE_IMAGE_FORMAT)">
            <summary>
            Initializes a new instance of the <see cref="T:FreeImageAPI.FreeImageBitmap"/> class
            bases on the specified stream in the specified format.
            </summary>
            <param name="stream">Stream to read from.</param>
            <param name="format">Format of the image.</param>
            <exception cref="T:System.Exception">The operation failed.</exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="stream"/> is a null reference.</exception>
            <remarks>
            You must keep the stream open for the lifetime of the <see cref="T:FreeImageAPI.FreeImageBitmap"/>.
            </remarks>
        </member>
        <member name="M:FreeImageAPI.FreeImageBitmap.#ctor(System.IO.Stream,FreeImageAPI.FREE_IMAGE_LOAD_FLAGS)">
            <summary>
            Initializes a new instance of the <see cref="T:FreeImageAPI.FreeImageBitmap"/> class
            bases on the specified stream with the specified loading flags.
            </summary>
            <param name="stream">Stream to read from.</param>
            <param name="flags">Flags to enable or disable plugin-features.</param>
            <exception cref="T:System.Exception">The operation failed.</exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="stream"/> is a null reference.</exception>
            <remarks>
            You must keep the stream open for the lifetime of the <see cref="T:FreeImageAPI.FreeImageBitmap"/>.
            </remarks>
        </member>
        <member name="M:FreeImageAPI.FreeImageBitmap.#ctor(System.IO.Stream,FreeImageAPI.FREE_IMAGE_FORMAT,FreeImageAPI.FREE_IMAGE_LOAD_FLAGS)">
            <summary>
            Initializes a new instance of the <see cref="T:FreeImageAPI.FreeImageBitmap"/> class
            bases on the specified stream in the specified format
            with the specified loading flags.
            </summary>
            <param name="stream">Stream to read from.</param>
            <param name="format">Format of the image.</param>
            <param name="flags">Flags to enable or disable plugin-features.</param>
            <exception cref="T:System.Exception">The operation failed.</exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="stream"/> is a null reference.</exception>
            <remarks>
            You must keep the stream open for the lifetime of the <see cref="T:FreeImageAPI.FreeImageBitmap"/>.
            </remarks>
        </member>
        <member name="M:FreeImageAPI.FreeImageBitmap.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:FreeImageAPI.FreeImageBitmap"/> class bases on the specified file.
            </summary>
            <param name="filename">The complete name of the file to load.</param>
            <exception cref="T:System.Exception">The operation failed.</exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="filename"/> is a null reference.</exception>
            <exception cref="T:System.IO.FileNotFoundException"><paramref name="filename"/> does not exist.</exception>
        </member>
        <member name="M:FreeImageAPI.FreeImageBitmap.#ctor(System.String,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:FreeImageAPI.FreeImageBitmap"/> class bases on the specified file.
            </summary>
            <param name="filename">The complete name of the file to load.</param>
            <param name="useIcm">Ignored.</param>
            <exception cref="T:System.Exception">The operation failed.</exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="filename"/> is a null reference.</exception>
            <exception cref="T:System.IO.FileNotFoundException"><paramref name="filename"/> does not exist.</exception>
        </member>
        <member name="M:FreeImageAPI.FreeImageBitmap.#ctor(System.String,FreeImageAPI.FREE_IMAGE_LOAD_FLAGS)">
            <summary>
            Initializes a new instance of the <see cref="T:FreeImageAPI.FreeImageBitmap"/> class bases on the specified file
            with the specified loading flags.
            </summary>
            <param name="filename">The complete name of the file to load.</param>
            <param name="flags">Flags to enable or disable plugin-features.</param>
            <exception cref="T:System.Exception">The operation failed.</exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="filename"/> is a null reference.</exception>
            <exception cref="T:System.IO.FileNotFoundException"><paramref name="filename"/> does not exist.</exception>
        </member>
        <member name="M:FreeImageAPI.FreeImageBitmap.#ctor(System.String,FreeImageAPI.FREE_IMAGE_FORMAT)">
            <summary>
            Initializes a new instance of the <see cref="T:FreeImageAPI.FreeImageBitmap"/> class bases on the specified file
            in the specified format.
            </summary>
            <param name="filename">The complete name of the file to load.</param>
            <param name="format">Format of the image.</param>
            <exception cref="T:System.Exception">The operation failed.</exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="filename"/> is a null reference.</exception>
            <exception cref="T:System.IO.FileNotFoundException"><paramref name="filename"/> does not exist.</exception>
        </member>
        <member name="M:FreeImageAPI.FreeImageBitmap.#ctor(System.String,FreeImageAPI.FREE_IMAGE_FORMAT,FreeImageAPI.FREE_IMAGE_LOAD_FLAGS)">
            <summary>
            Initializes a new instance of the <see cref="T:FreeImageAPI.FreeImageBitmap"/> class bases on the specified file
            in the specified format with the specified loading flags.
            </summary>
            <param name="filename">The complete name of the file to load.</param>
            <param name="format">Format of the image.</param>
            <param name="flags">Flags to enable or disable plugin-features.</param>
            <exception cref="T:System.Exception">The operation failed.</exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="filename"/> is a null reference.</exception>
            <exception cref="T:System.IO.FileNotFoundException"><paramref name="filename"/> does not exist.</exception>
        </member>
        <member name="M:FreeImageAPI.FreeImageBitmap.#ctor(System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:FreeImageAPI.FreeImageBitmap"/> class
            bases on the specified size.
            </summary>
            <param name="width">The width, in pixels, of the new <see cref="T:FreeImageAPI.FreeImageBitmap"/>.</param>
            <param name="height">The height, in pixels, of the new <see cref="T:FreeImageAPI.FreeImageBitmap"/>.</param>
            <exception cref="T:System.Exception">The operation failed.</exception>
        </member>
        <member name="M:FreeImageAPI.FreeImageBitmap.#ctor(System.Type,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:FreeImageAPI.FreeImageBitmap"/> class bases on the specified resource.
            </summary>
            <param name="type">The class used to extract the resource.</param>
            <param name="resource">The name of the resource.</param>
            <exception cref="T:System.Exception">The operation failed.</exception>
        </member>
        <member name="M:FreeImageAPI.FreeImageBitmap.#ctor(System.Int32,System.Int32,System.Drawing.Graphics)">
            <summary>
            Initializes a new instance of the <see cref="T:FreeImageAPI.FreeImageBitmap"/> class bases on the specified size
            and with the resolution of the specified <see cref="T:System.Drawing.Graphics"/> object.
            </summary>
            <param name="width">The width, in pixels, of the new <see cref="T:FreeImageAPI.FreeImageBitmap"/>.</param>
            <param name="height">The height, in pixels, of the new <see cref="T:FreeImageAPI.FreeImageBitmap"/>.</param>
            <param name="g">The Graphics object that specifies the resolution for the new <see cref="T:FreeImageAPI.FreeImageBitmap"/>.</param>
            <exception cref="T:System.Exception">The operation failed.</exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="g"/> is a null reference.</exception>
        </member>
        <member name="M:FreeImageAPI.FreeImageBitmap.#ctor(System.Int32,System.Int32,System.Drawing.Imaging.PixelFormat)">
            <summary>
            Initializes a new instance of the <see cref="T:FreeImageAPI.FreeImageBitmap"/> class bases on the specified size and format.
            </summary>
            <param name="width">The width, in pixels, of the new <see cref="T:FreeImageAPI.FreeImageBitmap"/>.</param>
            <param name="height">The height, in pixels, of the new <see cref="T:FreeImageAPI.FreeImageBitmap"/>.</param>
            <param name="format">The PixelFormat enumeration for the new <see cref="T:FreeImageAPI.FreeImageBitmap"/>.</param>
            <remarks>
            Although this constructor supports creating images in both formats
            <see cref="F:System.Drawing.Imaging.PixelFormat.Format32bppPArgb"/>
            and <see cref="F:System.Drawing.Imaging.PixelFormat.Format64bppPArgb"/>, bitmaps
            created in these formats are treated like any normal 32-bit RGBA and 64-bit RGBA
            images respectively. Currently, there is no  support for automatic premultiplying images in
            <see cref="T:FreeImageAPI.FreeImageBitmap"/>.
            </remarks>
            <exception cref="T:System.Exception">The operation failed.</exception>
            <exception cref="T:System.ArgumentException"><paramref name="format"/> is invalid.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <paramref name="width"/> or <paramref name="height"/> are less or equal zero.</exception>
        </member>
        <member name="M:FreeImageAPI.FreeImageBitmap.#ctor(System.Int32,System.Int32,FreeImageAPI.FREE_IMAGE_TYPE)">
            <summary>
            Initializes a new instance of the <see cref="T:FreeImageAPI.FreeImageBitmap"/> class bases on the specified size and type.
            Only non standard bitmaps are supported.
            </summary>	
            <param name="width">The width, in pixels, of the new <see cref="T:FreeImageAPI.FreeImageBitmap"/>.</param>
            <param name="height">The height, in pixels, of the new <see cref="T:FreeImageAPI.FreeImageBitmap"/>.</param>
            <param name="type">The type of the bitmap.</param>
            <exception cref="T:System.Exception">The operation failed.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <paramref name="type"/> is FIT_BITMAP or FIT_UNKNOWN.</exception>
            <exception cref="T:System.ArgumentException"><paramref name="type"/> is invalid.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <paramref name="width"/> or <paramref name="height"/> are less or equal zero.</exception>
        </member>
        <member name="M:FreeImageAPI.FreeImageBitmap.#ctor(System.Int32,System.Int32,System.Int32,System.Drawing.Imaging.PixelFormat,System.IntPtr)">
            <summary>
            Initializes a new instance of the <see cref="T:FreeImageAPI.FreeImageBitmap"/> class bases on the specified size,
            pixel format and pixel data.
            </summary>
            <param name="width">The width, in pixels, of the new <see cref="T:FreeImageAPI.FreeImageBitmap"/>.</param>
            <param name="height">The height, in pixels, of the new <see cref="T:FreeImageAPI.FreeImageBitmap"/>.</param>
            <param name="stride">Integer that specifies the byte offset between the beginning
            of one scan line and the next. This is usually (but not necessarily)
            the number of bytes in the pixel format (for example, 2 for 16 bits per pixel)
            multiplied by the width of the bitmap. The value passed to this parameter must
            be a multiple of four..</param>
            <param name="format">The PixelFormat enumeration for the new <see cref="T:FreeImageAPI.FreeImageBitmap"/>.</param>
            <param name="scan0">Pointer to an array of bytes that contains the pixel data.</param>
            <remarks>
            Although this constructor supports creating images in both formats
            <see cref="F:System.Drawing.Imaging.PixelFormat.Format32bppPArgb"/>
            and <see cref="F:System.Drawing.Imaging.PixelFormat.Format64bppPArgb"/>, bitmaps
            created in these formats are treated like any normal 32-bit RGBA and 64-bit RGBA
            images respectively. Currently, there is no  support for automatic premultiplying images in
            <see cref="T:FreeImageAPI.FreeImageBitmap"/>.
            </remarks>
            <exception cref="T:System.Exception">The operation failed.</exception>
            <exception cref="T:System.ArgumentException"><paramref name="format"/> is invalid.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <paramref name="width"/> or <paramref name="height"/> are less or equal zero.</exception>
        </member>
        <member name="M:FreeImageAPI.FreeImageBitmap.#ctor(System.Int32,System.Int32,System.Int32,System.Drawing.Imaging.PixelFormat,System.Byte[])">
            <summary>
            Initializes a new instance of the <see cref="T:FreeImageAPI.FreeImageBitmap"/> class bases on the specified size,
            pixel format and pixel data.
            </summary>
            <param name="width">The width, in pixels, of the new <see cref="T:FreeImageAPI.FreeImageBitmap"/>.</param>
            <param name="height">The height, in pixels, of the new <see cref="T:FreeImageAPI.FreeImageBitmap"/>.</param>
            <param name="stride">Integer that specifies the byte offset between the beginning
            of one scan line and the next. This is usually (but not necessarily)
            the number of bytes in the pixel format (for example, 2 for 16 bits per pixel)
            multiplied by the width of the bitmap. The value passed to this parameter must
            be a multiple of four..</param>
            <param name="format">The PixelFormat enumeration for the new <see cref="T:FreeImageAPI.FreeImageBitmap"/>.</param>
            <param name="bits">Array of bytes containing the bitmap data.</param>
            <remarks>
            Although this constructor supports creating images in both formats
            <see cref="F:System.Drawing.Imaging.PixelFormat.Format32bppPArgb"/>
            and <see cref="F:System.Drawing.Imaging.PixelFormat.Format64bppPArgb"/>, bitmaps
            created in these formats are treated like any normal 32-bit RGBA and 64-bit RGBA
            images respectively. Currently, there is no  support for automatic premultiplying images in
            <see cref="T:FreeImageAPI.FreeImageBitmap"/>.
            </remarks>
            <exception cref="T:System.Exception">The operation failed.</exception>
            <exception cref="T:System.ArgumentException"><paramref name="format"/> is invalid.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <paramref name="width"/> or <paramref name="height"/> are less or equal zero.</exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="bits"/> is null</exception>
        </member>
        <member name="M:FreeImageAPI.FreeImageBitmap.#ctor(System.Int32,System.Int32,System.Int32,System.Int32,FreeImageAPI.FREE_IMAGE_TYPE,System.IntPtr)">
            <summary>
            Initializes a new instance of the <see cref="T:FreeImageAPI.FreeImageBitmap"/> class bases on the specified size,
            pixel format and pixel data.
            </summary>
            <param name="width">The width, in pixels, of the new <see cref="T:FreeImageAPI.FreeImageBitmap"/>.</param>
            <param name="height">The height, in pixels, of the new <see cref="T:FreeImageAPI.FreeImageBitmap"/>.</param>
            <param name="stride">Integer that specifies the byte offset between the beginning
            of one scan line and the next. This is usually (but not necessarily)
            the number of bytes in the pixel format (for example, 2 for 16 bits per pixel)
            multiplied by the width of the bitmap. The value passed to this parameter must
            be a multiple of four..</param>
            <param name="bpp">The color depth of the new <see cref="T:FreeImageAPI.FreeImageBitmap"/></param>
            <param name="type">The type for the new <see cref="T:FreeImageAPI.FreeImageBitmap"/>.</param>
            <param name="scan0">Pointer to an array of bytes that contains the pixel data.</param>
            <exception cref="T:System.Exception">The operation failed.</exception>
            <exception cref="T:System.ArgumentException"><paramref name="format"/> is invalid.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <paramref name="width"/> or <paramref name="height"/> are less or equal zero.</exception>
        </member>
        <member name="M:FreeImageAPI.FreeImageBitmap.#ctor(System.Int32,System.Int32,System.Int32,System.Int32,FreeImageAPI.FREE_IMAGE_TYPE,System.Byte[])">
            <summary>
            Initializes a new instance of the <see cref="T:FreeImageAPI.FreeImageBitmap"/> class bases on the specified size,
            pixel format and pixel data.
            </summary>
            <param name="width">The width, in pixels, of the new <see cref="T:FreeImageAPI.FreeImageBitmap"/>.</param>
            <param name="height">The height, in pixels, of the new <see cref="T:FreeImageAPI.FreeImageBitmap"/>.</param>
            <param name="stride">Integer that specifies the byte offset between the beginning
            of one scan line and the next. This is usually (but not necessarily)
            the number of bytes in the pixel format (for example, 2 for 16 bits per pixel)
            multiplied by the width of the bitmap. The value passed to this parameter must
            be a multiple of four..</param>
            <param name="bpp">The color depth of the new <see cref="T:FreeImageAPI.FreeImageBitmap"/></param>
            <param name="type">The type for the new <see cref="T:FreeImageAPI.FreeImageBitmap"/>.</param>
            <param name="bits">Array of bytes containing the bitmap data.</param>
            <exception cref="T:System.Exception">The operation failed.</exception>
            <exception cref="T:System.ArgumentException"><paramref name="format"/> is invalid.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <paramref name="width"/> or <paramref name="height"/> are less or equal zero.</exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="bits"/> is null</exception>
        </member>
        <member name="M:FreeImageAPI.FreeImageBitmap.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new instance of the <see cref="T:FreeImageAPI.FreeImageBitmap"/> class.
            </summary>
            <exception cref="T:System.Exception">The operation failed.</exception>
            <exception cref="T:System.Runtime.Serialization.SerializationException">The operation failed.</exception>
        </member>
        <member name="M:FreeImageAPI.FreeImageBitmap.Finalize">
            <summary>
            Frees all managed and unmanaged ressources.
            </summary>
        </member>
        <member name="M:FreeImageAPI.FreeImageBitmap.op_Explicit(FreeImageAPI.FreeImageBitmap)~System.Drawing.Bitmap">
            <summary>
            Converts a <see cref="T:FreeImageAPI.FreeImageBitmap"/> instance to a <see cref="T:System.Drawing.Bitmap"/> instance.
            </summary>
            <param name="value">A <see cref="T:FreeImageAPI.FreeImageBitmap"/> instance.</param>
            <returns>A new instance of <see cref="T:System.Drawing.Bitmap"/> initialized to <paramref name="value"/>.</returns>
            <remarks>
            The explicit conversion from <see cref="T:FreeImageAPI.FreeImageBitmap"/> into Bitmap
            allows to create an instance on the fly and use it as if
            was a Bitmap. This way it can be directly used with a
            PixtureBox for example without having to call any
            conversion operations.
            </remarks>
        </member>
        <member name="M:FreeImageAPI.FreeImageBitmap.op_Explicit(System.Drawing.Bitmap)~FreeImageAPI.FreeImageBitmap">
            <summary>
            Converts a <see cref="T:System.Drawing.Bitmap"/> instance to a <see cref="T:FreeImageAPI.FreeImageBitmap"/> instance.
            </summary>
            <param name="value">A <see cref="T:System.Drawing.Bitmap"/> instance.</param>
            <returns>A new instance of <see cref="T:FreeImageAPI.FreeImageBitmap"/> initialized to <paramref name="value"/>.</returns>
            <remarks>
            The explicit conversion from <see cref="T:System.Drawing.Bitmap"/> into <see cref="T:FreeImageAPI.FreeImageBitmap"/>
            allows to create an instance on the fly to perform
            image processing operations and converting it back.
            </remarks>
        </member>
        <member name="M:FreeImageAPI.FreeImageBitmap.op_Equality(FreeImageAPI.FreeImageBitmap,FreeImageAPI.FreeImageBitmap)">
            <summary>
            Determines whether two specified <see cref="T:FreeImageAPI.FreeImageBitmap"/> objects have the same value.
            </summary>
            <param name="left">A <see cref="T:FreeImageAPI.FreeImageBitmap"/> or a null reference (<b>Nothing</b> in Visual Basic).</param>
            <param name="right">A <see cref="T:FreeImageAPI.FreeImageBitmap"/> or a null reference (<b>Nothing</b> in Visual Basic).</param>
            <returns>
            <b>true</b> if the value of left is the same as the value of right; otherwise, <b>false</b>.
            </returns>
        </member>
        <member name="M:FreeImageAPI.FreeImageBitmap.op_Inequality(FreeImageAPI.FreeImageBitmap,FreeImageAPI.FreeImageBitmap)">
            <summary>
            Determines whether two specified <see cref="T:FreeImageAPI.FreeImageBitmap"/> objects have different values.
            </summary>
            <param name="left">A <see cref="T:FreeImageAPI.FreeImageBitmap"/> or a null reference (<b>Nothing</b> in Visual Basic).</param>
            <param name="right">A <see cref="T:FreeImageAPI.FreeImageBitmap"/> or a null reference (<b>Nothing</b> in Visual Basic).</param>
            <returns>
            true if the value of left is different from the value of right; otherwise, <b>false</b>.
            </returns>
        </member>
        <member name="M:FreeImageAPI.FreeImageBitmap.GetBounds(System.Drawing.GraphicsUnit@)">
            <summary>
            Gets the bounds of this <see cref="T:FreeImageAPI.FreeImageBitmap"/> in the specified unit.
            </summary>
            <param name="pageUnit">One of the <see cref="T:System.Drawing.GraphicsUnit"/> values indicating
            the unit of measure for the bounding rectangle.</param>
            <returns>The <see cref="T:System.Drawing.RectangleF"/> that represents the bounds of this
            <see cref="T:FreeImageAPI.FreeImageBitmap"/>, in the specified unit.</returns>
        </member>
        <member name="M:FreeImageAPI.FreeImageBitmap.GetPropertyItem(System.Int32)">
            <summary>
            Gets the specified property item from this <see cref="T:FreeImageAPI.FreeImageBitmap"/>.
            </summary>
            <param name="propid">The ID of the property item to get.</param>
            <returns>The <see cref="T:System.Drawing.Imaging.PropertyItem"/> this method gets.</returns>
        </member>
        <member name="M:FreeImageAPI.FreeImageBitmap.GetThumbnailImage(System.Int32,System.Int32,System.Drawing.Image.GetThumbnailImageAbort,System.IntPtr)">
            <summary>
            Returns a thumbnail for this <see cref="T:FreeImageAPI.FreeImageBitmap"/>.
            </summary>
            <param name="thumbWidth">The width, in pixels, of the requested thumbnail image.</param>
            <param name="thumbHeight">The height, in pixels, of the requested thumbnail image.</param>
            <param name="callback">Ignored.</param>
            <param name="callBackData">Ignored.</param>
            <returns>A <see cref="T:FreeImageAPI.FreeImageBitmap"/> that represents the thumbnail.</returns>
        </member>
        <member name="M:FreeImageAPI.FreeImageBitmap.GetThumbnailImage(System.Int32,System.Boolean)">
            <summary>
            Returns a thumbnail for this <see cref="T:FreeImageAPI.FreeImageBitmap"/>, keeping aspect ratio.
            <paramref name="maxPixelSize"/> defines the maximum width or height
            of the thumbnail.
            </summary>
            <param name="maxPixelSize">Thumbnail square size.</param>
            <param name="convert">When true HDR images are transperantly
            converted to standard images.</param>
            <returns>The thumbnail in a new instance.</returns>
        </member>
        <member name="M:FreeImageAPI.FreeImageBitmap.ToBitmap">
            <summary>
            Converts this <see cref="T:FreeImageAPI.FreeImageBitmap"/> instance to a <see cref="T:System.Drawing.Bitmap"/> instance.
            </summary>
            <returns>A new instance of <see cref="T:System.Drawing.Bitmap"/> initialized this instance.</returns>
        </member>
        <member name="M:FreeImageAPI.FreeImageBitmap.GetScanline``1(System.Int32)">
            <summary>
            Returns an instance of <see cref="T:FreeImageAPI.Scanline`1"/>, representing the scanline
            specified by <paramref name="scanline"/> of this <see cref="T:FreeImageAPI.FreeImageBitmap"/>.
            Since FreeImage bitmaps are always bottum up aligned, keep in mind that scanline 0 is the
            bottom-most line of the image.
            </summary>
            <param name="scanline">Number of the scanline to retrieve.</param>
            <returns>An instance of <see cref="T:FreeImageAPI.Scanline`1"/> representing the
            <paramref name="scanline"/>th scanline.</returns>
            <remarks>
            List of return-types of <b>T</b>:<para/>
            <list type="table">
            <listheader><term>Color Depth / Type</term><description><see cref="T:System.Type">Result Type</see></description></listheader>
            <item><term>1 (<see cref="F:FreeImageAPI.FREE_IMAGE_TYPE.FIT_BITMAP"/>)</term><description><see cref="T:FreeImageAPI.FI1BIT"/></description></item>
            <item><term>4 (<see cref="F:FreeImageAPI.FREE_IMAGE_TYPE.FIT_BITMAP"/>)</term><description><see cref="T:FreeImageAPI.FI4BIT"/></description></item>
            <item><term>8 (<see cref="F:FreeImageAPI.FREE_IMAGE_TYPE.FIT_BITMAP"/>)</term><description><see cref="T:System.Byte"/></description></item>
            <item><term>16 (<see cref="F:FreeImageAPI.FREE_IMAGE_TYPE.FIT_BITMAP"/>)</term><description><see cref="T:System.UInt16"/></description></item>
            <item><term>16 - 555 (<see cref="F:FreeImageAPI.FREE_IMAGE_TYPE.FIT_BITMAP"/>)</term><description><see cref="T:FreeImageAPI.FI16RGB555"/></description></item>
            <item><term>16 - 565 (<see cref="F:FreeImageAPI.FREE_IMAGE_TYPE.FIT_BITMAP"/>)</term><description><see cref="T:FreeImageAPI.FI16RGB565"/></description></item>
            <item><term>24 (<see cref="F:FreeImageAPI.FREE_IMAGE_TYPE.FIT_BITMAP"/>)</term><description><see cref="T:FreeImageAPI.RGBTRIPLE"/></description></item>
            <item><term>32 (<see cref="F:FreeImageAPI.FREE_IMAGE_TYPE.FIT_BITMAP"/>)</term><description><see cref="T:FreeImageAPI.RGBQUAD"/></description></item>
            <item><term><see cref="F:FreeImageAPI.FREE_IMAGE_TYPE.FIT_COMPLEX"/></term><description><see cref="T:FreeImageAPI.FICOMPLEX"/></description></item>
            <item><term><see cref="F:FreeImageAPI.FREE_IMAGE_TYPE.FIT_DOUBLE"/></term><description><see cref="T:System.Double"/></description></item>
            <item><term><see cref="F:FreeImageAPI.FREE_IMAGE_TYPE.FIT_FLOAT"/></term><description><see cref="T:System.Single"/></description></item>
            <item><term><see cref="F:FreeImageAPI.FREE_IMAGE_TYPE.FIT_INT16"/></term><description><see cref="T:System.Int16"/></description></item>
            <item><term><see cref="F:FreeImageAPI.FREE_IMAGE_TYPE.FIT_INT32"/></term><description><see cref="T:System.Int32"/></description></item>
            <item><term><see cref="F:FreeImageAPI.FREE_IMAGE_TYPE.FIT_RGB16"/></term><description><see cref="T:FreeImageAPI.FIRGB16"/></description></item>
            <item><term><see cref="F:FreeImageAPI.FREE_IMAGE_TYPE.FIT_RGBA16"/></term><description><see cref="T:FreeImageAPI.FIRGBA16"/></description></item>
            <item><term><see cref="F:FreeImageAPI.FREE_IMAGE_TYPE.FIT_RGBAF"/></term><description><see cref="T:FreeImageAPI.FIRGBAF"/></description></item>
            <item><term><see cref="F:FreeImageAPI.FREE_IMAGE_TYPE.FIT_RGBF"/></term><description><see cref="T:FreeImageAPI.FIRGBF"/></description></item>
            <item><term><see cref="F:FreeImageAPI.FREE_IMAGE_TYPE.FIT_UINT16"/></term><description><see cref="T:System.UInt16"/></description></item>
            <item><term><see cref="F:FreeImageAPI.FREE_IMAGE_TYPE.FIT_UINT32"/></term><description><see cref="T:System.UInt32"/></description></item>
            </list>
            </remarks>
            <example>
            <code>
            FreeImageBitmap bitmap = new FreeImageBitmap(@"C:\Pictures\picture.bmp");
            if (bitmap.ColorDepth == 32)
            {
            	Scanline&lt;RGBQUAD&gt; scanline = bitmap.GetScanline&lt;RGBQUAD&gt;(0);
            	foreach (RGBQUAD pixel in scanline)
            	{
            		Console.WriteLine(pixel);
            	}
            }
            </code>
            </example>
            <exception cref="T:System.ArgumentException">
            The bitmap's type or color depth are not supported.
            </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <paramref name="scanline"/> is no valid value.
            </exception>
        </member>
        <member name="M:FreeImageAPI.FreeImageBitmap.GetScanline(System.Int32)">
            <summary>
            Returns an instance of <see cref="T:FreeImageAPI.Scanline`1"/>, representing the scanline
            specified by <paramref name="scanline"/> of this <see cref="T:FreeImageAPI.FreeImageBitmap"/>.
            Since FreeImage bitmaps are always bottum up aligned, keep in mind that scanline 0 is the
            bottom-most line of the image.
            </summary>
            <param name="scanline">Number of the scanline to retrieve.</param>
            <returns>An instance of <see cref="T:FreeImageAPI.Scanline`1"/> representing the
            <paramref name="scanline"/>th scanline.</returns>
            <remarks>
            List of return-types of <b>T</b>:<para/>
            <list type="table">
            <listheader><term>Color Depth / Type</term><description><see cref="T:System.Type">Result Type</see></description></listheader>
            <item><term>1 (<see cref="F:FreeImageAPI.FREE_IMAGE_TYPE.FIT_BITMAP"/>)</term><description><see cref="T:FreeImageAPI.FI1BIT"/></description></item>
            <item><term>4 (<see cref="F:FreeImageAPI.FREE_IMAGE_TYPE.FIT_BITMAP"/>)</term><description><see cref="T:FreeImageAPI.FI4BIT"/></description></item>
            <item><term>8 (<see cref="F:FreeImageAPI.FREE_IMAGE_TYPE.FIT_BITMAP"/>)</term><description><see cref="T:System.Byte"/></description></item>
            <item><term>16 (<see cref="F:FreeImageAPI.FREE_IMAGE_TYPE.FIT_BITMAP"/>)</term><description><see cref="T:System.UInt16"/></description></item>
            <item><term>16 - 555 (<see cref="F:FreeImageAPI.FREE_IMAGE_TYPE.FIT_BITMAP"/>)</term><description><see cref="T:FreeImageAPI.FI16RGB555"/></description></item>
            <item><term>16 - 565 (<see cref="F:FreeImageAPI.FREE_IMAGE_TYPE.FIT_BITMAP"/>)</term><description><see cref="T:FreeImageAPI.FI16RGB565"/></description></item>
            <item><term>24 (<see cref="F:FreeImageAPI.FREE_IMAGE_TYPE.FIT_BITMAP"/>)</term><description><see cref="T:FreeImageAPI.RGBTRIPLE"/></description></item>
            <item><term>32 (<see cref="F:FreeImageAPI.FREE_IMAGE_TYPE.FIT_BITMAP"/>)</term><description><see cref="T:FreeImageAPI.RGBQUAD"/></description></item>
            <item><term><see cref="F:FreeImageAPI.FREE_IMAGE_TYPE.FIT_COMPLEX"/></term><description><see cref="T:FreeImageAPI.FICOMPLEX"/></description></item>
            <item><term><see cref="F:FreeImageAPI.FREE_IMAGE_TYPE.FIT_DOUBLE"/></term><description><see cref="T:System.Double"/></description></item>
            <item><term><see cref="F:FreeImageAPI.FREE_IMAGE_TYPE.FIT_FLOAT"/></term><description><see cref="T:System.Single"/></description></item>
            <item><term><see cref="F:FreeImageAPI.FREE_IMAGE_TYPE.FIT_INT16"/></term><description><see cref="T:System.Int16"/></description></item>
            <item><term><see cref="F:FreeImageAPI.FREE_IMAGE_TYPE.FIT_INT32"/></term><description><see cref="T:System.Int32"/></description></item>
            <item><term><see cref="F:FreeImageAPI.FREE_IMAGE_TYPE.FIT_RGB16"/></term><description><see cref="T:FreeImageAPI.FIRGB16"/></description></item>
            <item><term><see cref="F:FreeImageAPI.FREE_IMAGE_TYPE.FIT_RGBA16"/></term><description><see cref="T:FreeImageAPI.FIRGBA16"/></description></item>
            <item><term><see cref="F:FreeImageAPI.FREE_IMAGE_TYPE.FIT_RGBAF"/></term><description><see cref="T:FreeImageAPI.FIRGBAF"/></description></item>
            <item><term><see cref="F:FreeImageAPI.FREE_IMAGE_TYPE.FIT_RGBF"/></term><description><see cref="T:FreeImageAPI.FIRGBF"/></description></item>
            <item><term><see cref="F:FreeImageAPI.FREE_IMAGE_TYPE.FIT_UINT16"/></term><description><see cref="T:System.UInt16"/></description></item>
            <item><term><see cref="F:FreeImageAPI.FREE_IMAGE_TYPE.FIT_UINT32"/></term><description><see cref="T:System.UInt32"/></description></item>
            </list>
            </remarks>
            <example>
            <code>
            FreeImageBitmap bitmap = new FreeImageBitmap(@"C:\Pictures\picture.bmp");
            if (bitmap.ColorDepth == 32)
            {
            	Scanline&lt;RGBQUAD&gt; scanline = (Scanline&lt;RGBQUAD&gt;)bitmap.GetScanline(0);
            	foreach (RGBQUAD pixel in scanline)
            	{
            		Console.WriteLine(pixel);
            	}
            }
            </code>
            </example>
            <exception cref="T:System.ArgumentException">
            The type of the bitmap or color depth are not supported.
            </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <paramref name="scanline"/> is no valid value.
            </exception>
        </member>
        <member name="M:FreeImageAPI.FreeImageBitmap.GetScanlinePointer(System.Int32)">
            <summary>
            Returns a pointer to the specified scanline.
            Due to FreeImage bitmaps are bottum up,
            scanline 0 is the most bottom line of the image.
            </summary>
            <param name="scanline">Number of the scanline.</param>
            <returns>Pointer to the scanline.</returns>
        </member>
        <member name="M:FreeImageAPI.FreeImageBitmap.GetScanlines">
            <summary>
            Returns a list of structures, representing the scanlines of this <see cref="T:FreeImageAPI.FreeImageBitmap"/>.
            Due to FreeImage bitmaps are bottum up, scanline 0 is the
            bottom-most line of the image.
            Each color depth has a different representing structure due to different memory layouts.
            </summary>
            <remarks>
            List of return-types of <b>T</b>:<para/>
            <list type="table">
            <listheader><term>Color Depth / Type</term><description><see cref="T:System.Type">Result Type of IEnmuerable&lt;Scanline&lt;T&gt;&gt;</see></description></listheader>
            <item><term>1 (<see cref="F:FreeImageAPI.FREE_IMAGE_TYPE.FIT_BITMAP"/>)</term><description><see cref="T:FreeImageAPI.FI1BIT"/></description></item>
            <item><term>4 (<see cref="F:FreeImageAPI.FREE_IMAGE_TYPE.FIT_BITMAP"/>)</term><description><see cref="T:FreeImageAPI.FI4BIT"/></description></item>
            <item><term>8 (<see cref="F:FreeImageAPI.FREE_IMAGE_TYPE.FIT_BITMAP"/>)</term><description><see cref="T:System.Byte"/></description></item>
            <item><term>16 (<see cref="F:FreeImageAPI.FREE_IMAGE_TYPE.FIT_BITMAP"/>)</term><description><see cref="T:System.UInt16"/></description></item>
            <item><term>16 - 555 (<see cref="F:FreeImageAPI.FREE_IMAGE_TYPE.FIT_BITMAP"/>)</term><description><see cref="T:FreeImageAPI.FI16RGB555"/></description></item>
            <item><term>16 - 565 (<see cref="F:FreeImageAPI.FREE_IMAGE_TYPE.FIT_BITMAP"/>)</term><description><see cref="T:FreeImageAPI.FI16RGB565"/></description></item>
            <item><term>24 (<see cref="F:FreeImageAPI.FREE_IMAGE_TYPE.FIT_BITMAP"/>)</term><description><see cref="T:FreeImageAPI.RGBTRIPLE"/></description></item>
            <item><term>32 (<see cref="F:FreeImageAPI.FREE_IMAGE_TYPE.FIT_BITMAP"/>)</term><description><see cref="T:FreeImageAPI.RGBQUAD"/></description></item>
            <item><term><see cref="F:FreeImageAPI.FREE_IMAGE_TYPE.FIT_COMPLEX"/></term><description><see cref="T:FreeImageAPI.FICOMPLEX"/></description></item>
            <item><term><see cref="F:FreeImageAPI.FREE_IMAGE_TYPE.FIT_DOUBLE"/></term><description><see cref="T:System.Double"/></description></item>
            <item><term><see cref="F:FreeImageAPI.FREE_IMAGE_TYPE.FIT_FLOAT"/></term><description><see cref="T:System.Single"/></description></item>
            <item><term><see cref="F:FreeImageAPI.FREE_IMAGE_TYPE.FIT_INT16"/></term><description><see cref="T:System.Int16"/></description></item>
            <item><term><see cref="F:FreeImageAPI.FREE_IMAGE_TYPE.FIT_INT32"/></term><description><see cref="T:System.Int32"/></description></item>
            <item><term><see cref="F:FreeImageAPI.FREE_IMAGE_TYPE.FIT_RGB16"/></term><description><see cref="T:FreeImageAPI.FIRGB16"/></description></item>
            <item><term><see cref="F:FreeImageAPI.FREE_IMAGE_TYPE.FIT_RGBA16"/></term><description><see cref="T:FreeImageAPI.FIRGBA16"/></description></item>
            <item><term><see cref="F:FreeImageAPI.FREE_IMAGE_TYPE.FIT_RGBAF"/></term><description><see cref="T:FreeImageAPI.FIRGBAF"/></description></item>
            <item><term><see cref="F:FreeImageAPI.FREE_IMAGE_TYPE.FIT_RGBF"/></term><description><see cref="T:FreeImageAPI.FIRGBF"/></description></item>
            <item><term><see cref="F:FreeImageAPI.FREE_IMAGE_TYPE.FIT_UINT16"/></term><description><see cref="T:System.UInt16"/></description></item>
            <item><term><see cref="F:FreeImageAPI.FREE_IMAGE_TYPE.FIT_UINT32"/></term><description><see cref="T:System.UInt32"/></description></item>
            </list>
            </remarks>
        </member>
        <member name="M:FreeImageAPI.FreeImageBitmap.RemovePropertyItem(System.Int32)">
            <summary>
            Removes the specified property item from this <see cref="T:FreeImageAPI.FreeImageBitmap"/>.
            </summary>
            <param name="propid">The ID of the property item to remove.</param>
        </member>
        <member name="M:FreeImageAPI.FreeImageBitmap.RotateFlip(System.Drawing.RotateFlipType)">
            <summary>
            This method rotates, flips, or rotates and flips this <see cref="T:FreeImageAPI.FreeImageBitmap"/>.
            </summary>
            <param name="rotateFlipType">A RotateFlipType member
            that specifies the type of rotation and flip to apply to this <see cref="T:FreeImageAPI.FreeImageBitmap"/>.</param>
        </member>
        <member name="M:FreeImageAPI.FreeImageBitmap.CloneMetadataFrom(FreeImageAPI.FreeImageBitmap)">
            <summary>
            Copies the metadata from another <see cref="T:FreeImageAPI.FreeImageBitmap"/>.
            </summary>
            <param name="bitmap">The bitmap to read the metadata from.</param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="bitmap"/> is a null reference.
            </exception>
        </member>
        <member name="M:FreeImageAPI.FreeImageBitmap.CloneMetadataFrom(FreeImageAPI.FreeImageBitmap,FreeImageAPI.FREE_IMAGE_METADATA_COPY)">
            <summary>
            Copies the metadata from another <see cref="T:FreeImageAPI.FreeImageBitmap"/> using
            the provided options.
            </summary>
            <param name="bitmap">The bitmap to read the metadata from.</param>
            <param name="flags">Specifies the way the metadata is copied.</param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="bitmap"/> is a null reference.
            </exception>
        </member>
        <member name="M:FreeImageAPI.FreeImageBitmap.Save(System.String)">
            <summary>
            Saves this <see cref="T:FreeImageAPI.FreeImageBitmap"/> to the specified file.
            </summary>
            <param name="filename">A string that contains the name of the file to which
            to save this <see cref="T:FreeImageAPI.FreeImageBitmap"/>.</param>
            <exception cref="T:System.ArgumentException"><paramref name="filename"/> is null or empty.</exception>
            <exception cref="T:System.Exception">Saving the image failed.</exception>
        </member>
        <member name="M:FreeImageAPI.FreeImageBitmap.Save(System.String,FreeImageAPI.FREE_IMAGE_FORMAT)">
            <summary>
            Saves this <see cref="T:FreeImageAPI.FreeImageBitmap"/> to the specified file in the specified format.
            </summary>
            <param name="filename">A string that contains the name of the file to which
            to save this <see cref="T:FreeImageAPI.FreeImageBitmap"/>.</param>
            <param name="format">An <see cref="T:FreeImageAPI.FREE_IMAGE_FORMAT"/> that specifies the format of the saved image.</param>
            <exception cref="T:System.ArgumentException"><paramref name="filename"/> is null or empty.</exception>
            <exception cref="T:System.Exception">Saving the image failed.</exception>
        </member>
        <member name="M:FreeImageAPI.FreeImageBitmap.Save(System.String,FreeImageAPI.FREE_IMAGE_FORMAT,FreeImageAPI.FREE_IMAGE_SAVE_FLAGS)">
            <summary>
            Saves this <see cref="T:FreeImageAPI.FreeImageBitmap"/> to the specified file in the specified format
            using the specified saving flags.
            </summary>
            <param name="filename">A string that contains the name of the file to which
            to save this <see cref="T:FreeImageAPI.FreeImageBitmap"/>.</param>
            <param name="format">An <see cref="T:FreeImageAPI.FREE_IMAGE_FORMAT"/> that specifies the format of the saved image.</param>
            <param name="flags">Flags to enable or disable plugin-features.</param>
            <exception cref="T:System.ArgumentException"><paramref name="filename"/> is null or empty.</exception>
            <exception cref="T:System.Exception">Saving the image failed.</exception>
        </member>
        <member name="M:FreeImageAPI.FreeImageBitmap.Save(System.IO.Stream,FreeImageAPI.FREE_IMAGE_FORMAT)">
            <summary>
            Saves this <see cref="T:FreeImageAPI.FreeImageBitmap"/> to the specified stream in the specified format.
            </summary>
            <param name="stream">The stream where this <see cref="T:FreeImageAPI.FreeImageBitmap"/> will be saved.</param>
            <param name="format">An <see cref="T:FreeImageAPI.FREE_IMAGE_FORMAT"/> that specifies the format of the saved image.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="stream"/> is a null reference.</exception>
            <exception cref="T:System.Exception">Saving the image failed.</exception>
        </member>
        <member name="M:FreeImageAPI.FreeImageBitmap.Save(System.IO.Stream,FreeImageAPI.FREE_IMAGE_FORMAT,FreeImageAPI.FREE_IMAGE_SAVE_FLAGS)">
            <summary>
            Saves this <see cref="T:FreeImageAPI.FreeImageBitmap"/> to the specified stream in the specified format
            using the specified saving flags.
            </summary>
            <param name="stream">The stream where this <see cref="T:FreeImageAPI.FreeImageBitmap"/> will be saved.</param>
            <param name="format">An <see cref="T:FreeImageAPI.FREE_IMAGE_FORMAT"/> that specifies the format of the saved image.</param>
            <param name="flags">Flags to enable or disable plugin-features.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="stream"/> is a null reference.</exception>
            <exception cref="T:System.Exception">Saving the image failed.</exception>
        </member>
        <member name="M:FreeImageAPI.FreeImageBitmap.SaveAdd">
            <summary>
            Adds a frame to the file specified in a previous call to the <see cref="M:FreeImageAPI.FreeImageBitmap.Save(System.String)"/>
            method.
            </summary>
            <exception cref="T:System.InvalidOperationException">
            This instance has not been saved to a file using Save(...) before.</exception>
        </member>
        <member name="M:FreeImageAPI.FreeImageBitmap.SaveAdd(System.Int32)">
            <summary>
            Adds a frame to the file specified in a previous call to the <see cref="M:FreeImageAPI.FreeImageBitmap.Save(System.String)"/> method.
            </summary>
            <param name="insertPosition">The position at which the frame should be inserted.</param>
            <exception cref="T:System.InvalidOperationException">
            This instance has not yet been saved to a file using the Save(...) method.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="insertPosition"/> is out of range.</exception>
        </member>
        <member name="M:FreeImageAPI.FreeImageBitmap.SaveAdd(FreeImageAPI.FreeImageBitmap)">
            <summary>
            Adds a frame to the file specified in a previous call to the <see cref="M:FreeImageAPI.FreeImageBitmap.Save(System.String)"/> method.
            </summary>
            <param name="bitmap">A <see cref="T:FreeImageAPI.FreeImageBitmap"/> that contains the frame to add.</param>
            <exception cref="T:System.InvalidOperationException">
            This instance has not yet been saved to a file using the Save(...) method.</exception>
        </member>
        <member name="M:FreeImageAPI.FreeImageBitmap.SaveAdd(FreeImageAPI.FreeImageBitmap,System.Int32)">
            <summary>
            Adds a frame to the file specified in a previous call to the <see cref="M:FreeImageAPI.FreeImageBitmap.Save(System.String)"/> method.
            </summary>
            <param name="bitmap">A <see cref="T:FreeImageAPI.FreeImageBitmap"/> that contains the frame to add.</param>
            <param name="insertPosition">The position at which the frame should be inserted.</param>
            <exception cref="T:System.InvalidOperationException">
            This instance has not yet been saved to a file using the Save(...) method.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="insertPosition"/> is out of range.</exception>
        </member>
        <member name="M:FreeImageAPI.FreeImageBitmap.SaveAdd(System.String)">
            <summary>
            Adds a frame to the file specified.
            </summary>
            <param name="filename">File to add this frame to.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="filename"/> is a null reference.</exception>
            <exception cref="T:System.IO.FileNotFoundException"><paramref name="filename"/> does not exist.</exception>
            <exception cref="T:System.Exception">Saving the image has failed.</exception>
        </member>
        <member name="M:FreeImageAPI.FreeImageBitmap.SaveAdd(System.String,System.Int32)">
            <summary>
            Adds a frame to the file specified.
            </summary>
            <param name="filename">File to add this frame to.</param>
            <param name="insertPosition">The position at which the frame should be inserted.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="filename"/> is a null reference.</exception>
            <exception cref="T:System.IO.FileNotFoundException"><paramref name="filename"/> does not exist.</exception>
            <exception cref="T:System.Exception">Saving the image has failed.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="insertPosition"/> is out of range.</exception>
        </member>
        <member name="M:FreeImageAPI.FreeImageBitmap.SaveAdd(System.String,FreeImageAPI.FREE_IMAGE_FORMAT,FreeImageAPI.FREE_IMAGE_LOAD_FLAGS,FreeImageAPI.FREE_IMAGE_SAVE_FLAGS)">
            <summary>
            Adds a frame to the file specified using the specified parameters.
            </summary>
            <param name="filename">File to add this frame to.</param>
            <param name="format">Format of the image.</param>
            <param name="loadFlags">Flags to enable or disable plugin-features.</param>
            <param name="saveFlags">Flags to enable or disable plugin-features.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="filename"/> is a null reference.</exception>
            <exception cref="T:System.IO.FileNotFoundException"><paramref name="filename"/> does not exist.</exception>
            <exception cref="T:System.Exception">Saving the image has failed.</exception>
        </member>
        <member name="M:FreeImageAPI.FreeImageBitmap.SaveAdd(System.String,System.Int32,FreeImageAPI.FREE_IMAGE_FORMAT,FreeImageAPI.FREE_IMAGE_LOAD_FLAGS,FreeImageAPI.FREE_IMAGE_SAVE_FLAGS)">
            <summary>
            Adds a frame to the file specified using the specified parameters.
            </summary>
            <param name="filename">File to add this frame to.</param>
            <param name="insertPosition">The position at which the frame should be inserted.</param>
            <param name="format">Format of the image.</param>
            <param name="loadFlags">Flags to enable or disable plugin-features.</param>
            <param name="saveFlags">Flags to enable or disable plugin-features.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="filename"/> is a null reference.</exception>
            <exception cref="T:System.IO.FileNotFoundException"><paramref name="filename"/> does not exist.</exception>
            <exception cref="T:System.Exception">Saving the image has failed.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="insertPosition"/> is out of range.</exception>
        </member>
        <member name="M:FreeImageAPI.FreeImageBitmap.SelectActiveFrame(System.Int32)">
            <summary>
            Selects the frame specified by the index.
            </summary>
            <param name="frameIndex">The index of the active frame.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <paramref name="frameIndex"/> is out of range.</exception>
            <exception cref="T:System.Exception">The operation failed.</exception>
            <exception cref="T:System.InvalidOperationException">The source of the bitmap is not available.
            </exception>
        </member>
        <member name="M:FreeImageAPI.FreeImageBitmap.GetHbitmap">
            <summary>
            Creates a GDI bitmap object from this <see cref="T:FreeImageAPI.FreeImageBitmap"/>.
            </summary>
            <returns>A handle to the GDI bitmap object that this method creates.</returns>
        </member>
        <member name="M:FreeImageAPI.FreeImageBitmap.GetHbitmap(System.Drawing.Color)">
            <summary>
            Creates a GDI bitmap object from this <see cref="T:FreeImageAPI.FreeImageBitmap"/>.
            </summary>
            <param name="background">A <see cref="T:System.Drawing.Color"/> structure that specifies the background color.
            This parameter is ignored if the bitmap is totally opaque.</param>
            <returns>A handle to the GDI bitmap object that this method creates.</returns>
        </member>
        <member name="M:FreeImageAPI.FreeImageBitmap.GetHicon">
            <summary>
            Returns the handle to an icon.
            </summary>
            <returns>A Windows handle to an icon with the same image as this <see cref="T:FreeImageAPI.FreeImageBitmap"/>.</returns>
        </member>
        <member name="M:FreeImageAPI.FreeImageBitmap.GetHbitmapForDevice">
            <summary>
            Creates a GDI bitmap object from this <see cref="T:FreeImageAPI.FreeImageBitmap"/> with the same
            color depth as the primary device.
            </summary>
            <returns>A handle to the GDI bitmap object that this method creates.</returns>
        </member>
        <member name="M:FreeImageAPI.FreeImageBitmap.GetPixel(System.Int32,System.Int32)">
            <summary>
            Gets the <see cref="T:System.Drawing.Color"/> of the specified pixel in this <see cref="T:FreeImageAPI.FreeImageBitmap"/>.
            </summary>
            <param name="x">The x-coordinate of the pixel to retrieve.</param>
            <param name="y">The y-coordinate of the pixel to retrieve.</param>
            <returns>A <see cref="T:System.Drawing.Color"/> structure that represents the color of the specified pixel.</returns>
            <exception cref="T:System.Exception">The operation failed.</exception>
            <exception cref="T:System.NotSupportedException">The type of this bitmap is not supported.</exception>
        </member>
        <member name="M:FreeImageAPI.FreeImageBitmap.MakeTransparent">
            <summary>
            Makes the default transparent color transparent for this <see cref="T:FreeImageAPI.FreeImageBitmap"/>.
            </summary>
        </member>
        <member name="M:FreeImageAPI.FreeImageBitmap.MakeTransparent(System.Drawing.Color)">
            <summary>
            Makes the specified color transparent for this <see cref="T:FreeImageAPI.FreeImageBitmap"/>.
            </summary>
            <param name="transparentColor">The <see cref="T:System.Drawing.Color"/> structure that represents
            the color to make transparent.</param>
            <exception cref="T:System.NotImplementedException">
            This method is not implemented.</exception>
        </member>
        <member name="M:FreeImageAPI.FreeImageBitmap.SetPixel(System.Int32,System.Int32,System.Drawing.Color)">
            <summary>
            Sets the <see cref="T:System.Drawing.Color"/> of the specified pixel in this <see cref="T:FreeImageAPI.FreeImageBitmap"/>.
            </summary>
            <param name="x">The x-coordinate of the pixel to set.</param>
            <param name="y">The y-coordinate of the pixel to set.</param>
            <param name="color">A <see cref="T:System.Drawing.Color"/> structure that represents the color
            to assign to the specified pixel.</param>
            <exception cref="T:System.Exception">The operation failed.</exception>
            <exception cref="T:System.NotSupportedException">The type of this bitmap is not supported.</exception>
        </member>
        <member name="M:FreeImageAPI.FreeImageBitmap.SetResolution(System.Single,System.Single)">
            <summary>
            Sets the resolution for this <see cref="T:FreeImageAPI.FreeImageBitmap"/>.
            </summary>
            <param name="xDpi">The horizontal resolution, in dots per inch, of this <see cref="T:FreeImageAPI.FreeImageBitmap"/>.</param>
            <param name="yDpi">The vertical resolution, in dots per inch, of this <see cref="T:FreeImageAPI.FreeImageBitmap"/>.</param>
        </member>
        <member name="M:FreeImageAPI.FreeImageBitmap.LockBits(System.Drawing.Rectangle,System.Drawing.Imaging.ImageLockMode,System.Drawing.Imaging.PixelFormat)">
            <summary>
            This function is not yet implemented.
            </summary>
            <exception cref="T:System.NotImplementedException">
            This method is not implemented.</exception>
        </member>
        <member name="M:FreeImageAPI.FreeImageBitmap.LockBits(System.Drawing.Rectangle,System.Drawing.Imaging.ImageLockMode,System.Drawing.Imaging.PixelFormat,System.Drawing.Imaging.BitmapData)">
            <summary>
            This function is not yet implemented.
            </summary>
            <exception cref="T:System.NotImplementedException">
            This method is not implemented.</exception>
        </member>
        <member name="M:FreeImageAPI.FreeImageBitmap.UnlockBits(System.Drawing.Imaging.BitmapData)">
            <summary>
            This function is not yet implemented.
            </summary>
            <exception cref="T:System.NotImplementedException">
            This method is not implemented.</exception>
        </member>
        <member name="M:FreeImageAPI.FreeImageBitmap.ConvertColorDepth(FreeImageAPI.FREE_IMAGE_COLOR_DEPTH)">
            <summary>
            Converts this <see cref="T:FreeImageAPI.FreeImageBitmap"/> into a different color depth.
            The parameter <paramref name="bpp"/> specifies color depth, greyscale conversion
            and palette reorder.
            <para>Adding the <see cref="F:FreeImageAPI.FREE_IMAGE_COLOR_DEPTH.FICD_FORCE_GREYSCALE"/> flag
            will first perform a convesion to greyscale. This can be done with any target
            color depth.</para>
            <para>Adding the <see cref="F:FreeImageAPI.FREE_IMAGE_COLOR_DEPTH.FICD_REORDER_PALETTE"/> flag
            will allow the algorithm to reorder the palette. This operation will not be performed to
            non-greyscale images to prevent data loss by mistake.</para>
            </summary>
            <param name="bpp">A bitfield containing information about the conversion
            to perform.</param>
            <returns>Returns true on success, false on failure.</returns>
        </member>
        <member name="M:FreeImageAPI.FreeImageBitmap.ConvertType(FreeImageAPI.FREE_IMAGE_TYPE,System.Boolean)">
            <summary>
            Converts this <see cref="T:FreeImageAPI.FreeImageBitmap"/> <see cref="T:FreeImageAPI.FREE_IMAGE_TYPE"/> to
            <paramref name="type"/> initializing a new instance.
            In case source and destination type are the same, the operation fails.
            An error message can be catched using the 'Message' event.
            </summary>
            <param name="type">Destination type.</param>
            <param name="scaleLinear">True to scale linear, else false.</param>
            <returns>Returns true on success, false on failure.</returns>
        </member>
        <member name="M:FreeImageAPI.FreeImageBitmap.GetTypeConvertedInstance(FreeImageAPI.FREE_IMAGE_TYPE,System.Boolean)">
            <summary>
            Converts this <see cref="T:FreeImageAPI.FreeImageBitmap"/> <see cref="T:FreeImageAPI.FreeImageBitmap"/> to <paramref name="type"/>.
            In case source and destination type are the same, the operation fails.
            An error message can be catched using the 'Message' event.
            </summary>
            <param name="type">Destination type.</param>
            <param name="scaleLinear">True to scale linear, else false.</param>
            <returns>The converted instance.</returns>
        </member>
        <member name="M:FreeImageAPI.FreeImageBitmap.GetColorConvertedInstance(FreeImageAPI.FREE_IMAGE_COLOR_DEPTH)">
            <summary>
            Converts this <see cref="T:FreeImageAPI.FreeImageBitmap"/> into a different color depth initializing
            a new instance.
            The parameter <paramref name="bpp"/> specifies color depth, greyscale conversion
            and palette reorder.
            <para>Adding the <see cref="F:FreeImageAPI.FREE_IMAGE_COLOR_DEPTH.FICD_FORCE_GREYSCALE"/> flag will
            first perform a convesion to greyscale. This can be done with any target color depth.</para>
            <para>Adding the <see cref="F:FreeImageAPI.FREE_IMAGE_COLOR_DEPTH.FICD_REORDER_PALETTE"/> flag will
            allow the algorithm to reorder the palette. This operation will not be performed to
            non-greyscale images to prevent data loss by mistake.</para>
            </summary>
            <param name="bpp">A bitfield containing information about the conversion
            to perform.</param>
            <returns>The converted instance.</returns>
        </member>
        <member name="M:FreeImageAPI.FreeImageBitmap.Rescale(System.Drawing.Size,FreeImageAPI.FREE_IMAGE_FILTER)">
            <summary>
            Rescales this <see cref="T:FreeImageAPI.FreeImageBitmap"/> to the specified size using the
            specified filter.
            </summary>
            <param name="newSize">The Size structure that represent the
            size of the new <see cref="T:FreeImageAPI.FreeImageBitmap"/>.</param>
            <param name="filter">Filter to use for resizing.</param>
            <returns>Returns true on success, false on failure.</returns>
        </member>
        <member name="M:FreeImageAPI.FreeImageBitmap.Rescale(System.Int32,System.Int32,FreeImageAPI.FREE_IMAGE_FILTER)">
            <summary>
            Rescales this <see cref="T:FreeImageAPI.FreeImageBitmap"/> to the specified size using the
            specified filter.
            </summary>
            <param name="width">Width of the new <see cref="T:FreeImageAPI.FreeImageBitmap"/>.</param>
            <param name="height">Height of the new <see cref="T:FreeImageAPI.FreeImageBitmap"/>.</param>
            <param name="filter">Filter to use for resizing.</param>
            <returns>Returns true on success, false on failure.</returns>
        </member>
        <member name="M:FreeImageAPI.FreeImageBitmap.GetScaledInstance(System.Drawing.Size,FreeImageAPI.FREE_IMAGE_FILTER)">
            <summary>
            Rescales this <see cref="T:FreeImageAPI.FreeImageBitmap"/> to the specified size using the
            specified filter initializing a new instance.
            </summary>
            <param name="newSize">The Size structure that represent the
            size of the new <see cref="T:FreeImageAPI.FreeImageBitmap"/>.</param>
            <param name="filter">Filter to use for resizing.</param>
            <returns>The rescaled instance.</returns>
        </member>
        <member name="M:FreeImageAPI.FreeImageBitmap.GetScaledInstance(System.Int32,System.Int32,FreeImageAPI.FREE_IMAGE_FILTER)">
            <summary>
            Rescales this <see cref="T:FreeImageAPI.FreeImageBitmap"/> to the specified size using the
            specified filter initializing a new instance.
            </summary>
            <param name="width">Width of the new <see cref="T:FreeImageAPI.FreeImageBitmap"/>.</param>
            <param name="height">Height of the new <see cref="T:FreeImageAPI.FreeImageBitmap"/>.</param>
            <param name="filter">Filter to use for resizing.</param>
            <returns>The rescaled instance.</returns>
        </member>
        <member name="M:FreeImageAPI.FreeImageBitmap.EnlargeCanvas``1(System.Int32,System.Int32,System.Int32,System.Int32,System.Nullable{``0})">
            <summary>
            Enlarges or shrinks this <see cref="T:FreeImageAPI.FreeImageBitmap"/> selectively per side and fills
            newly added areas with the specified background color.
            See <see cref="M:FreeImageAPI.FreeImage.EnlargeCanvas``1(FreeImageAPI.FIBITMAP,System.Int32,System.Int32,System.Int32,System.Int32,System.Nullable{``0},FreeImageAPI.FREE_IMAGE_COLOR_OPTIONS)"/> for further details.
            </summary>
            <typeparam name="T">The type of the specified color.</typeparam>
            <param name="left">The number of pixels, the image should be enlarged on its left side.
            Negative values shrink the image on its left side.</param>
            <param name="top">The number of pixels, the image should be enlarged on its top side.
            Negative values shrink the image on its top side.</param>
            <param name="right">The number of pixels, the image should be enlarged on its right side.
            Negative values shrink the image on its right side.</param>
            <param name="bottom">The number of pixels, the image should be enlarged on its bottom side.
            Negative values shrink the image on its bottom side.</param>
            <param name="color">The color, the enlarged sides of the image should be filled with.</param>
            <returns><c>true</c> on success, <c>false</c> on failure.</returns>
        </member>
        <member name="M:FreeImageAPI.FreeImageBitmap.EnlargeCanvas``1(System.Int32,System.Int32,System.Int32,System.Int32,System.Nullable{``0},FreeImageAPI.FREE_IMAGE_COLOR_OPTIONS)">
            <summary>
            Enlarges or shrinks this <see cref="T:FreeImageAPI.FreeImageBitmap"/> selectively per side and fills
            newly added areas with the specified background color.
            See <see cref="M:FreeImageAPI.FreeImage.EnlargeCanvas``1(FreeImageAPI.FIBITMAP,System.Int32,System.Int32,System.Int32,System.Int32,System.Nullable{``0},FreeImageAPI.FREE_IMAGE_COLOR_OPTIONS)"/> for further details.
            </summary>
            <typeparam name="T">The type of the specified color.</typeparam>
            <param name="left">The number of pixels, the image should be enlarged on its left side.
            Negative values shrink the image on its left side.</param>
            <param name="top">The number of pixels, the image should be enlarged on its top side.
            Negative values shrink the image on its top side.</param>
            <param name="right">The number of pixels, the image should be enlarged on its right side.
            Negative values shrink the image on its right side.</param>
            <param name="bottom">The number of pixels, the image should be enlarged on its bottom side.
            Negative values shrink the image on its bottom side.</param>
            <param name="color">The color, the enlarged sides of the image should be filled with.</param>
            <param name="options">Options that affect the color search process for palletized images.</param>
            <returns><c>true</c> on success, <c>false</c> on failure.</returns>
        </member>
        <member name="M:FreeImageAPI.FreeImageBitmap.GetEnlargedInstance``1(System.Int32,System.Int32,System.Int32,System.Int32,System.Nullable{``0})">
            <summary>
            Enlarges or shrinks this <see cref="T:FreeImageAPI.FreeImageBitmap"/> selectively per side and fills
            newly added areas with the specified background color returning a new instance.
            See <see cref="M:FreeImageAPI.FreeImage.EnlargeCanvas``1(FreeImageAPI.FIBITMAP,System.Int32,System.Int32,System.Int32,System.Int32,System.Nullable{``0},FreeImageAPI.FREE_IMAGE_COLOR_OPTIONS)"/> for further details.
            </summary>
            <typeparam name="T">The type of the specified color.</typeparam>
            <param name="left">The number of pixels, the image should be enlarged on its left side.
            Negative values shrink the image on its left side.</param>
            <param name="top">The number of pixels, the image should be enlarged on its top side.
            Negative values shrink the image on its top side.</param>
            <param name="right">The number of pixels, the image should be enlarged on its right side.
            Negative values shrink the image on its right side.</param>
            <param name="bottom">The number of pixels, the image should be enlarged on its bottom side.
            Negative values shrink the image on its bottom side.</param>
            <param name="color">The color, the enlarged sides of the image should be filled with.</param>
            <returns>The enlarged instance.</returns>
        </member>
        <member name="M:FreeImageAPI.FreeImageBitmap.GetEnlargedInstance``1(System.Int32,System.Int32,System.Int32,System.Int32,System.Nullable{``0},FreeImageAPI.FREE_IMAGE_COLOR_OPTIONS)">
            <summary>
            Enlarges or shrinks this <see cref="T:FreeImageAPI.FreeImageBitmap"/> selectively per side and fills
            newly added areas with the specified background color returning a new instance.
            See <see cref="M:FreeImageAPI.FreeImage.EnlargeCanvas``1(FreeImageAPI.FIBITMAP,System.Int32,System.Int32,System.Int32,System.Int32,System.Nullable{``0},FreeImageAPI.FREE_IMAGE_COLOR_OPTIONS)"/> for further details.
            </summary>
            <typeparam name="T">The type of the specified color.</typeparam>
            <param name="left">The number of pixels, the image should be enlarged on its left side.
            Negative values shrink the image on its left side.</param>
            <param name="top">The number of pixels, the image should be enlarged on its top side.
            Negative values shrink the image on its top side.</param>
            <param name="right">The number of pixels, the image should be enlarged on its right side.
            Negative values shrink the image on its right side.</param>
            <param name="bottom">The number of pixels, the image should be enlarged on its bottom side.
            Negative values shrink the image on its bottom side.</param>
            <param name="color">The color, the enlarged sides of the image should be filled with.</param>
            <param name="options">Options that affect the color search process for palletized images.</param>
            <returns>The enlarged instance.</returns>
        </member>
        <member name="M:FreeImageAPI.FreeImageBitmap.Quantize(FreeImageAPI.FREE_IMAGE_QUANTIZE,System.Int32)">
            <summary>
            Quantizes this <see cref="T:FreeImageAPI.FreeImageBitmap"/> from 24 bit to 8bit creating a new
            palette with the specified <paramref name="paletteSize"/> using the specified
            <paramref name="algorithm"/>.
            </summary>
            <param name="algorithm">The color reduction algorithm to be used.</param>
            <param name="paletteSize">Size of the desired output palette.</param>
            <returns>Returns true on success, false on failure.</returns>
        </member>
        <member name="M:FreeImageAPI.FreeImageBitmap.Quantize(FreeImageAPI.FREE_IMAGE_QUANTIZE,System.Int32,FreeImageAPI.Palette)">
            <summary>
            Quantizes this <see cref="T:FreeImageAPI.FreeImageBitmap"/> from 24 bit to 8bit creating a new
            palette with the specified <paramref name="paletteSize"/> using the specified
            <paramref name="algorithm"/> and the specified
            <paramref name="reservePalette">palette</paramref> up to the
            specified <paramref name="paletteSize">length</paramref>.
            </summary>
            <param name="algorithm">The color reduction algorithm to be used.</param>
            <param name="paletteSize">Size of the desired output palette.</param>
            <param name="reservePalette">The provided palette.</param>
            <returns>Returns true on success, false on failure.</returns>
        </member>
        <member name="M:FreeImageAPI.FreeImageBitmap.Quantize(FreeImageAPI.FREE_IMAGE_QUANTIZE,System.Int32,System.Int32,FreeImageAPI.Palette)">
            <summary>
            Quantizes this <see cref="T:FreeImageAPI.FreeImageBitmap"/> from 24 bit to 8bit creating a new
            palette with the specified <paramref name="paletteSize"/> using the specified
            <paramref name="algorithm"/> and the specified
            <paramref name="reservePalette">palette</paramref> up to the
            specified <paramref name="paletteSize">length</paramref>.
            </summary>
            <param name="algorithm">The color reduction algorithm to be used.</param>
            <param name="paletteSize">Size of the desired output palette.</param>
            <param name="reserveSize">Size of the provided palette of ReservePalette.</param>
            <param name="reservePalette">The provided palette.</param>
            <returns>Returns true on success, false on failure.</returns>
        </member>
        <member name="M:FreeImageAPI.FreeImageBitmap.Quantize(FreeImageAPI.FREE_IMAGE_QUANTIZE,System.Int32,System.Int32,FreeImageAPI.RGBQUAD[])">
            <summary>
            Quantizes this <see cref="T:FreeImageAPI.FreeImageBitmap"/> from 24 bit to 8bit creating a new
            palette with the specified <paramref name="paletteSize"/> using the specified
            <paramref name="algorithm"/> and the specified
            <paramref name="reservePalette">palette</paramref> up to the
            specified <paramref name="paletteSize">length</paramref>.
            </summary>
            <param name="algorithm">The color reduction algorithm to be used.</param>
            <param name="paletteSize">Size of the desired output palette.</param>
            <param name="reserveSize">Size of the provided palette of ReservePalette.</param>
            <param name="reservePalette">The provided palette.</param>
            <returns>Returns true on success, false on failure.</returns>
        </member>
        <member name="M:FreeImageAPI.FreeImageBitmap.GetQuantizedInstance(FreeImageAPI.FREE_IMAGE_QUANTIZE,System.Int32)">
            <summary>
            Quantizes this <see cref="T:FreeImageAPI.FreeImageBitmap"/> from 24 bit, using the specified
            <paramref name="algorithm"/> initializing a new 8 bit instance with the
            specified <paramref name="paletteSize"/>.
            </summary>
            <param name="algorithm">The color reduction algorithm to be used.</param>
            <param name="paletteSize">Size of the desired output palette.</param>
            <returns>The quantized instance.</returns>
        </member>
        <member name="M:FreeImageAPI.FreeImageBitmap.GetQuantizedInstance(FreeImageAPI.FREE_IMAGE_QUANTIZE,System.Int32,FreeImageAPI.Palette)">
            <summary>
            Quantizes this <see cref="T:FreeImageAPI.FreeImageBitmap"/> from 24 bit, using the specified
            <paramref name="algorithm"/> and <paramref name="reservePalette">palette</paramref>
            initializing a new 8 bit instance with the specified <paramref name="paletteSize"/>.
            </summary>
            <param name="algorithm">The color reduction algorithm to be used.</param>
            <param name="paletteSize">Size of the desired output palette.</param>
            <param name="reservePalette">The provided palette.</param>
            <returns>The quantized instance.</returns>
        </member>
        <member name="M:FreeImageAPI.FreeImageBitmap.GetQuantizedInstance(FreeImageAPI.FREE_IMAGE_QUANTIZE,System.Int32,System.Int32,FreeImageAPI.Palette)">
            <summary>
            Quantizes this <see cref="T:FreeImageAPI.FreeImageBitmap"/> from 24 bit, using the specified
            <paramref name="algorithm"/> and up to <paramref name="reserveSize"/>
            entries from <paramref name="reservePalette">palette</paramref> initializing
            a new 8 bit instance with the specified <paramref name="paletteSize"/>.
            </summary>
            <param name="algorithm">The color reduction algorithm to be used.</param>
            <param name="paletteSize">Size of the desired output palette.</param>
            <param name="reserveSize">Size of the provided palette.</param>
            <param name="reservePalette">The provided palette.</param>
            <returns>The quantized instance.</returns>
        </member>
        <member name="M:FreeImageAPI.FreeImageBitmap.GetQuantizedInstance(FreeImageAPI.FREE_IMAGE_QUANTIZE,System.Int32,System.Int32,FreeImageAPI.RGBQUAD[])">
            <summary>
            Quantizes this <see cref="T:FreeImageAPI.FreeImageBitmap"/> from 24 bit, using the specified
            <paramref name="algorithm"/> and up to <paramref name="reserveSize"/>
            entries from <paramref name="reservePalette">palette</paramref> initializing
            a new 8 bit instance with the specified <paramref name="paletteSize"/>.
            </summary>
            <param name="algorithm">The color reduction algorithm to be used.</param>
            <param name="paletteSize">Size of the desired output palette.</param>
            <param name="reserveSize">Size of the provided palette.</param>
            <param name="reservePalette">The provided palette.</param>
            <returns>The quantized instance.</returns>
        </member>
        <member name="M:FreeImageAPI.FreeImageBitmap.TmoDrago03(System.Double,System.Double)">
            <summary>
            Converts a High Dynamic Range image to a 24-bit RGB image using a global
            operator based on logarithmic compression of luminance values, imitating
            the human response to light.
            </summary>
            <param name="gamma">A gamma correction that is applied after the tone mapping.
            A value of 1 means no correction.</param>
            <param name="exposure">Scale factor allowing to adjust the brightness of the output image.</param>
            <returns>Returns true on success, false on failure.</returns>
        </member>
        <member name="M:FreeImageAPI.FreeImageBitmap.TmoReinhard05(System.Double,System.Double)">
            <summary>
            Converts a High Dynamic Range image to a 24-bit RGB image using a global operator inspired
            by photoreceptor physiology of the human visual system.
            </summary>
            <param name="intensity">Controls the overall image intensity in the range [-8, 8].</param>
            <param name="contrast">Controls the overall image contrast in the range [0.3, 1.0[.</param>
            <returns>Returns true on success, false on failure.</returns>
        </member>
        <member name="M:FreeImageAPI.FreeImageBitmap.TmoFattal02(System.Double,System.Double)">
            <summary>
            Apply the Gradient Domain High Dynamic Range Compression to a RGBF image and convert to 24-bit RGB.
            </summary>
            <param name="color_saturation">Color saturation (s parameter in the paper) in [0.4..0.6]</param>
            <param name="attenuation">Atenuation factor (beta parameter in the paper) in [0.8..0.9]</param>
            <returns>Returns true on success, false on failure.</returns>
        </member>
        <member name="M:FreeImageAPI.FreeImageBitmap.Rotate(System.Double)">
            <summary>
            This method rotates a 1-, 4-, 8-bit greyscale or a 24-, 32-bit color image by means of 3 shears.
            For 1- and 4-bit images, rotation is limited to angles whose value is an integer
            multiple of 90.
            </summary>
            <param name="angle">The angle of rotation.</param>
            <returns>Returns true on success, false on failure.</returns>
        </member>
        <member name="M:FreeImageAPI.FreeImageBitmap.Rotate``1(System.Double,System.Nullable{``0})">
            <summary>
            This method rotates a 1-, 4-, 8-bit greyscale or a 24-, 32-bit color image by means of 3 shears.
            For 1- and 4-bit images, rotation is limited to angles whose value is an integer
            multiple of 90.
            </summary>
            <typeparam name="T">The type of the color to use as background.</typeparam>
            <param name="angle">The angle of rotation.</param>
            <param name="backgroundColor">The color used used to fill the bitmap's background.</param>
            <returns>Returns true on success, false on failure.</returns>
        </member>
        <member name="M:FreeImageAPI.FreeImageBitmap.GetRotatedInstance``1(System.Double,System.Nullable{``0})">
            <summary>
            Rotates this <see cref="T:FreeImageAPI.FreeImageBitmap"/> by the specified angle initializing a new instance.
            For 1- and 4-bit images, rotation is limited to angles whose value is an integer
            multiple of 90.
            </summary>
            <typeparam name="T">The type of the color to use as background.</typeparam>
            <param name="angle">The angle of rotation.</param>
            <param name="backgroundColor">The color used used to fill the bitmap's background.</param>
            <returns>The rotated instance.</returns>
        </member>
        <member name="M:FreeImageAPI.FreeImageBitmap.GetRotatedInstance(System.Double)">
            <summary>
            Rotates this <see cref="T:FreeImageAPI.FreeImageBitmap"/> by the specified angle initializing a new instance.
            For 1- and 4-bit images, rotation is limited to angles whose value is an integer
            multiple of 90.
            </summary>
            <param name="angle">The angle of rotation.</param>
            <returns>The rotated instance.</returns>
        </member>
        <member name="M:FreeImageAPI.FreeImageBitmap.Rotate(System.Double,System.Double,System.Double,System.Double,System.Double,System.Boolean)">
            <summary>
            This method performs a rotation and / or translation of an 8-bit greyscale,
            24- or 32-bit image, using a 3rd order (cubic) B-Spline.
            </summary>
            <param name="angle">The angle of rotation.</param>
            <param name="xShift">Horizontal image translation.</param>
            <param name="yShift">Vertical image translation.</param>
            <param name="xOrigin">Rotation center x-coordinate.</param>
            <param name="yOrigin">Rotation center y-coordinate.</param>
            <param name="useMask">When true the irrelevant part of the image is set to a black color,
            otherwise, a mirroring technique is used to fill irrelevant pixels.</param>
            <returns>Returns true on success, false on failure.</returns>
        </member>
        <member name="M:FreeImageAPI.FreeImageBitmap.GetRotatedInstance(System.Double,System.Double,System.Double,System.Double,System.Double,System.Boolean)">
            <summary>
            This method performs a rotation and / or translation of an 8-bit greyscale,
            24- or 32-bit image, using a 3rd order (cubic) B-Spline initializing a new instance.
            </summary>
            <param name="angle">The angle of rotation.</param>
            <param name="xShift">Horizontal image translation.</param>
            <param name="yShift">Vertical image translation.</param>
            <param name="xOrigin">Rotation center x-coordinate.</param>
            <param name="yOrigin">Rotation center y-coordinate.</param>
            <param name="useMask">When true the irrelevant part of the image is set to a black color,
            otherwise, a mirroring technique is used to fill irrelevant pixels.</param>
            <returns>The rotated instance.</returns>
        </member>
        <member name="M:FreeImageAPI.FreeImageBitmap.AdjustCurve(System.Byte[],FreeImageAPI.FREE_IMAGE_COLOR_CHANNEL)">
            <summary>
            Perfoms an histogram transformation on a 8-, 24- or 32-bit image.
            </summary>
            <param name="lookUpTable">The lookup table (LUT).
            It's size is assumed to be 256 in length.</param>
            <param name="channel">The color channel to be transformed.</param>
            <returns>Returns true on success, false on failure.</returns>
        </member>
        <member name="M:FreeImageAPI.FreeImageBitmap.AdjustGamma(System.Double)">
            <summary>
            Performs gamma correction on a 8-, 24- or 32-bit image.
            </summary>
            <param name="gamma">The parameter represents the gamma value to use (gamma > 0).
            A value of 1.0 leaves the image alone, less than one darkens it, and greater than one lightens it.</param>
            <returns>Returns true on success, false on failure.</returns>
        </member>
        <member name="M:FreeImageAPI.FreeImageBitmap.AdjustBrightness(System.Double)">
            <summary>
            Adjusts the brightness of a 8-, 24- or 32-bit image by a certain amount.
            </summary>
            <param name="percentage">A value 0 means no change,
            less than 0 will make the image darker and greater than 0 will make the image brighter.</param>
            <returns>Returns true on success, false on failure.</returns>
        </member>
        <member name="M:FreeImageAPI.FreeImageBitmap.AdjustContrast(System.Double)">
            <summary>
            Adjusts the contrast of a 8-, 24- or 32-bit image by a certain amount.
            </summary>
            <param name="percentage">A value 0 means no change,
            less than 0 will decrease the contrast and greater than 0 will increase the contrast of the image.</param>
            <returns>Returns true on success, false on failure.</returns>
        </member>
        <member name="M:FreeImageAPI.FreeImageBitmap.Invert">
            <summary>
            Inverts each pixel data.
            </summary>
            <returns>Returns true on success, false on failure.</returns>
        </member>
        <member name="M:FreeImageAPI.FreeImageBitmap.GetHistogram(FreeImageAPI.FREE_IMAGE_COLOR_CHANNEL,System.Int32[]@)">
            <summary>
            Computes the image histogram.
            </summary>
            <param name="channel">Channel to compute from.</param>
            <param name="histogram">Array of integers containing the histogram.</param>
            <returns>Returns true on success, false on failure.</returns>
        </member>
        <member name="M:FreeImageAPI.FreeImageBitmap.GetChannel(FreeImageAPI.FREE_IMAGE_COLOR_CHANNEL)">
            <summary>
            Retrieves the red, green, blue or alpha channel of a 24- or 32-bit image.
            </summary>
            <param name="channel">The color channel to extract.</param>
            <returns>The color channel in a new instance.</returns>
        </member>
        <member name="M:FreeImageAPI.FreeImageBitmap.SetChannel(FreeImageAPI.FreeImageBitmap,FreeImageAPI.FREE_IMAGE_COLOR_CHANNEL)">
            <summary>
            Insert a 8-bit dib into a 24- or 32-bit image.
            Both images must have to same width and height.
            </summary>
            <param name="bitmap">The <see cref="T:FreeImageAPI.FreeImageBitmap"/> to insert.</param>
            <param name="channel">The color channel to replace.</param>
            <returns>Returns true on success, false on failure.</returns>
        </member>
        <member name="M:FreeImageAPI.FreeImageBitmap.GetComplexChannel(FreeImageAPI.FREE_IMAGE_COLOR_CHANNEL)">
            <summary>
            Retrieves the real part, imaginary part, magnitude or phase of a complex image.
            </summary>
            <param name="channel">The color channel to extract.</param>
            <returns>The color channel in a new instance.</returns>
        </member>
        <member name="M:FreeImageAPI.FreeImageBitmap.SetComplexChannel(FreeImageAPI.FreeImageBitmap,FreeImageAPI.FREE_IMAGE_COLOR_CHANNEL)">
            <summary>
            Set the real or imaginary part of a complex image.
            Both images must have to same width and height.
            </summary>
            <param name="bitmap">The <see cref="T:FreeImageAPI.FreeImageBitmap"/> to insert.</param>
            <param name="channel">The color channel to replace.</param>
            <returns>Returns true on success, false on failure.</returns>
        </member>
        <member name="M:FreeImageAPI.FreeImageBitmap.Copy(System.Drawing.Rectangle)">
            <summary>
            Copy a sub part of this <see cref="T:FreeImageAPI.FreeImageBitmap"/>.
            </summary>
            <param name="rect">The subpart to copy.</param>
            <returns>The sub part in a new instance.</returns>
        </member>
        <member name="M:FreeImageAPI.FreeImageBitmap.Copy(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Copy a sub part of this <see cref="T:FreeImageAPI.FreeImageBitmap"/>.
            </summary>
            <param name="left">Specifies the left position of the cropped rectangle.</param>
            <param name="top">Specifies the top position of the cropped rectangle.</param>
            <param name="right">Specifies the right position of the cropped rectangle.</param>
            <param name="bottom">Specifies the bottom position of the cropped rectangle.</param>
            <returns>The sub part in a new instance.</returns>
        </member>
        <member name="M:FreeImageAPI.FreeImageBitmap.Paste(FreeImageAPI.FreeImageBitmap,System.Int32,System.Int32,System.Int32)">
            <summary>
            Alpha blend or combine a sub part image with this <see cref="T:FreeImageAPI.FreeImageBitmap"/>.
            The bit depth of <paramref name="bitmap"/> must be greater than or equal to the bit depth this instance.
            </summary>
            <param name="bitmap">The <see cref="T:FreeImageAPI.FreeImageBitmap"/> to paste into this instance.</param>
            <param name="left">Specifies the left position of the sub image.</param>
            <param name="top">Specifies the top position of the sub image.</param>
            <param name="alpha">alpha blend factor.
            The source and destination images are alpha blended if alpha=0..255.
            If alpha &gt; 255, then the source image is combined to the destination image.</param>
            <returns>Returns true on success, false on failure.</returns>
        </member>
        <member name="M:FreeImageAPI.FreeImageBitmap.Paste(FreeImageAPI.FreeImageBitmap,System.Drawing.Point,System.Int32)">
            <summary>
            Alpha blend or combine a sub part image with tthis <see cref="T:FreeImageAPI.FreeImageBitmap"/>.
            The bit depth of <paramref name="bitmap"/> must be greater than or equal to the bit depth this instance.
            </summary>
            <param name="bitmap">The <see cref="T:FreeImageAPI.FreeImageBitmap"/> to paste into this instance.</param>
            <param name="point">Specifies the position of the sub image.</param>
            <param name="alpha">alpha blend factor.
            The source and destination images are alpha blended if alpha=0..255.
            If alpha &gt; 255, then the source image is combined to the destination image.</param>
            <returns>Returns true on success, false on failure.</returns>
        </member>
        <member name="M:FreeImageAPI.FreeImageBitmap.Composite(System.Boolean,System.Nullable{System.Drawing.Color},FreeImageAPI.FreeImageBitmap)">
            <summary>
            This method composite a transparent foreground image against a single background color or
            against a background image.
            In case <paramref name="useBitmapBackground"/> is false and <paramref name="applicationBackground"/>
            and <paramref name="bitmapBackGround"/>
            are null, a checkerboard will be used as background.
            </summary>
            <param name="useBitmapBackground">When true the background of this instance is used
            if it contains one.</param>
            <param name="applicationBackground">Backgroundcolor used in case <paramref name="useBitmapBackground"/> is false
            and <paramref name="applicationBackground"/> is not null.</param>
            <param name="bitmapBackGround">Background used in case <paramref name="useBitmapBackground"/>
            is false and <paramref name="applicationBackground"/> is a null reference.</param>
            <returns>Returns true on success, false on failure.</returns>
        </member>
        <member name="M:FreeImageAPI.FreeImageBitmap.PreMultiplyWithAlpha">
            <summary>
            Applies the alpha value of each pixel to its color components.
            The aplha value stays unchanged.
            Only works with 32-bits color depth.
            </summary>
            <returns>Returns true on success, false on failure.</returns>
        </member>
        <member name="M:FreeImageAPI.FreeImageBitmap.MultigridPoissonSolver(System.Int32)">
            <summary>
            Solves a Poisson equation, remap result pixels to [0..1] and returns the solution.
            </summary>
            <param name="ncycle">Number of cycles in the multigrid algorithm (usually 2 or 3)</param>
            <returns>Returns true on success, false on failure.</returns>
        </member>
        <member name="M:FreeImageAPI.FreeImageBitmap.AdjustColors(System.Double,System.Double,System.Double,System.Boolean)">
            <summary>
            Adjusts an image's brightness, contrast and gamma as well as it may
            optionally invert the image within a single operation.
            </summary>
            <param name="brightness">Percentage brightness value where -100 &lt;= brightness &lt;= 100.
            <para>A value of 0 means no change, less than 0 will make the image darker and greater
            than 0 will make the image brighter.</para></param>
            <param name="contrast">Percentage contrast value where -100 &lt;= contrast &lt;= 100.
            <para>A value of 0 means no change, less than 0 will decrease the contrast
            and greater than 0 will increase the contrast of the image.</para></param>
            <param name="gamma">Gamma value to be used for gamma correction.
            <para>A value of 1.0 leaves the image alone, less than one darkens it,
            and greater than one lightens it.</para>
            This parameter must not be zero or smaller than zero.
            If so, it will be ignored and no gamma correction will be performed on the image.</param>
            <param name="invert">If set to true, the image will be inverted.</param>
            <returns>Returns true on success, false on failure.</returns>
        </member>
        <member name="M:FreeImageAPI.FreeImageBitmap.ApplyColorMapping(FreeImageAPI.RGBQUAD[],FreeImageAPI.RGBQUAD[],System.Boolean,System.Boolean)">
            <summary>
            Applies color mapping for one or several colors on a 1-, 4- or 8-bit
            palletized or a 16-, 24- or 32-bit high color image.
            </summary>
            <param name="srccolors">Array of colors to be used as the mapping source.</param>
            <param name="dstcolors">Array of colors to be used as the mapping destination.</param>
            <param name="ignore_alpha">If true, 32-bit images and colors are treated as 24-bit.</param>
            <param name="swap">If true, source and destination colors are swapped, that is,
            each destination color is also mapped to the corresponding source color.</param>
            <returns>The total number of pixels changed.</returns>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="srccolors"/> or <paramref name="dstcolors"/> is a null reference.
            </exception>
            <exception cref="T:System.ArgumentException">
            <paramref name="srccolors"/> has a different length than <paramref name="dstcolors"/>.
            </exception>
        </member>
        <member name="M:FreeImageAPI.FreeImageBitmap.SwapColors(FreeImageAPI.RGBQUAD,FreeImageAPI.RGBQUAD,System.Boolean)">
            <summary>
            Swaps two specified colors on a 1-, 4- or 8-bit palletized
            or a 16-, 24- or 32-bit high color image.
            </summary>
            <param name="color_a">One of the two colors to be swapped.</param>
            <param name="color_b">The other of the two colors to be swapped.</param>
            <param name="ignore_alpha">If true, 32-bit images and colors are treated as 24-bit.</param>
            <returns>The total number of pixels changed.</returns>
        </member>
        <member name="M:FreeImageAPI.FreeImageBitmap.ApplyPaletteIndexMapping(System.Byte[],System.Byte[],System.UInt32,System.Boolean)">
            <summary>
            Applies palette index mapping for one or several indices
            on a 1-, 4- or 8-bit palletized image.
            </summary>
            <param name="srcindices">Array of palette indices to be used as the mapping source.</param>
            <param name="dstindices">Array of palette indices to be used as the mapping destination.</param>
            <param name="count">The number of palette indices to be mapped. This is the size of both
            srcindices and dstindices</param>
            <param name="swap">If true, source and destination palette indices are swapped, that is,
            each destination index is also mapped to the corresponding source index.</param>
            <returns>The total number of pixels changed.</returns>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="srccolors"/> or <paramref name="dstcolors"/> is a null reference.
            </exception>
            <exception cref="T:System.ArgumentException">
            <paramref name="srccolors"/> has a different length than <paramref name="dstcolors"/>.
            </exception>
        </member>
        <member name="M:FreeImageAPI.FreeImageBitmap.SwapPaletteIndices(System.Byte,System.Byte)">
            <summary>
            Swaps two specified palette indices on a 1-, 4- or 8-bit palletized image.
            </summary>
            <param name="index_a">One of the two palette indices to be swapped.</param>
            <param name="index_b">The other of the two palette indices to be swapped.</param>
            <returns>The total number of pixels changed.</returns>
        </member>
        <member name="M:FreeImageAPI.FreeImageBitmap.FillBackground``1(``0)">
            <summary>
            Sets all pixels of this <see cref="T:FreeImageAPI.FreeImageBitmap"/> to the specified color.
            See <see cref="M:FreeImageAPI.FreeImage.FillBackground``1(FreeImageAPI.FIBITMAP,``0,FreeImageAPI.FREE_IMAGE_COLOR_OPTIONS)"/> for further details.
            </summary>
            <typeparam name="T">The type of the specified color.</typeparam>
            <param name="color">The color to fill this <see cref="T:FreeImageAPI.FreeImageBitmap"/> with.</param>
            <returns><c>true</c> on success, <c>false</c> on failure.</returns>
        </member>
        <member name="M:FreeImageAPI.FreeImageBitmap.FillBackground``1(``0,FreeImageAPI.FREE_IMAGE_COLOR_OPTIONS)">
            <summary>
            Sets all pixels of this <see cref="T:FreeImageAPI.FreeImageBitmap"/> to the specified color.
            See <see cref="M:FreeImageAPI.FreeImage.FillBackground``1(FreeImageAPI.FIBITMAP,``0,FreeImageAPI.FREE_IMAGE_COLOR_OPTIONS)"/> for further details.
            </summary>
            <typeparam name="T">The type of the specified color.</typeparam>
            <param name="color">The color to fill this <see cref="T:FreeImageAPI.FreeImageBitmap"/> with.</param>
            <param name="options">Options that affect the color search process for palletized images.</param>
            <returns><c>true</c> on success, <c>false</c> on failure.</returns>
        </member>
        <member name="M:FreeImageAPI.FreeImageBitmap.CreateICCProfile(System.Byte[])">
            <summary>
            Creates a new ICC-Profile.
            </summary>
            <param name="data">The data of the new ICC-Profile.</param>
            <returns>The new ICC-Profile of the bitmap.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="data"/> is a null reference.</exception>
        </member>
        <member name="M:FreeImageAPI.FreeImageBitmap.CreateICCProfile(System.Byte[],System.Int32)">
            <summary>
            Creates a new ICC-Profile.
            </summary>
            <param name="data">The data of the new ICC-Profile.</param>
            <param name="size">The number of bytes of <paramref name="data"/> to use.</param>
            <returns>The new ICC-Profile of the bitmap.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="data"/> is null.</exception>
        </member>
        <member name="M:FreeImageAPI.FreeImageBitmap.Equals(System.Object)">
            <summary>
            Determines whether this and the specified instances are the same.
            </summary>
            <param name="obj">The object to test.</param>
            <returns><b>true</b> if this instance is the same <paramref name="obj"/>
            or if both are null references; otherwise, false.</returns>
        </member>
        <member name="M:FreeImageAPI.FreeImageBitmap.GetHashCode">
            <summary>
            Returns a hash code for this <see cref="T:FreeImageAPI.FreeImageBitmap"/> structure.
            </summary>
            <returns>An integer value that specifies the hash code for this <see cref="T:FreeImageAPI.FreeImageBitmap"/>.</returns>
        </member>
        <member name="M:FreeImageAPI.FreeImageBitmap.IsAlphaPixelFormat(System.Drawing.Imaging.PixelFormat)">
            <summary>
            Returns a value that indicates whether the pixel format for this <see cref="T:FreeImageAPI.FreeImageBitmap"/> contains alpha information.
            </summary>
            <param name="pixfmt">The <see cref="T:System.Drawing.Imaging.PixelFormat"/> to test.</param>
            <returns><b>true</b> if pixfmt contains alpha information; otherwise, <b>false</b>.</returns>
        </member>
        <member name="M:FreeImageAPI.FreeImageBitmap.IsCanonicalPixelFormat(System.Drawing.Imaging.PixelFormat)">
            <summary>
            Returns a value that indicates whether the pixel format is 32 bits per pixel.
            </summary>
            <param name="pixfmt">The <see cref="T:System.Drawing.Imaging.PixelFormat"/> to test.</param>
            <returns>true if pixfmt is canonical; otherwise, false.</returns>
        </member>
        <member name="M:FreeImageAPI.FreeImageBitmap.IsExtendedPixelFormat(System.Drawing.Imaging.PixelFormat)">
            <summary>
            Returns a value that indicates whether the pixel format is 64 bits per pixel.
            </summary>
            <param name="pixfmt">The <see cref="T:System.Drawing.Imaging.PixelFormat"/> enumeration to test.</param>
            <returns>true if pixfmt is extended; otherwise, false.</returns>
        </member>
        <member name="M:FreeImageAPI.FreeImageBitmap.FromHicon(System.IntPtr)">
            <summary>
            Creates a <see cref="T:FreeImageAPI.FreeImageBitmap"/> from a Windows handle to an icon.
            </summary>
            <param name="hicon">A handle to an icon.</param>
            <returns>The <see cref="T:FreeImageAPI.FreeImageBitmap"/> that this method creates.</returns>
        </member>
        <member name="M:FreeImageAPI.FreeImageBitmap.FromResource(System.IntPtr,System.String)">
            <summary>
            Creates a <see cref="T:FreeImageAPI.FreeImageBitmap"/> from the specified Windows resource.
            </summary>
            <param name="hinstance">A handle to an instance of the executable
            file that contains the resource.</param>
            <param name="bitmapName">A string containing the name of the resource bitmap.</param>
            <returns>The <see cref="T:FreeImageAPI.FreeImageBitmap"/> that this method creates.</returns>
        </member>
        <member name="M:FreeImageAPI.FreeImageBitmap.FromFile(System.String)">
            <summary>
            Creates a <see cref="T:FreeImageAPI.FreeImageBitmap"/> from the specified file.
            </summary>
            <param name="filename">A string that contains the name of the file
            from which to create the <see cref="T:FreeImageAPI.FreeImageBitmap"/>.</param>
            <returns>The <see cref="T:FreeImageAPI.FreeImageBitmap"/> this method creates.</returns>
        </member>
        <member name="M:FreeImageAPI.FreeImageBitmap.FromFile(System.String,System.Boolean)">
            <summary>
            Creates a <see cref="T:FreeImageAPI.FreeImageBitmap"/> from the specified file
            using embedded color management information in that file.
            </summary>
            <param name="filename">A string that contains the
            name of the file from which to create the <see cref="T:FreeImageAPI.FreeImageBitmap"/>.</param>
            <param name="useEmbeddedColorManagement">Ignored.</param>
            <returns>The <see cref="T:FreeImageAPI.FreeImageBitmap"/> this method creates.</returns>
        </member>
        <member name="M:FreeImageAPI.FreeImageBitmap.FromHbitmap(System.IntPtr)">
            <summary>
            Creates a <see cref="T:FreeImageAPI.FreeImageBitmap"/> from a handle to a GDI bitmap.
            </summary>
            <param name="hbitmap">The GDI bitmap handle from which to create the <see cref="T:FreeImageAPI.FreeImageBitmap"/>.</param>
            <returns>The <see cref="T:FreeImageAPI.FreeImageBitmap"/> this method creates.</returns>
        </member>
        <member name="M:FreeImageAPI.FreeImageBitmap.FromHbitmap(System.IntPtr,System.IntPtr)">
            <summary>
            Creates a <see cref="T:FreeImageAPI.FreeImageBitmap"/> from a handle to a GDI bitmap and a handle to a GDI palette.
            </summary>
            <param name="hbitmap">The GDI bitmap handle from which to create the <see cref="T:FreeImageAPI.FreeImageBitmap"/>.</param>
            <param name="hpalette">Ignored.</param>
            <returns>The <see cref="T:FreeImageAPI.FreeImageBitmap"/> this method creates.</returns>
        </member>
        <member name="M:FreeImageAPI.FreeImageBitmap.FreeHbitmap(System.IntPtr)">
            <summary>
            Frees a bitmap handle.
            </summary>
            <param name="hbitmap">Handle to a bitmap.</param>
            <returns><b>true</b> on success, <b>false</b> on failure.</returns>
        </member>
        <member name="M:FreeImageAPI.FreeImageBitmap.FromStream(System.IO.Stream)">
            <summary>
            Creates a <see cref="T:FreeImageAPI.FreeImageBitmap"/> from the specified data stream.
            </summary>
            <param name="stream">A <see cref="T:System.IO.Stream"/> that contains the data for this <see cref="T:FreeImageAPI.FreeImageBitmap"/>.</param>
            <returns>The <see cref="T:FreeImageAPI.FreeImageBitmap"/> this method creates.</returns>
        </member>
        <member name="M:FreeImageAPI.FreeImageBitmap.FromStream(System.IO.Stream,System.Boolean)">
            <summary>
            Creates a <see cref="T:FreeImageAPI.FreeImageBitmap"/> from the specified data stream.
            </summary>
            <param name="stream">A <see cref="T:System.IO.Stream"/> that contains the data for this <see cref="T:FreeImageAPI.FreeImageBitmap"/>.</param>
            <param name="useEmbeddedColorManagement">Ignored.</param>
            <returns>The <see cref="T:FreeImageAPI.FreeImageBitmap"/> this method creates.</returns>
        </member>
        <member name="M:FreeImageAPI.FreeImageBitmap.FromStream(System.IO.Stream,System.Boolean,System.Boolean)">
            <summary>
            Creates a <see cref="T:FreeImageAPI.FreeImageBitmap"/> from the specified data stream.
            </summary>
            <param name="stream">A <see cref="T:System.IO.Stream"/> that contains the data for this <see cref="T:FreeImageAPI.FreeImageBitmap"/>.</param>
            <param name="useEmbeddedColorManagement">Ignored.</param>
            <param name="validateImageData">Ignored.</param>
            <returns>The <see cref="T:FreeImageAPI.FreeImageBitmap"/> this method creates.</returns>
        </member>
        <member name="M:FreeImageAPI.FreeImageBitmap.GetPixelFormatSize(System.Drawing.Imaging.PixelFormat)">
            <summary>
            Returns the color depth, in number of bits per pixel,
            of the specified pixel format.
            </summary>
            <param name="pixfmt">The <see cref="T:System.Drawing.Imaging.PixelFormat"/> member that specifies
            the format for which to find the size.</param>
            <returns>The color depth of the specified pixel format.</returns>
        </member>
        <member name="M:FreeImageAPI.FreeImageBitmap.JPEGTransform(System.String,System.String,FreeImageAPI.FREE_IMAGE_JPEG_OPERATION,System.Boolean)">
            <summary>
            Performs a lossless rotation or flipping on a JPEG file.
            </summary>
            <param name="source">Source file.</param>
            <param name="destination">Destination file; can be the source file; will be overwritten.</param>
            <param name="operation">The operation to apply.</param>
            <param name="perfect">To avoid lossy transformation, you can set the perfect parameter to true.</param>
            <returns>Returns true on success, false on failure.</returns>
        </member>
        <member name="M:FreeImageAPI.FreeImageBitmap.JPEGCrop(System.String,System.String,System.Drawing.Rectangle)">
            <summary>
            Performs a lossless crop on a JPEG file.
            </summary>
            <param name="source">Source filename.</param>
            <param name="destination">Destination filename.</param>
            <param name="rect">Specifies the cropped rectangle.</param>
            <returns>Returns true on success, false on failure.</returns>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="source"/> or <paramref name="destination"/> is null.
            </exception>
            <exception cref="T:System.IO.FileNotFoundException">
            <paramref name="source"/> does not exist.
            </exception>
        </member>
        <member name="M:FreeImageAPI.FreeImageBitmap.JPEGCrop(System.String,System.String,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Performs a lossless crop on a JPEG file.
            </summary>
            <param name="source">Source filename.</param>
            <param name="destination">Destination filename.</param>
            <param name="left">Specifies the left position of the cropped rectangle.</param>
            <param name="top">Specifies the top position of the cropped rectangle.</param>
            <param name="right">Specifies the right position of the cropped rectangle.</param>
            <param name="bottom">Specifies the bottom position of the cropped rectangle.</param>
            <returns>Returns true on success, false on failure.</returns>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="source"/> or <paramref name="destination"/> is null.
            </exception>
            <exception cref="T:System.IO.FileNotFoundException">
            <paramref name="source"/> does not exist.
            </exception>
        </member>
        <member name="M:FreeImageAPI.FreeImageBitmap.LookupX11Color(System.String,System.Byte@,System.Byte@,System.Byte@)">
            <summary>
            Converts a X11 color name into a corresponding RGB value.
            </summary>
            <param name="color">Name of the color to convert.</param>
            <param name="red">Red component.</param>
            <param name="green">Green component.</param>
            <param name="blue">Blue component.</param>
            <returns>Returns true on success, false on failure.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="color"/> is null.</exception>
        </member>
        <member name="M:FreeImageAPI.FreeImageBitmap.LookupSVGColor(System.String,System.Byte@,System.Byte@,System.Byte@)">
            <summary>
            Converts a SVG color name into a corresponding RGB value.
            </summary>
            <param name="color">Name of the color to convert.</param>
            <param name="red">Red component.</param>
            <param name="green">Green component.</param>
            <param name="blue">Blue component.</param>
            <returns>Returns true on success, false on failure.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="color"/> is null.</exception>
        </member>
        <member name="M:FreeImageAPI.FreeImageBitmap.GetAdjustColorsLookupTable(System.Byte[],System.Double,System.Double,System.Double,System.Boolean)">
            <summary>
            Creates a lookup table to be used with AdjustCurve() which
            may adjusts brightness and contrast, correct gamma and invert the image with a
            single call to AdjustCurve().
            </summary>
            <param name="lookUpTable">Output lookup table to be used with AdjustCurve().
            The size of <paramref name="lookUpTable"/> is assumed to be 256.</param>
            <param name="brightness">Percentage brightness value where -100 &lt;= brightness &lt;= 100.
            <para>A value of 0 means no change, less than 0 will make the image darker and greater
            than 0 will make the image brighter.</para></param>
            <param name="contrast">Percentage contrast value where -100 &lt;= contrast &lt;= 100.
            <para>A value of 0 means no change, less than 0 will decrease the contrast
            and greater than 0 will increase the contrast of the image.</para></param>
            <param name="gamma">Gamma value to be used for gamma correction.
            <para>A value of 1.0 leaves the image alone, less than one darkens it,
            and greater than one lightens it.</para></param>
            <param name="invert">If set to true, the image will be inverted.</param>
            <returns>The number of adjustments applied to the resulting lookup table
            compared to a blind lookup table.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="lookUpTable"/> is null.</exception>
            <exception cref="T:System.ArgumentException"><paramref name="lookUpTable.Length"/> is not 256.</exception>
        </member>
        <member name="M:FreeImageAPI.FreeImageBitmap.SaveAdd(System.String,FreeImageAPI.FreeImageBitmap,FreeImageAPI.FREE_IMAGE_FORMAT,FreeImageAPI.FREE_IMAGE_LOAD_FLAGS,FreeImageAPI.FREE_IMAGE_SAVE_FLAGS)">
            <summary>
            Adds a specified frame to the file specified using the specified parameters.
            Use this method to save selected frames from an to a multiple-frame image.
            </summary>
            <param name="filename">File to add this frame to.</param>
            <param name="bitmap">A <see cref="T:FreeImageAPI.FreeImageBitmap"/> that contains the frame to add.</param>
            <param name="format">Format of the image.</param>
            <param name="loadFlags">Flags to enable or disable plugin-features.</param>
            <param name="saveFlags">Flags to enable or disable plugin-features.</param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="filename"/> or <paramref name="bitmap"/> is null.
            </exception>
            <exception cref="T:System.IO.FileNotFoundException"><paramref name="filename"/> does not exist.</exception>
            <exception cref="T:System.Exception">Saving the image failed.</exception>
        </member>
        <member name="M:FreeImageAPI.FreeImageBitmap.SaveAdd(System.String,FreeImageAPI.FreeImageBitmap,System.Int32,FreeImageAPI.FREE_IMAGE_FORMAT,FreeImageAPI.FREE_IMAGE_LOAD_FLAGS,FreeImageAPI.FREE_IMAGE_SAVE_FLAGS)">
            <summary>
            Adds a specified frame to the file specified using the specified parameters.
            Use this method to save selected frames from an image to a multiple-frame image.
            </summary>
            <param name="filename">File to add this frame to.</param>
            <param name="bitmap">A <see cref="T:FreeImageAPI.FreeImageBitmap"/> that contains the frame to add.</param>
            <param name="insertPosition">The position of the inserted frame.</param>
            <param name="format">Format of the image.</param>
            <param name="loadFlags">Flags to enable or disable plugin-features.</param>
            <param name="saveFlags">Flags to enable or disable plugin-features.</param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="filename"/> or <paramref name="bitmap"/> is null.
            </exception>
            <exception cref="T:System.IO.FileNotFoundException"><paramref name="filename"/> does not exist.</exception>
            <exception cref="T:System.Exception">Saving the image failed.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="insertPosition"/> is out of range.</exception>
        </member>
        <member name="M:FreeImageAPI.FreeImageBitmap.CreateNewPropertyItem">
            <summary>
            Returns a new instance of the <see cref="T:System.Drawing.Imaging.PropertyItem"/> class which
            has no public accessible constructor.
            </summary>
            <returns>A new instace of <see cref="T:System.Drawing.Imaging.PropertyItem"/>.</returns>
        </member>
        <member name="M:FreeImageAPI.FreeImageBitmap.EnsureNotDisposed">
            <summary>
            Throws an exception in case the instance has already been disposed.
            </summary>
        </member>
        <member name="M:FreeImageAPI.FreeImageBitmap.ReplaceDib(FreeImageAPI.FIBITMAP)">
            <summary>
            Tries to replace the wrapped <see cref="T:FreeImageAPI.FIBITMAP"/> with a new one.
            In case the new dib is null or the same as the already
            wrapped one, nothing will be changed and the result will
            be false.
            Otherwise the wrapped <see cref="T:FreeImageAPI.FIBITMAP"/> will be unloaded and replaced.
            </summary>
            <param name="newDib">The new dib.</param>
            <returns>Returns true on success, false on failure.</returns>
        </member>
        <member name="M:FreeImageAPI.FreeImageBitmap.UnloadDib">
            <summary>
            Unloads currently wrapped <see cref="T:FreeImageAPI.FIBITMAP"/> or unlocks the locked page
            in case it came from a multipaged bitmap.
            </summary>
        </member>
        <member name="M:FreeImageAPI.FreeImageBitmap.AddMemoryPressure">
            <summary>
            Informs the runtime about unmanaged allocoted memory.
            </summary>
        </member>
        <member name="M:FreeImageAPI.FreeImageBitmap.LoadFromStream(System.IO.Stream,FreeImageAPI.FREE_IMAGE_FORMAT,FreeImageAPI.FREE_IMAGE_LOAD_FLAGS)">
            <summary>
            Opens the stream and reads the number of available pages.
            Then loads the first page to this instance.
            </summary>
        </member>
        <member name="M:FreeImageAPI.FreeImageBitmap.Clone">
            <summary>
            Creates a deep copy of this <see cref="T:FreeImageAPI.FreeImageBitmap"/>.
            </summary>
            <returns>A deep copy of this <see cref="T:FreeImageAPI.FreeImageBitmap"/>.</returns>
        </member>
        <member name="M:FreeImageAPI.FreeImageBitmap.Dispose">
            <summary>
            Performs application-defined tasks associated with freeing,
            releasing, or resetting unmanaged resources.
            </summary>
        </member>
        <member name="M:FreeImageAPI.FreeImageBitmap.Dispose(System.Boolean)">
            <summary>
            Performs application-defined tasks associated with freeing,
            releasing, or resetting unmanaged resources.
            </summary>
            <param name="disposing">If true managed ressources are released.</param>
        </member>
        <member name="M:FreeImageAPI.FreeImageBitmap.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Retrieves an object that can iterate through the individual scanlines in this <see cref="T:FreeImageAPI.FreeImageBitmap"/>.
            </summary>
            <returns>An <see cref="T:System.Collections.IEnumerator"/> for the <see cref="T:FreeImageAPI.FreeImageBitmap"/>.</returns>
            <exception cref="T:System.ArgumentException">The bitmaps's type is not supported.</exception>
        </member>
        <member name="P:FreeImageAPI.FreeImageBitmap.ImageType">
            <summary>
            Type of the bitmap.
            </summary>
        </member>
        <member name="P:FreeImageAPI.FreeImageBitmap.ColorsUsed">
            <summary>
            Number of palette entries.
            </summary>
        </member>
        <member name="P:FreeImageAPI.FreeImageBitmap.UniqueColors">
            <summary>
            The number of unique colors actually used by the bitmap. This might be different from
            what ColorsUsed returns, which actually returns the palette size for palletised images.
            Works for FIT_BITMAP type bitmaps only.
            </summary>
        </member>
        <member name="P:FreeImageAPI.FreeImageBitmap.ColorDepth">
            <summary>
            The size of one pixel in the bitmap in bits.
            </summary>
        </member>
        <member name="P:FreeImageAPI.FreeImageBitmap.Width">
            <summary>
            Width of the bitmap in pixel units.
            </summary>
        </member>
        <member name="P:FreeImageAPI.FreeImageBitmap.Height">
            <summary>
            Height of the bitmap in pixel units.
            </summary>
        </member>
        <member name="P:FreeImageAPI.FreeImageBitmap.Pitch">
            <summary>
            Returns the width of the bitmap in bytes, rounded to the next 32-bit boundary.
            </summary>
        </member>
        <member name="P:FreeImageAPI.FreeImageBitmap.DataSize">
            <summary>
            Size of the bitmap in memory.
            </summary>
        </member>
        <member name="P:FreeImageAPI.FreeImageBitmap.Palette">
            <summary>
            Returns a structure that represents the palette of a FreeImage bitmap.
            </summary>
            <exception cref="T:System.InvalidOperationException"><see cref="P:FreeImageAPI.FreeImageBitmap.HasPalette"/> is false.</exception>
        </member>
        <member name="P:FreeImageAPI.FreeImageBitmap.IsRGB555">
            <summary>
            Gets whether the bitmap is RGB 555.
            </summary>
        </member>
        <member name="P:FreeImageAPI.FreeImageBitmap.IsRGB565">
            <summary>
            Gets whether the bitmap is RGB 565.
            </summary>
        </member>
        <member name="P:FreeImageAPI.FreeImageBitmap.HorizontalResolution">
            <summary>
            Gets the horizontal resolution, in pixels per inch, of this <see cref="T:FreeImageAPI.FreeImageBitmap"/>.
            </summary>
        </member>
        <member name="P:FreeImageAPI.FreeImageBitmap.VerticalResolution">
            <summary>
            Gets the vertical resolution, in pixels per inch, of this <see cref="T:FreeImageAPI.FreeImageBitmap"/>.
            </summary>
        </member>
        <member name="P:FreeImageAPI.FreeImageBitmap.InfoHeader">
            <summary>
            Returns the <see cref="T:FreeImageAPI.BITMAPINFOHEADER"/> structure of this <see cref="T:FreeImageAPI.FreeImageBitmap"/>.
            </summary>
        </member>
        <member name="P:FreeImageAPI.FreeImageBitmap.Info">
            <summary>
            Returns the <see cref="T:FreeImageAPI.BITMAPINFO"/> structure of a this <see cref="T:FreeImageAPI.FreeImageBitmap"/>.
            </summary>
        </member>
        <member name="P:FreeImageAPI.FreeImageBitmap.ColorType">
            <summary>
            Investigates the color type of this <see cref="T:FreeImageAPI.FreeImageBitmap"/>
            by reading the bitmaps pixel bits and analysing them.
            </summary>
        </member>
        <member name="P:FreeImageAPI.FreeImageBitmap.RedMask">
            <summary>
            Bit pattern describing the red color component of a pixel in this <see cref="T:FreeImageAPI.FreeImageBitmap"/>.
            </summary>
        </member>
        <member name="P:FreeImageAPI.FreeImageBitmap.GreenMask">
            <summary>
            Bit pattern describing the green color component of a pixel in this <see cref="T:FreeImageAPI.FreeImageBitmap"/>.
            </summary>
        </member>
        <member name="P:FreeImageAPI.FreeImageBitmap.BlueMask">
            <summary>
            Bit pattern describing the blue color component of a pixel in this <see cref="T:FreeImageAPI.FreeImageBitmap"/>.
            </summary>
        </member>
        <member name="P:FreeImageAPI.FreeImageBitmap.TransparencyCount">
            <summary>
            Number of transparent colors in a palletised <see cref="T:FreeImageAPI.FreeImageBitmap"/>.
            </summary>
        </member>
        <member name="P:FreeImageAPI.FreeImageBitmap.TransparencyTable">
            <summary>
            Get or sets transparency table of this <see cref="T:FreeImageAPI.FreeImageBitmap"/>.
            </summary>
        </member>
        <member name="P:FreeImageAPI.FreeImageBitmap.IsTransparent">
            <summary>
            Gets or sets whether this <see cref="T:FreeImageAPI.FreeImageBitmap"/> is transparent.
            </summary>
        </member>
        <member name="P:FreeImageAPI.FreeImageBitmap.HasBackgroundColor">
            <summary>
            Gets whether this <see cref="T:FreeImageAPI.FreeImageBitmap"/> has a file background color.
            </summary>
        </member>
        <member name="P:FreeImageAPI.FreeImageBitmap.BackgroundColor">
            <summary>
            Gets or sets the background color of this <see cref="T:FreeImageAPI.FreeImageBitmap"/>.
            In case the value is null, the background color is removed.
            </summary>
            <exception cref="T:System.InvalidOperationException">Get: There is no background color available.</exception>
            <exception cref="T:System.Exception">Set: Setting background color failed.</exception>
        </member>
        <member name="P:FreeImageAPI.FreeImageBitmap.Bits">
            <summary>
            Pointer to the data-bits of this <see cref="T:FreeImageAPI.FreeImageBitmap"/>.
            </summary>
        </member>
        <member name="P:FreeImageAPI.FreeImageBitmap.Line">
            <summary>
            Width, in bytes, of this <see cref="T:FreeImageAPI.FreeImageBitmap"/>.
            </summary>
        </member>
        <member name="P:FreeImageAPI.FreeImageBitmap.Scan0">
            <summary>
            Pointer to the scanline of the top most pixel row of this <see cref="T:FreeImageAPI.FreeImageBitmap"/>.
            </summary>
        </member>
        <member name="P:FreeImageAPI.FreeImageBitmap.Stride">
            <summary>
            Width, in bytes, of this <see cref="T:FreeImageAPI.FreeImageBitmap"/>.
            In case this <see cref="T:FreeImageAPI.FreeImageBitmap"/> is top down <b>Stride</b> will be positive, else negative.
            </summary>
        </member>
        <member name="P:FreeImageAPI.FreeImageBitmap.Flags">
            <summary>
            Gets attribute flags for the pixel data of this <see cref="T:FreeImageAPI.FreeImageBitmap"/>.
            </summary>
        </member>
        <member name="P:FreeImageAPI.FreeImageBitmap.PhysicalDimension">
            <summary>
            Gets the width and height of this <see cref="T:FreeImageAPI.FreeImageBitmap"/>.
            </summary>
        </member>
        <member name="P:FreeImageAPI.FreeImageBitmap.PixelFormat">
            <summary>
            Gets the pixel format for this <see cref="T:FreeImageAPI.FreeImageBitmap"/>.
            </summary>
        </member>
        <member name="P:FreeImageAPI.FreeImageBitmap.PropertyIdList">
            <summary>
            Gets IDs of the property items stored in this <see cref="T:FreeImageAPI.FreeImageBitmap"/>.
            </summary>
        </member>
        <member name="P:FreeImageAPI.FreeImageBitmap.PropertyItems">
            <summary>
            Gets all the property items (pieces of metadata) stored in this <see cref="T:FreeImageAPI.FreeImageBitmap"/>.
            </summary>
        </member>
        <member name="P:FreeImageAPI.FreeImageBitmap.RawFormat">
            <summary>
            Gets the format of this <see cref="T:FreeImageAPI.FreeImageBitmap"/>.
            </summary>
        </member>
        <member name="P:FreeImageAPI.FreeImageBitmap.Size">
            <summary>
            Gets the width and height, in pixels, of this <see cref="T:FreeImageAPI.FreeImageBitmap"/>.
            </summary>
        </member>
        <member name="P:FreeImageAPI.FreeImageBitmap.Tag">
            <summary>
            Gets or sets an object that provides additional data about the <see cref="T:FreeImageAPI.FreeImageBitmap"/>.
            </summary>
        </member>
        <member name="P:FreeImageAPI.FreeImageBitmap.IsDisposed">
            <summary>
            Gets whether this <see cref="T:FreeImageAPI.FreeImageBitmap"/> has been disposed.
            </summary>
        </member>
        <member name="P:FreeImageAPI.FreeImageBitmap.Metadata">
            <summary>
            Gets a new instance of a metadata representing class.
            </summary>
        </member>
        <member name="P:FreeImageAPI.FreeImageBitmap.Comment">
            <summary>
            Gets or sets the comment of this <see cref="T:FreeImageAPI.FreeImageBitmap"/>.
            Supported formats are JPEG, PNG and GIF.
            </summary>
        </member>
        <member name="P:FreeImageAPI.FreeImageBitmap.HasPalette">
            <summary>
            Returns whether this <see cref="T:FreeImageAPI.FreeImageBitmap"/> has a palette.
            </summary>
        </member>
        <member name="P:FreeImageAPI.FreeImageBitmap.TransparentIndex">
            <summary>
            Gets or sets the entry used as transparent color in this <see cref="T:FreeImageAPI.FreeImageBitmap"/>.
            Only works for 1-, 4- and 8-bpp.
            </summary>
        </member>
        <member name="P:FreeImageAPI.FreeImageBitmap.FrameCount">
            <summary>
            Gets the number of frames in this <see cref="T:FreeImageAPI.FreeImageBitmap"/>.
            </summary>
        </member>
        <member name="P:FreeImageAPI.FreeImageBitmap.ICCProfile">
            <summary>
            Gets the ICCProfile structure of this <see cref="T:FreeImageAPI.FreeImageBitmap"/>.
            </summary>
        </member>
        <member name="P:FreeImageAPI.FreeImageBitmap.ImageFormat">
            <summary>
            Gets the format of the original image in case
            this <see cref="T:FreeImageAPI.FreeImageBitmap"/> was loaded from a file or stream.
            </summary>
        </member>
        <member name="P:FreeImageAPI.FreeImageBitmap.Dib">
            <summary>
            Gets the encapsulated FIBITMAP.
            </summary>
        </member>
        <member name="T:FreeImageAPI.FreeImageBitmap.SaveInformation">
            <summary>
            Helper class to store informations for <see cref="M:FreeImageAPI.FreeImageBitmap.SaveAdd"/>.
            </summary>
        </member>
        <member name="T:FreeImageAPI.FreeImageEngine">
            <summary>
            Class handling non-bitmap related functions.
            </summary>
        </member>
        <member name="M:FreeImageAPI.FreeImageEngine.OnMessage(FreeImageAPI.FREE_IMAGE_FORMAT,System.String)">
            <summary>
            Internal callback
            </summary>
        </member>
        <member name="P:FreeImageAPI.FreeImageEngine.IsAvailable">
            <summary>
            Gets a value indicating if the FreeImage DLL is available or not.
            </summary>
        </member>
        <member name="E:FreeImageAPI.FreeImageEngine.Message">
            <summary>
            Internal errors in FreeImage generate a logstring that can be
            captured by this event.
            </summary>
        </member>
        <member name="P:FreeImageAPI.FreeImageEngine.Version">
            <summary>
            Gets a string containing the current version of the library.
            </summary>
        </member>
        <member name="P:FreeImageAPI.FreeImageEngine.CopyrightMessage">
            <summary>
            Gets a string containing a standard copyright message.
            </summary>
        </member>
        <member name="P:FreeImageAPI.FreeImageEngine.IsLittleEndian">
            <summary>
            Gets whether the platform is using Little Endian.
            </summary>
        </member>
        <member name="T:FreeImageAPI.Plugins.FreeImagePlugin">
            <summary>
            Class representing a FreeImage format.
            </summary>
        </member>
        <member name="M:FreeImageAPI.Plugins.FreeImagePlugin.#ctor(FreeImageAPI.FREE_IMAGE_FORMAT)">
            <summary>
            Initializes a new instance of this class.
            </summary>
            <param name="fif">The FreeImage format to wrap.</param>
        </member>
        <member name="M:FreeImageAPI.Plugins.FreeImagePlugin.SupportsExportType(FreeImageAPI.FREE_IMAGE_TYPE)">
            <summary>
            Checks whether this plugin can save a bitmap in the desired data type.
            </summary>
            <param name="type">The desired image type.</param>
            <returns>True if this plugin can save bitmaps as the desired type, else false.</returns>
        </member>
        <member name="M:FreeImageAPI.Plugins.FreeImagePlugin.SupportsExportBPP(System.Int32)">
            <summary>
            Checks whether this plugin can save bitmaps in the desired bit depth.
            </summary>
            <param name="bpp">The desired bit depth.</param>
            <returns>True if this plugin can save bitmaps in the desired bit depth, else false.</returns>
        </member>
        <member name="M:FreeImageAPI.Plugins.FreeImagePlugin.ValidExtension(System.String)">
            <summary>
            Checks whether an extension is valid for this format.
            </summary>
            <param name="extension">The desired extension.</param>
            <returns>True if the extension is valid for this format, false otherwise.</returns>
        </member>
        <member name="M:FreeImageAPI.Plugins.FreeImagePlugin.ValidExtension(System.String,System.StringComparison)">
            <summary>
            Checks whether an extension is valid for this format.
            </summary>
            <param name="extension">The desired extension.</param>
            <param name="comparisonType">The string comparison type.</param>
            <returns>True if the extension is valid for this format, false otherwise.</returns>
        </member>
        <member name="M:FreeImageAPI.Plugins.FreeImagePlugin.ValidFilename(System.String)">
            <summary>
            Checks whether a filename is valid for this format.
            </summary>
            <param name="filename">The desired filename.</param>
            <returns>True if the filename is valid for this format, false otherwise.</returns>
        </member>
        <member name="M:FreeImageAPI.Plugins.FreeImagePlugin.ValidFilename(System.String,System.StringComparison)">
            <summary>
            Checks whether a filename is valid for this format.
            </summary>
            <param name="filename">The desired filename.</param>
            <param name="comparisonType">The string comparison type.</param>
            <returns>True if the filename is valid for this format, false otherwise.</returns>
        </member>
        <member name="M:FreeImageAPI.Plugins.FreeImagePlugin.ToString">
            <summary>
            Gets a descriptive string that describes the bitmap formats
            this plugin can read and/or write.
            </summary>
            <returns>A descriptive string that describes the bitmap formats.</returns>
        </member>
        <member name="P:FreeImageAPI.Plugins.FreeImagePlugin.FIFormat">
            <summary>
            Gets the format of this instance.
            </summary>
        </member>
        <member name="P:FreeImageAPI.Plugins.FreeImagePlugin.Enabled">
            <summary>
            Gets or sets whether this plugin is enabled.
            </summary>
        </member>
        <member name="P:FreeImageAPI.Plugins.FreeImagePlugin.Format">
            <summary>
            Gets a string describing the format.
            </summary>
        </member>
        <member name="P:FreeImageAPI.Plugins.FreeImagePlugin.ExtentsionList">
            <summary>
            Gets a comma-delimited file extension list describing the bitmap formats
            this plugin can read and/or write.
            </summary>
        </member>
        <member name="P:FreeImageAPI.Plugins.FreeImagePlugin.Description">
            <summary>
            Gets a descriptive string that describes the bitmap formats
            this plugin can read and/or write.
            </summary>
        </member>
        <member name="P:FreeImageAPI.Plugins.FreeImagePlugin.RegExpr">
            <summary>
            Returns a regular expression string that can be used by
            a regular expression engine to identify the bitmap.
            FreeImageQt makes use of this function.
            </summary>
        </member>
        <member name="P:FreeImageAPI.Plugins.FreeImagePlugin.SupportsReading">
            <summary>
            Gets whether this plugin can load bitmaps.
            </summary>
        </member>
        <member name="P:FreeImageAPI.Plugins.FreeImagePlugin.SupportsWriting">
            <summary>
            Gets whether this plugin can save bitmaps.
            </summary>
        </member>
        <member name="P:FreeImageAPI.Plugins.FreeImagePlugin.SupportsICCProfiles">
            <summary>
            Gets whether this plugin can load or save an ICC profile.
            </summary>
        </member>
        <member name="T:FreeImageAPI.IO.FreeImageStreamIO">
            <summary>
            Internal class wrapping stream io functions.
            </summary>
            <remarks>
            FreeImage can read files from a disk or a network drive but also allows the user to
            implement their own loading or saving functions to load them directly from an ftp or web
            server for example.
            <para/>
            In .NET streams are a common way to handle data. The <b>FreeImageStreamIO</b> class handles
            the loading and saving from and to streams. It implements the funtions FreeImage needs
            to load data from an an arbitrary source.
            <para/>
            The class is for internal use only.
            </remarks>
        </member>
        <member name="F:FreeImageAPI.IO.FreeImageStreamIO.io">
            <summary>
            <see cref="T:FreeImageAPI.IO.FreeImageIO"/> structure that can be used to read from streams via
            <see cref="M:FreeImageAPI.FreeImage.LoadFromHandle(FreeImageAPI.FREE_IMAGE_FORMAT,FreeImageAPI.IO.FreeImageIO@,FreeImageAPI.IO.fi_handle,FreeImageAPI.FREE_IMAGE_LOAD_FLAGS)"/>.
            </summary>
        </member>
        <member name="M:FreeImageAPI.IO.FreeImageStreamIO.#cctor">
            <summary>
            Initializes a new instances which can be used to
            create a FreeImage compatible <see cref="T:FreeImageAPI.IO.FreeImageIO"/> structure.
            </summary>
        </member>
        <member name="M:FreeImageAPI.IO.FreeImageStreamIO.streamRead(System.IntPtr,System.UInt32,System.UInt32,FreeImageAPI.IO.fi_handle)">
            <summary>
            Reads the requested data from the stream and writes it to the given address.
            </summary>
        </member>
        <member name="M:FreeImageAPI.IO.FreeImageStreamIO.streamWrite(System.IntPtr,System.UInt32,System.UInt32,FreeImageAPI.IO.fi_handle)">
            <summary>
            Reads the given data and writes it into the stream.
            </summary>
        </member>
        <member name="M:FreeImageAPI.IO.FreeImageStreamIO.streamSeek(FreeImageAPI.IO.fi_handle,System.Int32,System.IO.SeekOrigin)">
            <summary>
            Moves the streams position.
            </summary>
        </member>
        <member name="M:FreeImageAPI.IO.FreeImageStreamIO.streamTell(FreeImageAPI.IO.fi_handle)">
            <summary>
            Returns the streams current position
            </summary>
        </member>
        <member name="T:FreeImageAPI.Metadata.GifInformation">
            <summary>
            Provides additional information specific for GIF files. This class cannot be inherited.
            </summary>
        </member>
        <member name="T:FreeImageAPI.Metadata.MDM_ANIMATION">
            <summary>
            Represents a collection of all tags contained in the metadata model
            <see cref="F:FreeImageAPI.FREE_IMAGE_MDMODEL.FIMD_ANIMATION"/>.
            </summary>
        </member>
        <member name="T:FreeImageAPI.Metadata.MetadataModel">
            <summary>
            Base class that represents a collection of all tags contained in a metadata model.
            </summary>
            <remarks>
            The <b>MetedataModel</b> class is an abstract base class, which is inherited by
            several derived classes, one for each existing metadata model.
            </remarks> 
        </member>
        <member name="F:FreeImageAPI.Metadata.MetadataModel.dib">
            <summary>
            Handle to the encapsulated FreeImage-bitmap.
            </summary>
        </member>
        <member name="M:FreeImageAPI.Metadata.MetadataModel.#ctor(FreeImageAPI.FIBITMAP)">
            <summary>
            Initializes a new instance of this class.
            </summary>
            <param name="dib">Handle to a FreeImage bitmap.</param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="dib"/> is null.</exception>
        </member>
        <member name="M:FreeImageAPI.Metadata.MetadataModel.AddTag(FreeImageAPI.Metadata.MetadataTag)">
            <summary>
            Adds new tag to the bitmap or updates its value in case it already exists.
            <see cref="P:FreeImageAPI.Metadata.MetadataTag.Key"/> will be used as key.
            </summary>
            <param name="tag">The tag to add or update.</param>
            <returns>Returns true on success, false on failure.</returns>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="tag"/> is null.</exception>
            <exception cref="T:System.ArgumentException">
            The tags model differs from this instances model.</exception>
        </member>
        <member name="M:FreeImageAPI.Metadata.MetadataModel.AddTag(System.Collections.Generic.IEnumerable{FreeImageAPI.Metadata.MetadataTag})">
            <summary>
            Adds a list of tags to the bitmap or updates their values in case they already exist.
            <see cref="P:FreeImageAPI.Metadata.MetadataTag.Key"/> will be used as key.
            </summary>
            <param name="list">A list of tags to add or update.</param>
            <returns>Returns the number of successfully added tags.</returns>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="list"/> is null.</exception>
        </member>
        <member name="M:FreeImageAPI.Metadata.MetadataModel.RemoveTag(System.String)">
            <summary>
            Removes the specified tag from the bitmap.
            </summary>
            <param name="key">The key of the tag.</param>
            <returns>Returns true on success, false on failure.</returns>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="key"/> is null.</exception>
        </member>
        <member name="M:FreeImageAPI.Metadata.MetadataModel.DestoryModel">
            <summary>
            Destroys the metadata model
            which will remove all tags of this model from the bitmap.
            </summary>
            <returns>Returns true on success, false on failure.</returns>
        </member>
        <member name="M:FreeImageAPI.Metadata.MetadataModel.GetTag(System.String)">
            <summary>
            Returns the specified metadata tag.
            </summary>
            <param name="key">The key of the tag.</param>
            <returns>The metadata tag.</returns>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="key"/> is null.</exception>
        </member>
        <member name="M:FreeImageAPI.Metadata.MetadataModel.TagExists(System.String)">
            <summary>
            Returns whether the specified tag exists.
            </summary>
            <param name="key">The key of the tag.</param>
            <returns>True in case the tag exists, else false.</returns>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="key"/> is null.</exception>
        </member>
        <member name="M:FreeImageAPI.Metadata.MetadataModel.GetTagFromIndex(System.Int32)">
            <summary>
            Returns the tag at the given index.
            </summary>
            <param name="index">Index of the tag to return.</param>
            <returns>The tag at the given index.</returns>
        </member>
        <member name="M:FreeImageAPI.Metadata.MetadataModel.GetEnumerator">
            <summary>
            Retrieves an object that can iterate through the individual MetadataTags in this MetadataModel.
            </summary>
            <returns>An <see cref="T:System.Collections.IEnumerator"/> for the
            <see cref="T:FreeImageAPI.Metadata.MetadataModel"/>.</returns>
        </member>
        <member name="M:FreeImageAPI.Metadata.MetadataModel.RegexSearch(System.String,FreeImageAPI.MD_SEARCH_FLAGS)">
            <summary>
            Searches for a pattern in each metadata tag and returns the result as a list.
            </summary>
            <param name="searchPattern">The regular expression to use for the search.</param>
            <param name="flags">A bitfield that controls which fields should be searched in.</param>
            <returns>A list containing all found metadata tags.</returns>
            <exception cref="T:System.ArgumentNullException">
            <typeparamref name="searchPattern"/> is null.</exception>
            <exception cref="T:System.ArgumentException">
            <typeparamref name="searchPattern"/> is empty.</exception>
        </member>
        <member name="M:FreeImageAPI.Metadata.MetadataModel.GetTagValue``1(System.String)">
            <summary>
            Returns the value of the specified tag.
            </summary>
            <typeparam name="T">Type of the tag's data.</typeparam>
            <param name="key">The key of the tag.</param>
            <returns>The value of the specified tag.</returns>
        </member>
        <member name="M:FreeImageAPI.Metadata.MetadataModel.GetTagArray``1(System.String)">
            <summary>
            Returns an array containing the data of the specified tag.
            </summary>
            <typeparam name="T">The type of the tag's data.</typeparam>
            <param name="key">The key of the tag.</param>
            <returns>An array containing the data of the specified tag.</returns>
        </member>
        <member name="M:FreeImageAPI.Metadata.MetadataModel.GetTagText(System.String)">
            <summary>
            Returns the string contained by the specified tag.
            </summary>
            <param name="key">The key of the tag.</param>
            <returns>The string contained by the specified tag.</returns>
        </member>
        <member name="M:FreeImageAPI.Metadata.MetadataModel.GetUInt32Array(System.String)">
            <summary>
            Returns an array containg the data of the specified tag
            as unsigned 32bit integer.
            </summary>
            <param name="key">The key of the tag.</param>
            <returns>An array containg the data of the specified tag
            as unsigned 32bit integer.</returns>
        </member>
        <member name="M:FreeImageAPI.Metadata.MetadataModel.GetUInt32Value(System.String)">
            <summary>
            Returns the value of the tag as unsigned 32bit integer.
            </summary>
            <param name="key">The key of the tag.</param>
            <returns>The value of the tag as unsigned 32bit integer.</returns>
        </member>
        <member name="M:FreeImageAPI.Metadata.MetadataModel.SetTagValue``1(System.String,System.Nullable{``0})">
            <summary>
            Sets the value of the specified tag.
            </summary>
            <typeparam name="T">The type of the tag's data.</typeparam>
            <param name="key">The key of the tag.</param>
            <param name="value">The new value of the specified tag or null.</param>
        </member>
        <member name="M:FreeImageAPI.Metadata.MetadataModel.SetTagValue(System.String,System.Object)">
            <summary>
            Sets the value of the specified tag.
            </summary>
            <param name="key">The key of the tag.</param>
            <param name="value">The new value of the specified tag or null.</param>
        </member>
        <member name="M:FreeImageAPI.Metadata.MetadataModel.SetTagValueUndefined(System.String,System.Byte[])">
            <summary>
            Sets the value of the specified tag as undefined.
            </summary>
            <param name="key">The key of the tag.</param>
            <param name="value">The new value of the specified tag or null.</param>
        </member>
        <member name="M:FreeImageAPI.Metadata.MetadataModel.ToDirectionType(System.String)">
            <summary>
            Returns the equivalent <see cref="T:FreeImageAPI.Metadata.MetadataModel.DirectionReference"/> for the
            specified <see cref="T:System.String"/>.
            </summary>
            <param name="s">The string containing the <see cref="T:FreeImageAPI.Metadata.MetadataModel.DirectionReference"/>.</param>
            <returns>The equivalent <see cref="T:FreeImageAPI.Metadata.MetadataModel.DirectionReference"/> for the
            specified <see cref="T:System.String"/>.</returns>
        </member>
        <member name="M:FreeImageAPI.Metadata.MetadataModel.ToString(System.Nullable{FreeImageAPI.Metadata.MetadataModel.DirectionReference})">
            <summary>
            Returns the equivalent <see cref="T:System.String"/> for the
            specified <see cref="T:FreeImageAPI.Metadata.MetadataModel.DirectionReference"/>.
            </summary>
            <param name="type">The <see cref="T:FreeImageAPI.Metadata.MetadataModel.DirectionReference"/> to convert.</param>
            <returns>The equivalent <see cref="T:System.String"/> for the
            specified <see cref="T:FreeImageAPI.Metadata.MetadataModel.DirectionReference"/>.</returns>
        </member>
        <member name="M:FreeImageAPI.Metadata.MetadataModel.ToUnitType(System.String)">
            <summary>
            Returns the equivalent <see cref="T:FreeImageAPI.Metadata.MetadataModel.VelocityUnit"/> for the
            specified <see cref="T:System.String"/>.
            </summary>
            <param name="s">The string containing the <see cref="T:FreeImageAPI.Metadata.MetadataModel.VelocityUnit"/>.</param>
            <returns>The equivalent <see cref="T:FreeImageAPI.Metadata.MetadataModel.VelocityUnit"/> for the
            specified <see cref="T:System.String"/>.</returns>
        </member>
        <member name="M:FreeImageAPI.Metadata.MetadataModel.ToString(System.Nullable{FreeImageAPI.Metadata.MetadataModel.VelocityUnit})">
            <summary>
            Returns the equivalent <see cref="T:System.String"/> for the
            specified <see cref="T:FreeImageAPI.Metadata.MetadataModel.VelocityUnit"/>.
            </summary>
            <param name="type">The <see cref="T:FreeImageAPI.Metadata.MetadataModel.VelocityUnit"/> to convert.</param>
            <returns>The equivalent <see cref="T:System.String"/> for the
            specified <see cref="T:FreeImageAPI.Metadata.MetadataModel.VelocityUnit"/>.</returns>
        </member>
        <member name="M:FreeImageAPI.Metadata.MetadataModel.ToLongitudeType(System.String)">
            <summary>
            Returns the equivalent <see cref="T:FreeImageAPI.Metadata.MetadataModel.LongitudeType"/> for the
            specified <see cref="T:System.String"/>.
            </summary>
            <param name="s">The string containing the <see cref="T:FreeImageAPI.Metadata.MetadataModel.LongitudeType"/>.</param>
            <returns>The equivalent <see cref="T:FreeImageAPI.Metadata.MetadataModel.LongitudeType"/> for the
            specified <see cref="T:System.String"/>.</returns>
        </member>
        <member name="M:FreeImageAPI.Metadata.MetadataModel.ToString(System.Nullable{FreeImageAPI.Metadata.MetadataModel.LongitudeType})">
            <summary>
            Returns the equivalent <see cref="T:System.String"/> for the
            specified <see cref="T:FreeImageAPI.Metadata.MetadataModel.LongitudeType"/>.
            </summary>
            <param name="type">The <see cref="T:FreeImageAPI.Metadata.MetadataModel.LongitudeType"/> to convert.</param>
            <returns>The equivalent <see cref="T:System.String"/> for the
            specified <see cref="T:FreeImageAPI.Metadata.MetadataModel.LongitudeType"/>.</returns>
        </member>
        <member name="M:FreeImageAPI.Metadata.MetadataModel.ToLatitudeType(System.String)">
            <summary>
            Returns the equivalent <see cref="T:FreeImageAPI.Metadata.MetadataModel.LatitudeType"/> for the
            specified <see cref="T:System.String"/>.
            </summary>
            <param name="s">The string containing the <see cref="T:FreeImageAPI.Metadata.MetadataModel.LatitudeType"/>.</param>
            <returns>The equivalent <see cref="T:FreeImageAPI.Metadata.MetadataModel.LatitudeType"/> for the
            specified <see cref="T:System.String"/>.</returns>
        </member>
        <member name="M:FreeImageAPI.Metadata.MetadataModel.ToString(System.Nullable{FreeImageAPI.Metadata.MetadataModel.LatitudeType})">
            <summary>
            Returns the equivalent <see cref="T:System.String"/> for the
            specified <see cref="T:FreeImageAPI.Metadata.MetadataModel.LatitudeType"/>.
            </summary>
            <param name="type">The <see cref="T:FreeImageAPI.Metadata.MetadataModel.LatitudeType"/> to convert.</param>
            <returns>The equivalent <see cref="T:System.String"/> for the
            specified <see cref="T:FreeImageAPI.Metadata.MetadataModel.LatitudeType"/>.</returns>
        </member>
        <member name="M:FreeImageAPI.Metadata.MetadataModel.ToInteroperabilityType(System.String)">
            <summary>
            Returns the equivalent <see cref="T:FreeImageAPI.Metadata.MetadataModel.InteroperabilityMode"/> for the
            specified <see cref="T:System.String"/>.
            </summary>
            <param name="s">The string containing the <see cref="T:FreeImageAPI.Metadata.MetadataModel.InteroperabilityMode"/>.</param>
            <returns>The equivalent <see cref="T:FreeImageAPI.Metadata.MetadataModel.InteroperabilityMode"/> for the
            specified <see cref="T:System.String"/>.</returns>
        </member>
        <member name="M:FreeImageAPI.Metadata.MetadataModel.ToString(System.Nullable{FreeImageAPI.Metadata.MetadataModel.InteroperabilityMode})">
            <summary>
            Returns the equivalent <see cref="T:System.String"/> for the
            specified <see cref="T:FreeImageAPI.Metadata.MetadataModel.InteroperabilityMode"/>.
            </summary>
            <param name="type">The <see cref="T:FreeImageAPI.Metadata.MetadataModel.InteroperabilityMode"/> to convert.</param>
            <returns>The equivalent <see cref="T:System.String"/> for the
            specified <see cref="T:FreeImageAPI.Metadata.MetadataModel.InteroperabilityMode"/>.</returns>
        </member>
        <member name="M:FreeImageAPI.Metadata.MetadataModel.ToString">
            <summary>
            Converts the model of the MetadataModel object to its equivalent string representation.
            </summary>
            <returns>The string representation of the value of this instance.</returns>
        </member>
        <member name="P:FreeImageAPI.Metadata.MetadataModel.Model">
            <summary>
            Retrieves the datamodel that this instance represents.
            </summary>
        </member>
        <member name="P:FreeImageAPI.Metadata.MetadataModel.List">
            <summary>
            Returns a list of all metadata tags this instance represents.
            </summary>
        </member>
        <member name="P:FreeImageAPI.Metadata.MetadataModel.Item(System.Int32)">
            <summary>
            Returns the metadata tag at the given index. This operation is slow when accessing all tags.
            </summary>
            <param name="index">Index of the tag.</param>
            <returns>The metadata tag.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <paramref name="index"/> is greater or equal <b>Count</b>
            or index is less than zero.</exception>
        </member>
        <member name="P:FreeImageAPI.Metadata.MetadataModel.Count">
            <summary>
            Returns the number of metadata tags this instance represents.
            </summary>
        </member>
        <member name="P:FreeImageAPI.Metadata.MetadataModel.Exists">
            <summary>
            Returns whether this model exists in the bitmaps metadata structure.
            </summary>
        </member>
        <member name="T:FreeImageAPI.Metadata.MetadataModel.VelocityUnit">
            <summary>
            Specified different unit types.
            </summary>
        </member>
        <member name="F:FreeImageAPI.Metadata.MetadataModel.VelocityUnit.Undefinied">
            <summary>
            No or unknown type.
            </summary>
        </member>
        <member name="F:FreeImageAPI.Metadata.MetadataModel.VelocityUnit.Kilometers">
            <summary>
            Kilometers per hour.
            </summary>
        </member>
        <member name="F:FreeImageAPI.Metadata.MetadataModel.VelocityUnit.Miles">
            <summary>
            Miles per hour.
            </summary>
        </member>
        <member name="F:FreeImageAPI.Metadata.MetadataModel.VelocityUnit.Knots">
            <summary>
            Knots.
            </summary>
        </member>
        <member name="T:FreeImageAPI.Metadata.MetadataModel.DirectionReference">
            <summary>
            Specifies different direction types.
            </summary>
        </member>
        <member name="F:FreeImageAPI.Metadata.MetadataModel.DirectionReference.Undefined">
            <summary>
            No or unknown direction type.
            </summary>
        </member>
        <member name="F:FreeImageAPI.Metadata.MetadataModel.DirectionReference.TrueDirection">
            <summary>
            True direction.
            </summary>
        </member>
        <member name="F:FreeImageAPI.Metadata.MetadataModel.DirectionReference.MagneticDirection">
            <summary>
            Magnatic direction.
            </summary>
        </member>
        <member name="T:FreeImageAPI.Metadata.MetadataModel.LatitudeType">
            <summary>
            Specifies the type of a latitude value.
            </summary>
        </member>
        <member name="F:FreeImageAPI.Metadata.MetadataModel.LatitudeType.Undefined">
            <summary>
            No or unknown type.
            </summary>
        </member>
        <member name="F:FreeImageAPI.Metadata.MetadataModel.LatitudeType.North">
            <summary>
            North.
            </summary>
        </member>
        <member name="F:FreeImageAPI.Metadata.MetadataModel.LatitudeType.South">
            <summary>
            South.
            </summary>
        </member>
        <member name="T:FreeImageAPI.Metadata.MetadataModel.LongitudeType">
            <summary>
            Specifies the type of a longitude value.
            </summary>
        </member>
        <member name="F:FreeImageAPI.Metadata.MetadataModel.LongitudeType.Undefined">
            <summary>
            No or unknown type.
            </summary>
        </member>
        <member name="F:FreeImageAPI.Metadata.MetadataModel.LongitudeType.East">
            <summary>
            East.
            </summary>
        </member>
        <member name="F:FreeImageAPI.Metadata.MetadataModel.LongitudeType.West">
            <summary>
            West.
            </summary>
        </member>
        <member name="T:FreeImageAPI.Metadata.MetadataModel.AltitudeType">
            <summary>
            Specifies different altitude types.
            </summary>
        </member>
        <member name="F:FreeImageAPI.Metadata.MetadataModel.AltitudeType.Undefined">
            <summary>
            No or unknown type.
            </summary>
        </member>
        <member name="F:FreeImageAPI.Metadata.MetadataModel.AltitudeType.AboveSeaLevel">
            <summary>
            East.
            </summary>
        </member>
        <member name="F:FreeImageAPI.Metadata.MetadataModel.AltitudeType.BelowSeaLevel">
            <summary>
            West.
            </summary>
        </member>
        <member name="T:FreeImageAPI.Metadata.MetadataModel.InteroperabilityMode">
            <summary>
            Specifies interoperability types.
            </summary>
        </member>
        <member name="F:FreeImageAPI.Metadata.MetadataModel.InteroperabilityMode.Undefined">
            <summary>
            No or unknown type.
            </summary>
        </member>
        <member name="F:FreeImageAPI.Metadata.MetadataModel.InteroperabilityMode.R98">
            <summary>
            Indicates a file conforming to R98 file specification of Recommended
            Exif Interoperability Rules (ExifR98) or to DCF basic file stipulated
            by Design Rule for Camera File System.
            </summary>
        </member>
        <member name="F:FreeImageAPI.Metadata.MetadataModel.InteroperabilityMode.THM">
            <summary>
            Indicates a file conforming to DCF thumbnail file stipulated by Design
            rule for Camera File System. 
            </summary>
        </member>
        <member name="T:FreeImageAPI.Metadata.MetadataModel.ExifImageOrientation">
            <summary>
            Specifies orientation of images.
            </summary>
        </member>
        <member name="F:FreeImageAPI.Metadata.MetadataModel.ExifImageOrientation.Undefined">
            <summary>
            Undefinied orientation.
            </summary>
        </member>
        <member name="F:FreeImageAPI.Metadata.MetadataModel.ExifImageOrientation.TopLeft">
            <summary>
            TopLeft.
            </summary>
        </member>
        <member name="F:FreeImageAPI.Metadata.MetadataModel.ExifImageOrientation.TopRight">
            <summary>
            TopRight.
            </summary>
        </member>
        <member name="F:FreeImageAPI.Metadata.MetadataModel.ExifImageOrientation.BottomRight">
            <summary>
            BottomRight.
            </summary>
        </member>
        <member name="F:FreeImageAPI.Metadata.MetadataModel.ExifImageOrientation.BottomLeft">
            <summary>
            BottomLeft.
            </summary>
        </member>
        <member name="F:FreeImageAPI.Metadata.MetadataModel.ExifImageOrientation.LeftTop">
            <summary>
            LeftTop.
            </summary>
        </member>
        <member name="F:FreeImageAPI.Metadata.MetadataModel.ExifImageOrientation.RightTop">
            <summary>
            RightTop.
            </summary>
        </member>
        <member name="F:FreeImageAPI.Metadata.MetadataModel.ExifImageOrientation.RightBottom">
            <summary>
            RightBottom.
            </summary>
        </member>
        <member name="F:FreeImageAPI.Metadata.MetadataModel.ExifImageOrientation.LeftBottom">
            <summary>
            LeftBottom.
            </summary>
        </member>
        <member name="M:FreeImageAPI.Metadata.MDM_ANIMATION.#ctor(FreeImageAPI.FIBITMAP)">
            <summary>
            Initializes a new instance of this class.
            </summary>
            <param name="dib">Handle to a FreeImage bitmap.</param>
        </member>
        <member name="P:FreeImageAPI.Metadata.MDM_ANIMATION.Model">
            <summary>
            Retrieves the datamodel that this instance represents.
            </summary>
        </member>
        <member name="P:FreeImageAPI.Metadata.MDM_ANIMATION.LogicalWidth">
            <summary>
            Gets or sets the width of the entire canvas area, that each page is displayed in.
            </summary>
            <remarks>
            <b>Handling of null values</b><para/>
            A null value indicates, that the corresponding metadata tag is not
            present in the metadata model.
            Setting this property's value to a non-null reference creates the
            metadata tag if necessary.
            Setting this property's value to a null reference deletes the
            metadata tag from the metadata model.
            </remarks>
        </member>
        <member name="P:FreeImageAPI.Metadata.MDM_ANIMATION.LogicalHeight">
            <summary>
            Gets or sets the height of the entire canvas area, that each page is displayed in.
            </summary>
            <remarks>
            <b>Handling of null values</b><para/>
            A null value indicates, that the corresponding metadata tag is not
            present in the metadata model.
            Setting this property's value to a non-null reference creates the
            metadata tag if necessary.
            Setting this property's value to a null reference deletes the
            metadata tag from the metadata model.
            </remarks>
        </member>
        <member name="P:FreeImageAPI.Metadata.MDM_ANIMATION.GlobalPalette">
            <summary>
            Gets or sets the global palette of the GIF image.
            </summary>
            <remarks>
            <b>Handling of null values</b><para/>
            A null value indicates, that the corresponding metadata tag is not
            present in the metadata model.
            Setting this property's value to a non-null reference creates the
            metadata tag if necessary.
            Setting this property's value to a null reference deletes the
            metadata tag from the metadata model.
            </remarks>
        </member>
        <member name="P:FreeImageAPI.Metadata.MDM_ANIMATION.LoopCount">
            <summary>
            Gets or sets the number of replays for the animation.
            Use 0 (zero) to specify an infinte number of replays.
            </summary>
            <remarks>
            <b>Handling of null values</b><para/>
            A null value indicates, that the corresponding metadata tag is not
            present in the metadata model.
            Setting this property's value to a non-null reference creates the
            metadata tag if necessary.
            Setting this property's value to a null reference deletes the
            metadata tag from the metadata model.
            </remarks>
        </member>
        <member name="P:FreeImageAPI.Metadata.MDM_ANIMATION.FrameLeft">
            <summary>
            Gets or sets the horizontal offset within the logical canvas area, this frame is to be displayed at.
            </summary>
            <remarks>
            <b>Handling of null values</b><para/>
            A null value indicates, that the corresponding metadata tag is not
            present in the metadata model.
            Setting this property's value to a non-null reference creates the
            metadata tag if necessary.
            Setting this property's value to a null reference deletes the
            metadata tag from the metadata model.
            </remarks>
        </member>
        <member name="P:FreeImageAPI.Metadata.MDM_ANIMATION.FrameTop">
            <summary>
            Gets or sets the vertical offset within the logical canvas area, this frame is to be displayed at.
            </summary>
            <remarks>
            <b>Handling of null values</b><para/>
            A null value indicates, that the corresponding metadata tag is not
            present in the metadata model.
            Setting this property's value to a non-null reference creates the
            metadata tag if necessary.
            Setting this property's value to a null reference deletes the
            metadata tag from the metadata model.
            </remarks>
        </member>
        <member name="P:FreeImageAPI.Metadata.MDM_ANIMATION.NoLocalPalette">
            <summary>
            Gets or sets a flag to supress saving the dib's attached palette
            (making it use the global palette). The local palette is the palette used by a page.
            </summary>
            <remarks>
            <b>Handling of null values</b><para/>
            A null value indicates, that the corresponding metadata tag is not
            present in the metadata model.
            Setting this property's value to a non-null reference creates the
            metadata tag if necessary.
            Setting this property's value to a null reference deletes the
            metadata tag from the metadata model.
            </remarks>
        </member>
        <member name="P:FreeImageAPI.Metadata.MDM_ANIMATION.Interlaced">
            <summary>
            Gets or sets a value indicating whether the image is interlaced.
            </summary>
            <remarks>
            <b>Handling of null values</b><para/>
            A null value indicates, that the corresponding metadata tag is not
            present in the metadata model.
            Setting this property's value to a non-null reference creates the
            metadata tag if necessary.
            Setting this property's value to a null reference deletes the
            metadata tag from the metadata model.
            </remarks>
        </member>
        <member name="P:FreeImageAPI.Metadata.MDM_ANIMATION.FrameTime">
            <summary>
            Gets or sets the amout of time in milliseconds this frame is to be displayed.
            </summary>
            <remarks>
            <b>Handling of null values</b><para/>
            A null value indicates, that the corresponding metadata tag is not
            present in the metadata model.
            Setting this property's value to a non-null reference creates the
            metadata tag if necessary.
            Setting this property's value to a null reference deletes the
            metadata tag from the metadata model.
            </remarks>
        </member>
        <member name="P:FreeImageAPI.Metadata.MDM_ANIMATION.DisposalMethod">
            <summary>
            Gets or sets this frame's disposal method. Generally, this method defines, how to
            remove or replace a frame when the next frame has to be drawn.<para/>
            </summary>
            <remarks>
            <b>Handling of null values</b><para/>
            A null value indicates, that the corresponding metadata tag is not
            present in the metadata model.
            Setting this property's value to a non-null reference creates the
            metadata tag if necessary.
            Setting this property's value to a null reference deletes the
            metadata tag from the metadata model.
            </remarks>
        </member>
        <member name="M:FreeImageAPI.Metadata.GifInformation.#ctor(FreeImageAPI.FreeImageBitmap)">
            <summary>
            Initializes a new instance of the <see cref="T:FreeImageAPI.Metadata.GifInformation"/> class
            with the specified <see cref="T:FreeImageAPI.FreeImageBitmap"/>.
            </summary>
            <param name="bitmap">A reference to a <see cref="T:FreeImageAPI.FreeImageBitmap"/> instance.</param>
        </member>
        <member name="M:FreeImageAPI.Metadata.GifInformation.CreateGlobalPalette">
            <summary>
            Creates a global palette for the GIF image, intialized with all entries of the
            current local palette.
            The property <see cref="P:FreeImageAPI.Metadata.GifInformation.UseGlobalPalette"/> will be set to <b>true</b> when
            invoking this method. This effectively enables the newly created global palette.
            </summary>
            <exception cref="T:System.InvalidOperationException">
            The image does not have a palette.
            </exception>
        </member>
        <member name="M:FreeImageAPI.Metadata.GifInformation.CreateGlobalPalette(System.Int32)">
            <summary>
            Creates a global palette for the GIF image with the specified size, intialized
            with the first <paramref name="size"/> entries of the current local palette.
            The property <see cref="P:FreeImageAPI.Metadata.GifInformation.UseGlobalPalette"/> will be set to <b>true</b> when
            invoking this method. This effectively enables the newly created global palette.
            </summary>
            <param name="size">The size of the newly created global palette.</param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="palette"/> is a null reference.</exception>
        </member>
        <member name="M:FreeImageAPI.Metadata.GifInformation.CreateGlobalPalette(FreeImageAPI.Palette)">
            <summary>
            Creates a global palette for the GIF image, intialized with the entries
            of the specified palette.
            The property <see cref="P:FreeImageAPI.Metadata.GifInformation.UseGlobalPalette"/> will be set to <b>true</b> when
            invoking this method. This effectively enables the newly created global palette.
            </summary>
            <param name="palette">The palette that contains the initial values for
            the newly created global palette.</param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="palette"/> is a null reference.</exception>
        </member>
        <member name="M:FreeImageAPI.Metadata.GifInformation.CreateGlobalPalette(FreeImageAPI.Palette,System.Int32)">
            <summary>
            Creates a global palette for the GIF image with the specified size, intialized
            with the first <paramref name="size"/> entries of the specified palette.
            The property <see cref="P:FreeImageAPI.Metadata.GifInformation.UseGlobalPalette"/> will be set to <b>true</b> when
            invoking this method. This effectively enables the newly created global palette.
            </summary>
            <param name="palette">The palette that contains the initial values for
            the newly created global palette.</param>
            <param name="size">The size of the newly created global palette.</param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="palette"/> is a null reference.</exception>
        </member>
        <member name="P:FreeImageAPI.Metadata.GifInformation.UseGlobalPalette">
            <summary>
            Gets or sets a value indicating whether this frame uses the
            GIF image's global palette. If set to <b>false</b>, this
            frame uses its local palette.
            </summary>
            <remarks>
            <b>Handling of null values</b><para/>
            A null value indicates, that the corresponding metadata tag is not
            present in the metadata model.
            Setting this property's value to a non-null reference creates the
            metadata tag if necessary.
            Setting this property's value to a null reference deletes the
            metadata tag from the metadata model.
            </remarks>
        </member>
        <member name="T:FreeImageAPI.Metadata.ImageMetadata">
            <summary>
            Class handling metadata of a FreeImage bitmap.
            </summary>
        </member>
        <member name="M:FreeImageAPI.Metadata.ImageMetadata.#ctor(FreeImageAPI.FIBITMAP)">
            <summary>
            Initializes a new instance based on the specified <see cref="T:FreeImageAPI.FIBITMAP"/>,
            showing all known models.
            </summary>
            <param name="dib">Handle to a FreeImage bitmap.</param>
        </member>
        <member name="M:FreeImageAPI.Metadata.ImageMetadata.#ctor(FreeImageAPI.FIBITMAP,System.Boolean)">
            <summary>
            Initializes a new instance based on the specified <see cref="T:FreeImageAPI.FIBITMAP"/>,
            showing or hiding empry models.
            </summary>
            <param name="dib">Handle to a FreeImage bitmap.</param>
            <param name="hideEmptyModels">When <b>true</b>, empty metadata models
            will be hidden until a tag to this model is added.</param>
        </member>
        <member name="M:FreeImageAPI.Metadata.ImageMetadata.AddTag(FreeImageAPI.Metadata.MetadataTag)">
            <summary>
            Adds new tag to the bitmap or updates its value in case it already exists.
            <see cref="P:FreeImageAPI.Metadata.MetadataTag.Key"/> will be used as key.
            </summary>
            <param name="tag">The tag to add or update.</param>
            <returns>Returns true on success, false on failure.</returns>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="tag"/> is null.</exception>
        </member>
        <member name="M:FreeImageAPI.Metadata.ImageMetadata.GetEnumerator">
            <summary>
            Retrieves an object that can iterate through the individual
            <see cref="T:FreeImageAPI.Metadata.MetadataModel">MetadataModels</see>
            in this <see cref="T:FreeImageAPI.Metadata.ImageMetadata"/>.
            </summary>
            <returns>An <see cref="T:System.Collections.IEnumerator"/> for this <see cref="T:FreeImageAPI.Metadata.ImageMetadata"/>.</returns>
        </member>
        <member name="M:FreeImageAPI.Metadata.ImageMetadata.CompareTo(System.Object)">
            <summary>
            Compares this instance with a specified <see cref="T:System.Object"/>.
            </summary>
            <param name="obj">An object to compare with this instance.</param>
            <returns>A 32-bit signed integer indicating the lexical relationship between the two comparands.</returns>
            <exception cref="T:System.ArgumentException"><paramref name="obj"/> is not a <see cref="T:FreeImageAPI.Metadata.ImageMetadata"/>.</exception>
        </member>
        <member name="M:FreeImageAPI.Metadata.ImageMetadata.CompareTo(FreeImageAPI.Metadata.ImageMetadata)">
            <summary>
            Compares this instance with a specified <see cref="T:FreeImageAPI.Metadata.ImageMetadata"/> object.
            </summary>
            <param name="other">A <see cref="T:FreeImageAPI.Metadata.ImageMetadata"/> to compare.</param>
            <returns>A signed number indicating the relative values of this instance
            and <paramref name="other"/>.</returns>
        </member>
        <member name="P:FreeImageAPI.Metadata.ImageMetadata.Item(FreeImageAPI.FREE_IMAGE_MDMODEL)">
            <summary>
            Gets or sets the <see cref="T:FreeImageAPI.Metadata.MetadataModel"/> of the specified type.
            <para>In case the getter returns <c>null</c> the model is not contained
            by the list.</para>
            <para><c>null</c> can be used calling the setter to destroy the model.</para>
            </summary>
            <param name="model">Type of the model.</param>
            <returns>The <see cref="T:FreeImageAPI.Metadata.MetadataModel"/> object of the specified type.</returns>
        </member>
        <member name="P:FreeImageAPI.Metadata.ImageMetadata.Item(System.Int32)">
            <summary>
            Gets or sets the <see cref="T:FreeImageAPI.Metadata.MetadataModel"/> at the specified index.
            <para>In case the getter returns <c>null</c> the model is not contained
            by the list.</para>
            <para><c>null</c> can be used calling the setter to destroy the model.</para>
            </summary>
            <param name="index">Index of the <see cref="T:FreeImageAPI.Metadata.MetadataModel"/> within
            this instance.</param>
            <returns>The <see cref="T:FreeImageAPI.Metadata.MetadataModel"/>
            object at the specified index.</returns>
        </member>
        <member name="P:FreeImageAPI.Metadata.ImageMetadata.List">
            <summary>
            Returns a list of all visible
            <see cref="T:FreeImageAPI.Metadata.MetadataModel">MetadataModels</see>.
            </summary>
        </member>
        <member name="P:FreeImageAPI.Metadata.ImageMetadata.Count">
            <summary>
            Returns the number of visible
            <see cref="T:FreeImageAPI.Metadata.MetadataModel">MetadataModels</see>.
            </summary>
        </member>
        <member name="P:FreeImageAPI.Metadata.ImageMetadata.HideEmptyModels">
            <summary>
            Gets or sets whether empty
            <see cref="T:FreeImageAPI.Metadata.MetadataModel">MetadataModels</see> are hidden.
            </summary>
        </member>
        <member name="T:FreeImageAPI.Plugins.LocalPlugin">
            <summary>
            Class representing own FreeImage-Plugins.
            </summary>
            <remarks>
            FreeImages itself is plugin based. Each supported format is integrated by a seperat plugin,
            that handles loading, saving, descriptions, identifing ect.
            And of course the user can create own plugins and use them in FreeImage.
            To do that the above mentioned predefined methodes need to be implemented.
            <para/>
            The class below handles the creation of such a plugin. The class itself is abstract
            as well as some core functions that need to be implemented.
            The class can be used to enable or disable the plugin in FreeImage after regististration or
            retrieve the formatid, assigned by FreeImage.
            The class handles the callback functions, garbage collector and pointer operation to make
            the implementation as user friendly as possible.
            <para/>
            How to:
            There are two functions that need to be implemented:
            <see cref="M:FreeImageAPI.Plugins.LocalPlugin.GetImplementedMethods"/> and
            <see cref="M:FreeImageAPI.Plugins.LocalPlugin.FormatProc"/>.
            <see cref="M:FreeImageAPI.Plugins.LocalPlugin.GetImplementedMethods"/> is used by the constructor
            of the abstract class. FreeImage wants a list of the implemented functions. Each function is
            represented by a function pointer (a .NET <see cref="T:System.Delegate"/>). In case a function
            is not implemented FreeImage receives an empty <b>delegate</b>). To tell the constructor
            which functions have been implemented the information is represented by a disjunction of
            <see cref="T:FreeImageAPI.Plugins.LocalPlugin.MethodFlags"/>.
            <para/>
            For example:
            	return MethodFlags.LoadProc | MethodFlags.SaveProc;
            <para/>
            The above statement means that LoadProc and SaveProc have been implemented by the user.
            Keep in mind, that each function has a standard implementation that has static return
            values that may cause errors if listed in
            <see cref="M:FreeImageAPI.Plugins.LocalPlugin.GetImplementedMethods"/> without a real implementation.
            <para/>
            <see cref="M:FreeImageAPI.Plugins.LocalPlugin.FormatProc"/> is used by some checks of FreeImage and
            must be implemented. <see cref="M:FreeImageAPI.Plugins.LocalPlugin.LoadProc(FreeImageAPI.IO.FreeImageIO@,FreeImageAPI.IO.fi_handle,System.Int32,System.Int32,System.IntPtr)"/> for example can be
            implemented if the plugin supports reading, but it doesn't have to, the plugin could only
            be used to save an already loaded bitmap in a special format.
            </remarks>
        </member>
        <member name="F:FreeImageAPI.Plugins.LocalPlugin.plugin">
            <summary>
            Struct containing function pointers.
            </summary>
        </member>
        <member name="F:FreeImageAPI.Plugins.LocalPlugin.initProc">
            <summary>
            Delegate for register callback by FreeImage.
            </summary>
        </member>
        <member name="F:FreeImageAPI.Plugins.LocalPlugin.format">
            <summary>
            The format id assiged to the plugin.
            </summary>
        </member>
        <member name="F:FreeImageAPI.Plugins.LocalPlugin.registered">
            <summary>
            When true the plugin was registered successfully else false.
            </summary>
        </member>
        <member name="F:FreeImageAPI.Plugins.LocalPlugin.implementedMethods">
            <summary>
            A copy of the functions used to register.
            </summary>
        </member>
        <member name="M:FreeImageAPI.Plugins.LocalPlugin.GetImplementedMethods">
            <summary>
            Function that returns a bitfield containing the
            implemented methods.
            </summary>
            <returns>Bitfield of the implemented methods.</returns>
        </member>
        <member name="M:FreeImageAPI.Plugins.LocalPlugin.FormatProc">
            <summary>
            Implementation of <b>FormatProc</b>
            </summary>
            <returns>A string containing the plugins format.</returns>
        </member>
        <member name="M:FreeImageAPI.Plugins.LocalPlugin.DescriptionProc">
            <summary>
            Function that can be implemented.
            </summary>
        </member>
        <member name="M:FreeImageAPI.Plugins.LocalPlugin.ExtensionListProc">
            <summary>
            Function that can be implemented.
            </summary>
        </member>
        <member name="M:FreeImageAPI.Plugins.LocalPlugin.RegExprProc">
            <summary>
            Function that can be implemented.
            </summary>
        </member>
        <member name="M:FreeImageAPI.Plugins.LocalPlugin.OpenProc(FreeImageAPI.IO.FreeImageIO@,FreeImageAPI.IO.fi_handle,System.Boolean)">
            <summary>
            Function that can be implemented.
            </summary>
        </member>
        <member name="M:FreeImageAPI.Plugins.LocalPlugin.CloseProc(FreeImageAPI.IO.FreeImageIO@,FreeImageAPI.IO.fi_handle,System.IntPtr)">
            <summary>
            Function that can be implemented.
            </summary>
        </member>
        <member name="M:FreeImageAPI.Plugins.LocalPlugin.PageCountProc(FreeImageAPI.IO.FreeImageIO@,FreeImageAPI.IO.fi_handle,System.IntPtr)">
            <summary>
            Function that can be implemented.
            </summary>
        </member>
        <member name="M:FreeImageAPI.Plugins.LocalPlugin.PageCapabilityProc(FreeImageAPI.IO.FreeImageIO@,FreeImageAPI.IO.fi_handle,System.IntPtr)">
            <summary>
            Function that can be implemented.
            </summary>
        </member>
        <member name="M:FreeImageAPI.Plugins.LocalPlugin.LoadProc(FreeImageAPI.IO.FreeImageIO@,FreeImageAPI.IO.fi_handle,System.Int32,System.Int32,System.IntPtr)">
            <summary>
            Function that can be implemented.
            </summary>
        </member>
        <member name="M:FreeImageAPI.Plugins.LocalPlugin.SaveProc(FreeImageAPI.IO.FreeImageIO@,FreeImageAPI.FIBITMAP,FreeImageAPI.IO.fi_handle,System.Int32,System.Int32,System.IntPtr)">
            <summary>
            Function that can be implemented.
            </summary>
        </member>
        <member name="M:FreeImageAPI.Plugins.LocalPlugin.ValidateProc(FreeImageAPI.IO.FreeImageIO@,FreeImageAPI.IO.fi_handle)">
            <summary>
            Function that can be implemented.
            </summary>
        </member>
        <member name="M:FreeImageAPI.Plugins.LocalPlugin.MimeProc">
            <summary>
            Function that can be implemented.
            </summary>
        </member>
        <member name="M:FreeImageAPI.Plugins.LocalPlugin.SupportsExportBPPProc(System.Int32)">
            <summary>
            Function that can be implemented.
            </summary>
        </member>
        <member name="M:FreeImageAPI.Plugins.LocalPlugin.SupportsExportTypeProc(FreeImageAPI.FREE_IMAGE_TYPE)">
            <summary>
            Function that can be implemented.
            </summary>
        </member>
        <member name="M:FreeImageAPI.Plugins.LocalPlugin.SupportsICCProfilesProc">
            <summary>
            Function that can be implemented.
            </summary>
        </member>
        <member name="M:FreeImageAPI.Plugins.LocalPlugin.#ctor">
            <summary>
            The constructor automatically registeres the plugin in FreeImage.
            To do this it prepares a FreeImage defined structure with function pointers
            to the implemented functions or null if not implemented.
            Before registing the functions they are pinned in memory so the garbage collector
            can't move them around in memory after we passed there addresses to FreeImage.
            </summary>
        </member>
        <member name="M:FreeImageAPI.Plugins.LocalPlugin.Read(FreeImageAPI.IO.FreeImageIO,FreeImageAPI.IO.fi_handle,System.UInt32,System.UInt32,System.Byte[]@)">
            <summary>
            Reads from an unmanaged stream.
            </summary>
        </member>
        <member name="M:FreeImageAPI.Plugins.LocalPlugin.ReadByte(FreeImageAPI.IO.FreeImageIO,FreeImageAPI.IO.fi_handle)">
            <summary>
            Reads a single byte from an unmanaged stream.
            </summary>
        </member>
        <member name="M:FreeImageAPI.Plugins.LocalPlugin.Write(FreeImageAPI.IO.FreeImageIO,FreeImageAPI.IO.fi_handle,System.UInt32,System.UInt32,System.Byte[]@)">
            <summary>
            Writes to an unmanaged stream.
            </summary>
        </member>
        <member name="M:FreeImageAPI.Plugins.LocalPlugin.WriteByte(FreeImageAPI.IO.FreeImageIO,FreeImageAPI.IO.fi_handle,System.Byte)">
            <summary>
            Writes a single byte to an unmanaged stream.
            </summary>
        </member>
        <member name="M:FreeImageAPI.Plugins.LocalPlugin.Seek(FreeImageAPI.IO.FreeImageIO,FreeImageAPI.IO.fi_handle,System.Int32,System.IO.SeekOrigin)">
            <summary>
            Seeks in an unmanaged stream.
            </summary>
        </member>
        <member name="M:FreeImageAPI.Plugins.LocalPlugin.Tell(FreeImageAPI.IO.FreeImageIO,FreeImageAPI.IO.fi_handle)">
            <summary>
            Retrieves the position of an unmanaged stream.
            </summary>
        </member>
        <member name="P:FreeImageAPI.Plugins.LocalPlugin.Enabled">
            <summary>
            Gets or sets if the plugin is enabled.
            </summary>
        </member>
        <member name="P:FreeImageAPI.Plugins.LocalPlugin.Registered">
            <summary>
            Gets if the plugin was registered successfully.
            </summary>
        </member>
        <member name="P:FreeImageAPI.Plugins.LocalPlugin.Format">
            <summary>
            Gets the <see cref="T:FreeImageAPI.FREE_IMAGE_FORMAT"/> FreeImage assigned to this plugin.
            </summary>
        </member>
        <member name="T:FreeImageAPI.Plugins.LocalPlugin.MethodFlags">
            <summary>
            MethodFlags defines values to fill a bitfield telling which
            functions have been implemented by a plugin.
            </summary>
        </member>
        <member name="F:FreeImageAPI.Plugins.LocalPlugin.MethodFlags.None">
            <summary>
            No mothods implemented.
            </summary>
        </member>
        <member name="F:FreeImageAPI.Plugins.LocalPlugin.MethodFlags.DescriptionProc">
            <summary>
            DescriptionProc has been implemented.
            </summary>
        </member>
        <member name="F:FreeImageAPI.Plugins.LocalPlugin.MethodFlags.ExtensionListProc">
            <summary>
            ExtensionListProc has been implemented.
            </summary>
        </member>
        <member name="F:FreeImageAPI.Plugins.LocalPlugin.MethodFlags.RegExprProc">
            <summary>
            RegExprProc has been implemented.
            </summary>
        </member>
        <member name="F:FreeImageAPI.Plugins.LocalPlugin.MethodFlags.OpenProc">
            <summary>
            OpenProc has been implemented.
            </summary>
        </member>
        <member name="F:FreeImageAPI.Plugins.LocalPlugin.MethodFlags.CloseProc">
            <summary>
            CloseProc has been implemented.
            </summary>
        </member>
        <member name="F:FreeImageAPI.Plugins.LocalPlugin.MethodFlags.PageCountProc">
            <summary>
            PageCountProc has been implemented.
            </summary>
        </member>
        <member name="F:FreeImageAPI.Plugins.LocalPlugin.MethodFlags.PageCapabilityProc">
            <summary>
            PageCapabilityProc has been implemented.
            </summary>
        </member>
        <member name="F:FreeImageAPI.Plugins.LocalPlugin.MethodFlags.LoadProc">
            <summary>
            LoadProc has been implemented.
            </summary>
        </member>
        <member name="F:FreeImageAPI.Plugins.LocalPlugin.MethodFlags.SaveProc">
            <summary>
            SaveProc has been implemented.
            </summary>
        </member>
        <member name="F:FreeImageAPI.Plugins.LocalPlugin.MethodFlags.ValidateProc">
            <summary>
            ValidateProc has been implemented.
            </summary>
        </member>
        <member name="F:FreeImageAPI.Plugins.LocalPlugin.MethodFlags.MimeProc">
            <summary>
            MimeProc has been implemented.
            </summary>
        </member>
        <member name="F:FreeImageAPI.Plugins.LocalPlugin.MethodFlags.SupportsExportBPPProc">
            <summary>
            SupportsExportBPPProc has been implemented.
            </summary>
        </member>
        <member name="F:FreeImageAPI.Plugins.LocalPlugin.MethodFlags.SupportsExportTypeProc">
            <summary>
            SupportsExportTypeProc has been implemented.
            </summary>
        </member>
        <member name="F:FreeImageAPI.Plugins.LocalPlugin.MethodFlags.SupportsICCProfilesProc">
            <summary>
            SupportsICCProfilesProc has been implemented.
            </summary>
        </member>
        <member name="T:FreeImageAPI.MemoryArray`1">
            <summary>
            Represents unmanaged memory, containing an array of a given structure.
            </summary>
            <typeparam name="T">Structuretype represented by the instance.</typeparam>
            <remarks>
            <see cref="T:System.Boolean"/> and <see cref="T:System.Char"/> can not be marshalled.
            <para/>
            Use <see cref="T:System.Int32"/> instead of <see cref="T:System.Boolean"/> and
            <see cref="T:System.Byte"/> instead of <see cref="T:System.Char"/>.
            </remarks>
        </member>
        <member name="F:FreeImageAPI.MemoryArray`1.baseAddress">
            <summary>
            Baseaddress of the wrapped memory.
            </summary>
        </member>
        <member name="F:FreeImageAPI.MemoryArray`1.length">
            <summary>
            Number of elements being wrapped.
            </summary>
        </member>
        <member name="F:FreeImageAPI.MemoryArray`1.size">
            <summary>
            Size, in bytes, of each element.
            </summary>
        </member>
        <member name="F:FreeImageAPI.MemoryArray`1.buffer">
            <summary>
            Array of <b>T</b> containing a single element.
            The array is used as a workaround, because there are no pointer for generic types.
            </summary>
        </member>
        <member name="F:FreeImageAPI.MemoryArray`1.ptr">
            <summary>
            Pointer to the element of <b>buffer</b>.
            </summary>
        </member>
        <member name="F:FreeImageAPI.MemoryArray`1.handle">
            <summary>
            Handle for pinning <b>buffer</b>.
            </summary>
        </member>
        <member name="F:FreeImageAPI.MemoryArray`1.isOneBit">
            <summary>
            Indicates whether the wrapped memory is handled like a bitfield.
            </summary>
        </member>
        <member name="F:FreeImageAPI.MemoryArray`1.isFourBit">
            <summary>
            Indicates whther the wrapped memory is handles like 4-bit blocks.
            </summary>
        </member>
        <member name="F:FreeImageAPI.MemoryArray`1.syncRoot">
            <summary>
            An object that can be used to synchronize access to the <see cref="T:FreeImageAPI.MemoryArray`1"/>.
            </summary>
        </member>
        <member name="M:FreeImageAPI.MemoryArray`1.#ctor">
            <summary>
            Initializes a new instance.
            </summary>
        </member>
        <member name="M:FreeImageAPI.MemoryArray`1.#ctor(System.IntPtr,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:FreeImageAPI.MemoryArray`1"/> class. 
            </summary>
            <param name="baseAddress">Address of the memory block.</param>
            <param name="length">Length of the array.</param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="baseAddress"/> is null.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <paramref name="length"/> is less or equal zero.</exception>
            <exception cref="T:System.NotSupportedException">
            The type is not supported.</exception>
        </member>
        <member name="M:FreeImageAPI.MemoryArray`1.#ctor(System.Void*,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:FreeImageAPI.MemoryArray`1"/> class. 
            </summary>
            <param name="baseAddress">Address of the memory block.</param>
            <param name="length">Length of the array.</param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="baseAddress"/> is null.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <paramref name="length"/> is less or equal zero.</exception>
            <exception cref="T:System.NotSupportedException">
            The type is not supported.</exception>
        </member>
        <member name="M:FreeImageAPI.MemoryArray`1.Finalize">
            <summary>
            Frees the allocated <see cref="T:System.Runtime.InteropServices.GCHandle"/>.
            </summary>
        </member>
        <member name="M:FreeImageAPI.MemoryArray`1.op_Equality(FreeImageAPI.MemoryArray{`0},FreeImageAPI.MemoryArray{`0})">
            <summary>
            Tests whether two specified <see cref="T:FreeImageAPI.MemoryArray`1"/> structures are equivalent.
            </summary>
            <param name="left">The <see cref="T:FreeImageAPI.MemoryArray`1"/> that is to the left of the equality operator.</param>
            <param name="right">The <see cref="T:FreeImageAPI.MemoryArray`1"/> that is to the right of the equality operator.</param>
            <returns>
            <b>true</b> if the two <see cref="T:FreeImageAPI.MemoryArray`1"/> structures are equal; otherwise, <b>false</b>.
            </returns>
        </member>
        <member name="M:FreeImageAPI.MemoryArray`1.op_Inequality(FreeImageAPI.MemoryArray{`0},FreeImageAPI.MemoryArray{`0})">
            <summary>
            Tests whether two specified <see cref="T:FreeImageAPI.MemoryArray`1"/> structures are different.
            </summary>
            <param name="left">The <see cref="T:FreeImageAPI.MemoryArray`1"/> that is to the left of the inequality operator.</param>
            <param name="right">The <see cref="T:FreeImageAPI.MemoryArray`1"/> that is to the right of the inequality operator.</param>
            <returns>
            <b>true</b> if the two <see cref="T:FreeImageAPI.MemoryArray`1"/> structures are different; otherwise, <b>false</b>.
            </returns>
        </member>
        <member name="M:FreeImageAPI.MemoryArray`1.GetValue(System.Int32)">
            <summary>
            Gets the value at the specified position.
            </summary>
            <param name="index">A 32-bit integer that represents the position
            of the array element to get.</param>
            <returns>The value at the specified position.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <paramref name="index"/> is outside the range of valid indexes
            for the unmanaged array.</exception>
        </member>
        <member name="M:FreeImageAPI.MemoryArray`1.SetValue(`0,System.Int32)">
            <summary>
            Sets a value to the element at the specified position.
            </summary>
            <param name="value">The new value for the specified element.</param>
            <param name="index">A 32-bit integer that represents the
            position of the array element to set.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <paramref name="index"/> is outside the range of valid indexes
            for the unmanaged array.</exception>
        </member>
        <member name="M:FreeImageAPI.MemoryArray`1.GetValues(System.Int32,System.Int32)">
            <summary>
            Gets the values at the specified position and length.
            </summary>
            <param name="index">A 32-bit integer that represents the position
            of the array elements to get.</param>
            <param name="length"> A 32-bit integer that represents the length
            of the array elements to get.</param>
            <returns>The values at the specified position and length.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <paramref name="index"/> is outside the range of valid indexes
            for the unmanaged array or <paramref name="length"/> is greater than the number of elements
            from <paramref name="index"/> to the end of the unmanaged array.</exception>
        </member>
        <member name="M:FreeImageAPI.MemoryArray`1.SetValues(`0[],System.Int32)">
            <summary>
            Sets the values at the specified position.
            </summary>
            <param name="values">An array containing the new values for the specified elements.</param>
            <param name="index">A 32-bit integer that represents the position
            of the array elements to set.</param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="values"/> is a null reference (Nothing in Visual Basic).</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <paramref name="index"/> is outside the range of valid indexes
            for the unmanaged array or <paramref name="values.Length"/> is greater than the number of elements
            from <paramref name="index"/> to the end of the array.</exception>
        </member>
        <member name="M:FreeImageAPI.MemoryArray`1.CopyTo(System.Array,System.Int32)">
            <summary>
            Copies the entire array to a compatible one-dimensional <see cref="T:System.Array"/>,
            starting at the specified index of the target array.
            </summary>
            <param name="array">The one-dimensional <see cref="T:System.Array"/> that is the destination
            of the elements copied from <see cref="T:FreeImageAPI.MemoryArray`1"/>.
            The <see cref="T:System.Array"/> must have zero-based indexing.</param>
            <param name="index">The zero-based index in <paramref name="array"/>
            at which copying begins.</param>
        </member>
        <member name="M:FreeImageAPI.MemoryArray`1.CopyTo(`0[],System.Int32,System.Int32,System.Int32)">
            <summary>
            Copies a range of elements from the unmanaged array starting at the specified
            <typeparamref name="sourceIndex"/> and pastes them to <paramref name="array"/>
            starting at the specified <paramref name="destinationIndex"/>.
            The length and the indexes are specified as 32-bit integers.
            </summary>
            <param name="array">The array that receives the data.</param>
            <param name="sourceIndex">A 32-bit integer that represents the index
            in the unmanaged array at which copying begins.</param>
            <param name="destinationIndex">A 32-bit integer that represents the index in
            the destination array at which storing begins.</param>
            <param name="length">A 32-bit integer that represents the number of elements to copy.</param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="array"/> is a null reference (Nothing in Visual Basic).</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <paramref name="sourceIndex"/> is outside the range of valid indexes
            for the unmanaged array or <paramref name="length"/> is greater than the number of elements
            from <paramref name="index"/> to the end of the unmanaged array
            <para>-or-</para>
            <paramref name="destinationIndex"/> is outside the range of valid indexes
            for the array or <paramref name="length"/> is greater than the number of elements
            from <paramref name="index"/> to the end of the array.
            </exception>
        </member>
        <member name="M:FreeImageAPI.MemoryArray`1.CopyFrom(`0[],System.Int32,System.Int32,System.Int32)">
            <summary>
            Copies a range of elements from the array starting at the specified
            <typeparamref name="sourceIndex"/> and pastes them to the unmanaged array
            starting at the specified <paramref name="destinationIndex"/>.
            The length and the indexes are specified as 32-bit integers.
            </summary>
            <param name="array">The array that holds the data.</param>
            <param name="sourceIndex">A 32-bit integer that represents the index
            in the array at which copying begins.</param>
            <param name="destinationIndex">A 32-bit integer that represents the index in
            the unmanaged array at which storing begins.</param>
            <param name="length">A 32-bit integer that represents the number of elements to copy.</param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="array"/> is a null reference (Nothing in Visual Basic).</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <paramref name="sourceIndex"/> is outside the range of valid indexes
            for the array or <paramref name="length"/> is greater than the number of elements
            from <paramref name="index"/> to the end of the array
            <para>-or-</para>
            <paramref name="destinationIndex"/> is outside the range of valid indexes
            for the unmanaged array or <paramref name="length"/> is greater than the number of elements
            from <paramref name="index"/> to the end of the unmanaged array.
            </exception>
        </member>
        <member name="M:FreeImageAPI.MemoryArray`1.ToByteArray">
            <summary>
            Returns the represented block of memory as an array of <see cref="T:System.Byte"/>.
            </summary>
            <returns>The represented block of memory.</returns>
        </member>
        <member name="M:FreeImageAPI.MemoryArray`1.Clone">
            <summary>
            Creates a shallow copy of the <see cref="T:FreeImageAPI.MemoryArray`1"/>.
            </summary>
            <returns>A shallow copy of the <see cref="T:FreeImageAPI.MemoryArray`1"/>.</returns>
        </member>
        <member name="M:FreeImageAPI.MemoryArray`1.GetEnumerator">
            <summary>
            Retrieves an object that can iterate through the individual
            elements in this <see cref="T:FreeImageAPI.MemoryArray`1"/>.
            </summary>
            <returns>An <see cref="T:System.Collections.IEnumerator"/> for the <see cref="T:FreeImageAPI.MemoryArray`1"/>.</returns>
        </member>
        <member name="M:FreeImageAPI.MemoryArray`1.System#Collections#Generic#IEnumerable{T}#GetEnumerator">
            <summary>
            Retrieves an object that can iterate through the individual
            elements in this <see cref="T:FreeImageAPI.MemoryArray`1"/>.
            </summary>
            <returns>An <see cref="T:System.Collections.Generic.IEnumerator`1"/> for the <see cref="T:FreeImageAPI.MemoryArray`1"/>.</returns>
        </member>
        <member name="M:FreeImageAPI.MemoryArray`1.Dispose">
            <summary>
            Releases all ressources.
            </summary>
        </member>
        <member name="M:FreeImageAPI.MemoryArray`1.Dispose(System.Boolean)">
            <summary>
            Releases allocated handles associated with this instance.
            </summary>
            <param name="disposing"><b>true</b> to release managed resources.</param>
        </member>
        <member name="M:FreeImageAPI.MemoryArray`1.EnsureNotDisposed">
            <summary>
            Throws an <see cref="T:System.ObjectDisposedException"/> if
            this instance is disposed.
            </summary>
        </member>
        <member name="M:FreeImageAPI.MemoryArray`1.Equals(System.Object)">
            <summary>
            Tests whether the specified <see cref="T:FreeImageAPI.MemoryArray`1"/> structure is equivalent to this
            <see cref="T:FreeImageAPI.MemoryArray`1"/> structure.
            </summary>
            <param name="obj">The structure to test.</param>
            <returns><b>true</b> if <paramref name="obj"/> is a <see cref="T:FreeImageAPI.MemoryArray`1"/>
            instance equivalent to this <see cref="T:FreeImageAPI.MemoryArray`1"/> structure; otherwise,
            <b>false</b>.</returns>
        </member>
        <member name="M:FreeImageAPI.MemoryArray`1.Equals(FreeImageAPI.MemoryArray{`0})">
            <summary>
            Tests whether the specified <see cref="T:FreeImageAPI.MemoryArray`1"/> structure is equivalent to this
            <see cref="T:FreeImageAPI.MemoryArray`1"/> structure.
            </summary>
            <param name="other">The structure to test.</param>
            <returns><b>true</b> if <paramref name="other"/> is equivalent to this
            <see cref="T:FreeImageAPI.MemoryArray`1"/> structure; otherwise,
            <b>false</b>.</returns>
        </member>
        <member name="M:FreeImageAPI.MemoryArray`1.GetHashCode">
            <summary>
            Serves as a hash function for a particular type.
            </summary>
            <returns>A hash code for the current <see cref="T:FreeImageAPI.MemoryArray`1"/>.</returns>
        </member>
        <member name="M:FreeImageAPI.MemoryArray`1.CopyMemory(System.Byte*,System.Byte*,System.Int32)">
            <summary>
            Copies a block of memory from one location to another.
            </summary>
            <param name="dest">Pointer to the starting address of the copy destination.</param>
            <param name="src">Pointer to the starting address of the block of memory to be copied.</param>
            <param name="len">Size of the block of memory to copy, in bytes.</param>
        </member>
        <member name="P:FreeImageAPI.MemoryArray`1.Item(System.Int32)">
            <summary>
            Gets or sets the value at the specified position in the array.
            </summary>
            <param name="index">A 32-bit integer that represents the position
            of the array element to get.</param>
            <returns>The value at the specified position in the array.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <paramref name="index"/> is outside the range of valid indexes
            for the unmanaged array.</exception>
        </member>
        <member name="P:FreeImageAPI.MemoryArray`1.Data">
            <summary>
            Gets or sets the values of the unmanaged array.
            </summary>
        </member>
        <member name="P:FreeImageAPI.MemoryArray`1.Length">
            <summary>
            Gets the length of the unmanaged array.
            </summary>
        </member>
        <member name="P:FreeImageAPI.MemoryArray`1.BaseAddress">
            <summary>
            Gets the base address of the represented memory block.
            </summary>
        </member>
        <member name="P:FreeImageAPI.MemoryArray`1.Count">
            <summary>
            Gets a 32-bit integer that represents the total number of elements
            in the <see cref="T:FreeImageAPI.MemoryArray`1"/>.
            </summary>
        </member>
        <member name="P:FreeImageAPI.MemoryArray`1.IsSynchronized">
            <summary>
            Gets a value indicating whether access to the <see cref="T:FreeImageAPI.MemoryArray`1"/>
            is synchronized (thread safe).
            </summary>
        </member>
        <member name="P:FreeImageAPI.MemoryArray`1.SyncRoot">
            <summary>
            Gets an object that can be used to synchronize access to the <see cref="T:FreeImageAPI.MemoryArray`1"/>.
            </summary>
        </member>
        <member name="T:FreeImageAPI.Metadata.MDM_COMMENTS">
            <summary>
            Represents a collection of all tags contained in the metadata model
            <see cref="F:FreeImageAPI.FREE_IMAGE_MDMODEL.FIMD_COMMENTS"/>.
            </summary>
        </member>
        <member name="M:FreeImageAPI.Metadata.MDM_COMMENTS.#ctor(FreeImageAPI.FIBITMAP)">
            <summary>
            Initializes a new instance of this class.
            </summary>
            <param name="dib">Handle to a FreeImage bitmap.</param>
        </member>
        <member name="P:FreeImageAPI.Metadata.MDM_COMMENTS.Model">
            <summary>
            Retrieves the datamodel that this instance represents.
            </summary>
        </member>
        <member name="P:FreeImageAPI.Metadata.MDM_COMMENTS.Comment">
            <summary>
            Gets or sets the comment of the image.
            Supported formats are JPEG, PNG and GIF.
            </summary>
            <remarks>
            <b>Handling of null values</b><para/>
            A null value indicates, that the corresponding metadata tag is not
            present in the metadata model.
            Setting this property's value to a non-null reference creates the
            metadata tag if necessary.
            Setting this property's value to a null reference deletes the
            metadata tag from the metadata model.
            </remarks>
        </member>
        <member name="T:FreeImageAPI.Metadata.MDM_CUSTOM">
            <summary>
            Represents a collection of all tags contained in the metadata model
            <see cref="F:FreeImageAPI.FREE_IMAGE_MDMODEL.FIMD_CUSTOM"/>.
            </summary>
        </member>
        <member name="M:FreeImageAPI.Metadata.MDM_CUSTOM.#ctor(FreeImageAPI.FIBITMAP)">
            <summary>
            Initializes a new instance of this class.
            </summary>
            <param name="dib">Handle to a FreeImage bitmap.</param>
        </member>
        <member name="P:FreeImageAPI.Metadata.MDM_CUSTOM.Model">
            <summary>
            Retrieves the datamodel that this instance represents.
            </summary>
        </member>
        <member name="T:FreeImageAPI.Metadata.MDM_EXIF_EXIF">
            <summary>
            Represents a collection of all tags contained in the metadata model
            <see cref="F:FreeImageAPI.FREE_IMAGE_MDMODEL.FIMD_EXIF_EXIF"/>.
            </summary>
        </member>
        <member name="M:FreeImageAPI.Metadata.MDM_EXIF_EXIF.#ctor(FreeImageAPI.FIBITMAP)">
            <summary>
            Initializes a new instance of this class.
            </summary>
            <param name="dib">Handle to a FreeImage bitmap.</param>
        </member>
        <member name="P:FreeImageAPI.Metadata.MDM_EXIF_EXIF.Model">
            <summary>
            Retrieves the datamodel that this instance represents.
            </summary>
        </member>
        <member name="P:FreeImageAPI.Metadata.MDM_EXIF_EXIF.ExifVersion">
            <summary>
            Gets or sets the version of this standard supported.
            Constant length or 4.
            </summary>
            <remarks>
            <b>Handling of null values</b><para/>
            A null value indicates, that the corresponding metadata tag is not
            present in the metadata model.
            Setting this property's value to a non-null reference creates the
            metadata tag if necessary.
            Setting this property's value to a null reference deletes the
            metadata tag from the metadata model.
            </remarks>
        </member>
        <member name="P:FreeImageAPI.Metadata.MDM_EXIF_EXIF.FlashpixVersion">
            <summary>
            Gets or sets the Flashpix format version supported by a FPXR file.
            Constant length or 4.
            </summary>
            <remarks>
            <b>Handling of null values</b><para/>
            A null value indicates, that the corresponding metadata tag is not
            present in the metadata model.
            Setting this property's value to a non-null reference creates the
            metadata tag if necessary.
            Setting this property's value to a null reference deletes the
            metadata tag from the metadata model.
            </remarks>
        </member>
        <member name="P:FreeImageAPI.Metadata.MDM_EXIF_EXIF.ColorSpace">
            <summary>
            Gets or sets the color space information tag.
            See remarks for further information.
            </summary>
            <remarks>
            The following values are defined:<para/>
            <list type="table">
            	<listheader>
            		<term>ID</term>
            		<description>Description</description>
            	</listheader>
            	<item>
            		<term>1</term>
            		<description>sRGB (default)</description>
            	</item>
            	<item>
            		<term>0xFFFF</term>
            		<description>uncalibrated</description>
            	</item>
            	<item>
            		<term>other</term>
            		<description>reserved</description>
            	</item>
            </list>
            <para/>
            <br/><b>Handling of null values</b><para/>
            A null value indicates, that the corresponding metadata tag is not
            present in the metadata model.
            Setting this property's value to a non-null reference creates the
            metadata tag if necessary.
            Setting this property's value to a null reference deletes the
            metadata tag from the metadata model.
            </remarks>
        </member>
        <member name="P:FreeImageAPI.Metadata.MDM_EXIF_EXIF.PixelXDimension">
            <summary>
            Gets or sets the valid width of a compressed image.
            </summary>
            <remarks>
            <b>Handling of null values</b><para/>
            A null value indicates, that the corresponding metadata tag is not
            present in the metadata model.
            Setting this property's value to a non-null reference creates the
            metadata tag if necessary.
            Setting this property's value to a null reference deletes the
            metadata tag from the metadata model.
            </remarks>
        </member>
        <member name="P:FreeImageAPI.Metadata.MDM_EXIF_EXIF.PixelYDimension">
            <summary>
            Gets or sets the valid height of a compressed image.
            </summary>
            <remarks>
            <b>Handling of null values</b><para/>
            A null value indicates, that the corresponding metadata tag is not
            present in the metadata model.
            Setting this property's value to a non-null reference creates the
            metadata tag if necessary.
            Setting this property's value to a null reference deletes the
            metadata tag from the metadata model.
            </remarks>
        </member>
        <member name="P:FreeImageAPI.Metadata.MDM_EXIF_EXIF.ComponentsConfiguration">
            <summary>
            Gets or sets components configuration. See remarks for further information.
            Constant length of 4.
            </summary>
            <remarks>
            The channels of each component are arranged in order from the 1st component to the 4th.
            For uncompressed data the data arrangement is given in the PhotometricInterpretation tag.
            However, since PhotometricInterpretation can only express the order of Y,Cb and Cr,
            this tag is provided for cases when compressed data uses components other than Y, Cb,
            and Cr and to enable support of other sequences.<para/>
            Default = 4 5 6 0 (if RGB uncompressed)<para/>
            The following values are defined:<para/>
            <list type="table">
            	<listheader>
            		<term>ID</term>
            		<description>Description</description>
            	</listheader>
            	<item>
            		<term>0</term>
            		<description>does not exist</description>
            	</item>
            	<item>
            		<term>1</term>
            		<description>Y</description>
            	</item>
            	<item>
            		<term>2</term>
            		<description>Cb</description>
            	</item>
            	<item>
            		<term>3</term>
            		<description>Cr</description>
            	</item>
            	<item>
            		<term>4</term>
            		<description>R</description>
            	</item>
            	<item>
            		<term>5</term>
            		<description>R</description>
            	</item>
            	<item>
            		<term>6</term>
            		<description>R</description>
            	</item>
            	<item>
            		<term>other</term>
            		<description>reserved</description>
            	</item>
            </list>
            <para/>
            <br/><b>Handling of null values</b><para/>
            A null value indicates, that the corresponding metadata tag is not
            present in the metadata model.
            Setting this property's value to a non-null reference creates the
            metadata tag if necessary.
            Setting this property's value to a null reference deletes the
            metadata tag from the metadata model.
            </remarks>
        </member>
        <member name="P:FreeImageAPI.Metadata.MDM_EXIF_EXIF.CompressedBitsPerPixel">
            <summary>
            Gets or sets compression mode used for a compressed image is indicated
            in unit bits per pixel.
            </summary>
            <remarks>
            <b>Handling of null values</b><para/>
            A null value indicates, that the corresponding metadata tag is not
            present in the metadata model.
            Setting this property's value to a non-null reference creates the
            metadata tag if necessary.
            Setting this property's value to a null reference deletes the
            metadata tag from the metadata model.
            </remarks>
        </member>
        <member name="P:FreeImageAPI.Metadata.MDM_EXIF_EXIF.MakerNote">
            <summary>
            Gets or sets a tag for manufacturers of Exif writers to record any desired information.
            The contents are up to the manufacturer, but this tag should not be used for any other
            than its intended purpose.
            </summary>
            <remarks>
            <b>Handling of null values</b><para/>
            A null value indicates, that the corresponding metadata tag is not
            present in the metadata model.
            Setting this property's value to a non-null reference creates the
            metadata tag if necessary.
            Setting this property's value to a null reference deletes the
            metadata tag from the metadata model.
            </remarks>
        </member>
        <member name="P:FreeImageAPI.Metadata.MDM_EXIF_EXIF.UserComment">
            <summary>
            Gets or sets a tag for Exif users to write keywords or comments on the image besides
            those in ImageDescription, and without the character code limitations of the ImageDescription tag.
            Minimum length of 8. See remarks for further information.
            </summary>
            <remarks>
            The character code used in the UserComment tag is identified based on an ID code in a fixed 8-byte
            area at the start of the tag data area. The unused portion of the area is padded with NULL.
            The ID code for the UserComment area may be a Defined code such as JIS or ASCII, or may be Undefined.
            <para/>
            <br/><b>Handling of null values</b><para/>
            A null value indicates, that the corresponding metadata tag is not
            present in the metadata model.
            Setting this property's value to a non-null reference creates the
            metadata tag if necessary.
            Setting this property's value to a null reference deletes the
            metadata tag from the metadata model.
            </remarks>
        </member>
        <member name="P:FreeImageAPI.Metadata.MDM_EXIF_EXIF.RelatedSoundFile">
            <summary>
            Gets or sets the name of an audio file related to the image data.
            The format is 8.3.
            Constant length of 12
            </summary>
            <remarks>
            <b>Handling of null values</b><para/>
            A null value indicates, that the corresponding metadata tag is not
            present in the metadata model.
            Setting this property's value to a non-null reference creates the
            metadata tag if necessary.
            Setting this property's value to a null reference deletes the
            metadata tag from the metadata model.
            </remarks>
        </member>
        <member name="P:FreeImageAPI.Metadata.MDM_EXIF_EXIF.DateTimeOriginal">
            <summary>
            Gets or sets the date and time when the original image data was generated.
            </summary>
            <remarks>
            <b>Handling of null values</b><para/>
            A null value indicates, that the corresponding metadata tag is not
            present in the metadata model.
            Setting this property's value to a non-null reference creates the
            metadata tag if necessary.
            Setting this property's value to a null reference deletes the
            metadata tag from the metadata model.
            </remarks>
        </member>
        <member name="P:FreeImageAPI.Metadata.MDM_EXIF_EXIF.DateTimeDigitized">
            <summary>
            Gets or sets the date and time when the image was stored as digital data.
            </summary>
            <remarks>
            <b>Handling of null values</b><para/>
            A null value indicates, that the corresponding metadata tag is not
            present in the metadata model.
            Setting this property's value to a non-null reference creates the
            metadata tag if necessary.
            Setting this property's value to a null reference deletes the
            metadata tag from the metadata model.
            </remarks>
        </member>
        <member name="P:FreeImageAPI.Metadata.MDM_EXIF_EXIF.SubsecTime">
            <summary>
            Gets or sets a tag used to record fractions of seconds for the DateTime tag.
            </summary>
            <remarks>
            <b>Handling of null values</b><para/>
            A null value indicates, that the corresponding metadata tag is not
            present in the metadata model.
            Setting this property's value to a non-null reference creates the
            metadata tag if necessary.
            Setting this property's value to a null reference deletes the
            metadata tag from the metadata model.
            </remarks>
        </member>
        <member name="P:FreeImageAPI.Metadata.MDM_EXIF_EXIF.SubsecTimeOriginal">
            <summary>
            Gets or sets a tag used to record fractions of seconds for the DateTimeOriginal tag.
            </summary>
            <remarks>
            <b>Handling of null values</b><para/>
            A null value indicates, that the corresponding metadata tag is not
            present in the metadata model.
            Setting this property's value to a non-null reference creates the
            metadata tag if necessary.
            Setting this property's value to a null reference deletes the
            metadata tag from the metadata model.
            </remarks>
        </member>
        <member name="P:FreeImageAPI.Metadata.MDM_EXIF_EXIF.SubsecTimeDigitized">
            <summary>
            Gets or sets a tag used to record fractions of seconds for the DateTimeDigitized tag.
            </summary>
            <remarks>
            <b>Handling of null values</b><para/>
            A null value indicates, that the corresponding metadata tag is not
            present in the metadata model.
            Setting this property's value to a non-null reference creates the
            metadata tag if necessary.
            Setting this property's value to a null reference deletes the
            metadata tag from the metadata model.
            </remarks>
        </member>
        <member name="P:FreeImageAPI.Metadata.MDM_EXIF_EXIF.ExposureTime">
            <summary>
            Gets or the exposure time, given in seconds (sec).
            </summary>
            <remarks>
            <b>Handling of null values</b><para/>
            A null value indicates, that the corresponding metadata tag is not
            present in the metadata model.
            Setting this property's value to a non-null reference creates the
            metadata tag if necessary.
            Setting this property's value to a null reference deletes the
            metadata tag from the metadata model.
            </remarks>
        </member>
        <member name="P:FreeImageAPI.Metadata.MDM_EXIF_EXIF.FNumber">
            <summary>
            Gets or the F number.
            </summary>
            <remarks>
            <b>Handling of null values</b><para/>
            A null value indicates, that the corresponding metadata tag is not
            present in the metadata model.
            Setting this property's value to a non-null reference creates the
            metadata tag if necessary.
            Setting this property's value to a null reference deletes the
            metadata tag from the metadata model.
            </remarks>
        </member>
        <member name="P:FreeImageAPI.Metadata.MDM_EXIF_EXIF.ExposureProgram">
            <summary>
            Gets or sets the class of the program used by the camera to set exposure when the
            picture is taken.
            See remarks for further information.
            </summary>
            <remarks>
            The following values are defined:<para/>
            <list type="table">
            	<listheader>
            		<term>ID</term>
            		<description>Description</description>
            	</listheader>
            	<item>
            		<term>0</term>
            		<description>not defined</description>
            	</item>
            	<item>
            		<term>1</term>
            		<description>manual</description>
            	</item>
            	<item>
            		<term>2</term>
            		<description>normal program</description>
            	</item>
            	<item>
            		<term>3</term>
            		<description>aperture priority</description>
            	</item>
            	<item>
            		<term>4</term>
            		<description>shutter priority</description>
            	</item>
            	<item>
            		<term>5</term>
            		<description>create program</description>
            	</item>
            	<item>
            		<term>6</term>
            		<description>action program</description>
            	</item>
            	<item>
            		<term>7</term>
            		<description>portrait mode</description>
            	</item>
            	<item>
            		<term>8</term>
            		<description>landscape mode</description>
            	</item>
            	<item>
            		<term>others</term>
            		<description>reserved</description>
            	</item>
            </list>
            <para/>
            <br/><b>Handling of null values</b><para/>
            A null value indicates, that the corresponding metadata tag is not
            present in the metadata model.
            Setting this property's value to a non-null reference creates the
            metadata tag if necessary.
            Setting this property's value to a null reference deletes the
            metadata tag from the metadata model.
            </remarks>
        </member>
        <member name="P:FreeImageAPI.Metadata.MDM_EXIF_EXIF.SpectralSensitivity">
            <summary>
            Gets or sets the spectral sensitivity of each channel of the camera used.
            </summary>
            <remarks>
            <b>Handling of null values</b><para/>
            A null value indicates, that the corresponding metadata tag is not
            present in the metadata model.
            Setting this property's value to a non-null reference creates the
            metadata tag if necessary.
            Setting this property's value to a null reference deletes the
            metadata tag from the metadata model.
            </remarks>
        </member>
        <member name="P:FreeImageAPI.Metadata.MDM_EXIF_EXIF.ISOSpeedRatings">
            <summary>
            Gets or sets the the ISO Speed and ISO Latitude of the camera or input device as
            specified in ISO 12232.
            </summary>
            <remarks>
            <b>Handling of null values</b><para/>
            A null value indicates, that the corresponding metadata tag is not
            present in the metadata model.
            Setting this property's value to a non-null reference creates the
            metadata tag if necessary.
            Setting this property's value to a null reference deletes the
            metadata tag from the metadata model.
            </remarks>
        </member>
        <member name="P:FreeImageAPI.Metadata.MDM_EXIF_EXIF.OECF">
            <summary>
            Gets or sets the Opto-Electric Conversion Function (OECF) specified in ISO 14524.
            OECF is the relationship between the camera optical input and the image values.
            </summary>
            <remarks>
            <b>Handling of null values</b><para/>
            A null value indicates, that the corresponding metadata tag is not
            present in the metadata model.
            Setting this property's value to a non-null reference creates the
            metadata tag if necessary.
            Setting this property's value to a null reference deletes the
            metadata tag from the metadata model.
            </remarks>
        </member>
        <member name="P:FreeImageAPI.Metadata.MDM_EXIF_EXIF.ShutterSpeedValue">
            <summary>
            Gets or sets the shutter speed. The unit is the APEX (Additive System of Photographic Exposure).
            </summary>
            <remarks>
            <b>Handling of null values</b><para/>
            A null value indicates, that the corresponding metadata tag is not
            present in the metadata model.
            Setting this property's value to a non-null reference creates the
            metadata tag if necessary.
            Setting this property's value to a null reference deletes the
            metadata tag from the metadata model.
            </remarks>
        </member>
        <member name="P:FreeImageAPI.Metadata.MDM_EXIF_EXIF.ApertureValue">
            <summary>
            Gets or sets the lens aperture. The unit is the APEX value.
            </summary>
            <remarks>
            <b>Handling of null values</b><para/>
            A null value indicates, that the corresponding metadata tag is not
            present in the metadata model.
            Setting this property's value to a non-null reference creates the
            metadata tag if necessary.
            Setting this property's value to a null reference deletes the
            metadata tag from the metadata model.
            </remarks>
        </member>
        <member name="P:FreeImageAPI.Metadata.MDM_EXIF_EXIF.BrightnessValue">
            <summary>
            Gets or sets the value of brightness. The unit is the APEX value.
            Ordinarily it is given in the range of -99.99 to 99.99.
            </summary>
            <remarks>
            <b>Handling of null values</b><para/>
            A null value indicates, that the corresponding metadata tag is not
            present in the metadata model.
            Setting this property's value to a non-null reference creates the
            metadata tag if necessary.
            Setting this property's value to a null reference deletes the
            metadata tag from the metadata model.
            </remarks>
        </member>
        <member name="P:FreeImageAPI.Metadata.MDM_EXIF_EXIF.ExposureBiasValue">
            <summary>
            Gets or sets the exposure bias. The unit is the APEX value.
            Ordinarily it is given in the range of –99.99 to 99.99.
            </summary>
            <remarks>
            <b>Handling of null values</b><para/>
            A null value indicates, that the corresponding metadata tag is not
            present in the metadata model.
            Setting this property's value to a non-null reference creates the
            metadata tag if necessary.
            Setting this property's value to a null reference deletes the
            metadata tag from the metadata model.
            </remarks>
        </member>
        <member name="P:FreeImageAPI.Metadata.MDM_EXIF_EXIF.MaxApertureValue">
            <summary>
            Gets or sets the smallest F number of the lens. The unit is the APEX value.
            Ordinarily it is given in the range of 00.00 to 99.99,
            but it is not limited to this range.
            </summary>
            <remarks>
            <b>Handling of null values</b><para/>
            A null value indicates, that the corresponding metadata tag is not
            present in the metadata model.
            Setting this property's value to a non-null reference creates the
            metadata tag if necessary.
            Setting this property's value to a null reference deletes the
            metadata tag from the metadata model.
            </remarks>
        </member>
        <member name="P:FreeImageAPI.Metadata.MDM_EXIF_EXIF.SubjectDistance">
            <summary>
            Gets or sets distance to the subject, given in meters.
            Note that if the numerator of the recorded value is FFFFFFFF, infinity shall be indicated;
            and if the numerator is 0, distance unknown shall be indicated.
            </summary>
            <remarks>
            <b>Handling of null values</b><para/>
            A null value indicates, that the corresponding metadata tag is not
            present in the metadata model.
            Setting this property's value to a non-null reference creates the
            metadata tag if necessary.
            Setting this property's value to a null reference deletes the
            metadata tag from the metadata model.
            </remarks>
        </member>
        <member name="P:FreeImageAPI.Metadata.MDM_EXIF_EXIF.MeteringMode">
            <summary>
            Gets or sets the metering mode. See remarks for further information.
            </summary>
            <remarks>
            The following values are defined:<para/>
            <list type="table">
            	<listheader>
            		<term>ID</term>
            		<description>Description</description>
            	</listheader>
            	<item>
            		<term>0</term>
            		<description>unknown</description>
            	</item>
            	<item>
            		<term>1</term>
            		<description>average</description>
            	</item>
            	<item>
            		<term>2</term>
            		<description>center-weighted-average</description>
            	</item>
            	<item>
            		<term>3</term>
            		<description>spot</description>
            	</item>
            	<item>
            		<term>4</term>
            		<description>multi-spot</description>
            	</item>
            	<item>
            		<term>5</term>
            		<description>pattern</description>
            	</item>
            	<item>
            		<term>6</term>
            		<description>partial</description>
            	</item>
            	<item>
            		<term>other</term>
            		<description>reserved</description>
            	</item>
            	<item>
            		<term>255</term>
            		<description>other</description>
            	</item>
            </list>
            <para/>
            <br/><b>Handling of null values</b><para/>
            A null value indicates, that the corresponding metadata tag is not
            present in the metadata model.
            Setting this property's value to a non-null reference creates the
            metadata tag if necessary.
            Setting this property's value to a null reference deletes the
            metadata tag from the metadata model.
            </remarks>
        </member>
        <member name="P:FreeImageAPI.Metadata.MDM_EXIF_EXIF.LightSource">
            <summary>
            Gets or sets the kind of light source.
            See remarks for further information.
            </summary>
            <remarks>
            The following values are defined:<para/>
            <list type="table">
            	<listheader>
            		<term>ID</term>
            		<description>Description</description>
            	</listheader>
            	<item>
            		<term>0</term>
            		<description>unknown</description>
            	</item>
            	<item>
            		<term>1</term>
            		<description>daylight</description>
            	</item>
            	<item>
            		<term>2</term>
            		<description>fluorescent</description>
            	</item>
            	<item>
            		<term>3</term>
            		<description>tungsten</description>
            	</item>
            	<item>
            		<term>4</term>
            		<description>flash</description>
            	</item>
            	<item>
            		<term>9</term>
            		<description>fine weather</description>
            	</item>
            	<item>
            		<term>10</term>
            		<description>cloudy weather</description>
            	</item>
            	<item>
            		<term>11</term>
            		<description>shade</description>
            	</item>
            	<item>
            		<term>12</term>
            		<description>daylight fluorecent (D 5700 - 7100K)</description>
            	</item>
            	<item>
            		<term>13</term>
            		<description>day white fluorescent (N 4600 - 5400K)</description>
            	</item>
            	<item>
            		<term>14</term>
            		<description>cool white fluorescent (W 3900 - 4500K)</description>
            	</item>
            	<item>
            		<term>15</term>
            		<description>white fluorescent (WW 3200 - 3700K)</description>
            	</item>
            	<item>
            		<term>17</term>
            		<description>standard light A</description>
            	</item>
            	<item>
            		<term>18</term>
            		<description>standard light B</description>
            	</item>
            	<item>
            		<term>19</term>
            		<description>standard light C</description>
            	</item>
            	<item>
            		<term>20</term>
            		<description>D55</description>
            	</item>
            	<item>
            		<term>21</term>
            		<description>D65</description>
            	</item>
            	<item>
            		<term>22</term>
            		<description>D75</description>
            	</item>
            	<item>
            		<term>23</term>
            		<description>D50</description>
            	</item>
            	<item>
            		<term>24</term>
            		<description>ISO studio tungsten</description>
            	</item>
            	<item>
            		<term>255</term>
            		<description>other light source</description>
            	</item>
            	<item>
            		<term>other</term>
            		<description>reserved</description>
            	</item>
            </list>
            <para/>
            <br/><b>Handling of null values</b><para/>
            A null value indicates, that the corresponding metadata tag is not
            present in the metadata model.
            Setting this property's value to a non-null reference creates the
            metadata tag if necessary.
            Setting this property's value to a null reference deletes the
            metadata tag from the metadata model.
            </remarks>
        </member>
        <member name="P:FreeImageAPI.Metadata.MDM_EXIF_EXIF.Flash">
            <summary>
            Gets or sets a value indicating the status of flash when the image was shot.
            Bit 0 indicates the flash firing status, bits 1 and 2 indicate the flash return
            status, bits 3 and 4 indicate the flash mode, bit 5 indicates whether the flash
            function is present, and bit 6 indicates "red eye" mode.
            </summary>
            <remarks>
            <b>Handling of null values</b><para/>
            A null value indicates, that the corresponding metadata tag is not
            present in the metadata model.
            Setting this property's value to a non-null reference creates the
            metadata tag if necessary.
            Setting this property's value to a null reference deletes the
            metadata tag from the metadata model.
            </remarks>
        </member>
        <member name="P:FreeImageAPI.Metadata.MDM_EXIF_EXIF.SubjectArea">
            <summary>
            Gets or sets a value indicating the location and area of the main subject in
            the overall scene. Variable length between 2 and 4.
            </summary>
            <remarks>
            <b>Handling of null values</b><para/>
            A null value indicates, that the corresponding metadata tag is not
            present in the metadata model.
            Setting this property's value to a non-null reference creates the
            metadata tag if necessary.
            Setting this property's value to a null reference deletes the
            metadata tag from the metadata model.
            </remarks>
        </member>
        <member name="P:FreeImageAPI.Metadata.MDM_EXIF_EXIF.FocalLength">
            <summary>
            Gets or sets the actual focal length of the lens, in mm.
            Conversion is not made to the focal length of a 35 mm film camera.
            </summary>
            <remarks>
            <b>Handling of null values</b><para/>
            A null value indicates, that the corresponding metadata tag is not
            present in the metadata model.
            Setting this property's value to a non-null reference creates the
            metadata tag if necessary.
            Setting this property's value to a null reference deletes the
            metadata tag from the metadata model.
            </remarks>
        </member>
        <member name="P:FreeImageAPI.Metadata.MDM_EXIF_EXIF.FlashEnergy">
            <summary>
            Gets or sets the strobe energy at the time the image is captured,
            as measured in Beam Candle Power Seconds (BCPS).
            </summary>
            <remarks>
            <b>Handling of null values</b><para/>
            A null value indicates, that the corresponding metadata tag is not
            present in the metadata model.
            Setting this property's value to a non-null reference creates the
            metadata tag if necessary.
            Setting this property's value to a null reference deletes the
            metadata tag from the metadata model.
            </remarks>
        </member>
        <member name="P:FreeImageAPI.Metadata.MDM_EXIF_EXIF.SpatialFrequencyResponse">
            <summary>
            Gets or sets the camera or input device spatial frequency table and SFR values
            in the direction of image width, image height, and diagonal direction,
            as specified in ISO 12233.
            </summary>
            <remarks>
            <b>Handling of null values</b><para/>
            A null value indicates, that the corresponding metadata tag is not
            present in the metadata model.
            Setting this property's value to a non-null reference creates the
            metadata tag if necessary.
            Setting this property's value to a null reference deletes the
            metadata tag from the metadata model.
            </remarks>
        </member>
        <member name="P:FreeImageAPI.Metadata.MDM_EXIF_EXIF.FocalPlaneXResolution">
            <summary>
            Gets or sets the number of pixels in the image width (X) direction per
            FocalPlaneResolutionUnit on the camera focal plane.
            </summary>
            <remarks>
            <b>Handling of null values</b><para/>
            A null value indicates, that the corresponding metadata tag is not
            present in the metadata model.
            Setting this property's value to a non-null reference creates the
            metadata tag if necessary.
            Setting this property's value to a null reference deletes the
            metadata tag from the metadata model.
            </remarks>
        </member>
        <member name="P:FreeImageAPI.Metadata.MDM_EXIF_EXIF.FocalPlaneYResolution">
            <summary>
            Gets or sets the number of pixels in the image height (Y) direction per
            FocalPlaneResolutionUnit on the camera focal plane.
            </summary>
            <remarks>
            <b>Handling of null values</b><para/>
            A null value indicates, that the corresponding metadata tag is not
            present in the metadata model.
            Setting this property's value to a non-null reference creates the
            metadata tag if necessary.
            Setting this property's value to a null reference deletes the
            metadata tag from the metadata model.
            </remarks>
        </member>
        <member name="P:FreeImageAPI.Metadata.MDM_EXIF_EXIF.FocalPlaneResolutionUnit">
            <summary>
            Gets or sets the unit for measuring FocalPlaneXResolution and FocalPlaneYResolution.
            This value is the same as the ResolutionUnit.
            </summary>
            <remarks>
            <b>Handling of null values</b><para/>
            A null value indicates, that the corresponding metadata tag is not
            present in the metadata model.
            Setting this property's value to a non-null reference creates the
            metadata tag if necessary.
            Setting this property's value to a null reference deletes the
            metadata tag from the metadata model.
            </remarks>
        </member>
        <member name="P:FreeImageAPI.Metadata.MDM_EXIF_EXIF.SubjectLocation">
            <summary>
            Gets or sets the location of the main subject in the scene.
            The value of this tag represents the pixel at the center of the main subject
            relative to the left edge, prior to rotation processing as per the Rotation tag.
            The first value indicates the X column number and second indicates the Y row number.
            </summary>
            <remarks>
            <b>Handling of null values</b><para/>
            A null value indicates, that the corresponding metadata tag is not
            present in the metadata model.
            Setting this property's value to a non-null reference creates the
            metadata tag if necessary.
            Setting this property's value to a null reference deletes the
            metadata tag from the metadata model.
            </remarks>
        </member>
        <member name="P:FreeImageAPI.Metadata.MDM_EXIF_EXIF.ExposureIndex">
            <summary>
            Gets or sets the exposure index selected on the camera or input device at the
            time the image was captured.
            </summary>
            <remarks>
            <b>Handling of null values</b><para/>
            A null value indicates, that the corresponding metadata tag is not
            present in the metadata model.
            Setting this property's value to a non-null reference creates the
            metadata tag if necessary.
            Setting this property's value to a null reference deletes the
            metadata tag from the metadata model.
            </remarks>
        </member>
        <member name="P:FreeImageAPI.Metadata.MDM_EXIF_EXIF.SensingMethod">
            <summary>
            Gets or sets the image sensor type on the camera or input device.
            See remarks for further information.
            </summary>
            <remarks>
            The following values are defined:<para/>
            <list type="table">
            	<listheader>
            		<term>ID</term>
            		<description>Description</description>
            	</listheader>
            	<item>
            		<term>1</term>
            		<description>not defined</description>
            	</item>
            	<item>
            		<term>2</term>
            		<description>one-chip color area sensor</description>
            	</item>
            	<item>
            		<term>3</term>
            		<description>two-chip color area sensor</description>
            	</item>
            	<item>
            		<term>4</term>
            		<description>three-chip color area sensor</description>
            	</item>
            	<item>
            		<term>5</term>
            		<description>color sequential area sensor</description>
            	</item>
            	<item>
            		<term>7</term>
            		<description>trilinear sensor</description>
            	</item>
            	<item>
            		<term>8</term>
            		<description>color sequential linear sensor</description>
            	</item>
            	<item>
            		<term>other</term>
            		<description>reserved</description>
            	</item>
            </list>
            <para/>
            <br/><b>Handling of null values</b><para/>
            A null value indicates, that the corresponding metadata tag is not
            present in the metadata model.
            Setting this property's value to a non-null reference creates the
            metadata tag if necessary.
            Setting this property's value to a null reference deletes the
            metadata tag from the metadata model.
            </remarks>
        </member>
        <member name="P:FreeImageAPI.Metadata.MDM_EXIF_EXIF.FileSource">
            <summary>
            Gets or sets the image source. If a DSC recorded the image, this tag value of this
            tag always be set to 3, indicating that the image was recorded on a DSC.
            </summary>
            <remarks>
            <b>Handling of null values</b><para/>
            A null value indicates, that the corresponding metadata tag is not
            present in the metadata model.
            Setting this property's value to a non-null reference creates the
            metadata tag if necessary.
            Setting this property's value to a null reference deletes the
            metadata tag from the metadata model.
            </remarks>
        </member>
        <member name="P:FreeImageAPI.Metadata.MDM_EXIF_EXIF.SceneType">
            <summary>
            Gets or sets the type of scene. If a DSC recorded the image, this tag value shall
            always be set to 1, indicating that the image was directly photographed.
            </summary>
            <remarks>
            <b>Handling of null values</b><para/>
            A null value indicates, that the corresponding metadata tag is not
            present in the metadata model.
            Setting this property's value to a non-null reference creates the
            metadata tag if necessary.
            Setting this property's value to a null reference deletes the
            metadata tag from the metadata model.
            </remarks>
        </member>
        <member name="P:FreeImageAPI.Metadata.MDM_EXIF_EXIF.CFAPattern">
            <summary>
            Gets or sets the color filter array (CFA) geometric pattern of the image sensor
            when a one-chip color area sensor is used. It does not apply to all sensing methods.
            </summary>
            <remarks>
            <b>Handling of null values</b><para/>
            A null value indicates, that the corresponding metadata tag is not
            present in the metadata model.
            Setting this property's value to a non-null reference creates the
            metadata tag if necessary.
            Setting this property's value to a null reference deletes the
            metadata tag from the metadata model.
            </remarks>
        </member>
        <member name="P:FreeImageAPI.Metadata.MDM_EXIF_EXIF.CustomRendered">
            <summary>
            Gets or sets the use of special processing on image data, such as rendering geared to output.
            When special processing is performed, the reader is expected to disable or minimize any
            further processing. See remarks for further information.
            </summary>
            <remarks>
            The following values are definied:<para/>
            <list type="table">
            	<listheader>
            		<term>ID</term>
            		<description>Description</description>
            	</listheader>
            	<item>
            		<term>0</term>
            		<description>normal process</description>
            	</item>
            	<item>
            		<term>1</term>
            		<description>custom process</description>
            	</item>
            	<item>
            		<term>other</term>
            		<description>reserved</description>
            	</item>
            </list>
            <para/>
            <br/><b>Handling of null values</b><para/>
            A null value indicates, that the corresponding metadata tag is not
            present in the metadata model.
            Setting this property's value to a non-null reference creates the
            metadata tag if necessary.
            Setting this property's value to a null reference deletes the
            metadata tag from the metadata model.
            </remarks>
        </member>
        <member name="P:FreeImageAPI.Metadata.MDM_EXIF_EXIF.ExposureMode">
            <summary>
            Gets or sets the exposure mode set when the image was shot.
            In auto-bracketing mode, the camera shoots a series of frames of the same scene
            at different exposure settings. See remarks for further information.
            </summary>
            <remarks>
            The following values are definied:<para/>
            <list type="table">
            	<listheader>
            		<term>ID</term>
            		<description>Description</description>
            	</listheader>
            	<item>
            		<term>0</term>
            		<description>auto exposure</description>
            	</item>
            	<item>
            		<term>1</term>
            		<description>manual exposure</description>
            	</item>
            	<item>
            		<term>2</term>
            		<description>auto bracket</description>
            	</item>
            	<item>
            		<term>other</term>
            		<description>reserved</description>
            	</item>
            </list>
            <para/>
            <br/><b>Handling of null values</b><para/>
            A null value indicates, that the corresponding metadata tag is not
            present in the metadata model.
            Setting this property's value to a non-null reference creates the
            metadata tag if necessary.
            Setting this property's value to a null reference deletes the
            metadata tag from the metadata model.
            </remarks>
        </member>
        <member name="P:FreeImageAPI.Metadata.MDM_EXIF_EXIF.WhiteBalance">
            <summary>
            Gets or sets the white balance mode set when the image was shot.
            See remarks for further information.
            </summary>
            <remarks>
            The following values are definied:<para/>
            <list type="table">
            	<listheader>
            		<term>ID</term>
            		<description>Description</description>
            	</listheader>
            	<item>
            		<term>0</term>
            		<description>auto white balance</description>
            	</item>
            	<item>
            		<term>1</term>
            		<description>manual white balance</description>
            	</item>
            	<item>
            		<term>other</term>
            		<description>reserved</description>
            	</item>
            </list>
            <para/>
            <br/><b>Handling of null values</b><para/>
            A null value indicates, that the corresponding metadata tag is not
            present in the metadata model.
            Setting this property's value to a non-null reference creates the
            metadata tag if necessary.
            Setting this property's value to a null reference deletes the
            metadata tag from the metadata model.
            </remarks>
        </member>
        <member name="P:FreeImageAPI.Metadata.MDM_EXIF_EXIF.DigitalZoomRatio">
            <summary>
            Gets or sets the digital zoom ratio when the image was shot.
            If the numerator of the recorded value is 0, this indicates that digital zoom was not used.
            </summary>
            <remarks>
            <b>Handling of null values</b><para/>
            A null value indicates, that the corresponding metadata tag is not
            present in the metadata model.
            Setting this property's value to a non-null reference creates the
            metadata tag if necessary.
            Setting this property's value to a null reference deletes the
            metadata tag from the metadata model.
            </remarks>
        </member>
        <member name="P:FreeImageAPI.Metadata.MDM_EXIF_EXIF.FocalLengthIn35mmFilm">
            <summary>
            Gets or sets the equivalent focal length assuming a 35mm film camera, in mm.
            A value of 0 means the focal length is unknown. Note that this tag differs
            from the FocalLength tag.
            </summary>
            <remarks>
            <b>Handling of null values</b><para/>
            A null value indicates, that the corresponding metadata tag is not
            present in the metadata model.
            Setting this property's value to a non-null reference creates the
            metadata tag if necessary.
            Setting this property's value to a null reference deletes the
            metadata tag from the metadata model.
            </remarks>
        </member>
        <member name="P:FreeImageAPI.Metadata.MDM_EXIF_EXIF.SceneCaptureType">
            <summary>
            Gets or sets the type of scene that was shot.
            It can also be used to record the mode in which the image was shot.
            See remarks for further information.
            </summary>
            <remarks>
            The following values are definied:<para/>
            <list type="table">
            	<listheader>
            		<term>ID</term>
            		<description>Description</description>
            	</listheader>
            	<item>
            		<term>0</term>
            		<description>standard</description>
            	</item>
            	<item>
            		<term>1</term>
            		<description>landscape</description>
            	</item>
            	<item>
            		<term>2</term>
            		<description>portrait</description>
            	</item>
            	<item>
            		<term>3</term>
            		<description>night scene</description>
            	</item>
            	<item>
            		<term>other</term>
            		<description>reserved</description>
            	</item>
            </list>
            <para/>
            <br/><b>Handling of null values</b><para/>
            A null value indicates, that the corresponding metadata tag is not
            present in the metadata model.
            Setting this property's value to a non-null reference creates the
            metadata tag if necessary.
            Setting this property's value to a null reference deletes the
            metadata tag from the metadata model.
            </remarks>
        </member>
        <member name="P:FreeImageAPI.Metadata.MDM_EXIF_EXIF.GainControl">
            <summary>
            Gets or sets the degree of overall image gain adjustment.
            See remarks for further information.
            </summary>
            <remarks>
            The following values are definied:<para/>
            <list type="table">
            	<listheader>
            		<term>ID</term>
            		<description>Description</description>
            	</listheader>
            	<item>
            		<term>0</term>
            		<description>none</description>
            	</item>
            	<item>
            		<term>1</term>
            		<description>low gain up</description>
            	</item>
            	<item>
            		<term>2</term>
            		<description>high gain up</description>
            	</item>
            	<item>
            		<term>3</term>
            		<description>low gain down</description>
            	</item>
            	<item>
            		<term>4</term>
            		<description>high gain down</description>
            	</item>
            	<item>
            		<term>other</term>
            		<description>reserved</description>
            	</item>
            </list>
            <para/>
            <br/><b>Handling of null values</b><para/>
            A null value indicates, that the corresponding metadata tag is not
            present in the metadata model.
            Setting this property's value to a non-null reference creates the
            metadata tag if necessary.
            Setting this property's value to a null reference deletes the
            metadata tag from the metadata model.
            </remarks>
        </member>
        <member name="P:FreeImageAPI.Metadata.MDM_EXIF_EXIF.Contrast">
            <summary>
            Gets or sets the direction of contrast processing applied by the camera
            when the image was shot.
            See remarks for further information.
            </summary>
            <remarks>
            The following values are definied:<para/>
            <list type="table">
            	<listheader>
            		<term>ID</term>
            		<description>Description</description>
            	</listheader>
            	<item>
            		<term>0</term>
            		<description>normal</description>
            	</item>
            	<item>
            		<term>1</term>
            		<description>soft</description>
            	</item>
            	<item>
            		<term>2</term>
            		<description>hard</description>
            	</item>
            	<item>
            		<term>other</term>
            		<description>reserved</description>
            	</item>
            </list>
            <para/>
            <br/><b>Handling of null values</b><para/>
            A null value indicates, that the corresponding metadata tag is not
            present in the metadata model.
            Setting this property's value to a non-null reference creates the
            metadata tag if necessary.
            Setting this property's value to a null reference deletes the
            metadata tag from the metadata model.
            </remarks>
        </member>
        <member name="P:FreeImageAPI.Metadata.MDM_EXIF_EXIF.Saturation">
            <summary>
            Gets or sets the direction of saturation processing applied by the camera
            when the image was shot.
            See remarks for further information.
            </summary>
            <remarks>
            The following values are definied:<para/>
            <list type="table">
            	<listheader>
            		<term>ID</term>
            		<description>Description</description>
            	</listheader>
            	<item>
            		<term>0</term>
            		<description>normal</description>
            	</item>
            	<item>
            		<term>1</term>
            		<description>low saturation</description>
            	</item>
            	<item>
            		<term>2</term>
            		<description>high saturation</description>
            	</item>
            	<item>
            		<term>other</term>
            		<description>reserved</description>
            	</item>
            </list>
            <para/>
            <br/><b>Handling of null values</b><para/>
            A null value indicates, that the corresponding metadata tag is not
            present in the metadata model.
            Setting this property's value to a non-null reference creates the
            metadata tag if necessary.
            Setting this property's value to a null reference deletes the
            metadata tag from the metadata model.
            </remarks>
        </member>
        <member name="P:FreeImageAPI.Metadata.MDM_EXIF_EXIF.Sharpness">
            <summary>
            Gets or sets the direction of sharpness processing applied by the camera
            when the image was shot.
            See remarks for further information.
            </summary>
            <remarks>
            The following values are definied:<para/>
            <list type="table">
            	<listheader>
            		<term>ID</term>
            		<description>Description</description>
            	</listheader>
            	<item>
            		<term>0</term>
            		<description>normal</description>
            	</item>
            	<item>
            		<term>1</term>
            		<description>soft</description>
            	</item>
            	<item>
            		<term>2</term>
            		<description>hard</description>
            	</item>
            	<item>
            		<term>other</term>
            		<description>reserved</description>
            	</item>
            </list>
            <para/>
            <br/><b>Handling of null values</b><para/>
            A null value indicates, that the corresponding metadata tag is not
            present in the metadata model.
            Setting this property's value to a non-null reference creates the
            metadata tag if necessary.
            Setting this property's value to a null reference deletes the
            metadata tag from the metadata model.
            </remarks>
        </member>
        <member name="P:FreeImageAPI.Metadata.MDM_EXIF_EXIF.DeviceSettingDescription">
            <summary>
            Gets or sets information on the picture-taking conditions of a particular camera model.
            The tag is used only to indicate the picture-taking conditions in the reader.
            </summary>
            <remarks>
            <b>Handling of null values</b><para/>
            A null value indicates, that the corresponding metadata tag is not
            present in the metadata model.
            Setting this property's value to a non-null reference creates the
            metadata tag if necessary.
            Setting this property's value to a null reference deletes the
            metadata tag from the metadata model.
            </remarks>
        </member>
        <member name="P:FreeImageAPI.Metadata.MDM_EXIF_EXIF.SubjectDistanceRange">
            <summary>
            Gets or sets the distance to the subject.
            See remarks for further information.
            </summary>
            <remarks>
            The following values are definied:<para/>
            <list type="table">
            	<listheader>
            		<term>ID</term>
            		<description>Description</description>
            	</listheader>
            	<item>
            		<term>0</term>
            		<description>unknown</description>
            	</item>
            	<item>
            		<term>1</term>
            		<description>macro</description>
            	</item>
            	<item>
            		<term>2</term>
            		<description>close view</description>
            	</item>
            	<item>
            		<term>3</term>
            		<description>distant view</description>
            	</item>
            	<item>
            		<term>other</term>
            		<description>reserved</description>
            	</item>
            </list>
            <para/>
            <br/><b>Handling of null values</b><para/>
            A null value indicates, that the corresponding metadata tag is not
            present in the metadata model.
            Setting this property's value to a non-null reference creates the
            metadata tag if necessary.
            Setting this property's value to a null reference deletes the
            metadata tag from the metadata model.
            </remarks>
        </member>
        <member name="P:FreeImageAPI.Metadata.MDM_EXIF_EXIF.ImageUniqueID">
            <summary>
            Gets or sets an identifier assigned uniquely to each image.
            It is recorded as an ASCII string equivalent to hexadecimal notation and 128-bit fixed length.
            Constant length of 32.
            </summary>
            <remarks>
            <b>Handling of null values</b><para/>
            A null value indicates, that the corresponding metadata tag is not
            present in the metadata model.
            Setting this property's value to a non-null reference creates the
            metadata tag if necessary.
            Setting this property's value to a null reference deletes the
            metadata tag from the metadata model.
            </remarks>
        </member>
        <member name="T:FreeImageAPI.Metadata.MDM_EXIF_GPS">
            <summary>
            Represents a collection of all tags contained in the metadata model
            <see cref="F:FreeImageAPI.FREE_IMAGE_MDMODEL.FIMD_EXIF_GPS"/>.
            </summary>
        </member>
        <member name="M:FreeImageAPI.Metadata.MDM_EXIF_GPS.#ctor(FreeImageAPI.FIBITMAP)">
            <summary>
            Initializes a new instance of this class.
            </summary>
            <param name="dib">Handle to a FreeImage bitmap.</param>
        </member>
        <member name="P:FreeImageAPI.Metadata.MDM_EXIF_GPS.Model">
            <summary>
            Retrieves the datamodel that this instance represents.
            </summary>
        </member>
        <member name="P:FreeImageAPI.Metadata.MDM_EXIF_GPS.VersionID">
            <summary>
            Gets or sets the GPS version ID. Constant length of 4.
            </summary>
            <remarks>
            <b>Handling of null values</b><para/>
            A null value indicates, that the corresponding metadata tag is not
            present in the metadata model.
            Setting this property's value to a non-null reference creates the
            metadata tag if necessary.
            Setting this property's value to a null reference deletes the
            metadata tag from the metadata model.
            </remarks>
        </member>
        <member name="P:FreeImageAPI.Metadata.MDM_EXIF_GPS.LatitudeDirection">
            <summary>
            Gets or sets a value indicating whether the <see cref="P:FreeImageAPI.Metadata.MDM_EXIF_GPS.Latitude"/>
            is north or south latitude.
            </summary>
            <remarks>
            <b>Handling of null values</b><para/>
            A null value indicates, that the corresponding metadata tag is not
            present in the metadata model.
            Setting this property's value to a non-null reference creates the
            metadata tag if necessary.
            Setting this property's value to a null reference deletes the
            metadata tag from the metadata model.
            </remarks>
        </member>
        <member name="P:FreeImageAPI.Metadata.MDM_EXIF_GPS.Latitude">
            <summary>
            Gets or sets the latitude of the image. The latitude is expressed as three rational
            values giving the degrees, minutes, and seconds, respectively. Constant length of 3.
            </summary>
            <remarks>
            <b>Handling of null values</b><para/>
            A null value indicates, that the corresponding metadata tag is not
            present in the metadata model.
            Setting this property's value to a non-null reference creates the
            metadata tag if necessary.
            Setting this property's value to a null reference deletes the
            metadata tag from the metadata model.
            </remarks>
            <seealso cref="P:FreeImageAPI.Metadata.MDM_EXIF_GPS.LatitudeDirection"/>
        </member>
        <member name="P:FreeImageAPI.Metadata.MDM_EXIF_GPS.LongitudeDirection">
            <summary>
            Gets or sets a value indicating whether <see cref="P:FreeImageAPI.Metadata.MDM_EXIF_GPS.Longitude"/>
            is east or west longitude.
            </summary>
            <remarks>
            <b>Handling of null values</b><para/>
            A null value indicates, that the corresponding metadata tag is not
            present in the metadata model.
            Setting this property's value to a non-null reference creates the
            metadata tag if necessary.
            Setting this property's value to a null reference deletes the
            metadata tag from the metadata model.
            </remarks>
        </member>
        <member name="P:FreeImageAPI.Metadata.MDM_EXIF_GPS.Longitude">
            <summary>
            Gets or sets the longitude of the image. The longitude is expressed as three rational
            values giving the degrees, minutes, and seconds, respectively. Constant length of 3.
            </summary>
            <remarks>
            <b>Handling of null values</b><para/>
            A null value indicates, that the corresponding metadata tag is not
            present in the metadata model.
            Setting this property's value to a non-null reference creates the
            metadata tag if necessary.
            Setting this property's value to a null reference deletes the
            metadata tag from the metadata model.
            </remarks>
            <seealso cref="P:FreeImageAPI.Metadata.MDM_EXIF_GPS.LongitudeDirection"/>
        </member>
        <member name="P:FreeImageAPI.Metadata.MDM_EXIF_GPS.AltitudeDirection">
            <summary>
            Gets a value indicating whether <see cref="P:FreeImageAPI.Metadata.MDM_EXIF_GPS.Altitude"/> is sea level and the altitude
            is above sea level. If the altitude is below sea level <see cref="P:FreeImageAPI.Metadata.MDM_EXIF_GPS.Altitude"/> is
            indicated as an absolute value.
            </summary>
            <remarks>
            <b>Handling of null values</b><para/>
            A null value indicates, that the corresponding metadata tag is not
            present in the metadata model.
            Setting this property's value to a non-null reference creates the
            metadata tag if necessary.
            Setting this property's value to a null reference deletes the
            metadata tag from the metadata model.
            </remarks>
        </member>
        <member name="P:FreeImageAPI.Metadata.MDM_EXIF_GPS.Altitude">
            <summary>
            Gets or sets the altitude based on the reference in <see cref="P:FreeImageAPI.Metadata.MDM_EXIF_GPS.AltitudeDirection"/>.
            Altitude is expressed as one rational value. The reference unit is meters.
            </summary>
            <remarks>
            <b>Handling of null values</b><para/>
            A null value indicates, that the corresponding metadata tag is not
            present in the metadata model.
            Setting this property's value to a non-null reference creates the
            metadata tag if necessary.
            Setting this property's value to a null reference deletes the
            metadata tag from the metadata model.
            </remarks>
        </member>
        <member name="P:FreeImageAPI.Metadata.MDM_EXIF_GPS.AltitudeSign">
            <summary>
            Gets or sets the sign of the <see cref="P:FreeImageAPI.Metadata.MDM_EXIF_GPS.SignedAltitude"/>.
            </summary>
            <remarks>
            This is a derived property. There is no metadata tag directly associated
            with this property value.
            <para/>
            <br/><b>Handling of null values</b><para/>
            A null value indicates, that the corresponding metadata tag is not
            present in the metadata model.
            Setting this property's value to a non-null reference creates the
            metadata tag if necessary.
            Setting this property's value to a null reference deletes the
            metadata tag from the metadata model.
            </remarks>
        </member>
        <member name="P:FreeImageAPI.Metadata.MDM_EXIF_GPS.SignedAltitude">
            <summary>
            Gets or sets the signed altitude.
            Altitude is expressed as one rational value. The reference unit is meters.
            </summary>
            <exception cref="T:System.OverflowException">
            Altitude is too large to fit into a FIRational.
            </exception>
            <remarks>
            This is a derived property. There is no metadata tag directly associated
            with this property value.
            <para/>
            <br/><b>Handling of null values</b><para/>
            A null value indicates, that the corresponding metadata tag is not
            present in the metadata model.
            Setting this property's value to a non-null reference creates the
            metadata tag if necessary.
            Setting this property's value to a null reference deletes the
            metadata tag from the metadata model.
            </remarks>
        </member>
        <member name="P:FreeImageAPI.Metadata.MDM_EXIF_GPS.TimeStamp">
            <summary>
            Gets or sets the time as UTC (Coordinated Universal Time). Constant length of 3.
            </summary>
            <remarks>
            <b>Handling of null values</b><para/>
            A null value indicates, that the corresponding metadata tag is not
            present in the metadata model.
            Setting this property's value to a non-null reference creates the
            metadata tag if necessary.
            Setting this property's value to a null reference deletes the
            metadata tag from the metadata model.
            </remarks>
        </member>
        <member name="P:FreeImageAPI.Metadata.MDM_EXIF_GPS.Satellites">
            <summary>
            Gets or sets the GPS satellites used for measurements. This tag can be used to describe
            the number of satellites, their ID number, angle of elevation, azimuth, SNR and other
            information in ASCII notation. The format is not specified.
            </summary>
            <remarks>
            <b>Handling of null values</b><para/>
            A null value indicates, that the corresponding metadata tag is not
            present in the metadata model.
            Setting this property's value to a non-null reference creates the
            metadata tag if necessary.
            Setting this property's value to a null reference deletes the
            metadata tag from the metadata model.
            </remarks>
        </member>
        <member name="P:FreeImageAPI.Metadata.MDM_EXIF_GPS.Status">
            <summary>
            Gets or sets a value indicating the status of the GPS receiver when the image was recorded.
            <b>true</b> indicates measurement was in progress;
            <b>false</b> indicates measurement was Interoperability.
            </summary>
            <remarks>
            <b>Handling of null values</b><para/>
            A null value indicates, that the corresponding metadata tag is not
            present in the metadata model.
            Setting this property's value to a non-null reference creates the
            metadata tag if necessary.
            Setting this property's value to a null reference deletes the
            metadata tag from the metadata model.
            </remarks>
        </member>
        <member name="P:FreeImageAPI.Metadata.MDM_EXIF_GPS.MeasureMode3D">
            <summary>
            Gets or sets a value indicating the GPS measurement mode.
            <b>true</b> indicates three-dimensional measurement;
            <b>false</b> indicated two-dimensional measurement was in progress.
            </summary>
            <remarks>
            <b>Handling of null values</b><para/>
            A null value indicates, that the corresponding metadata tag is not
            present in the metadata model.
            Setting this property's value to a non-null reference creates the
            metadata tag if necessary.
            Setting this property's value to a null reference deletes the
            metadata tag from the metadata model.
            </remarks>
        </member>
        <member name="P:FreeImageAPI.Metadata.MDM_EXIF_GPS.DOP">
            <summary>
            Gets or sets the GPS DOP (data degree of precision). An HDOP value is written during
            two-dimensional measurement, and PDOP during three-dimensional measurement.
            </summary>
            <remarks>
            <b>Handling of null values</b><para/>
            A null value indicates, that the corresponding metadata tag is not
            present in the metadata model.
            Setting this property's value to a non-null reference creates the
            metadata tag if necessary.
            Setting this property's value to a null reference deletes the
            metadata tag from the metadata model.
            </remarks>
        </member>
        <member name="P:FreeImageAPI.Metadata.MDM_EXIF_GPS.SpeedUnit">
            <summary>
            Gets or sets the unit used to express the GPS receiver <see cref="P:FreeImageAPI.Metadata.MDM_EXIF_GPS.Speed"/> of movement.
            </summary>
            <remarks>
            <b>Handling of null values</b><para/>
            A null value indicates, that the corresponding metadata tag is not
            present in the metadata model.
            Setting this property's value to a non-null reference creates the
            metadata tag if necessary.
            Setting this property's value to a null reference deletes the
            metadata tag from the metadata model.
            </remarks>
            <seealso cref="P:FreeImageAPI.Metadata.MDM_EXIF_GPS.Speed"/>
        </member>
        <member name="P:FreeImageAPI.Metadata.MDM_EXIF_GPS.Speed">
            <summary>
            Gets or sets the speed of GPS receiver movement.
            </summary>
            <remarks>
            <b>Handling of null values</b><para/>
            A null value indicates, that the corresponding metadata tag is not
            present in the metadata model.
            Setting this property's value to a non-null reference creates the
            metadata tag if necessary.
            Setting this property's value to a null reference deletes the
            metadata tag from the metadata model.
            </remarks>
            <seealso cref="P:FreeImageAPI.Metadata.MDM_EXIF_GPS.SpeedUnit"/>
        </member>
        <member name="P:FreeImageAPI.Metadata.MDM_EXIF_GPS.TrackDirectionReference">
            <summary>
            Gets or sets the reference for giving the direction of GPS receiver movement.
            </summary>
            <remarks>
            <b>Handling of null values</b><para/>
            A null value indicates, that the corresponding metadata tag is not
            present in the metadata model.
            Setting this property's value to a non-null reference creates the
            metadata tag if necessary.
            Setting this property's value to a null reference deletes the
            metadata tag from the metadata model.
            </remarks>
            <seealso cref="P:FreeImageAPI.Metadata.MDM_EXIF_GPS.Track"/>
        </member>
        <member name="P:FreeImageAPI.Metadata.MDM_EXIF_GPS.Track">
            <summary>
            Gets or sets the direction of GPS receiver movement.
            The range of values is from 0.00 to 359.99.
            </summary>
            <remarks>
            <b>Handling of null values</b><para/>
            A null value indicates, that the corresponding metadata tag is not
            present in the metadata model.
            Setting this property's value to a non-null reference creates the
            metadata tag if necessary.
            Setting this property's value to a null reference deletes the
            metadata tag from the metadata model.
            </remarks>
            <seealso cref="P:FreeImageAPI.Metadata.MDM_EXIF_GPS.TrackDirectionReference"/>
        </member>
        <member name="P:FreeImageAPI.Metadata.MDM_EXIF_GPS.ImageDirectionReference">
            <summary>
            Gets or sets the reference for giving the direction of GPS receiver movement.
            </summary>
            <remarks>
            <b>Handling of null values</b><para/>
            A null value indicates, that the corresponding metadata tag is not
            present in the metadata model.
            Setting this property's value to a non-null reference creates the
            metadata tag if necessary.
            Setting this property's value to a null reference deletes the
            metadata tag from the metadata model.
            </remarks>
            <seealso cref="P:FreeImageAPI.Metadata.MDM_EXIF_GPS.ImageDirection"/>
        </member>
        <member name="P:FreeImageAPI.Metadata.MDM_EXIF_GPS.ImageDirection">
            <summary>
            Gets or sets the direction of the image when it was captured.
            The range of values is from 0.00 to 359.99.
            </summary>
            <remarks>
            <b>Handling of null values</b><para/>
            A null value indicates, that the corresponding metadata tag is not
            present in the metadata model.
            Setting this property's value to a non-null reference creates the
            metadata tag if necessary.
            Setting this property's value to a null reference deletes the
            metadata tag from the metadata model.
            </remarks>
            <seealso cref="P:FreeImageAPI.Metadata.MDM_EXIF_GPS.ImageDirectionReference"/>
        </member>
        <member name="P:FreeImageAPI.Metadata.MDM_EXIF_GPS.MapDatum">
            <summary>
            Gets or sets the geodetic survey data used by the GPS receiver. If the survey data
            is restricted to Japan, the value of this tag is 'TOKYO' or 'WGS-84'.
            </summary>
            <remarks>
            <b>Handling of null values</b><para/>
            A null value indicates, that the corresponding metadata tag is not
            present in the metadata model.
            Setting this property's value to a non-null reference creates the
            metadata tag if necessary.
            Setting this property's value to a null reference deletes the
            metadata tag from the metadata model.
            </remarks>
        </member>
        <member name="P:FreeImageAPI.Metadata.MDM_EXIF_GPS.DestinationLatitudeDirection">
            <summary>
            Gets or sets a value indicating whether the destination point
            is north or south latitude.
            </summary>
            <remarks>
            <b>Handling of null values</b><para/>
            A null value indicates, that the corresponding metadata tag is not
            present in the metadata model.
            Setting this property's value to a non-null reference creates the
            metadata tag if necessary.
            Setting this property's value to a null reference deletes the
            metadata tag from the metadata model.
            </remarks>
            <seealso cref="P:FreeImageAPI.Metadata.MDM_EXIF_GPS.Latitude"/>
        </member>
        <member name="P:FreeImageAPI.Metadata.MDM_EXIF_GPS.DestinationLatitude">
            <summary>
            Gets or sets the latitude of the destination point. The latitude is expressed as three rational
            values giving the degrees, minutes, and seconds, respectively. Constant length of 3.
            </summary>
            <remarks>
            <b>Handling of null values</b><para/>
            A null value indicates, that the corresponding metadata tag is not
            present in the metadata model.
            Setting this property's value to a non-null reference creates the
            metadata tag if necessary.
            Setting this property's value to a null reference deletes the
            metadata tag from the metadata model.
            </remarks>
            <seealso cref="P:FreeImageAPI.Metadata.MDM_EXIF_GPS.DestinationLatitudeDirection"/>
        </member>
        <member name="P:FreeImageAPI.Metadata.MDM_EXIF_GPS.DestinationLongitudeDirection">
            <summary>
            Gets or sets a value indicating whether the destination point
            is east or west longitude.
            </summary>
            <remarks>
            <b>Handling of null values</b><para/>
            A null value indicates, that the corresponding metadata tag is not
            present in the metadata model.
            Setting this property's value to a non-null reference creates the
            metadata tag if necessary.
            Setting this property's value to a null reference deletes the
            metadata tag from the metadata model.
            </remarks>
            <seealso cref="P:FreeImageAPI.Metadata.MDM_EXIF_GPS.Latitude"/>
        </member>
        <member name="P:FreeImageAPI.Metadata.MDM_EXIF_GPS.DestinationLongitude">
            <summary>
            Gets or sets the longitude of the destination point. The longitude is expressed as three rational
            values giving the degrees, minutes, and seconds, respectively. Constant length of 3.
            </summary>
            <remarks>
            <b>Handling of null values</b><para/>
            A null value indicates, that the corresponding metadata tag is not
            present in the metadata model.
            Setting this property's value to a non-null reference creates the
            metadata tag if necessary.
            Setting this property's value to a null reference deletes the
            metadata tag from the metadata model.
            </remarks>
        </member>
        <member name="P:FreeImageAPI.Metadata.MDM_EXIF_GPS.DestinationDirectionReference">
            <summary>
            Gets or sets the reference used for giving the bearing to the destination point.
            </summary>
            <remarks>
            <b>Handling of null values</b><para/>
            A null value indicates, that the corresponding metadata tag is not
            present in the metadata model.
            Setting this property's value to a non-null reference creates the
            metadata tag if necessary.
            Setting this property's value to a null reference deletes the
            metadata tag from the metadata model.
            </remarks>
            <seealso cref="P:FreeImageAPI.Metadata.MDM_EXIF_GPS.DestinationBearing"/>
        </member>
        <member name="P:FreeImageAPI.Metadata.MDM_EXIF_GPS.DestinationBearing">
            <summary>
            Gets or sets the bearing to the destination point.
            The range of values is from 0.00 to 359.99.
            </summary>
            <remarks>
            <b>Handling of null values</b><para/>
            A null value indicates, that the corresponding metadata tag is not
            present in the metadata model.
            Setting this property's value to a non-null reference creates the
            metadata tag if necessary.
            Setting this property's value to a null reference deletes the
            metadata tag from the metadata model.
            </remarks>
            <seealso cref="P:FreeImageAPI.Metadata.MDM_EXIF_GPS.DestinationDirectionReference"/>
        </member>
        <member name="P:FreeImageAPI.Metadata.MDM_EXIF_GPS.DestinationUnit">
            <summary>
            Gets or sets the unit used to express the distance to the destination point.
            </summary>
            <remarks>
            <b>Handling of null values</b><para/>
            A null value indicates, that the corresponding metadata tag is not
            present in the metadata model.
            Setting this property's value to a non-null reference creates the
            metadata tag if necessary.
            Setting this property's value to a null reference deletes the
            metadata tag from the metadata model.
            </remarks>
            <seealso cref="P:FreeImageAPI.Metadata.MDM_EXIF_GPS.DestinationBearing"/>
        </member>
        <member name="P:FreeImageAPI.Metadata.MDM_EXIF_GPS.ProcessingMethod">
            <summary>
            Gets or sets a character string recording the name of the method used
            for location finding. The first byte indicates the character code used,
            and this is followed by the name of the method. Since the Type is not ASCII,
            NULL termination is not necessary.
            </summary>
            <remarks>
            <b>Handling of null values</b><para/>
            A null value indicates, that the corresponding metadata tag is not
            present in the metadata model.
            Setting this property's value to a non-null reference creates the
            metadata tag if necessary.
            Setting this property's value to a null reference deletes the
            metadata tag from the metadata model.
            </remarks>
        </member>
        <member name="P:FreeImageAPI.Metadata.MDM_EXIF_GPS.AreaInformation">
            <summary>
            Gets or sets a character string recording the name of the GPS area.
            The first byte indicates the character code used, and this is followed by
            the name of the GPS area. Since the Type is not ASCII, NULL termination is
            not necessary. 
            </summary>
            <remarks>
            <b>Handling of null values</b><para/>
            A null value indicates, that the corresponding metadata tag is not
            present in the metadata model.
            Setting this property's value to a non-null reference creates the
            metadata tag if necessary.
            Setting this property's value to a null reference deletes the
            metadata tag from the metadata model.
            </remarks>
        </member>
        <member name="P:FreeImageAPI.Metadata.MDM_EXIF_GPS.DateTimeStamp">
            <summary>
            Gets or sets date and time information relative to UTC (Coordinated Universal Time). 
            </summary>
            <remarks>
            This is a derived property. There is no metadata tag directly associated
            with this property value.
            <para/>
            <br/><b>Handling of null values</b><para/>
            A null value indicates, that the corresponding metadata tag is not
            present in the metadata model.
            Setting this property's value to a non-null reference creates the
            metadata tag if necessary.
            Setting this property's value to a null reference deletes the
            metadata tag from the metadata model.
            </remarks>
        </member>
        <member name="P:FreeImageAPI.Metadata.MDM_EXIF_GPS.DateStamp">
            <summary>
            Gets or sets date information relative to UTC (Coordinated Universal Time).
            </summary>
            <remarks>
            <b>Handling of null values</b><para/>
            A null value indicates, that the corresponding metadata tag is not
            present in the metadata model.
            Setting this property's value to a non-null reference creates the
            metadata tag if necessary.
            Setting this property's value to a null reference deletes the
            metadata tag from the metadata model.
            </remarks>
        </member>
        <member name="P:FreeImageAPI.Metadata.MDM_EXIF_GPS.IsDifferential">
            <summary>
            Gets or sets a value indicating whether differential correction was applied to
            the GPS receiver. 
            </summary>
            <remarks>
            <b>Handling of null values</b><para/>
            A null value indicates, that the corresponding metadata tag is not
            present in the metadata model.
            Setting this property's value to a non-null reference creates the
            metadata tag if necessary.
            Setting this property's value to a null reference deletes the
            metadata tag from the metadata model.
            </remarks>
        </member>
        <member name="T:FreeImageAPI.Metadata.MDM_INTEROP">
            <summary>
            Represents a collection of all tags contained in the metadata model
            <see cref="F:FreeImageAPI.FREE_IMAGE_MDMODEL.FIMD_EXIF_INTEROP"/>.
            </summary>
        </member>
        <member name="M:FreeImageAPI.Metadata.MDM_INTEROP.#ctor(FreeImageAPI.FIBITMAP)">
            <summary>
            Initializes a new instance of this class.
            </summary>
            <param name="dib">Handle to a FreeImage bitmap.</param>
        </member>
        <member name="P:FreeImageAPI.Metadata.MDM_INTEROP.Model">
            <summary>
            Retrieves the datamodel that this instance represents.
            </summary>
        </member>
        <member name="P:FreeImageAPI.Metadata.MDM_INTEROP.Identification">
            <summary>
            Gets or sets the identification of the Interoperability rule.
            </summary>
            <remarks>
            <b>Handling of null values</b><para/>
            A null value indicates, that the corresponding metadata tag is not
            present in the metadata model.
            Setting this property's value to a non-null reference creates the
            metadata tag if necessary.
            Setting this property's value to a null reference deletes the
            metadata tag from the metadata model.
            </remarks>
        </member>
        <member name="T:FreeImageAPI.Metadata.MDM_MAIN">
            <summary>
            Represents a collection of all tags contained in the metadata model
            <see cref="F:FreeImageAPI.FREE_IMAGE_MDMODEL.FIMD_EXIF_MAIN"/>.
            <para/>
            <b>This class is obsolete. Use class <see cref="T:FreeImageAPI.Metadata.MDM_EXIF_MAIN"/> instead.</b>
            </summary>
        </member>
        <member name="T:FreeImageAPI.Metadata.MDM_EXIF_MAIN">
            <summary>
            Represents a collection of all tags contained in the metadata model
            <see cref="F:FreeImageAPI.FREE_IMAGE_MDMODEL.FIMD_EXIF_MAIN"/>.
            </summary>
        </member>
        <member name="M:FreeImageAPI.Metadata.MDM_EXIF_MAIN.#ctor(FreeImageAPI.FIBITMAP)">
            <summary>
            Initializes a new instance of this class.
            </summary>
            <param name="dib">Handle to a FreeImage bitmap.</param>
        </member>
        <member name="P:FreeImageAPI.Metadata.MDM_EXIF_MAIN.Model">
            <summary>
            Retrieves the datamodel that this instance represents.
            </summary>
        </member>
        <member name="P:FreeImageAPI.Metadata.MDM_EXIF_MAIN.ImageWidth">
            <summary>
            Gets or sets the number of columns of image data, equal to the number
            of pixels per row. In JPEG compressed data a JPEG marker is used
            instead of this tag.
            </summary>
            <remarks>
            <b>Handling of null values</b><para/>
            A null value indicates, that the corresponding metadata tag is not
            present in the metadata model.
            Setting this property's value to a non-null reference creates the
            metadata tag if necessary.
            Setting this property's value to a null reference deletes the
            metadata tag from the metadata model.
            </remarks>
        </member>
        <member name="P:FreeImageAPI.Metadata.MDM_EXIF_MAIN.ImageHeight">
            <summary>
            Gets or sets number of rows of image data. In JPEG compressed data a JPEG marker
            is used instead of this tag.
            </summary>
            <remarks>
            <b>Handling of null values</b><para/>
            A null value indicates, that the corresponding metadata tag is not
            present in the metadata model.
            Setting this property's value to a non-null reference creates the
            metadata tag if necessary.
            Setting this property's value to a null reference deletes the
            metadata tag from the metadata model.
            </remarks>
        </member>
        <member name="P:FreeImageAPI.Metadata.MDM_EXIF_MAIN.BitsPerSample">
            <summary>
            Gets or sets number of bits per image component. In this standard
            each component of the image is 8 bits, so the value for this tag is 8.
            Constant length of 3.
            </summary>
            <remarks>
            <b>Handling of null values</b><para/>
            A null value indicates, that the corresponding metadata tag is not
            present in the metadata model.
            Setting this property's value to a non-null reference creates the
            metadata tag if necessary.
            Setting this property's value to a null reference deletes the
            metadata tag from the metadata model.
            </remarks>
        </member>
        <member name="P:FreeImageAPI.Metadata.MDM_EXIF_MAIN.Compression">
            <summary>
            Gets or sets compression scheme used for the image data. When a primary image
            is JPEG compressed, this designation is not necessary and is omitted.
            When thumbnails use JPEG compression, this tag value is set to 6.
            </summary>
            <remarks>
            <b>Handling of null values</b><para/>
            A null value indicates, that the corresponding metadata tag is not
            present in the metadata model.
            Setting this property's value to a non-null reference creates the
            metadata tag if necessary.
            Setting this property's value to a null reference deletes the
            metadata tag from the metadata model.
            </remarks>
        </member>
        <member name="P:FreeImageAPI.Metadata.MDM_EXIF_MAIN.PhotometricInterpretation">
            <summary>
            Gets or sets pixel composition. In JPEG compressed data a JPEG marker is
            used instead of this tag. See remarks for further information.
            </summary>
            <remarks>
            The following values are definied:<para/>
            <list type="table">
            	<listheader>
            		<term>ID</term>
            		<description>Description</description>
            	</listheader>
            	<item>
            		<term>2</term>
            		<description>RGB</description>
            	</item>
            	<item>
            		<term>6</term>
            		<description>YCbCr</description>
            	</item>
            	<item>
            		<term>other</term>
            		<description>reserved</description>
            	</item>
            </list>
            <para/>
            <br/><b>Handling of null values</b><para/>
            A null value indicates, that the corresponding metadata tag is not
            present in the metadata model.
            Setting this property's value to a non-null reference creates the
            metadata tag if necessary.
            Setting this property's value to a null reference deletes the
            metadata tag from the metadata model.
            </remarks>
        </member>
        <member name="P:FreeImageAPI.Metadata.MDM_EXIF_MAIN.Orientation">
            <summary>
            Gets or sets the image orientation viewed in terms of rows and columns.
            </summary>
            <remarks>
            <b>Handling of null values</b><para/>
            A null value indicates, that the corresponding metadata tag is not
            present in the metadata model.
            Setting this property's value to a non-null reference creates the
            metadata tag if necessary.
            Setting this property's value to a null reference deletes the
            metadata tag from the metadata model.
            </remarks>
        </member>
        <member name="P:FreeImageAPI.Metadata.MDM_EXIF_MAIN.SamplesPerPixel">
            <summary>
            Gets or sets the number of components per pixel. Since this standard applies
            to RGB and YCbCr images, the value set for this tag is 3. In JPEG compressed
            data a JPEG marker is used instead of this tag.
            </summary>
            <remarks>
            <b>Handling of null values</b><para/>
            A null value indicates, that the corresponding metadata tag is not
            present in the metadata model.
            Setting this property's value to a non-null reference creates the
            metadata tag if necessary.
            Setting this property's value to a null reference deletes the
            metadata tag from the metadata model.
            </remarks>
        </member>
        <member name="P:FreeImageAPI.Metadata.MDM_EXIF_MAIN.PlanarConfiguration">
            <summary>
            Gets or sets a value that indicates whether pixel components are recorded in
            chunky or planar format. In JPEG compressed files a JPEG marker is used instead
            of this tag. If this field does not exist, the TIFF default of 1 (chunky) is assumed.
            See remarks for further information.
            </summary>
            <remarks>
            The following values are definied:<para/>
            <list type="table">
            	<listheader>
            		<term>ID</term>
            		<description>Description</description>
            	</listheader>
            	<item>
            		<term>1</term>
            		<description>chunky format</description>
            	</item>
            	<item>
            		<term>2</term>
            		<description>planar format</description>
            	</item>
            	<item>
            		<term>other</term>
            		<description>reserved</description>
            	</item>
            </list>
            <para/>
            <br/><b>Handling of null values</b><para/>
            A null value indicates, that the corresponding metadata tag is not
            present in the metadata model.
            Setting this property's value to a non-null reference creates the
            metadata tag if necessary.
            Setting this property's value to a null reference deletes the
            metadata tag from the metadata model.
            </remarks>
        </member>
        <member name="P:FreeImageAPI.Metadata.MDM_EXIF_MAIN.YCbCrSubSampling">
            <summary>
            Gets or sets the sampling ratio of chrominance components in relation to
            the luminance component. In JPEG compressed dat a JPEG marker is used
            instead of this tag.
            See remarks for further information.
            </summary>
            <remarks>
            The following values are definied:<para/>
            <list type="table">
            	<listheader>
            		<term>ID</term>
            		<description>Description</description>
            	</listheader>
            	<item>
            		<term>[2,1]</term>
            		<description>YCbCr4:2:2</description>
            	</item>
            	<item>
            		<term>[2,2]</term>
            		<description>YCbCr4:2:0</description>
            	</item>
            	<item>
            		<term>other</term>
            		<description>reserved</description>
            	</item>
            </list>
            <para/>
            <br/><b>Handling of null values</b><para/>
            A null value indicates, that the corresponding metadata tag is not
            present in the metadata model.
            Setting this property's value to a non-null reference creates the
            metadata tag if necessary.
            Setting this property's value to a null reference deletes the
            metadata tag from the metadata model.
            </remarks>
        </member>
        <member name="P:FreeImageAPI.Metadata.MDM_EXIF_MAIN.YCbCrPositioning">
            <summary>
            Gets or sets position of chrominance components in relation to the luminance component.
            See remarks for further information.
            </summary>
            <remarks>
            This field is designated only for JPEG compressed data or uncompressed YCbCr data.
            The TIFF default is 1 (centered); but when Y:Cb:Cr = 4:2:2 it is recommended in
            this standard that 2 (co-sited) be used to record data, in order to improve the
            image quality when viewed on TV systems.
            <para/>
            When this field does not exist, the reader shall assume the TIFF default.
            In the case of Y:Cb:Cr = 4:2:0, the TIFF default (centered) is recommended.
            If the reader does not have the capability of supporting both kinds of YCbCrPositioning,
            it shall follow the TIFF default regardless of the value in this field.
            It is preferable that readers be able to support both centered and co-sited positioning.
            <para/>
            The following values are definied:<para/>
            <list type="table">
            	<listheader>
            		<term>ID</term>
            		<description>Description</description>
            	</listheader>
            	<item>
            		<term>1</term>
            		<description>centered</description>
            	</item>
            	<item>
            		<term>2</term>
            		<description>co-sited</description>
            	</item>
            	<item>
            		<term>other</term>
            		<description>reserved</description>
            	</item>
            </list>
            <para/>
            <br/><b>Handling of null values</b><para/>
            A null value indicates, that the corresponding metadata tag is not
            present in the metadata model.
            Setting this property's value to a non-null reference creates the
            metadata tag if necessary.
            Setting this property's value to a null reference deletes the
            metadata tag from the metadata model.
            </remarks>
        </member>
        <member name="P:FreeImageAPI.Metadata.MDM_EXIF_MAIN.XResolution">
            <summary>
            Gets or sets the number of pixels per <see cref="P:FreeImageAPI.Metadata.MDM_EXIF_MAIN.ResolutionUnit"/>
            in the <see cref="P:FreeImageAPI.Metadata.MDM_EXIF_MAIN.ImageWidth"/> direction. When the image resolution is unknown,
            72 [dpi] is designated.
            </summary>
            <remarks>
            <b>Handling of null values</b><para/>
            A null value indicates, that the corresponding metadata tag is not
            present in the metadata model.
            Setting this property's value to a non-null reference creates the
            metadata tag if necessary.
            Setting this property's value to a null reference deletes the
            metadata tag from the metadata model.
            </remarks>
        </member>
        <member name="P:FreeImageAPI.Metadata.MDM_EXIF_MAIN.YResolution">
            <summary>
            Gets or sets the number of pixels per <see cref="P:FreeImageAPI.Metadata.MDM_EXIF_MAIN.ResolutionUnit"/>
            in the <see cref="P:FreeImageAPI.Metadata.MDM_EXIF_MAIN.ImageHeight"/> direction. When the image resolution is unknown,
            72 [dpi] is designated.
            </summary>
            <remarks>
            <b>Handling of null values</b><para/>
            A null value indicates, that the corresponding metadata tag is not
            present in the metadata model.
            Setting this property's value to a non-null reference creates the
            metadata tag if necessary.
            Setting this property's value to a null reference deletes the
            metadata tag from the metadata model.
            </remarks>
        </member>
        <member name="P:FreeImageAPI.Metadata.MDM_EXIF_MAIN.ResolutionUnit">
            <summary>
            Gets or sets the unit for measuring <see cref="P:FreeImageAPI.Metadata.MDM_EXIF_MAIN.XResolution"/> and <see cref="P:FreeImageAPI.Metadata.MDM_EXIF_MAIN.YResolution"/>.
            The same unit is used for both <see cref="P:FreeImageAPI.Metadata.MDM_EXIF_MAIN.XResolution"/> and <see cref="P:FreeImageAPI.Metadata.MDM_EXIF_MAIN.YResolution"/>.
            If the image resolution in unknown, 2 (inches) is designated.
            See remarks for further information.
            </summary>
            <remarks>
            The following values are definied:<para/>
            <list type="table">
            	<listheader>
            		<term>ID</term>
            		<description>Description</description>
            	</listheader>
            	<item>
            		<term>2</term>
            		<description>inches</description>
            	</item>
            	<item>
            		<term>3</term>
            		<description>YCbCr4:2:0</description>
            	</item>
            	<item>
            		<term>other</term>
            		<description>centimeters</description>
            	</item>
            </list>
            <para/>
            <br/><b>Handling of null values</b><para/>
            A null value indicates, that the corresponding metadata tag is not
            present in the metadata model.
            Setting this property's value to a non-null reference creates the
            metadata tag if necessary.
            Setting this property's value to a null reference deletes the
            metadata tag from the metadata model.
            </remarks>
        </member>
        <member name="P:FreeImageAPI.Metadata.MDM_EXIF_MAIN.StripOffsets">
            <summary>
            Gets or sets the byte offset of that strip.
            It is recommended that this be selected so the number of strip bytes
            does not exceed 64 Kbytes.
            With JPEG compressed data this designation is not needed and is omitted.
            Constant length of <see cref="P:FreeImageAPI.Metadata.MDM_EXIF_MAIN.SamplesPerPixel"/> * StripsPerImage.
            </summary>
            <remarks>
            <b>Handling of null values</b><para/>
            A null value indicates, that the corresponding metadata tag is not
            present in the metadata model.
            Setting this property's value to a non-null reference creates the
            metadata tag if necessary.
            Setting this property's value to a null reference deletes the
            metadata tag from the metadata model.
            </remarks>
            <seealso cref="P:FreeImageAPI.Metadata.MDM_EXIF_MAIN.RowsPerStrip"/>
            <see cref="P:FreeImageAPI.Metadata.MDM_EXIF_MAIN.StripByteCounts"/>
        </member>
        <member name="P:FreeImageAPI.Metadata.MDM_EXIF_MAIN.RowsPerStrip">
            <summary>
            Gets or sets number of rows per strip. This is the number of rows in the image of
            one strip when an image is divided into strips. With JPEG compressed data this
            designation is not needed and is omitted.
            </summary>
            <remarks>
            <b>Handling of null values</b><para/>
            A null value indicates, that the corresponding metadata tag is not
            present in the metadata model.
            Setting this property's value to a non-null reference creates the
            metadata tag if necessary.
            Setting this property's value to a null reference deletes the
            metadata tag from the metadata model.
            </remarks>
            <seealso cref="P:FreeImageAPI.Metadata.MDM_EXIF_MAIN.StripByteCounts"/>
        </member>
        <member name="P:FreeImageAPI.Metadata.MDM_EXIF_MAIN.StripByteCounts">
            <summary>
            Gets or sets the total number of bytes in each strip.
            With JPEG compressed data this designation is not needed and is omitted.
            Constant length of <see cref="P:FreeImageAPI.Metadata.MDM_EXIF_MAIN.SamplesPerPixel"/> * StripsPerImage.
            </summary>
            <remarks>
            <b>Handling of null values</b><para/>
            A null value indicates, that the corresponding metadata tag is not
            present in the metadata model.
            Setting this property's value to a non-null reference creates the
            metadata tag if necessary.
            Setting this property's value to a null reference deletes the
            metadata tag from the metadata model.
            </remarks>
        </member>
        <member name="P:FreeImageAPI.Metadata.MDM_EXIF_MAIN.JPEGInterchangeFormat">
            <summary>
            Gets or sets the offset to the start byte (SOI) of JPEG compressed thumbnail data.
            This is not used for primary image JPEG data.
            </summary>
            <remarks>
            <b>Handling of null values</b><para/>
            A null value indicates, that the corresponding metadata tag is not
            present in the metadata model.
            Setting this property's value to a non-null reference creates the
            metadata tag if necessary.
            Setting this property's value to a null reference deletes the
            metadata tag from the metadata model.
            </remarks>
        </member>
        <member name="P:FreeImageAPI.Metadata.MDM_EXIF_MAIN.JPEGInterchangeFormatLength">
            <summary>
            Gets or sets the number of bytes of JPEG compressed thumbnail data.
            </summary>
            <remarks>
            This is not used for primary image JPEG data.
            JPEG thumbnails are not divided but are recorded as a continuous
            JPEG bitstream from SOI to EOI. APPn and COM markers should not be recorded.
            Compressed thumbnails shall be recorded in no more than 64 Kbytes,
            including all other data to be recorded in APP1.
            <para/>
            <br/><b>Handling of null values</b><para/>
            A null value indicates, that the corresponding metadata tag is not
            present in the metadata model.
            Setting this property's value to a non-null reference creates the
            metadata tag if necessary.
            Setting this property's value to a null reference deletes the
            metadata tag from the metadata model.
            </remarks>
        </member>
        <member name="P:FreeImageAPI.Metadata.MDM_EXIF_MAIN.TransferFunction">
            <summary>
            Gets or sets a transfer function for the image, described in tabular style.
            Constant length of 3 * 256.
            </summary>
            <remarks>
            <b>Handling of null values</b><para/>
            A null value indicates, that the corresponding metadata tag is not
            present in the metadata model.
            Setting this property's value to a non-null reference creates the
            metadata tag if necessary.
            Setting this property's value to a null reference deletes the
            metadata tag from the metadata model.
            </remarks>
        </member>
        <member name="P:FreeImageAPI.Metadata.MDM_EXIF_MAIN.WhitePoint">
            <summary>
            Gets or sets the chromaticity of the white point of the image.
            Constant length of 2.
            </summary>
            <remarks>
            <b>Handling of null values</b><para/>
            A null value indicates, that the corresponding metadata tag is not
            present in the metadata model.
            Setting this property's value to a non-null reference creates the
            metadata tag if necessary.
            Setting this property's value to a null reference deletes the
            metadata tag from the metadata model.
            </remarks>
        </member>
        <member name="P:FreeImageAPI.Metadata.MDM_EXIF_MAIN.PrimaryChromaticities">
            <summary>
            Gets or sets the chromaticity of the three primary colors of the image.
            Constant length of 6.
            </summary>
            <remarks>
            <b>Handling of null values</b><para/>
            A null value indicates, that the corresponding metadata tag is not
            present in the metadata model.
            Setting this property's value to a non-null reference creates the
            metadata tag if necessary.
            Setting this property's value to a null reference deletes the
            metadata tag from the metadata model.
            </remarks>
        </member>
        <member name="P:FreeImageAPI.Metadata.MDM_EXIF_MAIN.YCbCrCoefficients">
            <summary>
            Gets or sets the matrix coefficients for transformation from RGB to YCbCr image data.
            Constant length of 3.
            </summary>
            <remarks>
            <b>Handling of null values</b><para/>
            A null value indicates, that the corresponding metadata tag is not
            present in the metadata model.
            Setting this property's value to a non-null reference creates the
            metadata tag if necessary.
            Setting this property's value to a null reference deletes the
            metadata tag from the metadata model.
            </remarks>
        </member>
        <member name="P:FreeImageAPI.Metadata.MDM_EXIF_MAIN.ReferenceBlackWhite">
            <summary>
            Gets or sets the reference black point value and reference white point value.
            Constant length of 6.
            </summary>
            <remarks>
            <b>Handling of null values</b><para/>
            A null value indicates, that the corresponding metadata tag is not
            present in the metadata model.
            Setting this property's value to a non-null reference creates the
            metadata tag if necessary.
            Setting this property's value to a null reference deletes the
            metadata tag from the metadata model.
            </remarks>
        </member>
        <member name="P:FreeImageAPI.Metadata.MDM_EXIF_MAIN.DateTime">
            <summary>
            Gets or sets the date and time of image creation.
            </summary>
            <remarks>
            <b>Handling of null values</b><para/>
            A null value indicates, that the corresponding metadata tag is not
            present in the metadata model.
            Setting this property's value to a non-null reference creates the
            metadata tag if necessary.
            Setting this property's value to a null reference deletes the
            metadata tag from the metadata model.
            </remarks>
        </member>
        <member name="P:FreeImageAPI.Metadata.MDM_EXIF_MAIN.ImageDescription">
            <summary>
            Gets or sets a string giving the title of the image.
            </summary>
            <remarks>
            <b>Handling of null values</b><para/>
            A null value indicates, that the corresponding metadata tag is not
            present in the metadata model.
            Setting this property's value to a non-null reference creates the
            metadata tag if necessary.
            Setting this property's value to a null reference deletes the
            metadata tag from the metadata model.
            </remarks>
        </member>
        <member name="P:FreeImageAPI.Metadata.MDM_EXIF_MAIN.Make">
            <summary>
            Gets or sets the manufacturer of the recording equipment.
            </summary>
            <remarks>
            <b>Handling of null values</b><para/>
            A null value indicates, that the corresponding metadata tag is not
            present in the metadata model.
            Setting this property's value to a non-null reference creates the
            metadata tag if necessary.
            Setting this property's value to a null reference deletes the
            metadata tag from the metadata model.
            </remarks>
        </member>
        <member name="P:FreeImageAPI.Metadata.MDM_EXIF_MAIN.EquipmentModel">
            <summary>
            Gets or sets the model name or model number of the equipment.
            </summary>
            <remarks>
            <b>Handling of null values</b><para/>
            A null value indicates, that the corresponding metadata tag is not
            present in the metadata model.
            Setting this property's value to a non-null reference creates the
            metadata tag if necessary.
            Setting this property's value to a null reference deletes the
            metadata tag from the metadata model.
            </remarks>
        </member>
        <member name="P:FreeImageAPI.Metadata.MDM_EXIF_MAIN.Software">
            <summary>
            Gets or sets the name and version of the software or firmware of the camera
            or image input device used to generate the image.
            </summary>
            <remarks>
            <b>Handling of null values</b><para/>
            A null value indicates, that the corresponding metadata tag is not
            present in the metadata model.
            Setting this property's value to a non-null reference creates the
            metadata tag if necessary.
            Setting this property's value to a null reference deletes the
            metadata tag from the metadata model.
            </remarks>
        </member>
        <member name="P:FreeImageAPI.Metadata.MDM_EXIF_MAIN.Artist">
            <summary>
            Gets or sets the name of the camera owner, photographer or image creator.
            </summary>
            <remarks>
            <b>Handling of null values</b><para/>
            A null value indicates, that the corresponding metadata tag is not
            present in the metadata model.
            Setting this property's value to a non-null reference creates the
            metadata tag if necessary.
            Setting this property's value to a null reference deletes the
            metadata tag from the metadata model.
            </remarks>
        </member>
        <member name="P:FreeImageAPI.Metadata.MDM_EXIF_MAIN.Copyright">
            <summary>
            Gets or sets the photographer and editor copyrights.
            Constant length of 1-2.
            </summary>
            <remarks>
            <b>Handling of null values</b><para/>
            A null value indicates, that the corresponding metadata tag is not
            present in the metadata model.
            Setting this property's value to a non-null reference creates the
            metadata tag if necessary.
            Setting this property's value to a null reference deletes the
            metadata tag from the metadata model.
            </remarks>
        </member>
        <member name="M:FreeImageAPI.Metadata.MDM_MAIN.#ctor(FreeImageAPI.FIBITMAP)">
            <summary>
            Initializes a new instance of this class.
            </summary>
            <param name="dib">Handle to a FreeImage bitmap.</param>
        </member>
        <member name="T:FreeImageAPI.Metadata.MDM_MAKERNOTE">
            <summary>
            Represents a collection of all tags contained in the metadata model
            <see cref="F:FreeImageAPI.FREE_IMAGE_MDMODEL.FIMD_EXIF_MAKERNOTE"/>.
            </summary>
        </member>
        <member name="M:FreeImageAPI.Metadata.MDM_MAKERNOTE.#ctor(FreeImageAPI.FIBITMAP)">
            <summary>
            Initializes a new instance of this class.
            </summary>
            <param name="dib">Handle to a FreeImage bitmap.</param>
        </member>
        <member name="P:FreeImageAPI.Metadata.MDM_MAKERNOTE.Model">
            <summary>
            Retrieves the datamodel that this instance represents.
            </summary>
        </member>
        <member name="T:FreeImageAPI.Metadata.MDM_GEOTIFF">
            <summary>
            Represents a collection of all tags contained in the metadata model
            <see cref="F:FreeImageAPI.FREE_IMAGE_MDMODEL.FIMD_GEOTIFF"/>.
            </summary>
        </member>
        <member name="M:FreeImageAPI.Metadata.MDM_GEOTIFF.#ctor(FreeImageAPI.FIBITMAP)">
            <summary>
            Initializes a new instance of this class.
            </summary>
            <param name="dib">Handle to a FreeImage bitmap.</param>
        </member>
        <member name="P:FreeImageAPI.Metadata.MDM_GEOTIFF.Model">
            <summary>
            Retrieves the datamodel that this instance represents.
            </summary>
        </member>
        <member name="P:FreeImageAPI.Metadata.MDM_GEOTIFF.GeoASCIIParams">
            <summary>
            Gets or sets the value of the GeoTIFF GeoASCIIParamsTag.
            </summary>
            <remarks>
            The GeoASCIIParamsTag is used to store all of the <see cref="T:System.String"/> valued
            GeoKeys, referenced by the <see cref="P:FreeImageAPI.Metadata.MDM_GEOTIFF.GeoKeyDirectory"/> property. Since keys
            defined in the GeoKeyDirectoryTag use offsets into this tag, any special
            comments may be placed at the beginning of this tag.
            For the most part, the only keys that are <see cref="T:System.String"/> valued are
            <i>Citation</i> keys, giving documentation and references for obscure
            projections, datums, etc.
            <para/>
            Special handling is required for <see cref="T:System.String"/>-valued keys. While it
            is true that TIFF 6.0 permits multiple NULL-delimited strings within a single
            ASCII tag, the secondary strings might not appear in the output of naive
            <i>tiffdump</i> programs. For this reason, the NULL delimiter of each ASCII key
            value shall be converted to a "|" (pipe) character before being installed
            back into the <see cref="T:System.String"/> holding tag, so that a dump of the tag
            will look like this.
            <para/>
            AsciiTag="first_value|second_value|etc...last_value|"
            <para/>
            A baseline GeoTIFF-reader must check for and convert the final "|" pipe 
            character of a key back into a NULL before returning it to the client 
            software.
            <para/>
            <br/><b>Handling of null values</b><para/>
            A null value indicates, that the corresponding metadata tag is not
            present in the metadata model.
            Setting this property's value to a non-null reference creates the
            metadata tag if necessary.
            Setting this property's value to a null reference deletes the
            metadata tag from the metadata model.
            </remarks>
        </member>
        <member name="P:FreeImageAPI.Metadata.MDM_GEOTIFF.GeoDoubleParams">
            <summary>
            Gets or sets the value of the GeoTIFF GeoDoubleParamsTag.
            </summary>
            <remarks>
            The GeoDoubleParamsTag is used to store all of the <see cref="T:System.Double"/> valued
            GeoKeys, referenced by the <see cref="P:FreeImageAPI.Metadata.MDM_GEOTIFF.GeoKeyDirectory"/> property. The meaning of
            any value of this double array is determined from the GeoKeyDirectoryTag reference
            pointing to it. <see cref="T:System.Single"/> values should first be converted to
            <see cref="T:System.Double"/> and stored here.
            <para/>
            <br/><b>Handling of null values</b><para/>
            A null value indicates, that the corresponding metadata tag is not
            present in the metadata model.
            Setting this property's value to a non-null reference creates the
            metadata tag if necessary.
            Setting this property's value to a null reference deletes the
            metadata tag from the metadata model.
            </remarks>
        </member>
        <member name="P:FreeImageAPI.Metadata.MDM_GEOTIFF.GeoKeyDirectory">
            <summary>
            Gets or sets the value of the GeoTIFF GeoKeyDirectoryTag.
            </summary>
            <remarks>
            The GeoKeyDirectoryTag may be used to store the GeoKey Directory, which defines and
            references the <i>GeoKeys</i>.
            <para/>
            The tag is an array of unsigned <see cref="T:System.UInt16"/> values, which are primarily
            grouped into blocks of 4. The first 4 values are special, and contain GeoKey directory
            header information. The header values consist of the following information, in order:
            <para/>
            Header={KeyDirectoryVersion, KeyRevision, MinorRevision, NumberOfKeys}
            <para/>
            where
            <para/>
            <i>KeyDirectoryVersion</i> indicates the current version of Key implementation, and will
            only change if this Tag's Key structure is changed. (Similar to the TIFFVersion (42)).
            The current DirectoryVersion number is 1. This value will most likely never change,
            and may be used to ensure that this is a valid Key-implementation.
            <para/>
            <i>KeyRevision</i> indicates what revision of Key-Sets are used.
            <para/>
            <i>MinorRevision</i> indicates what set of Key-Codes are used. The complete revision number
            is denoted &lt;KeyRevision&gt;.&lt;MinorRevision&gt;.
            <para/>
            <i>NumberOfKeys</i> indicates how many Keys are defined by the rest of this Tag.
            <para/>
            This header is immediately followed by a collection of &lt;NumberOfKeys&gt; KeyEntry
            sets, each of which is also 4-<see cref="T:System.UInt16"/> long. Each KeyEntry is modeled on the
            <i>TIFFEntry</i> format of the TIFF directory header, and is of the form:
            <para/>
            KeyEntry = { KeyID, TIFFTagLocation, Count, Value_Offset }
            <para/>
            where
            <para/>
            <i>KeyID</i> gives the Key-ID value of the Key (identical in function to TIFF tag ID,
            but completely independent of TIFF tag-space),
            <para/>
            <i>TIFFTagLocation</i> indicates which TIFF tag contains the value(s) of the Key: if
            TIFFTagLocation is 0, then the value is <see cref="T:System.UInt16"/>, and is contained in the
            <i>Value_Offset</i> entry. Otherwise, the type (format) of the value is implied by the
            TIFF-Type of the tag containing the value.
            <para/>
            <i>Count</i> indicates the number of values in this key.
            <para/>
            <i>Value_Offset</i> Value_Offset indicates the index-offset into the TagArray indicated
            by TIFFTagLocation, if it is nonzero. If TIFFTagLocation is 0 (zero) , then Value_Offset 
            contains the actual (<see cref="T:System.UInt16"/>) value of the Key, and Count=1 is implied.
            Note that the offset is not a byte-offset, but rather an index based on the natural data
            type of the specified tag array.
            <para/>
            Following the KeyEntry definitions, the KeyDirectory tag may also contain additional
            values. For example, if a key requires multiple <see cref="T:System.UInt16"/> values, they shall
            be placed at the end of this tag, and the KeyEntry will set
            TIFFTagLocation=GeoKeyDirectoryTag, with the Value_Offset pointing to the location of the
            value(s).
            <para/>
            <br/><b>Handling of null values</b><para/>
            A null value indicates, that the corresponding metadata tag is not
            present in the metadata model.
            Setting this property's value to a non-null reference creates the
            metadata tag if necessary.
            Setting this property's value to a null reference deletes the
            metadata tag from the metadata model.
            </remarks>
        </member>
        <member name="P:FreeImageAPI.Metadata.MDM_GEOTIFF.ModelPixelScale">
            <summary>
            Gets or sets the value of the GeoTIFF ModelPixelScaleTag.
            </summary>
            <remarks>
            The ModelPixelScaleTag tag may be used to specify the size of raster pixel spacing
            in the model space units, when the raster space can be embedded in the model space
            coordinate system without rotation, and consists of the following 3 values:
            <para/>
            ModelPixelScaleTag = (ScaleX, ScaleY, ScaleZ)
            <para/>
            where <i>ScaleX</i> and <i>ScaleY</i> give the horizontal and vertical spacing of
            raster pixels. The <i>ScaleZ</i> is primarily used to map the pixel value of a
            digital elevation model into the correct Z-scale, and so for most other purposes
            this value should be zero (since most model spaces are 2-D, with Z=0).
            <para/>
            A single tiepoint in the <see cref="P:FreeImageAPI.Metadata.MDM_GEOTIFF.ModelTiePoints"/> tag, together with this tag,
            completely determine the relationship between raster and model space; thus they
            comprise the two tags which Baseline GeoTIFF files most often will use to place a
            raster image into a "standard position" in model space.
            <para/>
            Like the <see cref="P:FreeImageAPI.Metadata.MDM_GEOTIFF.ModelTiePoints"/> tag, this tag information is independent of the
            XPosition, YPosition, Resolution and Orientation tags of the standard TIFF 6.0 spec.
            However, simple reversals of orientation between raster and model space
            (e.g. horizontal or vertical flips) may be indicated by reversal of sign in the
            corresponding component of the ModelPixelScaleTag. GeoTIFF compliant readers must
            honor this signreversal convention.
            <para/>
            This tag must not be used if the raster image requires rotation or shearing to place
            it into the standard model space. In such cases the transformation shall be defined
            with the more general <see cref="P:FreeImageAPI.Metadata.MDM_GEOTIFF.ModelTransformationMatrix"/>.
            <para/>
            <br/><b>Naming differences</b><para/>
            In the native FreeImage library and thus, in the FreeImage API documentation, this
            property's key is named <i>GeoPixelScale</i>. Since the GeoTIFF specification
            as well as Java's <c>EXIFTIFFTagSet</c> class call this tag
            <see cref="P:FreeImageAPI.Metadata.MDM_GEOTIFF.ModelPixelScale"/>, this property was renamed accordingly.
            However, when accessing this property's tag by its <see cref="T:FreeImageAPI.Metadata.MetadataTag"/> object,
            the native FreeImage tag key <i>GeoPixelScale</i> must be used.
            <para/>
            <br/><b>Handling of null values</b><para/>
            A null value indicates, that the corresponding metadata tag is not
            present in the metadata model.
            Setting this property's value to a non-null reference creates the
            metadata tag if necessary.
            Setting this property's value to a null reference deletes the
            metadata tag from the metadata model.
            </remarks>
        </member>
        <member name="P:FreeImageAPI.Metadata.MDM_GEOTIFF.ModelTiePoints">
            <summary>
            Gets or sets the value of the GeoTIFF GeoTiePointsTag.
            </summary>
            <remarks>
            The GeoTiePointsTag stores raster -&gt; model tiepoint pairs in the order
            <para/>
            ModelTiePoints = (...,I,J,K, X,Y,Z...),
            <para/>
            where <i>(I,J,K)</i> is the point at location <i>(I,J)</i> in raster space with 
            pixel-value <i>K</i>, and <i>(X,Y,Z)</i> is a vector in model space. In most cases
            the model space is only two-dimensional, in which case both K and Z should be set
            to zero; this third dimension is provided in anticipation of future support for 3D
            digital elevation models and vertical coordinate systems.
            <para/>
            A raster image may be georeferenced simply by specifying its location, size and
            orientation in the model coordinate space M. This may be done by specifying the
            location of three of the four bounding corner points. However, tiepoints are only
            to be considered exact at the points specified; thus defining such a set of
            bounding tiepoints does not imply that the model space locations of the interior
            of the image may be exactly computed by a linear interpolation of these tiepoints.
            <para/>
            However, since the relationship between the Raster space and the model space will
            often be an exact, affine transformation, this relationship can be defined using
            one set of tiepoints and the <see cref="P:FreeImageAPI.Metadata.MDM_GEOTIFF.ModelPixelScale"/>, described below, which
            gives the vertical and horizontal raster grid cell size, specified in model units.
            <para/>
            If possible, the first tiepoint placed in this tag shall be the one establishing
            the location of the point (0,0) in raster space. However, if this is not possible
            (for example, if (0,0) is goes to a part of model space in which the projection is
            ill-defined), then there is no particular order in which the tiepoints need be
            listed.
            <para/>
            For orthorectification or mosaicking applications a large number of tiepoints may
            be specified on a mesh over the raster image. However, the definition of associated
            grid interpolation methods is not in the scope of the current GeoTIFF spec.
            <para/>
            <br/><b>Naming differences</b><para/>
            In the native FreeImage library and thus, in the FreeImage API documentation, this
            property's key is named <i>GeoTiePoints</i>. Since the GeoTIFF specification
            as well as Java's <c>EXIFTIFFTagSet</c> class call this tag
            <see cref="P:FreeImageAPI.Metadata.MDM_GEOTIFF.ModelTiePoints"/>, this property was renamed accordingly.
            However, when accessing this property's tag by its <see cref="T:FreeImageAPI.Metadata.MetadataTag"/> object,
            the native FreeImage tag key <i>GeoTiePoints</i> must be used.
            <para/>
            <br/><b>Handling of null values</b><para/>
            A null value indicates, that the corresponding metadata tag is not
            present in the metadata model.
            Setting this property's value to a non-null reference creates the
            metadata tag if necessary.
            Setting this property's value to a null reference deletes the
            metadata tag from the metadata model.
            </remarks>
        </member>
        <member name="P:FreeImageAPI.Metadata.MDM_GEOTIFF.ModelTransformationMatrix">
            <summary>
            Gets or sets the value of the GeoTIFF ModelTransformationMatrixTag.
            </summary>
            <remarks>
            This tag may be used to specify the transformation matrix between the raster space
            (and its dependent pixel-value space) and the (possibly 3D) model space.
            <para/>
            <br/><b>Naming differences</b><para/>
            In the native FreeImage library and thus, in the FreeImage API documentation, this
            property's key is named <i>GeoTransformationMatrix</i>. Since the GeoTIFF specification
            as well as Java's <c>EXIFTIFFTagSet</c> class call this tag
            <see cref="P:FreeImageAPI.Metadata.MDM_GEOTIFF.ModelTransformationMatrix"/>, this property was renamed accordingly.
            However, when accessing this property's tag by its <see cref="T:FreeImageAPI.Metadata.MetadataTag"/> object,
            the native FreeImage tag key <i>GeoTransformationMatrix</i> must be used.
            <para/>
            <br/><b>Handling of null values</b><para/>
            A null value indicates, that the corresponding metadata tag is not
            present in the metadata model.
            Setting this property's value to a non-null reference creates the
            metadata tag if necessary.
            Setting this property's value to a null reference deletes the
            metadata tag from the metadata model.
            </remarks>
        </member>
        <member name="P:FreeImageAPI.Metadata.MDM_GEOTIFF.IntergraphTransformationMatrix">
            <summary>
            Gets or sets the value of the GeoTIFF IntergraphTransformationMatrixTag.
            </summary>
            <remarks>
            The IntergraphTransformationMatrixTag conflicts with an internal software implementation
            at Intergraph, and so its use is no longer encouraged. A GeoTIFF reader should look first
            for the new tag, and only if it is not found should it check for this older tag. If found,
            it should only consider it to be contain valid GeoTIFF matrix information if the tag-count
            is 16; the Intergraph version uses 17 values.
            <para/>
            <br/><b>Handling of null values</b><para/>
            A null value indicates, that the corresponding metadata tag is not
            present in the metadata model.
            Setting this property's value to a non-null reference creates the
            metadata tag if necessary.
            Setting this property's value to a null reference deletes the
            metadata tag from the metadata model.
            </remarks>
        </member>
        <member name="P:FreeImageAPI.Metadata.MDM_GEOTIFF.JPLCartoIFDOffset">
            <summary>
            Gets or sets the value of the GeoTIFF JPLCartoIFDOffsetTag.
            </summary>
            <remarks>
            <b>Handling of null values</b><para/>
            A null value indicates, that the corresponding metadata tag is not
            present in the metadata model.
            Setting this property's value to a non-null reference creates the
            metadata tag if necessary.
            Setting this property's value to a null reference deletes the
            metadata tag from the metadata model.
            </remarks>
        </member>
        <member name="T:FreeImageAPI.Metadata.MDM_IPTC">
            <summary>
            Represents a collection of all tags contained in the metadata model
            <see cref="F:FreeImageAPI.FREE_IMAGE_MDMODEL.FIMD_IPTC"/>.
            </summary>
        </member>
        <member name="M:FreeImageAPI.Metadata.MDM_IPTC.#ctor(FreeImageAPI.FIBITMAP)">
            <summary>
            Initializes a new instance of this class.
            </summary>
            <param name="dib">Handle to a FreeImage bitmap.</param>
        </member>
        <member name="P:FreeImageAPI.Metadata.MDM_IPTC.Model">
            <summary>
            Retrieves the datamodel that this instance represents.
            </summary>
            <remarks>
            <b>Handling of null values</b><para/>
            A null value indicates, that the corresponding metadata tag is not
            present in the metadata model.
            Setting this property's value to a non-null reference creates the
            metadata tag if necessary.
            Setting this property's value to a null reference deletes the
            metadata tag from the metadata model.
            </remarks>
        </member>
        <member name="P:FreeImageAPI.Metadata.MDM_IPTC.ApplicationRecordVersion">
            <summary>
            Gets the Application Record Version.
            </summary>
            <remarks>
            <b>Handling of null values</b><para/>
            A null value indicates, that the corresponding metadata tag is not
            present in the metadata model.
            Setting this property's value to a non-null reference creates the
            metadata tag if necessary.
            Setting this property's value to a null reference deletes the
            metadata tag from the metadata model.
            </remarks>
        </member>
        <member name="P:FreeImageAPI.Metadata.MDM_IPTC.ObjectTypeReference">
            <summary>
            Gets or sets the value of the IPTC/NAA tag Object Type Reference.
            </summary>
            <remarks>
            <b>Handling of null values</b><para/>
            A null value indicates, that the corresponding metadata tag is not
            present in the metadata model.
            Setting this property's value to a non-null reference creates the
            metadata tag if necessary.
            Setting this property's value to a null reference deletes the
            metadata tag from the metadata model.
            </remarks>
        </member>
        <member name="P:FreeImageAPI.Metadata.MDM_IPTC.ObjectAttributeReference">
            <summary>
            Gets or sets the value of the IPTC/NAA tag Object Attribute Reference.
            </summary>
            <remarks>
            <b>Handling of null values</b><para/>
            A null value indicates, that the corresponding metadata tag is not
            present in the metadata model.
            Setting this property's value to a non-null reference creates the
            metadata tag if necessary.
            Setting this property's value to a null reference deletes the
            metadata tag from the metadata model.
            </remarks>
        </member>
        <member name="P:FreeImageAPI.Metadata.MDM_IPTC.ObjectName">
            <summary>
            Gets or sets the value of the IPTC/NAA tag Object Name.
            This is also referred to as Title.
            </summary>
            <remarks>
            <b>Handling of null values</b><para/>
            A null value indicates, that the corresponding metadata tag is not
            present in the metadata model.
            Setting this property's value to a non-null reference creates the
            metadata tag if necessary.
            Setting this property's value to a null reference deletes the
            metadata tag from the metadata model.
            </remarks>
        </member>
        <member name="P:FreeImageAPI.Metadata.MDM_IPTC.EditStatus">
            <summary>
            Gets or sets the value of the IPTC/NAA tag Edit Status.
            </summary>
            <remarks>
            <b>Handling of null values</b><para/>
            A null value indicates, that the corresponding metadata tag is not
            present in the metadata model.
            Setting this property's value to a non-null reference creates the
            metadata tag if necessary.
            Setting this property's value to a null reference deletes the
            metadata tag from the metadata model.
            </remarks>
        </member>
        <member name="P:FreeImageAPI.Metadata.MDM_IPTC.EditorialUpdate">
            <summary>
            Gets or sets the value of the IPTC/NAA tag Editorial Update.
            </summary>
            <remarks>
            <b>Handling of null values</b><para/>
            A null value indicates, that the corresponding metadata tag is not
            present in the metadata model.
            Setting this property's value to a non-null reference creates the
            metadata tag if necessary.
            Setting this property's value to a null reference deletes the
            metadata tag from the metadata model.
            </remarks>
        </member>
        <member name="P:FreeImageAPI.Metadata.MDM_IPTC.Urgency">
            <summary>
            Gets or sets the value of the IPTC/NAA tag Urgency.
            </summary>
            <remarks>
            <b>Handling of null values</b><para/>
            A null value indicates, that the corresponding metadata tag is not
            present in the metadata model.
            Setting this property's value to a non-null reference creates the
            metadata tag if necessary.
            Setting this property's value to a null reference deletes the
            metadata tag from the metadata model.
            </remarks>
        </member>
        <member name="P:FreeImageAPI.Metadata.MDM_IPTC.SubjectReference">
            <summary>
            Gets or sets the value of the IPTC/NAA tag Subject Reference.
            </summary>
            <remarks>
            <b>Handling of null values</b><para/>
            A null value indicates, that the corresponding metadata tag is not
            present in the metadata model.
            Setting this property's value to a non-null reference creates the
            metadata tag if necessary.
            Setting this property's value to a null reference deletes the
            metadata tag from the metadata model.
            </remarks>
        </member>
        <member name="P:FreeImageAPI.Metadata.MDM_IPTC.Category">
            <summary>
            Gets or sets the value of the IPTC/NAA tag Category.
            </summary>
            <remarks>
            <b>Handling of null values</b><para/>
            A null value indicates, that the corresponding metadata tag is not
            present in the metadata model.
            Setting this property's value to a non-null reference creates the
            metadata tag if necessary.
            Setting this property's value to a null reference deletes the
            metadata tag from the metadata model.
            </remarks>
        </member>
        <member name="P:FreeImageAPI.Metadata.MDM_IPTC.SupplementalCategories">
            <summary>
            Gets or sets the value of the IPTC/NAA tag Supplemental Categories.
            </summary>
            <remarks>
            <b>Handling of null values</b><para/>
            A null value indicates, that the corresponding metadata tag is not
            present in the metadata model.
            Setting this property's value to a non-null reference creates the
            metadata tag if necessary.
            Setting this property's value to a null reference deletes the
            metadata tag from the metadata model.
            </remarks>
        </member>
        <member name="P:FreeImageAPI.Metadata.MDM_IPTC.FixtureIdentifier">
            <summary>
            Gets or sets the value of the IPTC/NAA tag Fixture Identifier.
            </summary>
            <remarks>
            <b>Handling of null values</b><para/>
            A null value indicates, that the corresponding metadata tag is not
            present in the metadata model.
            Setting this property's value to a non-null reference creates the
            metadata tag if necessary.
            Setting this property's value to a null reference deletes the
            metadata tag from the metadata model.
            </remarks>
        </member>
        <member name="P:FreeImageAPI.Metadata.MDM_IPTC.Keywords">
            <summary>
            Gets or sets the value of the IPTC/NAA tag Keywords.
            </summary>
            <remarks>
            <b>Handling of null values</b><para/>
            A null value indicates, that the corresponding metadata tag is not
            present in the metadata model.
            Setting this property's value to a non-null reference creates the
            metadata tag if necessary.
            Setting this property's value to a null reference deletes the
            metadata tag from the metadata model.
            </remarks>
        </member>
        <member name="P:FreeImageAPI.Metadata.MDM_IPTC.ContentLocationCode">
            <summary>
            Gets or sets the value of the IPTC/NAA tag Content Location Code.
            </summary>
            <remarks>
            <b>Handling of null values</b><para/>
            A null value indicates, that the corresponding metadata tag is not
            present in the metadata model.
            Setting this property's value to a non-null reference creates the
            metadata tag if necessary.
            Setting this property's value to a null reference deletes the
            metadata tag from the metadata model.
            </remarks>
        </member>
        <member name="P:FreeImageAPI.Metadata.MDM_IPTC.ContentLocationName">
            <summary>
            Gets or sets the value of the IPTC/NAA tag Content Location Name.
            </summary>
            <remarks>
            <b>Handling of null values</b><para/>
            A null value indicates, that the corresponding metadata tag is not
            present in the metadata model.
            Setting this property's value to a non-null reference creates the
            metadata tag if necessary.
            Setting this property's value to a null reference deletes the
            metadata tag from the metadata model.
            </remarks>
        </member>
        <member name="P:FreeImageAPI.Metadata.MDM_IPTC.ReleaseDate">
            <summary>
            Gets or sets the value of the IPTC/NAA tag Release Date.
            </summary>
            <remarks>
            <b>Handling of null values</b><para/>
            A null value indicates, that the corresponding metadata tag is not
            present in the metadata model.
            Setting this property's value to a non-null reference creates the
            metadata tag if necessary.
            Setting this property's value to a null reference deletes the
            metadata tag from the metadata model.
            </remarks>
        </member>
        <member name="P:FreeImageAPI.Metadata.MDM_IPTC.ReleaseTime">
            <summary>
            Gets or sets the value of the IPTC/NAA tag Release Time.
            </summary>
            <remarks>
            <b>Handling of null values</b><para/>
            A null value indicates, that the corresponding metadata tag is not
            present in the metadata model.
            Setting this property's value to a non-null reference creates the
            metadata tag if necessary.
            Setting this property's value to a null reference deletes the
            metadata tag from the metadata model.
            </remarks>
        </member>
        <member name="P:FreeImageAPI.Metadata.MDM_IPTC.ExpirationDate">
            <summary>
            Gets or sets the value of the IPTC/NAA tag Expiration Date.
            </summary>
            <remarks>
            <b>Handling of null values</b><para/>
            A null value indicates, that the corresponding metadata tag is not
            present in the metadata model.
            Setting this property's value to a non-null reference creates the
            metadata tag if necessary.
            Setting this property's value to a null reference deletes the
            metadata tag from the metadata model.
            </remarks>
        </member>
        <member name="P:FreeImageAPI.Metadata.MDM_IPTC.ExpirationTime">
            <summary>
            Gets or sets the value of the IPTC/NAA tag Expiration Time.
            </summary>
            <remarks>
            <b>Handling of null values</b><para/>
            A null value indicates, that the corresponding metadata tag is not
            present in the metadata model.
            Setting this property's value to a non-null reference creates the
            metadata tag if necessary.
            Setting this property's value to a null reference deletes the
            metadata tag from the metadata model.
            </remarks>
        </member>
        <member name="P:FreeImageAPI.Metadata.MDM_IPTC.SpecialInstructions">
            <summary>
            Gets or sets the value of the IPTC/NAA tag Special Instructions.
            </summary>
            <remarks>
            <b>Handling of null values</b><para/>
            A null value indicates, that the corresponding metadata tag is not
            present in the metadata model.
            Setting this property's value to a non-null reference creates the
            metadata tag if necessary.
            Setting this property's value to a null reference deletes the
            metadata tag from the metadata model.
            </remarks>
        </member>
        <member name="P:FreeImageAPI.Metadata.MDM_IPTC.ActionAdvised">
            <summary>
            Gets or sets the value of the IPTC/NAA tag Action Advised.
            </summary>
            <remarks>
            <b>Handling of null values</b><para/>
            A null value indicates, that the corresponding metadata tag is not
            present in the metadata model.
            Setting this property's value to a non-null reference creates the
            metadata tag if necessary.
            Setting this property's value to a null reference deletes the
            metadata tag from the metadata model.
            </remarks>
        </member>
        <member name="P:FreeImageAPI.Metadata.MDM_IPTC.ReferenceService">
            <summary>
            Gets or sets the value of the IPTC/NAA tag Reference Service.
            </summary>
            <remarks>
            <b>Handling of null values</b><para/>
            A null value indicates, that the corresponding metadata tag is not
            present in the metadata model.
            Setting this property's value to a non-null reference creates the
            metadata tag if necessary.
            Setting this property's value to a null reference deletes the
            metadata tag from the metadata model.
            </remarks>
        </member>
        <member name="P:FreeImageAPI.Metadata.MDM_IPTC.ReferenceDate">
            <summary>
            Gets or sets the value of the IPTC/NAA tag Reference Date.
            </summary>
            <remarks>
            <b>Handling of null values</b><para/>
            A null value indicates, that the corresponding metadata tag is not
            present in the metadata model.
            Setting this property's value to a non-null reference creates the
            metadata tag if necessary.
            Setting this property's value to a null reference deletes the
            metadata tag from the metadata model.
            </remarks>
        </member>
        <member name="P:FreeImageAPI.Metadata.MDM_IPTC.ReferenceNumber">
            <summary>
            Gets or sets the value of the IPTC/NAA tag Reference Number.
            </summary>
            <remarks>
            <b>Handling of null values</b><para/>
            A null value indicates, that the corresponding metadata tag is not
            present in the metadata model.
            Setting this property's value to a non-null reference creates the
            metadata tag if necessary.
            Setting this property's value to a null reference deletes the
            metadata tag from the metadata model.
            </remarks>
        </member>
        <member name="P:FreeImageAPI.Metadata.MDM_IPTC.DateCreated">
            <summary>
            Gets or sets the value of the IPTC/NAA tag Date Created.
            </summary>
            <remarks>
            <b>Handling of null values</b><para/>
            A null value indicates, that the corresponding metadata tag is not
            present in the metadata model.
            Setting this property's value to a non-null reference creates the
            metadata tag if necessary.
            Setting this property's value to a null reference deletes the
            metadata tag from the metadata model.
            </remarks>
        </member>
        <member name="P:FreeImageAPI.Metadata.MDM_IPTC.TimeCreated">
            <summary>
            Gets or sets the value of the IPTC/NAA tag Time Created.
            </summary>
            <remarks>
            <b>Handling of null values</b><para/>
            A null value indicates, that the corresponding metadata tag is not
            present in the metadata model.
            Setting this property's value to a non-null reference creates the
            metadata tag if necessary.
            Setting this property's value to a null reference deletes the
            metadata tag from the metadata model.
            </remarks>
        </member>
        <member name="P:FreeImageAPI.Metadata.MDM_IPTC.DigitalCreationDate">
            <summary>
            Gets or sets the value of the IPTC/NAA tag Digital Creation Date.
            </summary>
            <remarks>
            <b>Handling of null values</b><para/>
            A null value indicates, that the corresponding metadata tag is not
            present in the metadata model.
            Setting this property's value to a non-null reference creates the
            metadata tag if necessary.
            Setting this property's value to a null reference deletes the
            metadata tag from the metadata model.
            </remarks>
        </member>
        <member name="P:FreeImageAPI.Metadata.MDM_IPTC.DigitalCreationTime">
            <summary>
            Gets or sets the value of the IPTC/NAA tag Digital Creation Time.
            </summary>
            <remarks>
            <b>Handling of null values</b><para/>
            A null value indicates, that the corresponding metadata tag is not
            present in the metadata model.
            Setting this property's value to a non-null reference creates the
            metadata tag if necessary.
            Setting this property's value to a null reference deletes the
            metadata tag from the metadata model.
            </remarks>
        </member>
        <member name="P:FreeImageAPI.Metadata.MDM_IPTC.OriginatingProgram">
            <summary>
            Gets or sets the value of the IPTC/NAA tag Originating Program.
            </summary>
            <remarks>
            <b>Handling of null values</b><para/>
            A null value indicates, that the corresponding metadata tag is not
            present in the metadata model.
            Setting this property's value to a non-null reference creates the
            metadata tag if necessary.
            Setting this property's value to a null reference deletes the
            metadata tag from the metadata model.
            </remarks>
        </member>
        <member name="P:FreeImageAPI.Metadata.MDM_IPTC.ProgramVersion">
            <summary>
            Gets or sets the value of the IPTC/NAA tag Program Version.
            </summary>
            <remarks>
            <b>Handling of null values</b><para/>
            A null value indicates, that the corresponding metadata tag is not
            present in the metadata model.
            Setting this property's value to a non-null reference creates the
            metadata tag if necessary.
            Setting this property's value to a null reference deletes the
            metadata tag from the metadata model.
            </remarks>
        </member>
        <member name="P:FreeImageAPI.Metadata.MDM_IPTC.ObjectCycle">
            <summary>
            Gets or sets the value of the IPTC/NAA tag Object Cycle.
            </summary>
            <remarks>
            <b>Handling of null values</b><para/>
            A null value indicates, that the corresponding metadata tag is not
            present in the metadata model.
            Setting this property's value to a non-null reference creates the
            metadata tag if necessary.
            Setting this property's value to a null reference deletes the
            metadata tag from the metadata model.
            </remarks>
        </member>
        <member name="P:FreeImageAPI.Metadata.MDM_IPTC.ByLine">
            <summary>
            Gets or sets the value of the IPTC/NAA tag By Line.
            This is the author's name.
            </summary>
            <remarks>
            <b>Handling of null values</b><para/>
            A null value indicates, that the corresponding metadata tag is not
            present in the metadata model.
            Setting this property's value to a non-null reference creates the
            metadata tag if necessary.
            Setting this property's value to a null reference deletes the
            metadata tag from the metadata model.
            </remarks>
        </member>
        <member name="P:FreeImageAPI.Metadata.MDM_IPTC.ByLineTitle">
            <summary>
            Gets or sets the value of the IPTC/NAA tag By Line Title.
            This is the author's position.
            </summary>
            <remarks>
            <b>Handling of null values</b><para/>
            A null value indicates, that the corresponding metadata tag is not
            present in the metadata model.
            Setting this property's value to a non-null reference creates the
            metadata tag if necessary.
            Setting this property's value to a null reference deletes the
            metadata tag from the metadata model.
            </remarks>
        </member>
        <member name="P:FreeImageAPI.Metadata.MDM_IPTC.City">
            <summary>
            Gets or sets the value of the IPTC/NAA tag City.
            </summary>
            <remarks>
            <b>Handling of null values</b><para/>
            A null value indicates, that the corresponding metadata tag is not
            present in the metadata model.
            Setting this property's value to a non-null reference creates the
            metadata tag if necessary.
            Setting this property's value to a null reference deletes the
            metadata tag from the metadata model.
            </remarks>
        </member>
        <member name="P:FreeImageAPI.Metadata.MDM_IPTC.SubLocation">
            <summary>
            Gets or sets the value of the IPTC/NAA tag Sub Location.
            </summary>
            <remarks>
            <b>Handling of null values</b><para/>
            A null value indicates, that the corresponding metadata tag is not
            present in the metadata model.
            Setting this property's value to a non-null reference creates the
            metadata tag if necessary.
            Setting this property's value to a null reference deletes the
            metadata tag from the metadata model.
            </remarks>
        </member>
        <member name="P:FreeImageAPI.Metadata.MDM_IPTC.ProvinceState">
            <summary>
            Gets or sets the value of the IPTC/NAA tag Province State.
            </summary>
            <remarks>
            <b>Handling of null values</b><para/>
            A null value indicates, that the corresponding metadata tag is not
            present in the metadata model.
            Setting this property's value to a non-null reference creates the
            metadata tag if necessary.
            Setting this property's value to a null reference deletes the
            metadata tag from the metadata model.
            </remarks>
        </member>
        <member name="P:FreeImageAPI.Metadata.MDM_IPTC.CountryPrimaryLocationCode">
            <summary>
            Gets or sets the value of the IPTC/NAA tag Country Primary Location Code.
            </summary>
            <remarks>
            <b>Handling of null values</b><para/>
            A null value indicates, that the corresponding metadata tag is not
            present in the metadata model.
            Setting this property's value to a non-null reference creates the
            metadata tag if necessary.
            Setting this property's value to a null reference deletes the
            metadata tag from the metadata model.
            </remarks>
        </member>
        <member name="P:FreeImageAPI.Metadata.MDM_IPTC.CountryPrimaryLocationName">
            <summary>
            Gets or sets the value of the IPTC/NAA tag Country Primary Location Name.
            </summary>
            <remarks>
            <b>Handling of null values</b><para/>
            A null value indicates, that the corresponding metadata tag is not
            present in the metadata model.
            Setting this property's value to a non-null reference creates the
            metadata tag if necessary.
            Setting this property's value to a null reference deletes the
            metadata tag from the metadata model.
            </remarks>
        </member>
        <member name="P:FreeImageAPI.Metadata.MDM_IPTC.OriginalTransmissionReference">
            <summary>
            Gets or sets the value of the IPTC/NAA tag Original Transmission Reference.
            </summary>
            <remarks>
            <b>Handling of null values</b><para/>
            A null value indicates, that the corresponding metadata tag is not
            present in the metadata model.
            Setting this property's value to a non-null reference creates the
            metadata tag if necessary.
            Setting this property's value to a null reference deletes the
            metadata tag from the metadata model.
            </remarks>
        </member>
        <member name="P:FreeImageAPI.Metadata.MDM_IPTC.Headline">
            <summary>
            Gets or sets the value of the IPTC/NAA tag Headline.
            </summary>
            <remarks>
            <b>Handling of null values</b><para/>
            A null value indicates, that the corresponding metadata tag is not
            present in the metadata model.
            Setting this property's value to a non-null reference creates the
            metadata tag if necessary.
            Setting this property's value to a null reference deletes the
            metadata tag from the metadata model.
            </remarks>
        </member>
        <member name="P:FreeImageAPI.Metadata.MDM_IPTC.Credit">
            <summary>
            Gets or sets the value of the IPTC/NAA tag Credit.
            </summary>
            <remarks>
            <b>Handling of null values</b><para/>
            A null value indicates, that the corresponding metadata tag is not
            present in the metadata model.
            Setting this property's value to a non-null reference creates the
            metadata tag if necessary.
            Setting this property's value to a null reference deletes the
            metadata tag from the metadata model.
            </remarks>
        </member>
        <member name="P:FreeImageAPI.Metadata.MDM_IPTC.Source">
            <summary>
            Gets or sets the value of the IPTC/NAA tag Source.
            </summary>
            <remarks>
            <b>Handling of null values</b><para/>
            A null value indicates, that the corresponding metadata tag is not
            present in the metadata model.
            Setting this property's value to a non-null reference creates the
            metadata tag if necessary.
            Setting this property's value to a null reference deletes the
            metadata tag from the metadata model.
            </remarks>
        </member>
        <member name="P:FreeImageAPI.Metadata.MDM_IPTC.CopyrightNotice">
            <summary>
            Gets or sets the value of the IPTC/NAA tag Copyright Notice.
            </summary>
            <remarks>
            <b>Handling of null values</b><para/>
            A null value indicates, that the corresponding metadata tag is not
            present in the metadata model.
            Setting this property's value to a non-null reference creates the
            metadata tag if necessary.
            Setting this property's value to a null reference deletes the
            metadata tag from the metadata model.
            </remarks>
        </member>
        <member name="P:FreeImageAPI.Metadata.MDM_IPTC.Contact">
            <summary>
            Gets or sets the value of the IPTC/NAA tag Contact.
            </summary>
            <remarks>
            <b>Handling of null values</b><para/>
            A null value indicates, that the corresponding metadata tag is not
            present in the metadata model.
            Setting this property's value to a non-null reference creates the
            metadata tag if necessary.
            Setting this property's value to a null reference deletes the
            metadata tag from the metadata model.
            </remarks>
        </member>
        <member name="P:FreeImageAPI.Metadata.MDM_IPTC.CaptionAbstract">
            <summary>
            Gets or sets the value of the IPTC/NAA tag Caption Abstract.
            </summary>
            <remarks>
            <b>Handling of null values</b><para/>
            A null value indicates, that the corresponding metadata tag is not
            present in the metadata model.
            Setting this property's value to a non-null reference creates the
            metadata tag if necessary.
            Setting this property's value to a null reference deletes the
            metadata tag from the metadata model.
            </remarks>
        </member>
        <member name="P:FreeImageAPI.Metadata.MDM_IPTC.WriterEditor">
            <summary>
            Gets or sets the value of the IPTC/NAA tag Writer Editor.
            This is also referred to as Caption Writer.
            </summary>
            <remarks>
            <b>Handling of null values</b><para/>
            A null value indicates, that the corresponding metadata tag is not
            present in the metadata model.
            Setting this property's value to a non-null reference creates the
            metadata tag if necessary.
            Setting this property's value to a null reference deletes the
            metadata tag from the metadata model.
            </remarks>
        </member>
        <member name="P:FreeImageAPI.Metadata.MDM_IPTC.RasterizedCaption">
            <summary>
            Gets or sets the value of the IPTC/NAA tag Rasterized Caption.
            </summary>
            <remarks>
            <b>Handling of null values</b><para/>
            A null value indicates, that the corresponding metadata tag is not
            present in the metadata model.
            Setting this property's value to a non-null reference creates the
            metadata tag if necessary.
            Setting this property's value to a null reference deletes the
            metadata tag from the metadata model.
            </remarks>
        </member>
        <member name="P:FreeImageAPI.Metadata.MDM_IPTC.ImageType">
            <summary>
            Gets or sets the value of the IPTC/NAA tag Image Type.
            </summary>
            <remarks>
            <b>Handling of null values</b><para/>
            A null value indicates, that the corresponding metadata tag is not
            present in the metadata model.
            Setting this property's value to a non-null reference creates the
            metadata tag if necessary.
            Setting this property's value to a null reference deletes the
            metadata tag from the metadata model.
            </remarks>
        </member>
        <member name="P:FreeImageAPI.Metadata.MDM_IPTC.ImageOrientation">
            <summary>
            Gets or sets the value of the IPTC/NAA tag Image Orientation.
            </summary>
            <remarks>
            <b>Handling of null values</b><para/>
            A null value indicates, that the corresponding metadata tag is not
            present in the metadata model.
            Setting this property's value to a non-null reference creates the
            metadata tag if necessary.
            Setting this property's value to a null reference deletes the
            metadata tag from the metadata model.
            </remarks>
        </member>
        <member name="P:FreeImageAPI.Metadata.MDM_IPTC.LanguageIdentifier">
            <summary>
            Gets or sets the value of the IPTC/NAA tag Language Identifier.
            </summary>
            <remarks>
            <b>Handling of null values</b><para/>
            A null value indicates, that the corresponding metadata tag is not
            present in the metadata model.
            Setting this property's value to a non-null reference creates the
            metadata tag if necessary.
            Setting this property's value to a null reference deletes the
            metadata tag from the metadata model.
            </remarks>
        </member>
        <member name="P:FreeImageAPI.Metadata.MDM_IPTC.AudioType">
            <summary>
            Gets or sets the value of the IPTC/NAA tag Audio Type.
            </summary>
            <remarks>
            <b>Handling of null values</b><para/>
            A null value indicates, that the corresponding metadata tag is not
            present in the metadata model.
            Setting this property's value to a non-null reference creates the
            metadata tag if necessary.
            Setting this property's value to a null reference deletes the
            metadata tag from the metadata model.
            </remarks>
        </member>
        <member name="P:FreeImageAPI.Metadata.MDM_IPTC.AudioSamplingRate">
            <summary>
            Gets or sets the value of the IPTC/NAA tag Audio Sampling Rate.
            </summary>
            <remarks>
            <b>Handling of null values</b><para/>
            A null value indicates, that the corresponding metadata tag is not
            present in the metadata model.
            Setting this property's value to a non-null reference creates the
            metadata tag if necessary.
            Setting this property's value to a null reference deletes the
            metadata tag from the metadata model.
            </remarks>
        </member>
        <member name="P:FreeImageAPI.Metadata.MDM_IPTC.AudioSamplingResolution">
            <summary>
            Gets or sets the value of the IPTC/NAA tag Audio Sampling Resolution.
            </summary>
            <remarks>
            <b>Handling of null values</b><para/>
            A null value indicates, that the corresponding metadata tag is not
            present in the metadata model.
            Setting this property's value to a non-null reference creates the
            metadata tag if necessary.
            Setting this property's value to a null reference deletes the
            metadata tag from the metadata model.
            </remarks>
        </member>
        <member name="P:FreeImageAPI.Metadata.MDM_IPTC.AudioDuration">
            <summary>
            Gets or sets the value of the IPTC/NAA tag Audio Duration.
            </summary>
            <remarks>
            <b>Handling of null values</b><para/>
            A null value indicates, that the corresponding metadata tag is not
            present in the metadata model.
            Setting this property's value to a non-null reference creates the
            metadata tag if necessary.
            Setting this property's value to a null reference deletes the
            metadata tag from the metadata model.
            </remarks>
        </member>
        <member name="P:FreeImageAPI.Metadata.MDM_IPTC.AudioOutcue">
            <summary>
            Gets or sets the value of the IPTC/NAA tag Audio Outcue.
            </summary>
            <remarks>
            <b>Handling of null values</b><para/>
            A null value indicates, that the corresponding metadata tag is not
            present in the metadata model.
            Setting this property's value to a non-null reference creates the
            metadata tag if necessary.
            Setting this property's value to a null reference deletes the
            metadata tag from the metadata model.
            </remarks>
        </member>
        <member name="P:FreeImageAPI.Metadata.MDM_IPTC.JobID">
            <summary>
            Gets or sets the value of the IPTC/NAA tag Job I D.
            </summary>
            <remarks>
            <b>Handling of null values</b><para/>
            A null value indicates, that the corresponding metadata tag is not
            present in the metadata model.
            Setting this property's value to a non-null reference creates the
            metadata tag if necessary.
            Setting this property's value to a null reference deletes the
            metadata tag from the metadata model.
            </remarks>
        </member>
        <member name="P:FreeImageAPI.Metadata.MDM_IPTC.MasterDocumentID">
            <summary>
            Gets or sets the value of the IPTC/NAA tag Master Document I D.
            </summary>
            <remarks>
            <b>Handling of null values</b><para/>
            A null value indicates, that the corresponding metadata tag is not
            present in the metadata model.
            Setting this property's value to a non-null reference creates the
            metadata tag if necessary.
            Setting this property's value to a null reference deletes the
            metadata tag from the metadata model.
            </remarks>
        </member>
        <member name="P:FreeImageAPI.Metadata.MDM_IPTC.ShortDocumentID">
            <summary>
            Gets or sets the value of the IPTC/NAA tag Short Document I D.
            </summary>
            <remarks>
            <b>Handling of null values</b><para/>
            A null value indicates, that the corresponding metadata tag is not
            present in the metadata model.
            Setting this property's value to a non-null reference creates the
            metadata tag if necessary.
            Setting this property's value to a null reference deletes the
            metadata tag from the metadata model.
            </remarks>
        </member>
        <member name="P:FreeImageAPI.Metadata.MDM_IPTC.UniqueDocumentID">
            <summary>
            Gets or sets the value of the IPTC/NAA tag Unique Document I D.
            </summary>
            <remarks>
            <b>Handling of null values</b><para/>
            A null value indicates, that the corresponding metadata tag is not
            present in the metadata model.
            Setting this property's value to a non-null reference creates the
            metadata tag if necessary.
            Setting this property's value to a null reference deletes the
            metadata tag from the metadata model.
            </remarks>
        </member>
        <member name="P:FreeImageAPI.Metadata.MDM_IPTC.OwnerID">
            <summary>
            Gets or sets the value of the IPTC/NAA tag Owner I D.
            </summary>
            <remarks>
            <b>Handling of null values</b><para/>
            A null value indicates, that the corresponding metadata tag is not
            present in the metadata model.
            Setting this property's value to a non-null reference creates the
            metadata tag if necessary.
            Setting this property's value to a null reference deletes the
            metadata tag from the metadata model.
            </remarks>
        </member>
        <member name="P:FreeImageAPI.Metadata.MDM_IPTC.ObjectPreviewFileFormat">
            <summary>
            Gets or sets the value of the IPTC/NAA tag Object Preview File Format.
            </summary>
            <remarks>
            <b>Handling of null values</b><para/>
            A null value indicates, that the corresponding metadata tag is not
            present in the metadata model.
            Setting this property's value to a non-null reference creates the
            metadata tag if necessary.
            Setting this property's value to a null reference deletes the
            metadata tag from the metadata model.
            </remarks>
        </member>
        <member name="P:FreeImageAPI.Metadata.MDM_IPTC.ObjectPreviewFileVersion">
            <summary>
            Gets or sets the value of the IPTC/NAA tag Object Preview File Version.
            </summary>
            <remarks>
            <b>Handling of null values</b><para/>
            A null value indicates, that the corresponding metadata tag is not
            present in the metadata model.
            Setting this property's value to a non-null reference creates the
            metadata tag if necessary.
            Setting this property's value to a null reference deletes the
            metadata tag from the metadata model.
            </remarks>
        </member>
        <member name="P:FreeImageAPI.Metadata.MDM_IPTC.ObjectPreviewData">
            <summary>
            Gets or sets the value of the IPTC/NAA tag Object Preview Data.
            This is also referred to as Audio Outcue.
            </summary>
            <remarks>
            <b>Handling of null values</b><para/>
            A null value indicates, that the corresponding metadata tag is not
            present in the metadata model.
            Setting this property's value to a non-null reference creates the
            metadata tag if necessary.
            Setting this property's value to a null reference deletes the
            metadata tag from the metadata model.
            </remarks>
        </member>
        <member name="P:FreeImageAPI.Metadata.MDM_IPTC.Prefs">
            <summary>
            Gets or sets the value of the IPTC/NAA tag Prefs.
            This is also referred to as photo-mechanic preferences.
            </summary>
            <remarks>
            <b>Handling of null values</b><para/>
            A null value indicates, that the corresponding metadata tag is not
            present in the metadata model.
            Setting this property's value to a non-null reference creates the
            metadata tag if necessary.
            Setting this property's value to a null reference deletes the
            metadata tag from the metadata model.
            </remarks>
        </member>
        <member name="P:FreeImageAPI.Metadata.MDM_IPTC.ClassifyState">
            <summary>
            Gets or sets the value of the IPTC/NAA tag Classify State.
            </summary>
            <remarks>
            <b>Handling of null values</b><para/>
            A null value indicates, that the corresponding metadata tag is not
            present in the metadata model.
            Setting this property's value to a non-null reference creates the
            metadata tag if necessary.
            Setting this property's value to a null reference deletes the
            metadata tag from the metadata model.
            </remarks>
        </member>
        <member name="P:FreeImageAPI.Metadata.MDM_IPTC.SimilarityIndex">
            <summary>
            Gets or sets the value of the IPTC/NAA tag Similarity Index.
            </summary>
            <remarks>
            <b>Handling of null values</b><para/>
            A null value indicates, that the corresponding metadata tag is not
            present in the metadata model.
            Setting this property's value to a non-null reference creates the
            metadata tag if necessary.
            Setting this property's value to a null reference deletes the
            metadata tag from the metadata model.
            </remarks>
        </member>
        <member name="P:FreeImageAPI.Metadata.MDM_IPTC.DocumentNotes">
            <summary>
            Gets or sets the value of the IPTC/NAA tag Document Notes.
            </summary>
            <remarks>
            <b>Handling of null values</b><para/>
            A null value indicates, that the corresponding metadata tag is not
            present in the metadata model.
            Setting this property's value to a non-null reference creates the
            metadata tag if necessary.
            Setting this property's value to a null reference deletes the
            metadata tag from the metadata model.
            </remarks>
        </member>
        <member name="P:FreeImageAPI.Metadata.MDM_IPTC.DocumentHistory">
            <summary>
            Gets or sets the value of the IPTC/NAA tag Document History.
            </summary>
            <remarks>
            <b>Handling of null values</b><para/>
            A null value indicates, that the corresponding metadata tag is not
            present in the metadata model.
            Setting this property's value to a non-null reference creates the
            metadata tag if necessary.
            Setting this property's value to a null reference deletes the
            metadata tag from the metadata model.
            </remarks>
        </member>
        <member name="P:FreeImageAPI.Metadata.MDM_IPTC.ExifCameraInfo">
            <summary>
            Gets or sets the value of the IPTC/NAA tag Exif Camera Info.
            </summary>
            <remarks>
            <b>Handling of null values</b><para/>
            A null value indicates, that the corresponding metadata tag is not
            present in the metadata model.
            Setting this property's value to a non-null reference creates the
            metadata tag if necessary.
            Setting this property's value to a null reference deletes the
            metadata tag from the metadata model.
            </remarks>
        </member>
        <member name="T:FreeImageAPI.Metadata.MDM_NODATA">
            <summary>
            Represents a collection of all tags contained in the metadata model
            <see cref="F:FreeImageAPI.FREE_IMAGE_MDMODEL.FIMD_NODATA"/>.
            </summary>
        </member>
        <member name="M:FreeImageAPI.Metadata.MDM_NODATA.#ctor(FreeImageAPI.FIBITMAP)">
            <summary>
            Initializes a new instance of this class.
            </summary>
            <param name="dib">Handle to a FreeImage bitmap.</param>
        </member>
        <member name="P:FreeImageAPI.Metadata.MDM_NODATA.Model">
            <summary>
            Retrieves the datamodel that this instance represents.
            </summary>
        </member>
        <member name="T:FreeImageAPI.Metadata.MDM_XMP">
            <summary>
            Represents a collection of all tags contained in the metadata model
            <see cref="F:FreeImageAPI.FREE_IMAGE_MDMODEL.FIMD_XMP"/>.
            </summary>
        </member>
        <member name="M:FreeImageAPI.Metadata.MDM_XMP.#ctor(FreeImageAPI.FIBITMAP)">
            <summary>
            Initializes a new instance of this class.
            </summary>
            <param name="dib">Handle to a FreeImage bitmap.</param>
        </member>
        <member name="P:FreeImageAPI.Metadata.MDM_XMP.Model">
            <summary>
            Retrieves the datamodel that this instance represents.
            </summary>
        </member>
        <member name="P:FreeImageAPI.Metadata.MDM_XMP.Xml">
            <summary>
            Gets or sets the XMP XML content.
            </summary>
            <remarks>
            <b>Handling of null values</b><para/>
            A null value indicates, that the corresponding metadata tag is not
            present in the metadata model.
            Setting this property's value to a non-null reference creates the
            metadata tag if necessary.
            Setting this property's value to a null reference deletes the
            metadata tag from the metadata model.
            </remarks>
        </member>
        <member name="P:FreeImageAPI.Metadata.MDM_XMP.XmlReader">
            <summary>
            Gets an <see cref="P:FreeImageAPI.Metadata.MDM_XMP.XmlReader"/> initialized to read the XMP XML content.
            Returns null, if the metadata tag <i>XMLPacket</i> is not present in
            this model.
            </summary>
        </member>
        <member name="T:FreeImageAPI.Metadata.MetadataTag">
            <summary>
            Manages metadata objects and operations.
            </summary>
        </member>
        <member name="F:FreeImageAPI.Metadata.MetadataTag.tag">
            <summary>
            The encapsulated FreeImage-tag.
            </summary>
        </member>
        <member name="F:FreeImageAPI.Metadata.MetadataTag.model">
            <summary>
            The metadata model of <see cref="F:FreeImageAPI.Metadata.MetadataTag.tag"/>.
            </summary>
        </member>
        <member name="F:FreeImageAPI.Metadata.MetadataTag.disposed">
            <summary>
            Indicates whether this instance has already been disposed.
            </summary>
        </member>
        <member name="F:FreeImageAPI.Metadata.MetadataTag.selfCreated">
            <summary>
            Indicates whether this instance was created by FreeImage or
            by the user.
            </summary>
        </member>
        <member name="F:FreeImageAPI.Metadata.MetadataTag.idList">
            <summary>
            List linking metadata-model and Type.
            </summary>
        </member>
        <member name="F:FreeImageAPI.Metadata.MetadataTag.typeList">
            <summary>
            List linking Type and metadata-model.
            </summary>
        </member>
        <member name="M:FreeImageAPI.Metadata.MetadataTag.#ctor">
            <summary>
            Initializes a new instance of this class.
            </summary>
        </member>
        <member name="M:FreeImageAPI.Metadata.MetadataTag.#ctor(FreeImageAPI.FREE_IMAGE_MDMODEL)">
            <summary>
            Initializes a new instance of this class.
            </summary>
            <param name="model">The new model the tag should be of.</param>
        </member>
        <member name="M:FreeImageAPI.Metadata.MetadataTag.#ctor(FreeImageAPI.FITAG,FreeImageAPI.FIBITMAP)">
            <summary>
            Initializes a new instance of this class.
            </summary>
            <param name="tag">The <see cref="T:FreeImageAPI.FITAG"/> to represent.</param>
            <param name="dib">The bitmap <paramref name="tag"/> was extracted from.</param>
        </member>
        <member name="M:FreeImageAPI.Metadata.MetadataTag.#ctor(FreeImageAPI.FITAG,FreeImageAPI.FREE_IMAGE_MDMODEL)">
            <summary>
            Initializes a new instance of this class.
            </summary>
            <param name="tag">The <see cref="T:FreeImageAPI.FITAG"/> to represent.</param>
            <param name="model">The model of <paramref name="tag"/>.</param>
        </member>
        <member name="M:FreeImageAPI.Metadata.MetadataTag.Finalize">
            <summary>
            Releases all resources used by the instance.
            </summary>
        </member>
        <member name="M:FreeImageAPI.Metadata.MetadataTag.op_Equality(FreeImageAPI.Metadata.MetadataTag,FreeImageAPI.Metadata.MetadataTag)">
            <summary>
            Determines whether two specified <see cref="T:FreeImageAPI.Metadata.MetadataTag"/> objects have the same value.
            </summary>
            <param name="left">A <see cref="T:FreeImageAPI.Metadata.MetadataTag"/> or a null reference (<b>Nothing</b> in Visual Basic).</param>
            <param name="right">A <see cref="T:FreeImageAPI.Metadata.MetadataTag"/> or a null reference (<b>Nothing</b> in Visual Basic).</param>
            <returns>
            <b>true</b> if the value of left is the same as the value of right; otherwise, <b>false</b>.
            </returns>
        </member>
        <member name="M:FreeImageAPI.Metadata.MetadataTag.op_Inequality(FreeImageAPI.Metadata.MetadataTag,FreeImageAPI.Metadata.MetadataTag)">
            <summary>
            Determines whether two specified <see cref="T:FreeImageAPI.Metadata.MetadataTag"/> objects have different values.
            </summary>
            <param name="left">A <see cref="T:FreeImageAPI.Metadata.MetadataTag"/> or a null reference (<b>Nothing</b> in Visual Basic).</param>
            <param name="right">A <see cref="T:FreeImageAPI.Metadata.MetadataTag"/> or a null reference (<b>Nothing</b> in Visual Basic).</param>
            <returns>
            true if the value of left is different from the value of right; otherwise, <b>false</b>.
            </returns>
        </member>
        <member name="M:FreeImageAPI.Metadata.MetadataTag.op_Implicit(FreeImageAPI.Metadata.MetadataTag)~FreeImageAPI.FITAG">
            <summary>
            Extracts the value of a <see cref="T:FreeImageAPI.Metadata.MetadataTag"/> instance to a <see cref="T:FreeImageAPI.FITAG"/> handle.
            </summary>
            <param name="value">A <see cref="T:FreeImageAPI.Metadata.MetadataTag"/> instance.</param>
            <returns>A new instance of <see cref="T:FreeImageAPI.FITAG"/> initialized to <paramref name="value"/>.</returns>
        </member>
        <member name="M:FreeImageAPI.Metadata.MetadataTag.SetValue(System.Object)">
            <summary>
            Sets the value of the metadata.
            <para> In case value is of byte or byte[] <see cref="F:FreeImageAPI.FREE_IMAGE_MDTYPE.FIDT_UNDEFINED"/> is assumed.</para>
            <para> In case value is of uint or uint[] <see cref="F:FreeImageAPI.FREE_IMAGE_MDTYPE.FIDT_LONG"/> is assumed.</para>
            </summary>
            <param name="value">New data of the metadata.</param>
            <returns>True on success, false on failure.</returns>
            <exception cref="T:System.NotSupportedException">
            The data format is not supported.</exception>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="value"/> is null.</exception>
        </member>
        <member name="M:FreeImageAPI.Metadata.MetadataTag.SetValue(System.Object,FreeImageAPI.FREE_IMAGE_MDTYPE)">
            <summary>
            Sets the value of the metadata.
            </summary>
            <param name="value">New data of the metadata.</param>
            <param name="type">Type of the data.</param>
            <returns>True on success, false on failure.</returns>
            <exception cref="T:System.NotSupportedException">
            The data type is not supported.</exception>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="value"/> is null.</exception>
            <exception cref="T:System.ArgumentException">
            <paramref name="value"/> and <paramref name="type"/> to not fit.</exception>
        </member>
        <member name="M:FreeImageAPI.Metadata.MetadataTag.SetArrayValue(System.Object,FreeImageAPI.FREE_IMAGE_MDTYPE)">
            <summary>
            Sets the value of this tag to the value of <paramref name="value"/>
            using the given type.
            </summary>
            <param name="value">New value of the tag.</param>
            <param name="type">Data-type of the tag.</param>
            <returns></returns>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="value"/> is a null reference.
            </exception>
            <exception cref="T:System.ArgumentException">
            <paramref name="type"/> is FIDT_ASCII and
            <paramref name="value"/> is not String.
            <paramref name="type"/> is not FIDT_ASCII and
            <paramref name="value"/> is not Array.</exception>
            <exception cref="T:System.NotSupportedException">
            <paramref name="type"/> is FIDT_NOTYPE.</exception>
        </member>
        <member name="M:FreeImageAPI.Metadata.MetadataTag.AddToImage(FreeImageAPI.FIBITMAP)">
            <summary>
            Add this metadata to an image.
            </summary>
            <param name="dib">Handle to a FreeImage bitmap.</param>
            <returns>True on success, false on failure.</returns>
        </member>
        <member name="M:FreeImageAPI.Metadata.MetadataTag.GetPropertyItem">
            <summary>
            Gets a .NET PropertyItem for this metadata tag.
            </summary>
            <returns>The .NET PropertyItem.</returns>
        </member>
        <member name="M:FreeImageAPI.Metadata.MetadataTag.ToString">
            <summary>
            Converts the value of the <see cref="T:FreeImageAPI.Metadata.MetadataTag"/> object
            to its equivalent string representation.
            </summary>
            <returns>The string representation of the value of this instance.</returns>
        </member>
        <member name="M:FreeImageAPI.Metadata.MetadataTag.Clone">
            <summary>
            Creates a deep copy of this <see cref="T:FreeImageAPI.Metadata.MetadataTag"/>.
            </summary>
            <returns>A deep copy of this <see cref="T:FreeImageAPI.Metadata.MetadataTag"/>.</returns>
        </member>
        <member name="M:FreeImageAPI.Metadata.MetadataTag.Equals(System.Object)">
            <summary>
            Tests whether the specified object is a <see cref="T:FreeImageAPI.Metadata.MetadataTag"/> instance
            and is equivalent to this <see cref="T:FreeImageAPI.Metadata.MetadataTag"/> instance.
            </summary>
            <param name="obj">The object to test.</param>
            <returns><b>true</b> if <paramref name="obj"/> is a <see cref="T:FreeImageAPI.Metadata.MetadataTag"/> instance
            equivalent to this <see cref="T:FreeImageAPI.Metadata.MetadataTag"/> instance; otherwise, <b>false</b>.</returns>
        </member>
        <member name="M:FreeImageAPI.Metadata.MetadataTag.Equals(FreeImageAPI.Metadata.MetadataTag)">
            <summary>
            Tests whether the specified <see cref="T:FreeImageAPI.Metadata.MetadataTag"/> instance is equivalent to this <see cref="T:FreeImageAPI.Metadata.MetadataTag"/> instance.
            </summary>
            <param name="other">A <see cref="T:FreeImageAPI.Metadata.MetadataTag"/> instance to compare to this instance.</param>
            <returns><b>true</b> if <paramref name="obj"/> equivalent to this <see cref="T:FreeImageAPI.Metadata.MetadataTag"/> instance;
            otherwise, <b>false</b>.</returns>
        </member>
        <member name="M:FreeImageAPI.Metadata.MetadataTag.GetHashCode">
            <summary>
            Returns a hash code for this <see cref="T:FreeImageAPI.Metadata.MetadataTag"/> structure.
            </summary>
            <returns>An integer value that specifies the hash code for this <see cref="T:FreeImageAPI.Metadata.MetadataTag"/>.</returns>
        </member>
        <member name="M:FreeImageAPI.Metadata.MetadataTag.CompareTo(System.Object)">
            <summary>
            Compares this instance with a specified <see cref="T:System.Object"/>.
            </summary>
            <param name="obj">An object to compare with this instance.</param>
            <returns>A 32-bit signed integer indicating the lexical relationship between the two comparands.</returns>
            <exception cref="T:System.ArgumentException"><paramref name="obj"/> is not a <see cref="T:FreeImageAPI.Metadata.MetadataTag"/>.</exception>
        </member>
        <member name="M:FreeImageAPI.Metadata.MetadataTag.CompareTo(FreeImageAPI.Metadata.MetadataTag)">
            <summary>
            Compares the current instance with another object of the same type.
            </summary>
            <param name="other">An object to compare with this instance.</param>
            <returns>A 32-bit signed integer that indicates the relative order of the objects being compared.</returns>
        </member>
        <member name="M:FreeImageAPI.Metadata.MetadataTag.Dispose">
            <summary>
            Releases all resources used by the instance.
            </summary>
        </member>
        <member name="M:FreeImageAPI.Metadata.MetadataTag.CheckDisposed">
            <summary>
            Throwns an <see cref="T:System.ObjectDisposedException"/> in case
            this instance has already been disposed.
            </summary>
        </member>
        <member name="P:FreeImageAPI.Metadata.MetadataTag.Model">
            <summary>
            Gets the model of the metadata.
            </summary>
        </member>
        <member name="P:FreeImageAPI.Metadata.MetadataTag.Key">
            <summary>
            Gets or sets the key of the metadata.
            </summary>
        </member>
        <member name="P:FreeImageAPI.Metadata.MetadataTag.Description">
            <summary>
            Gets or sets the description of the metadata.
            </summary>
        </member>
        <member name="P:FreeImageAPI.Metadata.MetadataTag.ID">
            <summary>
            Gets or sets the ID of the metadata.
            </summary>
        </member>
        <member name="P:FreeImageAPI.Metadata.MetadataTag.Type">
            <summary>
            Gets the type of the metadata.
            </summary>
        </member>
        <member name="P:FreeImageAPI.Metadata.MetadataTag.Count">
            <summary>
            Gets the number of elements the metadata object contains.
            </summary>
        </member>
        <member name="P:FreeImageAPI.Metadata.MetadataTag.Length">
            <summary>
            Gets the length of the value in bytes.
            </summary>
        </member>
        <member name="P:FreeImageAPI.Metadata.MetadataTag.Value">
            <summary>
            Gets or sets the value of the metadata.
            </summary>
        </member>
        <member name="P:FreeImageAPI.Metadata.MetadataTag.Disposed">
            <summary>
            Gets whether this instance has already been disposed.
            </summary>
        </member>
        <member name="T:FreeImageAPI.Palette">
            <summary>
            Provides methods for working with the standard bitmap palette.
            </summary>
        </member>
        <member name="M:FreeImageAPI.Palette.#ctor(FreeImageAPI.FIBITMAP)">
            <summary>
            Initializes a new instance for the given FreeImage bitmap.
            </summary>
            <param name="dib">Handle to a FreeImage bitmap.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="dib"/> is null.</exception>
            <exception cref="T:System.ArgumentException"><paramref name="dib"/> is not
            <see cref="F:FreeImageAPI.FREE_IMAGE_TYPE.FIT_BITMAP"/><para/>-or-<para/>
            <paramref name="dib"/> has more than 8bpp.</exception>
        </member>
        <member name="M:FreeImageAPI.Palette.#ctor(FreeImageAPI.FITAG)">
            <summary>
            Initializes a new instance for the given FITAG that contains
            a palette.
            </summary>
            <param name="tag">The tag containing the palette.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="tag"/> is null.</exception>
            <exception cref="T:System.ArgumentException"><paramref name="tag"/> is not
            <see cref="F:FreeImageAPI.FREE_IMAGE_MDTYPE.FIDT_PALETTE"/>.</exception>
        </member>
        <member name="M:FreeImageAPI.Palette.#ctor(FreeImageAPI.Metadata.MetadataTag)">
            <summary>
            Initializes a new instance for the given MetadataTag that contains
            a palette.
            </summary>
            <param name="tag">The tag containing the palette.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="dib"/> is null.</exception>
            <exception cref="T:System.ArgumentException"><paramref name="tag"/> is not
            <see cref="F:FreeImageAPI.FREE_IMAGE_MDTYPE.FIDT_PALETTE"/>.</exception>
        </member>
        <member name="M:FreeImageAPI.Palette.#ctor(FreeImageAPI.RGBQUAD[])">
            <summary>
            Initializes a new instance for the given array of <see cref="T:FreeImageAPI.RGBQUAD"/> that contains
            a palette.
            </summary>
            <param name="palette">A RGBQUAD array containing the palette data to initialize this instance.</param>
        </member>
        <member name="M:FreeImageAPI.Palette.#ctor(System.Drawing.Color[])">
            <summary>
            Initializes a new instance for the given array of <see cref="T:System.Drawing.Color"/> that contains
            a palette.
            </summary>
            <param name="palette">A Color array containing the palette data to initialize this instance.</param>
        </member>
        <member name="M:FreeImageAPI.Palette.#ctor(System.Int32)">
            <summary>
            Initializes a new instance with the specified size.
            </summary>
            <param name="size">The size of the palette.</param>
        </member>
        <member name="M:FreeImageAPI.Palette.ToArray">
            <summary>
            Returns the palette as an array of <see cref="T:FreeImageAPI.RGBQUAD"/>.
            </summary>
            <returns>The palette as an array of <see cref="T:FreeImageAPI.RGBQUAD"/>.</returns>
        </member>
        <member name="M:FreeImageAPI.Palette.Colorize(System.Drawing.Color)">
            <summary>
            Creates a linear palette based on the provided <paramref name="color"/>.
            </summary>
            <param name="color">The <see cref="T:System.Drawing.Color"/> used to colorize the palette.</param>
            <remarks>
            Only call this method on linear palettes.
            </remarks>
        </member>
        <member name="M:FreeImageAPI.Palette.Colorize(System.Drawing.Color,System.Double)">
            <summary>
            Creates a linear palette based on the provided <paramref name="color"/>.
            </summary>
            <param name="color">The <see cref="T:System.Drawing.Color"/> used to colorize the palette.</param>
            <param name="splitSize">The position of the color within the new palette.
            0 &lt; <paramref name="splitSize"/> &lt; 1.</param>
            <remarks>
            Only call this method on linear palettes.
            </remarks>
        </member>
        <member name="M:FreeImageAPI.Palette.Colorize(System.Drawing.Color,System.Int32)">
            <summary>
            Creates a linear palette based on the provided <paramref name="color"/>.
            </summary>
            <param name="color">The <see cref="T:System.Drawing.Color"/> used to colorize the palette.</param>
            <param name="splitSize">The position of the color within the new palette.
            0 &lt; <paramref name="splitSize"/> &lt; <see cref="P:FreeImageAPI.MemoryArray`1.Length"/>.</param>
            <remarks>
            Only call this method on linear palettes.
            </remarks>
        </member>
        <member name="M:FreeImageAPI.Palette.CreateGrayscalePalette">
            <summary>
            Creates a linear grayscale palette.
            </summary>
        </member>
        <member name="M:FreeImageAPI.Palette.CreateGrayscalePalette(System.Boolean)">
            <summary>
            Creates a linear grayscale palette.
            </summary>
            <param name="inverse"><b>true</b> to create an inverse grayscale palette.</param>
        </member>
        <member name="M:FreeImageAPI.Palette.CreateGrayscalePalette(System.Drawing.Color,System.Boolean)">
            <summary>
            Creates a linear palette with the specified <see cref="T:System.Drawing.Color"/>.
            </summary>
            <remarks>
            A linear grayscale palette contains all shades of colors from
            black to white. This method creates a similar palette with the white
            color being replaced by the specified color.
            </remarks>
            <param name="color">The <see cref="T:System.Drawing.Color"/> used to create the palette.</param>
            <param name="inverse"><b>true</b> to create an inverse palette.</param>
        </member>
        <member name="M:FreeImageAPI.Palette.Reverse">
            <summary>
            Reverses the palette.
            </summary>
        </member>
        <member name="M:FreeImageAPI.Palette.CopyFrom(FreeImageAPI.Palette)">
            <summary>
            Copies the values from the specified <see cref="T:FreeImageAPI.Palette"/> to this instance.
            </summary>
            <param name="palette">The palette to copy from.</param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="palette"/> is a null reference.</exception>
        </member>
        <member name="M:FreeImageAPI.Palette.CopyFrom(FreeImageAPI.Palette,System.Int32)">
            <summary>
            Copies the values from the specified <see cref="T:FreeImageAPI.Palette"/> to this instance,
            starting at the specified <paramref name="offset"/>.
            </summary>
            <param name="palette">The palette to copy from.</param>
            <param name="offset">The position in this instance where the values
            will be copied to.</param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="palette"/> is a null reference.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <paramref name="offset"/> is outside the range of valid indexes.</exception>
        </member>
        <member name="M:FreeImageAPI.Palette.Save(System.String)">
            <summary>
            Saves this <see cref="T:FreeImageAPI.Palette"/> to the specified file.
            </summary>
            <param name="filename">
            A string that contains the name of the file to which to save this <see cref="T:FreeImageAPI.Palette"/>.
            </param>
        </member>
        <member name="M:FreeImageAPI.Palette.Save(System.IO.Stream)">
            <summary>
            Saves this <see cref="T:FreeImageAPI.Palette"/> to the specified stream.
            </summary>
            <param name="stream">
            The <see cref="T:System.IO.Stream"/> where the image will be saved.
            </param>
        </member>
        <member name="M:FreeImageAPI.Palette.Save(System.IO.BinaryWriter)">
            <summary>
            Saves this <see cref="T:FreeImageAPI.Palette"/> using the specified writer.
            </summary>
            <param name="writer">
            The <see cref="T:System.IO.BinaryWriter"/> used to save the image.
            </param>
        </member>
        <member name="M:FreeImageAPI.Palette.Load(System.String)">
            <summary>
            Loads a palette from the specified file.
            </summary>
            <param name="filename">The name of the palette file.</param>
        </member>
        <member name="M:FreeImageAPI.Palette.Load(System.IO.Stream)">
            <summary>
            Loads a palette from the specified stream.
            </summary>
            <param name="stream">The stream to load the palette from.</param>
        </member>
        <member name="M:FreeImageAPI.Palette.Load(System.IO.BinaryReader)">
            <summary>
            Loads a palette from the reader.
            </summary>
            <param name="reader">The reader to load the palette from.</param>
        </member>
        <member name="M:FreeImageAPI.Palette.Dispose(System.Boolean)">
            <summary>
            Releases allocated handles associated with this instance.
            </summary>
            <param name="disposing"><b>true</b> to release managed resources.</param>
        </member>
        <member name="P:FreeImageAPI.Palette.AsArray">
            <summary>
            Gets or sets the palette through an array of <see cref="T:FreeImageAPI.RGBQUAD"/>.
            </summary>
        </member>
        <member name="P:FreeImageAPI.Palette.ColorData">
            <summary>
            Get an array of <see cref="T:System.Drawing.Color"/> that the block of memory represents.
            This property is used for internal palette operations.
            </summary>
        </member>
        <member name="T:FreeImageAPI.Plugins.PluginRepository">
            <summary>
            Class representing all registered <see cref="T:FreeImageAPI.Plugins.FreeImagePlugin"/> in FreeImage.
            </summary>
        </member>
        <member name="M:FreeImageAPI.Plugins.PluginRepository.RegisterLocalPlugin(FreeImageAPI.Plugins.LocalPlugin)">
            <summary>
            Adds local plugin to this class.
            </summary>
            <param name="localPlugin">The registered plugin.</param>
        </member>
        <member name="M:FreeImageAPI.Plugins.PluginRepository.Plugin(FreeImageAPI.FREE_IMAGE_FORMAT)">
            <summary>
            Returns an instance of <see cref="T:FreeImageAPI.Plugins.FreeImagePlugin"/>, representing the given format.
            </summary>
            <param name="fif">The representing format.</param>
            <returns>An instance of <see cref="T:FreeImageAPI.Plugins.FreeImagePlugin"/>.</returns>
        </member>
        <member name="M:FreeImageAPI.Plugins.PluginRepository.Plugin(System.Int32)">
            <summary>
            Returns an instance of <see cref="T:FreeImageAPI.Plugins.FreeImagePlugin"/>,
            representing the format at the given index.
            </summary>
            <param name="index">The index of the representing format.</param>
            <returns>An instance of <see cref="T:FreeImageAPI.Plugins.FreeImagePlugin"/>.</returns>
        </member>
        <member name="M:FreeImageAPI.Plugins.PluginRepository.Plugin(System.String)">
            <summary>
            Returns an instance of <see cref="T:FreeImageAPI.Plugins.FreeImagePlugin"/>.
            <typeparamref name="expression"/> is searched in:
            <c>Format</c>, <c>RegExpr</c>,
            <c>ValidExtension</c> and <c>ValidFilename</c>.
            </summary>
            <param name="expression">The expression to search for.</param>
            <returns>An instance of <see cref="T:FreeImageAPI.Plugins.FreeImagePlugin"/>.</returns>
        </member>
        <member name="M:FreeImageAPI.Plugins.PluginRepository.PluginFromFormat(System.String)">
            <summary>
            Returns an instance of <see cref="T:FreeImageAPI.Plugins.FreeImagePlugin"/> for the given format.
            </summary>
            <param name="format">The format of the Plugin.</param>
            <returns>An instance of <see cref="T:FreeImageAPI.Plugins.FreeImagePlugin"/>.</returns>
        </member>
        <member name="M:FreeImageAPI.Plugins.PluginRepository.PluginFromFilename(System.String)">
            <summary>
            Returns an instance of <see cref="T:FreeImageAPI.Plugins.FreeImagePlugin"/> for the given filename.
            </summary>
            <param name="filename">The valid filename for the plugin.</param>
            <returns>An instance of <see cref="T:FreeImageAPI.Plugins.FreeImagePlugin"/>.</returns>
        </member>
        <member name="M:FreeImageAPI.Plugins.PluginRepository.PluginFromMime(System.String)">
            <summary>
            Returns an instance of <see cref="T:FreeImageAPI.Plugins.FreeImagePlugin"/> for the given mime.
            </summary>
            <param name="mime">The valid mime for the plugin.</param>
            <returns>An instance of <see cref="T:FreeImageAPI.Plugins.FreeImagePlugin"/>.</returns>
        </member>
        <member name="P:FreeImageAPI.Plugins.PluginRepository.FIFCount">
            <summary>
            Gets the number of registered plugins.
            </summary>
        </member>
        <member name="P:FreeImageAPI.Plugins.PluginRepository.PluginList">
            <summary>
            Gets a readonly collection of all plugins.
            </summary>
        </member>
        <member name="P:FreeImageAPI.Plugins.PluginRepository.ReadOnlyPlugins">
            <summary>
            Gets a list of plugins that are only able to
            read but not to write.
            </summary>
        </member>
        <member name="P:FreeImageAPI.Plugins.PluginRepository.WriteOnlyPlugins">
            <summary>
            Gets a list of plugins that are only able to
            write but not to read.
            </summary>
        </member>
        <member name="P:FreeImageAPI.Plugins.PluginRepository.StupidPlugins">
            <summary>
            Gets a list of plugins that are not able to
            read or write.
            </summary>
        </member>
        <member name="P:FreeImageAPI.Plugins.PluginRepository.ReadablePlugins">
            <summary>
            Gets a list of plugins that are able to read.
            </summary>
        </member>
        <member name="P:FreeImageAPI.Plugins.PluginRepository.WriteablePlugins">
            <summary>
            Gets a list of plugins that are able to write.
            </summary>
        </member>
        <member name="P:FreeImageAPI.Plugins.PluginRepository.LocalPlugins">
            <summary>
            Gets a list of local plugins.
            </summary>
        </member>
        <member name="P:FreeImageAPI.Plugins.PluginRepository.BuiltInPlugins">
            <summary>
            Gets a list of built-in plugins.
            </summary>
        </member>
        <member name="P:FreeImageAPI.Plugins.PluginRepository.BMP">
            <summary>
            Windows or OS/2 Bitmap File (*.BMP)
            </summary>
        </member>
        <member name="P:FreeImageAPI.Plugins.PluginRepository.ICO">
            <summary>
            Independent JPEG Group (*.JPG, *.JIF, *.JPEG, *.JPE)
            </summary>
        </member>
        <member name="P:FreeImageAPI.Plugins.PluginRepository.JPEG">
            <summary>
            Independent JPEG Group (*.JPG, *.JIF, *.JPEG, *.JPE)
            </summary>
        </member>
        <member name="P:FreeImageAPI.Plugins.PluginRepository.JNG">
            <summary>
            JPEG Network Graphics (*.JNG)
            </summary>
        </member>
        <member name="P:FreeImageAPI.Plugins.PluginRepository.KOALA">
            <summary>
            Commodore 64 Koala format (*.KOA)
            </summary>
        </member>
        <member name="P:FreeImageAPI.Plugins.PluginRepository.LBM">
            <summary>
            Amiga IFF (*.IFF, *.LBM)
            </summary>
        </member>
        <member name="P:FreeImageAPI.Plugins.PluginRepository.IFF">
            <summary>
            Amiga IFF (*.IFF, *.LBM)
            </summary>
        </member>
        <member name="P:FreeImageAPI.Plugins.PluginRepository.MNG">
            <summary>
            Multiple Network Graphics (*.MNG)
            </summary>
        </member>
        <member name="P:FreeImageAPI.Plugins.PluginRepository.PBM">
            <summary>
            Portable Bitmap (ASCII) (*.PBM)
            </summary>
        </member>
        <member name="P:FreeImageAPI.Plugins.PluginRepository.PBMRAW">
            <summary>
            Portable Bitmap (BINARY) (*.PBM)
            </summary>
        </member>
        <member name="P:FreeImageAPI.Plugins.PluginRepository.PCD">
            <summary>
            Kodak PhotoCD (*.PCD)
            </summary>
        </member>
        <member name="P:FreeImageAPI.Plugins.PluginRepository.PCX">
            <summary>
            Zsoft Paintbrush PCX bitmap format (*.PCX)
            </summary>
        </member>
        <member name="P:FreeImageAPI.Plugins.PluginRepository.PGM">
            <summary>
            Portable Graymap (ASCII) (*.PGM)
            </summary>
        </member>
        <member name="P:FreeImageAPI.Plugins.PluginRepository.PGMRAW">
            <summary>
            Portable Graymap (BINARY) (*.PGM)
            </summary>
        </member>
        <member name="P:FreeImageAPI.Plugins.PluginRepository.PNG">
            <summary>
            Portable Network Graphics (*.PNG)
            </summary>
        </member>
        <member name="P:FreeImageAPI.Plugins.PluginRepository.PPM">
            <summary>
            Portable Pixelmap (ASCII) (*.PPM)
            </summary>
        </member>
        <member name="P:FreeImageAPI.Plugins.PluginRepository.PPMRAW">
            <summary>
            Portable Pixelmap (BINARY) (*.PPM)
            </summary>
        </member>
        <member name="P:FreeImageAPI.Plugins.PluginRepository.RAS">
            <summary>
            Sun Rasterfile (*.RAS)
            </summary>
        </member>
        <member name="P:FreeImageAPI.Plugins.PluginRepository.TARGA">
            <summary>
            truevision Targa files (*.TGA, *.TARGA)
            </summary>
        </member>
        <member name="P:FreeImageAPI.Plugins.PluginRepository.TIFF">
            <summary>
            Tagged Image File Format (*.TIF, *.TIFF)
            </summary>
        </member>
        <member name="P:FreeImageAPI.Plugins.PluginRepository.WBMP">
            <summary>
            Wireless Bitmap (*.WBMP)
            </summary>
        </member>
        <member name="P:FreeImageAPI.Plugins.PluginRepository.PSD">
            <summary>
            Adobe Photoshop (*.PSD)
            </summary>
        </member>
        <member name="P:FreeImageAPI.Plugins.PluginRepository.CUT">
            <summary>
            Dr. Halo (*.CUT)
            </summary>
        </member>
        <member name="P:FreeImageAPI.Plugins.PluginRepository.XBM">
            <summary>
            X11 Bitmap Format (*.XBM)
            </summary>
        </member>
        <member name="P:FreeImageAPI.Plugins.PluginRepository.XPM">
            <summary>
            X11 Pixmap Format (*.XPM)
            </summary>
        </member>
        <member name="P:FreeImageAPI.Plugins.PluginRepository.DDS">
            <summary>
            DirectDraw Surface (*.DDS)
            </summary>
        </member>
        <member name="P:FreeImageAPI.Plugins.PluginRepository.GIF">
            <summary>
            Graphics Interchange Format (*.GIF)
            </summary>
        </member>
        <member name="P:FreeImageAPI.Plugins.PluginRepository.HDR">
            <summary>
            High Dynamic Range (*.HDR)
            </summary>
        </member>
        <member name="P:FreeImageAPI.Plugins.PluginRepository.FAXG3">
            <summary>
            Raw Fax format CCITT G3 (*.G3)
            </summary>
        </member>
        <member name="P:FreeImageAPI.Plugins.PluginRepository.SGI">
            <summary>
            Silicon Graphics SGI image format (*.SGI)
            </summary>
        </member>
        <member name="P:FreeImageAPI.Plugins.PluginRepository.EXR">
            <summary>
            OpenEXR format (*.EXR)
            </summary>
        </member>
        <member name="P:FreeImageAPI.Plugins.PluginRepository.J2K">
            <summary>
            JPEG-2000 format (*.J2K, *.J2C)
            </summary>
        </member>
        <member name="P:FreeImageAPI.Plugins.PluginRepository.JP2">
            <summary>
            JPEG-2000 format (*.JP2)
            </summary>
        </member>
        <member name="P:FreeImageAPI.Plugins.PluginRepository.PFM">
            <summary>
            Portable FloatMap (*.PFM)
            </summary>
        </member>
        <member name="P:FreeImageAPI.Plugins.PluginRepository.PICT">
            <summary>
            Macintosh PICT (*.PICT)
            </summary>
        </member>
        <member name="P:FreeImageAPI.Plugins.PluginRepository.RAW">
            <summary>
            RAW camera image (*.*)
            </summary>
        </member>
        <member name="T:FreeImageAPI.Scanline`1">
            <summary>
            Provides methods for working with generic bitmap scanlines.
            </summary>
            <typeparam name="T">Type of the bitmaps' scanlines.</typeparam>
        </member>
        <member name="M:FreeImageAPI.Scanline`1.#ctor(FreeImageAPI.FIBITMAP)">
            <summary>
            Initializes a new instance based on the specified FreeImage bitmap.
            </summary>
            <param name="dib">Handle to a FreeImage bitmap.</param>
        </member>
        <member name="M:FreeImageAPI.Scanline`1.#ctor(FreeImageAPI.FIBITMAP,System.Int32)">
            <summary>
            Initializes a new instance based on the specified FreeImage bitmap.
            </summary>
            <param name="dib">Handle to a FreeImage bitmap.</param>
            <param name="scanline">Index of the zero based scanline.</param>
        </member>
        <member name="T:FreeImageAPI.IO.StreamWrapper">
            <summary>
            Class wrapping streams, implementing a buffer for read data,
            so that seek operations can be made.
            </summary>
            <remarks>
            FreeImage can load bitmaps from arbitrary sources.
            .NET works with different streams like File- or NetConnection-strams.
            NetConnection streams, which are used to load files from web servers,
            for example cannot seek.
            But FreeImage frequently uses the seek operation when loading bitmaps.
            <b>StreamWrapper</b> wrapps a stream and makes it seekable by caching all read
            data into an internal MemoryStream to jump back- and forward.
            StreamWapper is for internal use and only for loading from streams.
            </remarks>
        </member>
        <member name="F:FreeImageAPI.IO.StreamWrapper.stream">
            <summary>
            The stream to wrap
            </summary>
        </member>
        <member name="F:FreeImageAPI.IO.StreamWrapper.memoryStream">
            <summary>
            The caching stream
            </summary>
        </member>
        <member name="F:FreeImageAPI.IO.StreamWrapper.eos">
            <summary>
            Indicates if the wrapped stream reached its end
            </summary>
        </member>
        <member name="F:FreeImageAPI.IO.StreamWrapper.blocking">
            <summary>
            Tells the wrapper to block readings or not
            </summary>
        </member>
        <member name="F:FreeImageAPI.IO.StreamWrapper.disposed">
            <summary>
            Indicates if the wrapped stream is disposed or not
            </summary>
        </member>
        <member name="M:FreeImageAPI.IO.StreamWrapper.#ctor(System.IO.Stream,System.Boolean)">
            <summary>
            Initializes a new instance based on the specified <see cref="T:System.IO.Stream"/>.
            </summary>
            <param name="stream">The stream to wrap.</param>
            <param name="blocking">When true the wrapper always tries to read the requested
            amount of data from the wrapped stream.</param>
        </member>
        <member name="M:FreeImageAPI.IO.StreamWrapper.Finalize">
            <summary>
            Releases all resources used by the instance.
            </summary>
        </member>
        <member name="T:FreeImageAPI.Metadata.DisposalMethodType">
            <summary>
            Specifies how a single frame will be handled after being displayed.
            </summary>
        </member>
        <member name="F:FreeImageAPI.Metadata.DisposalMethodType.Unspecified">
            <summary>
            Same behavior as <see cref="F:FreeImageAPI.Metadata.DisposalMethodType.Leave"/> but should not be used.
            </summary>
        </member>
        <member name="F:FreeImageAPI.Metadata.DisposalMethodType.Leave">
            <summary>
            The image is left in place and will be overdrawn by the next image.
            </summary>
        </member>
        <member name="F:FreeImageAPI.Metadata.DisposalMethodType.Background">
            <summary>
            The area of the image will be blanked out by its background.
            </summary>
        </member>
        <member name="F:FreeImageAPI.Metadata.DisposalMethodType.Previous">
            <summary>
            Restores the the area of the image to the state it was before it
            has been dawn.
            </summary>
        </member>
        <member name="T:FreeImageAPI.FREE_IMAGE_COLOR_CHANNEL">
            <summary>
            Color channels. Constants used in color manipulation routines.
            </summary>
        </member>
        <member name="F:FreeImageAPI.FREE_IMAGE_COLOR_CHANNEL.FICC_RGB">
            <summary>
            Use red, green and blue channels
            </summary>
        </member>
        <member name="F:FreeImageAPI.FREE_IMAGE_COLOR_CHANNEL.FICC_RED">
            <summary>
            Use red channel
            </summary>
        </member>
        <member name="F:FreeImageAPI.FREE_IMAGE_COLOR_CHANNEL.FICC_GREEN">
            <summary>
            Use green channel
            </summary>
        </member>
        <member name="F:FreeImageAPI.FREE_IMAGE_COLOR_CHANNEL.FICC_BLUE">
            <summary>
            Use blue channel
            </summary>
        </member>
        <member name="F:FreeImageAPI.FREE_IMAGE_COLOR_CHANNEL.FICC_ALPHA">
            <summary>
            Use alpha channel
            </summary>
        </member>
        <member name="F:FreeImageAPI.FREE_IMAGE_COLOR_CHANNEL.FICC_BLACK">
            <summary>
            Use black channel
            </summary>
        </member>
        <member name="F:FreeImageAPI.FREE_IMAGE_COLOR_CHANNEL.FICC_REAL">
            <summary>
            Complex images: use real part
            </summary>
        </member>
        <member name="F:FreeImageAPI.FREE_IMAGE_COLOR_CHANNEL.FICC_IMAG">
            <summary>
            Complex images: use imaginary part
            </summary>
        </member>
        <member name="F:FreeImageAPI.FREE_IMAGE_COLOR_CHANNEL.FICC_MAG">
            <summary>
            Complex images: use magnitude
            </summary>
        </member>
        <member name="F:FreeImageAPI.FREE_IMAGE_COLOR_CHANNEL.FICC_PHASE">
            <summary>
            Complex images: use phase
            </summary>
        </member>
        <member name="T:FreeImageAPI.FREE_IMAGE_COLOR_DEPTH">
            <summary>
            Enumeration used for color conversions.
            FREE_IMAGE_COLOR_DEPTH contains several colors to convert to.
            The default value 'FICD_AUTO'.
            </summary>
        </member>
        <member name="F:FreeImageAPI.FREE_IMAGE_COLOR_DEPTH.FICD_UNKNOWN">
            <summary>
            Unknown.
            </summary>
        </member>
        <member name="F:FreeImageAPI.FREE_IMAGE_COLOR_DEPTH.FICD_AUTO">
            <summary>
            Auto selected by the used algorithm.
            </summary>
        </member>
        <member name="F:FreeImageAPI.FREE_IMAGE_COLOR_DEPTH.FICD_01_BPP">
            <summary>
            1-bit.
            </summary>
        </member>
        <member name="F:FreeImageAPI.FREE_IMAGE_COLOR_DEPTH.FICD_01_BPP_DITHER">
            <summary>
            1-bit using dithering.
            </summary>
        </member>
        <member name="F:FreeImageAPI.FREE_IMAGE_COLOR_DEPTH.FICD_01_BPP_THRESHOLD">
            <summary>
            1-bit using threshold.
            </summary>
        </member>
        <member name="F:FreeImageAPI.FREE_IMAGE_COLOR_DEPTH.FICD_04_BPP">
            <summary>
            4-bit.
            </summary>
        </member>
        <member name="F:FreeImageAPI.FREE_IMAGE_COLOR_DEPTH.FICD_08_BPP">
            <summary>
            8-bit.
            </summary>
        </member>
        <member name="F:FreeImageAPI.FREE_IMAGE_COLOR_DEPTH.FICD_16_BPP_555">
            <summary>
            16-bit 555 (1 bit remains unused).
            </summary>
        </member>
        <member name="F:FreeImageAPI.FREE_IMAGE_COLOR_DEPTH.FICD_16_BPP">
            <summary>
            16-bit 565 (all bits are used).
            </summary>
        </member>
        <member name="F:FreeImageAPI.FREE_IMAGE_COLOR_DEPTH.FICD_24_BPP">
            <summary>
            24-bit.
            </summary>
        </member>
        <member name="F:FreeImageAPI.FREE_IMAGE_COLOR_DEPTH.FICD_32_BPP">
            <summary>
            32-bit.
            </summary>
        </member>
        <member name="F:FreeImageAPI.FREE_IMAGE_COLOR_DEPTH.FICD_REORDER_PALETTE">
            <summary>
            Reorder palette (make it linear). Only affects 1-, 4- and 8-bit images.
            <para>The palette is only reordered in case the image is greyscale
            (all palette entries have the same red, green and blue value).</para>
            </summary>
        </member>
        <member name="F:FreeImageAPI.FREE_IMAGE_COLOR_DEPTH.FICD_FORCE_GREYSCALE">
            <summary>
            Converts the image to greyscale.
            </summary>
        </member>
        <member name="F:FreeImageAPI.FREE_IMAGE_COLOR_DEPTH.FICD_COLOR_MASK">
            <summary>
            Flag to mask out all non color depth flags.
            </summary>
        </member>
        <member name="T:FreeImageAPI.FREE_IMAGE_COLOR_OPTIONS">
            <summary>
            Constants used in color filling routines.
            </summary>
        </member>
        <member name="F:FreeImageAPI.FREE_IMAGE_COLOR_OPTIONS.FICO_DEFAULT">
            <summary>
            Default value.
            </summary>
        </member>
        <member name="F:FreeImageAPI.FREE_IMAGE_COLOR_OPTIONS.FICO_RGB">
            <summary>
            <see cref="T:FreeImageAPI.RGBQUAD"/> color is RGB color (contains no valid alpha channel).
            </summary>
        </member>
        <member name="F:FreeImageAPI.FREE_IMAGE_COLOR_OPTIONS.FICO_RGBA">
            <summary>
            <see cref="T:FreeImageAPI.RGBQUAD"/> color is RGBA color (contains a valid alpha channel).
            </summary>
        </member>
        <member name="F:FreeImageAPI.FREE_IMAGE_COLOR_OPTIONS.FICO_NEAREST_COLOR">
            <summary>
            Lookup nearest RGB color from palette.
            </summary>
        </member>
        <member name="F:FreeImageAPI.FREE_IMAGE_COLOR_OPTIONS.FICO_EQUAL_COLOR">
            <summary>
            Lookup equal RGB color from palette.
            </summary>
        </member>
        <member name="F:FreeImageAPI.FREE_IMAGE_COLOR_OPTIONS.FICO_ALPHA_IS_INDEX">
            <summary>
            <see cref="F:FreeImageAPI.RGBQUAD.rgbReserved"/> contains the palette index to be used.
            </summary>
        </member>
        <member name="T:FreeImageAPI.FREE_IMAGE_COLOR_TYPE">
            <summary>
            Image color types used in FreeImage.
            </summary>
        </member>
        <member name="F:FreeImageAPI.FREE_IMAGE_COLOR_TYPE.FIC_MINISWHITE">
            <summary>
            min value is white
            </summary>
        </member>
        <member name="F:FreeImageAPI.FREE_IMAGE_COLOR_TYPE.FIC_MINISBLACK">
            <summary>
            min value is black
            </summary>
        </member>
        <member name="F:FreeImageAPI.FREE_IMAGE_COLOR_TYPE.FIC_RGB">
            <summary>
            RGB color model
            </summary>
        </member>
        <member name="F:FreeImageAPI.FREE_IMAGE_COLOR_TYPE.FIC_PALETTE">
            <summary>
            color map indexed
            </summary>
        </member>
        <member name="F:FreeImageAPI.FREE_IMAGE_COLOR_TYPE.FIC_RGBALPHA">
            <summary>
            RGB color model with alpha channel
            </summary>
        </member>
        <member name="F:FreeImageAPI.FREE_IMAGE_COLOR_TYPE.FIC_CMYK">
            <summary>
            CMYK color model
            </summary>
        </member>
        <member name="T:FreeImageAPI.FREE_IMAGE_COMPARE_FLAGS">
            <summary>
            List of combinable compare modes.
            </summary>
        </member>
        <member name="F:FreeImageAPI.FREE_IMAGE_COMPARE_FLAGS.HEADER">
            <summary>
            Compare headers.
            </summary>
        </member>
        <member name="F:FreeImageAPI.FREE_IMAGE_COMPARE_FLAGS.PALETTE">
            <summary>
            Compare palettes.
            </summary>
        </member>
        <member name="F:FreeImageAPI.FREE_IMAGE_COMPARE_FLAGS.DATA">
            <summary>
            Compare pixel data.
            </summary>
        </member>
        <member name="F:FreeImageAPI.FREE_IMAGE_COMPARE_FLAGS.METADATA">
            <summary>
            Compare meta data.
            </summary>
        </member>
        <member name="F:FreeImageAPI.FREE_IMAGE_COMPARE_FLAGS.COMPLETE">
            <summary>
            Compare everything.
            </summary>
        </member>
        <member name="T:FreeImageAPI.FREE_IMAGE_DITHER">
            <summary>
            Dithering algorithms.
            Constants used in FreeImage_Dither.
            </summary>
        </member>
        <member name="F:FreeImageAPI.FREE_IMAGE_DITHER.FID_FS">
            <summary>
            Floyd and Steinberg error diffusion
            </summary>
        </member>
        <member name="F:FreeImageAPI.FREE_IMAGE_DITHER.FID_BAYER4x4">
            <summary>
            Bayer ordered dispersed dot dithering (order 2 dithering matrix)
            </summary>
        </member>
        <member name="F:FreeImageAPI.FREE_IMAGE_DITHER.FID_BAYER8x8">
            <summary>
            Bayer ordered dispersed dot dithering (order 3 dithering matrix)
            </summary>
        </member>
        <member name="F:FreeImageAPI.FREE_IMAGE_DITHER.FID_CLUSTER6x6">
            <summary>
            Ordered clustered dot dithering (order 3 - 6x6 matrix)
            </summary>
        </member>
        <member name="F:FreeImageAPI.FREE_IMAGE_DITHER.FID_CLUSTER8x8">
            <summary>
            Ordered clustered dot dithering (order 4 - 8x8 matrix)
            </summary>
        </member>
        <member name="F:FreeImageAPI.FREE_IMAGE_DITHER.FID_CLUSTER16x16">
            <summary>
            Ordered clustered dot dithering (order 8 - 16x16 matrix)
            </summary>
        </member>
        <member name="F:FreeImageAPI.FREE_IMAGE_DITHER.FID_BAYER16x16">
            <summary>
            Bayer ordered dispersed dot dithering (order 4 dithering matrix)
            </summary>
        </member>
        <member name="T:FreeImageAPI.FREE_IMAGE_FILTER">
            <summary>
            Upsampling / downsampling filters. Constants used in FreeImage_Rescale.
            </summary>
        </member>
        <member name="F:FreeImageAPI.FREE_IMAGE_FILTER.FILTER_BOX">
            <summary>
            Box, pulse, Fourier window, 1st order (constant) b-spline
            </summary>
        </member>
        <member name="F:FreeImageAPI.FREE_IMAGE_FILTER.FILTER_BICUBIC">
            <summary>
            Mitchell and Netravali's two-param cubic filter
            </summary>
        </member>
        <member name="F:FreeImageAPI.FREE_IMAGE_FILTER.FILTER_BILINEAR">
            <summary>
            Bilinear filter
            </summary>
        </member>
        <member name="F:FreeImageAPI.FREE_IMAGE_FILTER.FILTER_BSPLINE">
            <summary>
            4th order (cubic) b-spline
            </summary>
        </member>
        <member name="F:FreeImageAPI.FREE_IMAGE_FILTER.FILTER_CATMULLROM">
            <summary>
            Catmull-Rom spline, Overhauser spline
            </summary>
        </member>
        <member name="F:FreeImageAPI.FREE_IMAGE_FILTER.FILTER_LANCZOS3">
            <summary>
            Lanczos3 filter
            </summary>
        </member>
        <member name="T:FreeImageAPI.FREE_IMAGE_FORMAT">
            <summary>
            I/O image format identifiers.
            </summary>
        </member>
        <member name="F:FreeImageAPI.FREE_IMAGE_FORMAT.FIF_UNKNOWN">
            <summary>
            Unknown format (returned value only, never use it as input value)
            </summary>
        </member>
        <member name="F:FreeImageAPI.FREE_IMAGE_FORMAT.FIF_BMP">
            <summary>
            Windows or OS/2 Bitmap File (*.BMP)
            </summary>
        </member>
        <member name="F:FreeImageAPI.FREE_IMAGE_FORMAT.FIF_ICO">
            <summary>
            Windows Icon (*.ICO)
            </summary>
        </member>
        <member name="F:FreeImageAPI.FREE_IMAGE_FORMAT.FIF_JPEG">
            <summary>
            Independent JPEG Group (*.JPG, *.JIF, *.JPEG, *.JPE)
            </summary>
        </member>
        <member name="F:FreeImageAPI.FREE_IMAGE_FORMAT.FIF_JNG">
            <summary>
            JPEG Network Graphics (*.JNG)
            </summary>
        </member>
        <member name="F:FreeImageAPI.FREE_IMAGE_FORMAT.FIF_KOALA">
            <summary>
            Commodore 64 Koala format (*.KOA)
            </summary>
        </member>
        <member name="F:FreeImageAPI.FREE_IMAGE_FORMAT.FIF_LBM">
            <summary>
            Amiga IFF (*.IFF, *.LBM)
            </summary>
        </member>
        <member name="F:FreeImageAPI.FREE_IMAGE_FORMAT.FIF_IFF">
            <summary>
            Amiga IFF (*.IFF, *.LBM)
            </summary>
        </member>
        <member name="F:FreeImageAPI.FREE_IMAGE_FORMAT.FIF_MNG">
            <summary>
            Multiple Network Graphics (*.MNG)
            </summary>
        </member>
        <member name="F:FreeImageAPI.FREE_IMAGE_FORMAT.FIF_PBM">
            <summary>
            Portable Bitmap (ASCII) (*.PBM)
            </summary>
        </member>
        <member name="F:FreeImageAPI.FREE_IMAGE_FORMAT.FIF_PBMRAW">
            <summary>
            Portable Bitmap (BINARY) (*.PBM)
            </summary>
        </member>
        <member name="F:FreeImageAPI.FREE_IMAGE_FORMAT.FIF_PCD">
            <summary>
            Kodak PhotoCD (*.PCD)
            </summary>
        </member>
        <member name="F:FreeImageAPI.FREE_IMAGE_FORMAT.FIF_PCX">
            <summary>
            Zsoft Paintbrush PCX bitmap format (*.PCX)
            </summary>
        </member>
        <member name="F:FreeImageAPI.FREE_IMAGE_FORMAT.FIF_PGM">
            <summary>
            Portable Graymap (ASCII) (*.PGM)
            </summary>
        </member>
        <member name="F:FreeImageAPI.FREE_IMAGE_FORMAT.FIF_PGMRAW">
            <summary>
            Portable Graymap (BINARY) (*.PGM)
            </summary>
        </member>
        <member name="F:FreeImageAPI.FREE_IMAGE_FORMAT.FIF_PNG">
            <summary>
            Portable Network Graphics (*.PNG)
            </summary>
        </member>
        <member name="F:FreeImageAPI.FREE_IMAGE_FORMAT.FIF_PPM">
            <summary>
            Portable Pixelmap (ASCII) (*.PPM)
            </summary>
        </member>
        <member name="F:FreeImageAPI.FREE_IMAGE_FORMAT.FIF_PPMRAW">
            <summary>
            Portable Pixelmap (BINARY) (*.PPM)
            </summary>
        </member>
        <member name="F:FreeImageAPI.FREE_IMAGE_FORMAT.FIF_RAS">
            <summary>
            Sun Rasterfile (*.RAS)
            </summary>
        </member>
        <member name="F:FreeImageAPI.FREE_IMAGE_FORMAT.FIF_TARGA">
            <summary>
            truevision Targa files (*.TGA, *.TARGA)
            </summary>
        </member>
        <member name="F:FreeImageAPI.FREE_IMAGE_FORMAT.FIF_TIFF">
            <summary>
            Tagged Image File Format (*.TIF, *.TIFF)
            </summary>
        </member>
        <member name="F:FreeImageAPI.FREE_IMAGE_FORMAT.FIF_WBMP">
            <summary>
            Wireless Bitmap (*.WBMP)
            </summary>
        </member>
        <member name="F:FreeImageAPI.FREE_IMAGE_FORMAT.FIF_PSD">
            <summary>
            Adobe Photoshop (*.PSD)
            </summary>
        </member>
        <member name="F:FreeImageAPI.FREE_IMAGE_FORMAT.FIF_CUT">
            <summary>
            Dr. Halo (*.CUT)
            </summary>
        </member>
        <member name="F:FreeImageAPI.FREE_IMAGE_FORMAT.FIF_XBM">
            <summary>
            X11 Bitmap Format (*.XBM)
            </summary>
        </member>
        <member name="F:FreeImageAPI.FREE_IMAGE_FORMAT.FIF_XPM">
            <summary>
            X11 Pixmap Format (*.XPM)
            </summary>
        </member>
        <member name="F:FreeImageAPI.FREE_IMAGE_FORMAT.FIF_DDS">
            <summary>
            DirectDraw Surface (*.DDS)
            </summary>
        </member>
        <member name="F:FreeImageAPI.FREE_IMAGE_FORMAT.FIF_GIF">
            <summary>
            Graphics Interchange Format (*.GIF)
            </summary>
        </member>
        <member name="F:FreeImageAPI.FREE_IMAGE_FORMAT.FIF_HDR">
            <summary>
            High Dynamic Range (*.HDR)
            </summary>
        </member>
        <member name="F:FreeImageAPI.FREE_IMAGE_FORMAT.FIF_FAXG3">
            <summary>
            Raw Fax format CCITT G3 (*.G3)
            </summary>
        </member>
        <member name="F:FreeImageAPI.FREE_IMAGE_FORMAT.FIF_SGI">
            <summary>
            Silicon Graphics SGI image format (*.SGI)
            </summary>
        </member>
        <member name="F:FreeImageAPI.FREE_IMAGE_FORMAT.FIF_EXR">
            <summary>
            OpenEXR format (*.EXR)
            </summary>
        </member>
        <member name="F:FreeImageAPI.FREE_IMAGE_FORMAT.FIF_J2K">
            <summary>
            JPEG-2000 format (*.J2K, *.J2C)
            </summary>
        </member>
        <member name="F:FreeImageAPI.FREE_IMAGE_FORMAT.FIF_JP2">
            <summary>
            JPEG-2000 format (*.JP2)
            </summary>
        </member>
        <member name="F:FreeImageAPI.FREE_IMAGE_FORMAT.FIF_PFM">
            <summary>
            Portable FloatMap (*.PFM)
            </summary>
        </member>
        <member name="F:FreeImageAPI.FREE_IMAGE_FORMAT.FIF_PICT">
            <summary>
            Macintosh PICT (*.PICT)
            </summary>
        </member>
        <member name="F:FreeImageAPI.FREE_IMAGE_FORMAT.FIF_RAW">
            <summary>
            RAW camera image (*.*)
            </summary>
        </member>
        <member name="T:FreeImageAPI.FREE_IMAGE_JPEG_OPERATION">
            <summary>
            Lossless JPEG transformations constants used in FreeImage_JPEGTransform.
            </summary>
        </member>
        <member name="F:FreeImageAPI.FREE_IMAGE_JPEG_OPERATION.FIJPEG_OP_NONE">
            <summary>
            no transformation
            </summary>
        </member>
        <member name="F:FreeImageAPI.FREE_IMAGE_JPEG_OPERATION.FIJPEG_OP_FLIP_H">
            <summary>
            horizontal flip
            </summary>
        </member>
        <member name="F:FreeImageAPI.FREE_IMAGE_JPEG_OPERATION.FIJPEG_OP_FLIP_V">
            <summary>
            vertical flip
            </summary>
        </member>
        <member name="F:FreeImageAPI.FREE_IMAGE_JPEG_OPERATION.FIJPEG_OP_TRANSPOSE">
            <summary>
            transpose across UL-to-LR axis
            </summary>
        </member>
        <member name="F:FreeImageAPI.FREE_IMAGE_JPEG_OPERATION.FIJPEG_OP_TRANSVERSE">
            <summary>
            transpose across UR-to-LL axis
            </summary>
        </member>
        <member name="F:FreeImageAPI.FREE_IMAGE_JPEG_OPERATION.FIJPEG_OP_ROTATE_90">
            <summary>
            90-degree clockwise rotation
            </summary>
        </member>
        <member name="F:FreeImageAPI.FREE_IMAGE_JPEG_OPERATION.FIJPEG_OP_ROTATE_180">
            <summary>
            180-degree rotation
            </summary>
        </member>
        <member name="F:FreeImageAPI.FREE_IMAGE_JPEG_OPERATION.FIJPEG_OP_ROTATE_270">
            <summary>
            270-degree clockwise (or 90 ccw)
            </summary>
        </member>
        <member name="T:FreeImageAPI.FREE_IMAGE_LOAD_FLAGS">
            <summary>
            Flags used in load functions.
            </summary>
        </member>
        <member name="F:FreeImageAPI.FREE_IMAGE_LOAD_FLAGS.DEFAULT">
            <summary>
            Default option for all types.
            </summary>
        </member>
        <member name="F:FreeImageAPI.FREE_IMAGE_LOAD_FLAGS.GIF_LOAD256">
            <summary>
            Load the image as a 256 color image with ununsed palette entries, if it's 16 or 2 color.
            </summary>
        </member>
        <member name="F:FreeImageAPI.FREE_IMAGE_LOAD_FLAGS.GIF_PLAYBACK">
            <summary>
            'Play' the GIF to generate each frame (as 32bpp) instead of returning raw frame data when loading.
            </summary>
        </member>
        <member name="F:FreeImageAPI.FREE_IMAGE_LOAD_FLAGS.ICO_MAKEALPHA">
            <summary>
            Convert to 32bpp and create an alpha channel from the AND-mask when loading.
            </summary>
        </member>
        <member name="F:FreeImageAPI.FREE_IMAGE_LOAD_FLAGS.JPEG_FAST">
            <summary>
            Load the file as fast as possible, sacrificing some quality.
            </summary>
        </member>
        <member name="F:FreeImageAPI.FREE_IMAGE_LOAD_FLAGS.JPEG_ACCURATE">
            <summary>
            Load the file with the best quality, sacrificing some speed.
            </summary>
        </member>
        <member name="F:FreeImageAPI.FREE_IMAGE_LOAD_FLAGS.JPEG_CMYK">
            <summary>
            Load separated CMYK "as is" (use | to combine with other load flags).
            </summary>
        </member>
        <member name="F:FreeImageAPI.FREE_IMAGE_LOAD_FLAGS.JPEG_EXIFROTATE">
            <summary>
            Load and rotate according to Exif 'Orientation' tag if available.
            </summary>
        </member>
        <member name="F:FreeImageAPI.FREE_IMAGE_LOAD_FLAGS.PCD_BASE">
            <summary>
            Load the bitmap sized 768 x 512.
            </summary>
        </member>
        <member name="F:FreeImageAPI.FREE_IMAGE_LOAD_FLAGS.PCD_BASEDIV4">
            <summary>
            Load the bitmap sized 384 x 256.
            </summary>
        </member>
        <member name="F:FreeImageAPI.FREE_IMAGE_LOAD_FLAGS.PCD_BASEDIV16">
            <summary>
            Load the bitmap sized 192 x 128.
            </summary>
        </member>
        <member name="F:FreeImageAPI.FREE_IMAGE_LOAD_FLAGS.PNG_IGNOREGAMMA">
            <summary>
            Avoid gamma correction.
            </summary>
        </member>
        <member name="F:FreeImageAPI.FREE_IMAGE_LOAD_FLAGS.TARGA_LOAD_RGB888">
            <summary>
            If set the loader converts RGB555 and ARGB8888 -> RGB888.
            </summary>
        </member>
        <member name="F:FreeImageAPI.FREE_IMAGE_LOAD_FLAGS.TIFF_CMYK">
            <summary>
            Reads tags for separated CMYK.
            </summary>
        </member>
        <member name="F:FreeImageAPI.FREE_IMAGE_LOAD_FLAGS.RAW_PREVIEW">
            <summary>
            Tries to load the JPEG preview image, embedded in
            Exif Metadata or load the image as RGB 24-bit if no 
            preview image is available.
            </summary>
        </member>
        <member name="F:FreeImageAPI.FREE_IMAGE_LOAD_FLAGS.RAW_DISPLAY">
            <summary>
            Loads the image as RGB 24-bit.
            </summary>
        </member>
        <member name="T:FreeImageAPI.FREE_IMAGE_MDMODEL">
            <summary>
            Metadata models supported by FreeImage.
            </summary>
        </member>
        <member name="F:FreeImageAPI.FREE_IMAGE_MDMODEL.FIMD_NODATA">
            <summary>
            No data
            </summary>
        </member>
        <member name="F:FreeImageAPI.FREE_IMAGE_MDMODEL.FIMD_COMMENTS">
            <summary>
            single comment or keywords
            </summary>
        </member>
        <member name="F:FreeImageAPI.FREE_IMAGE_MDMODEL.FIMD_EXIF_MAIN">
            <summary>
            Exif-TIFF metadata
            </summary>
        </member>
        <member name="F:FreeImageAPI.FREE_IMAGE_MDMODEL.FIMD_EXIF_EXIF">
            <summary>
            Exif-specific metadata
            </summary>
        </member>
        <member name="F:FreeImageAPI.FREE_IMAGE_MDMODEL.FIMD_EXIF_GPS">
            <summary>
            Exif GPS metadata
            </summary>
        </member>
        <member name="F:FreeImageAPI.FREE_IMAGE_MDMODEL.FIMD_EXIF_MAKERNOTE">
            <summary>
            Exif maker note metadata
            </summary>
        </member>
        <member name="F:FreeImageAPI.FREE_IMAGE_MDMODEL.FIMD_EXIF_INTEROP">
            <summary>
            Exif interoperability metadata
            </summary>
        </member>
        <member name="F:FreeImageAPI.FREE_IMAGE_MDMODEL.FIMD_IPTC">
            <summary>
            IPTC/NAA metadata
            </summary>
        </member>
        <member name="F:FreeImageAPI.FREE_IMAGE_MDMODEL.FIMD_XMP">
            <summary>
            Abobe XMP metadata
            </summary>
        </member>
        <member name="F:FreeImageAPI.FREE_IMAGE_MDMODEL.FIMD_GEOTIFF">
            <summary>
            GeoTIFF metadata
            </summary>
        </member>
        <member name="F:FreeImageAPI.FREE_IMAGE_MDMODEL.FIMD_ANIMATION">
            <summary>
            Animation metadata
            </summary>
        </member>
        <member name="F:FreeImageAPI.FREE_IMAGE_MDMODEL.FIMD_CUSTOM">
            <summary>
            Used to attach other metadata types to a dib
            </summary>
        </member>
        <member name="T:FreeImageAPI.FREE_IMAGE_MDTYPE">
            <summary>
            Tag data type information (based on TIFF specifications)
            Note: RATIONALs are the ratio of two 32-bit integer values.
            </summary>
        </member>
        <member name="F:FreeImageAPI.FREE_IMAGE_MDTYPE.FIDT_NOTYPE">
            <summary>
            placeholder
            </summary>
        </member>
        <member name="F:FreeImageAPI.FREE_IMAGE_MDTYPE.FIDT_BYTE">
            <summary>
            8-bit unsigned integer
            </summary>
        </member>
        <member name="F:FreeImageAPI.FREE_IMAGE_MDTYPE.FIDT_ASCII">
            <summary>
            8-bit bytes w/ last byte null
            </summary>
        </member>
        <member name="F:FreeImageAPI.FREE_IMAGE_MDTYPE.FIDT_SHORT">
            <summary>
            16-bit unsigned integer
            </summary>
        </member>
        <member name="F:FreeImageAPI.FREE_IMAGE_MDTYPE.FIDT_LONG">
            <summary>
            32-bit unsigned integer
            </summary>
        </member>
        <member name="F:FreeImageAPI.FREE_IMAGE_MDTYPE.FIDT_RATIONAL">
            <summary>
            64-bit unsigned fraction
            </summary>
        </member>
        <member name="F:FreeImageAPI.FREE_IMAGE_MDTYPE.FIDT_SBYTE">
            <summary>
            8-bit signed integer
            </summary>
        </member>
        <member name="F:FreeImageAPI.FREE_IMAGE_MDTYPE.FIDT_UNDEFINED">
            <summary>
            8-bit untyped data
            </summary>
        </member>
        <member name="F:FreeImageAPI.FREE_IMAGE_MDTYPE.FIDT_SSHORT">
            <summary>
            16-bit signed integer
            </summary>
        </member>
        <member name="F:FreeImageAPI.FREE_IMAGE_MDTYPE.FIDT_SLONG">
            <summary>
            32-bit signed integer
            </summary>
        </member>
        <member name="F:FreeImageAPI.FREE_IMAGE_MDTYPE.FIDT_SRATIONAL">
            <summary>
            64-bit signed fraction
            </summary>
        </member>
        <member name="F:FreeImageAPI.FREE_IMAGE_MDTYPE.FIDT_FLOAT">
            <summary>
            32-bit IEEE floating point
            </summary>
        </member>
        <member name="F:FreeImageAPI.FREE_IMAGE_MDTYPE.FIDT_DOUBLE">
            <summary>
            64-bit IEEE floating point
            </summary>
        </member>
        <member name="F:FreeImageAPI.FREE_IMAGE_MDTYPE.FIDT_IFD">
            <summary>
            32-bit unsigned integer (offset)
            </summary>
        </member>
        <member name="F:FreeImageAPI.FREE_IMAGE_MDTYPE.FIDT_PALETTE">
            <summary>
            32-bit RGBQUAD
            </summary>
        </member>
        <member name="T:FreeImageAPI.FREE_IMAGE_METADATA_COPY">
            <summary>
            Flags for copying data from a bitmap to another.
            </summary>
        </member>
        <member name="F:FreeImageAPI.FREE_IMAGE_METADATA_COPY.KEEP_EXISITNG">
            <summary>
            Exisiting metadata will remain unchanged.
            </summary>
        </member>
        <member name="F:FreeImageAPI.FREE_IMAGE_METADATA_COPY.CLEAR_EXISTING">
            <summary>
            Existing metadata will be cleared.
            </summary>
        </member>
        <member name="F:FreeImageAPI.FREE_IMAGE_METADATA_COPY.REPLACE_EXISTING">
            <summary>
            Existing metadata will be overwritten.
            </summary>
        </member>
        <member name="T:FreeImageAPI.FREE_IMAGE_QUANTIZE">
            <summary>
            Color quantization algorithms.
            Constants used in FreeImage_ColorQuantize.
            </summary>
        </member>
        <member name="F:FreeImageAPI.FREE_IMAGE_QUANTIZE.FIQ_WUQUANT">
            <summary>
            Xiaolin Wu color quantization algorithm
            </summary>
        </member>
        <member name="F:FreeImageAPI.FREE_IMAGE_QUANTIZE.FIQ_NNQUANT">
            <summary>
            NeuQuant neural-net quantization algorithm by Anthony Dekker
            </summary>
        </member>
        <member name="T:FreeImageAPI.FREE_IMAGE_SAVE_FLAGS">
            <summary>
            Flags used in save functions.
            </summary>
        </member>
        <member name="F:FreeImageAPI.FREE_IMAGE_SAVE_FLAGS.DEFAULT">
            <summary>
            Default option for all types.
            </summary>
        </member>
        <member name="F:FreeImageAPI.FREE_IMAGE_SAVE_FLAGS.BMP_SAVE_RLE">
            <summary>
            Save with run length encoding.
            </summary>
        </member>
        <member name="F:FreeImageAPI.FREE_IMAGE_SAVE_FLAGS.EXR_FLOAT">
            <summary>
            Save data as float instead of as half (not recommended).
            </summary>
        </member>
        <member name="F:FreeImageAPI.FREE_IMAGE_SAVE_FLAGS.EXR_NONE">
            <summary>
            Save with no compression.
            </summary>
        </member>
        <member name="F:FreeImageAPI.FREE_IMAGE_SAVE_FLAGS.EXR_ZIP">
            <summary>
            Save with zlib compression, in blocks of 16 scan lines.
            </summary>
        </member>
        <member name="F:FreeImageAPI.FREE_IMAGE_SAVE_FLAGS.EXR_PIZ">
            <summary>
            Save with piz-based wavelet compression.
            </summary>
        </member>
        <member name="F:FreeImageAPI.FREE_IMAGE_SAVE_FLAGS.EXR_PXR24">
            <summary>
            Save with lossy 24-bit float compression.
            </summary>
        </member>
        <member name="F:FreeImageAPI.FREE_IMAGE_SAVE_FLAGS.EXR_B44">
            <summary>
            Save with lossy 44% float compression - goes to 22% when combined with EXR_LC.
            </summary>
        </member>
        <member name="F:FreeImageAPI.FREE_IMAGE_SAVE_FLAGS.EXR_LC">
            <summary>
            Save images with one luminance and two chroma channels, rather than as RGB (lossy compression).
            </summary>
        </member>
        <member name="F:FreeImageAPI.FREE_IMAGE_SAVE_FLAGS.JPEG_QUALITYSUPERB">
            <summary>
            Save with superb quality (100:1).
            </summary>
        </member>
        <member name="F:FreeImageAPI.FREE_IMAGE_SAVE_FLAGS.JPEG_QUALITYGOOD">
            <summary>
            Save with good quality (75:1).
            </summary>
        </member>
        <member name="F:FreeImageAPI.FREE_IMAGE_SAVE_FLAGS.JPEG_QUALITYNORMAL">
            <summary>
            Save with normal quality (50:1).
            </summary>
        </member>
        <member name="F:FreeImageAPI.FREE_IMAGE_SAVE_FLAGS.JPEG_QUALITYAVERAGE">
            <summary>
            Save with average quality (25:1).
            </summary>
        </member>
        <member name="F:FreeImageAPI.FREE_IMAGE_SAVE_FLAGS.JPEG_QUALITYBAD">
            <summary>
            Save with bad quality (10:1).
            </summary>
        </member>
        <member name="F:FreeImageAPI.FREE_IMAGE_SAVE_FLAGS.JPEG_PROGRESSIVE">
            <summary>
            Save as a progressive-JPEG (use | to combine with other save flags).
            </summary>
        </member>
        <member name="F:FreeImageAPI.FREE_IMAGE_SAVE_FLAGS.JPEG_SUBSAMPLING_411">
            <summary>
            Save with high 4x1 chroma subsampling (4:1:1).
            </summary>
        </member>
        <member name="F:FreeImageAPI.FREE_IMAGE_SAVE_FLAGS.JPEG_SUBSAMPLING_420">
            <summary>
            Save with medium 2x2 medium chroma (4:2:0).
            </summary>
        </member>
        <member name="F:FreeImageAPI.FREE_IMAGE_SAVE_FLAGS.JPEG_SUBSAMPLING_422">
            <summary>
            Save with low 2x1 chroma subsampling (4:2:2).
            </summary>
        </member>
        <member name="F:FreeImageAPI.FREE_IMAGE_SAVE_FLAGS.JPEG_SUBSAMPLING_444">
            <summary>
            Save with no chroma subsampling (4:4:4).
            </summary>
        </member>
        <member name="F:FreeImageAPI.FREE_IMAGE_SAVE_FLAGS.PNG_Z_BEST_SPEED">
            <summary>
            Save using ZLib level 1 compression flag
            (default value is <see cref="F:FreeImageAPI.FREE_IMAGE_SAVE_FLAGS.PNG_Z_DEFAULT_COMPRESSION"/>).
            </summary>
        </member>
        <member name="F:FreeImageAPI.FREE_IMAGE_SAVE_FLAGS.PNG_Z_DEFAULT_COMPRESSION">
            <summary>
            Save using ZLib level 6 compression flag (default recommended value).
            </summary>
        </member>
        <member name="F:FreeImageAPI.FREE_IMAGE_SAVE_FLAGS.PNG_Z_BEST_COMPRESSION">
            <summary>
            save using ZLib level 9 compression flag
            (default value is <see cref="F:FreeImageAPI.FREE_IMAGE_SAVE_FLAGS.PNG_Z_DEFAULT_COMPRESSION"/>).
            </summary>
        </member>
        <member name="F:FreeImageAPI.FREE_IMAGE_SAVE_FLAGS.PNG_Z_NO_COMPRESSION">
            <summary>
            Save without ZLib compression.
            </summary>
        </member>
        <member name="F:FreeImageAPI.FREE_IMAGE_SAVE_FLAGS.PNG_INTERLACED">
            <summary>
            Save using Adam7 interlacing (use | to combine with other save flags).
            </summary>
        </member>
        <member name="F:FreeImageAPI.FREE_IMAGE_SAVE_FLAGS.PNM_SAVE_ASCII">
            <summary>
            If set the writer saves in ASCII format (i.e. P1, P2 or P3).
            </summary>
        </member>
        <member name="F:FreeImageAPI.FREE_IMAGE_SAVE_FLAGS.TIFF_CMYK">
            <summary>
            Stores tags for separated CMYK (use | to combine with compression flags).
            </summary>
        </member>
        <member name="F:FreeImageAPI.FREE_IMAGE_SAVE_FLAGS.TIFF_PACKBITS">
            <summary>
            Save using PACKBITS compression.
            </summary>
        </member>
        <member name="F:FreeImageAPI.FREE_IMAGE_SAVE_FLAGS.TIFF_DEFLATE">
            <summary>
            Save using DEFLATE compression (a.k.a. ZLIB compression).
            </summary>
        </member>
        <member name="F:FreeImageAPI.FREE_IMAGE_SAVE_FLAGS.TIFF_ADOBE_DEFLATE">
            <summary>
            Save using ADOBE DEFLATE compression.
            </summary>
        </member>
        <member name="F:FreeImageAPI.FREE_IMAGE_SAVE_FLAGS.TIFF_NONE">
            <summary>
            Save without any compression.
            </summary>
        </member>
        <member name="F:FreeImageAPI.FREE_IMAGE_SAVE_FLAGS.TIFF_CCITTFAX3">
            <summary>
            Save using CCITT Group 3 fax encoding.
            </summary>
        </member>
        <member name="F:FreeImageAPI.FREE_IMAGE_SAVE_FLAGS.TIFF_CCITTFAX4">
            <summary>
            Save using CCITT Group 4 fax encoding.
            </summary>
        </member>
        <member name="F:FreeImageAPI.FREE_IMAGE_SAVE_FLAGS.TIFF_LZW">
            <summary>
            Save using LZW compression.
            </summary>
        </member>
        <member name="F:FreeImageAPI.FREE_IMAGE_SAVE_FLAGS.TIFF_JPEG">
            <summary>
            Save using JPEG compression.
            </summary>
        </member>
        <member name="T:FreeImageAPI.FREE_IMAGE_TMO">
            <summary>
            Tone mapping operators. Constants used in FreeImage_ToneMapping.
            </summary>
        </member>
        <member name="F:FreeImageAPI.FREE_IMAGE_TMO.FITMO_DRAGO03">
            <summary>
            Adaptive logarithmic mapping (F. Drago, 2003)
            </summary>
        </member>
        <member name="F:FreeImageAPI.FREE_IMAGE_TMO.FITMO_REINHARD05">
            <summary>
            Dynamic range reduction inspired by photoreceptor physiology (E. Reinhard, 2005)
            </summary>
        </member>
        <member name="F:FreeImageAPI.FREE_IMAGE_TMO.FITMO_FATTAL02">
            <summary>
            Gradient domain high dynamic range compression (R. Fattal, 2002)
            </summary>
        </member>
        <member name="T:FreeImageAPI.FREE_IMAGE_TYPE">
            <summary>
            Image types used in FreeImage.
            </summary>
        </member>
        <member name="F:FreeImageAPI.FREE_IMAGE_TYPE.FIT_UNKNOWN">
            <summary>
            unknown type
            </summary>
        </member>
        <member name="F:FreeImageAPI.FREE_IMAGE_TYPE.FIT_BITMAP">
            <summary>
            standard image : 1-, 4-, 8-, 16-, 24-, 32-bit
            </summary>
        </member>
        <member name="F:FreeImageAPI.FREE_IMAGE_TYPE.FIT_UINT16">
            <summary>
            array of unsigned short : unsigned 16-bit
            </summary>
        </member>
        <member name="F:FreeImageAPI.FREE_IMAGE_TYPE.FIT_INT16">
            <summary>
            array of short : signed 16-bit
            </summary>
        </member>
        <member name="F:FreeImageAPI.FREE_IMAGE_TYPE.FIT_UINT32">
            <summary>
            array of unsigned long : unsigned 32-bit
            </summary>
        </member>
        <member name="F:FreeImageAPI.FREE_IMAGE_TYPE.FIT_INT32">
            <summary>
            array of long : signed 32-bit
            </summary>
        </member>
        <member name="F:FreeImageAPI.FREE_IMAGE_TYPE.FIT_FLOAT">
            <summary>
            array of float : 32-bit IEEE floating point
            </summary>
        </member>
        <member name="F:FreeImageAPI.FREE_IMAGE_TYPE.FIT_DOUBLE">
            <summary>
            array of double : 64-bit IEEE floating point
            </summary>
        </member>
        <member name="F:FreeImageAPI.FREE_IMAGE_TYPE.FIT_COMPLEX">
            <summary>
            array of FICOMPLEX : 2 x 64-bit IEEE floating point
            </summary>
        </member>
        <member name="F:FreeImageAPI.FREE_IMAGE_TYPE.FIT_RGB16">
            <summary>
            48-bit RGB image : 3 x 16-bit
            </summary>
        </member>
        <member name="F:FreeImageAPI.FREE_IMAGE_TYPE.FIT_RGBA16">
            <summary>
            64-bit RGBA image : 4 x 16-bit
            </summary>
        </member>
        <member name="F:FreeImageAPI.FREE_IMAGE_TYPE.FIT_RGBF">
            <summary>
            96-bit RGB float image : 3 x 32-bit IEEE floating point
            </summary>
        </member>
        <member name="F:FreeImageAPI.FREE_IMAGE_TYPE.FIT_RGBAF">
            <summary>
            128-bit RGBA float image : 4 x 32-bit IEEE floating point
            </summary>
        </member>
        <member name="T:FreeImageAPI.ICC_FLAGS">
            <summary>
            Flags for ICC profiles.
            </summary>
        </member>
        <member name="F:FreeImageAPI.ICC_FLAGS.FIICC_DEFAULT">
            <summary>
            Default value.
            </summary>
        </member>
        <member name="F:FreeImageAPI.ICC_FLAGS.FIICC_COLOR_IS_CMYK">
            <summary>
            The color is CMYK.
            </summary>
        </member>
        <member name="T:FreeImageAPI.MD_SEARCH_FLAGS">
            <summary>
            List different search modes.
            </summary>
        </member>
        <member name="F:FreeImageAPI.MD_SEARCH_FLAGS.KEY">
            <summary>
            The key of the metadata.
            </summary>
        </member>
        <member name="F:FreeImageAPI.MD_SEARCH_FLAGS.DESCRIPTION">
            <summary>
            The description of the metadata
            </summary>
        </member>
        <member name="F:FreeImageAPI.MD_SEARCH_FLAGS.TOSTRING">
            <summary>
            The ToString value of the metadata
            </summary>
        </member>
        <member name="T:FreeImageAPI.BITMAP">
            <summary>
            The <b>BITMAP</b> structure defines the type, width, height, color format, and bit values of a bitmap.
            </summary>
            <remarks>
            The bitmap formats currently used are monochrome and color. The monochrome bitmap uses a one-bit,
            one-plane format. Each scan is a multiple of 32 bits.
            <para/>
            Scans are organized as follows for a monochrome bitmap of height n:
            <para/>
            <code>
            Scan 0
            Scan 1
            .
            .
            .
            Scan n-2
            Scan n-1
            </code>
            <para/>
            The pixels on a monochrome device are either black or white. If the corresponding bit in the
            bitmap is 1, the pixel is set to the foreground color; if the corresponding bit in the bitmap
            is zero, the pixel is set to the background color.
            <para/>
            All devices that have the RC_BITBLT device capability support bitmaps. For more information,
            see <b>GetDeviceCaps</b>.
            <para/>
            Each device has a unique color format. To transfer a bitmap from one device to another,
            use the <b>GetDIBits</b> and <b>SetDIBits</b> functions.
            </remarks>
        </member>
        <member name="F:FreeImageAPI.BITMAP.bmType">
            <summary>
            Specifies the bitmap type. This member must be zero.
            </summary>
        </member>
        <member name="F:FreeImageAPI.BITMAP.bmWidth">
            <summary>
            Specifies the width, in pixels, of the bitmap. The width must be greater than zero.
            </summary>
        </member>
        <member name="F:FreeImageAPI.BITMAP.bmHeight">
            <summary>
            Specifies the height, in pixels, of the bitmap. The height must be greater than zero.
            </summary>
        </member>
        <member name="F:FreeImageAPI.BITMAP.bmWidthBytes">
            <summary>
            Specifies the number of bytes in each scan line. This value must be divisible by 2,
            because the system assumes that the bit values of a bitmap form an array that is word aligned.
            </summary>
        </member>
        <member name="F:FreeImageAPI.BITMAP.bmPlanes">
            <summary>
            Specifies the count of color planes.
            </summary>
        </member>
        <member name="F:FreeImageAPI.BITMAP.bmBitsPixel">
            <summary>
            Specifies the number of bits required to indicate the color of a pixel.
            </summary>
        </member>
        <member name="F:FreeImageAPI.BITMAP.bmBits">
            <summary>
            Pointer to the location of the bit values for the bitmap.
            The <b>bmBits</b> member must be a long pointer to an array of character (1-byte) values.
            </summary>
        </member>
        <member name="T:FreeImageAPI.BITMAPINFO">
            <summary>
            The <b>BITMAPINFO</b> structure defines the dimensions and color information for a DIB.
            </summary>
            <remarks>
            A DIB consists of two distinct parts: a <b>BITMAPINFO</b> structure describing the dimensions
            and colors of the bitmap, and an array of bytes defining the pixels of the bitmap. The bits in
            the array are packed together, but each scan line must be padded with zeroes to end on a
            <b>LONG</b> data-type boundary. If the height of the bitmap is positive, the bitmap is a
            bottom-up DIB and its origin is the lower-left corner. If the height is negative, the bitmap is
            a top-down DIB and its origin is the upper left corner.
            <para/>
            A bitmap is packed when the bitmap array immediately follows the <b>BITMAPINFO</b> header.
            Packed bitmaps are referenced by a single pointer. For packed bitmaps, the <b>biClrUsed</b>
            member must be set to an even number when using the DIB_PAL_COLORS mode so that the DIB bitmap
            array starts on a <b>DWORD</b> boundary.
            <para/>
            <b>Note</b>  The <b>bmiColors</b> member should not contain palette indexes if the bitmap is to
            be stored in a file or transferred to another application.
            <para/>
            Unless the application has exclusive use and control of the bitmap, the bitmap color table
            should contain explicit RGB values.
            </remarks>
        </member>
        <member name="F:FreeImageAPI.BITMAPINFO.bmiHeader">
            <summary>
            Specifies a <see cref="T:FreeImageAPI.BITMAPINFOHEADER"/> structure that contains information
            about the dimensions of color format.
            </summary>
        </member>
        <member name="F:FreeImageAPI.BITMAPINFO.bmiColors">
            <summary>
            The <b>bmiColors</b> member contains one of the following:
            <list type="bullets">
            
            <item>
            <term>
            An array of <see cref="T:FreeImageAPI.RGBQUAD"/>. The elements of the array that make up the
            color table.
            </term>
            </item>
            
            <item>
            <term>
            An array of 16-bit unsigned integers that specifies indexes into the currently realized
            logical palette. This use of <b>bmiColors</b> is allowed for functions that use DIBs.
            When <b>bmiColors</b> elements contain indexes to a realized logical palette, they must
            also call the following bitmap functions:
            </term>
            </item>
            
            </list>
            <b>CreateDIBitmap</b>
            <para/>
            <b>CreateDIBPatternBrush</b>
            <para/>
            <b>CreateDIBSection</b>
            <para/>
            The <i>iUsage</i> parameter of CreateDIBSection must be set to DIB_PAL_COLORS.
            <para/>
            The number of entries in the array depends on the values of the <b>biBitCount</b> and
            <b>biClrUsed</b> members of the <see cref="T:FreeImageAPI.BITMAPINFOHEADER"/> structure.
            <para/>
            The colors in the <b>bmiColors</b> table appear in order of importance. For more information,
            see the Remarks section.
            </summary>
        </member>
        <member name="M:FreeImageAPI.BITMAPINFO.op_Equality(FreeImageAPI.BITMAPINFO,FreeImageAPI.BITMAPINFO)">
            <summary>
            Tests whether two specified <see cref="T:FreeImageAPI.BITMAPINFO"/> structures are equivalent.
            </summary>
            <param name="left">The <see cref="T:FreeImageAPI.BITMAPINFO"/> that is to the left of the equality operator.</param>
            <param name="right">The <see cref="T:FreeImageAPI.BITMAPINFO"/> that is to the right of the equality operator.</param>
            <returns>
            <b>true</b> if the two <see cref="T:FreeImageAPI.BITMAPINFO"/> structures are equal; otherwise, <b>false</b>.
            </returns>
        </member>
        <member name="M:FreeImageAPI.BITMAPINFO.op_Inequality(FreeImageAPI.BITMAPINFO,FreeImageAPI.BITMAPINFO)">
            <summary>
            Tests whether two specified <see cref="T:FreeImageAPI.BITMAPINFO"/> structures are different.
            </summary>
            <param name="left">The <see cref="T:FreeImageAPI.BITMAPINFO"/> that is to the left of the inequality operator.</param>
            <param name="right">The <see cref="T:FreeImageAPI.BITMAPINFO"/> that is to the right of the inequality operator.</param>
            <returns>
            <b>true</b> if the two <see cref="T:FreeImageAPI.BITMAPINFO"/> structures are different; otherwise, <b>false</b>.
            </returns>
        </member>
        <member name="M:FreeImageAPI.BITMAPINFO.Equals(FreeImageAPI.BITMAPINFO)">
            <summary>
            Tests whether the specified <see cref="T:FreeImageAPI.BITMAPINFO"/> structure is equivalent to this <see cref="T:FreeImageAPI.BITMAPINFO"/> structure.
            </summary>
            <param name="other">A <see cref="T:FreeImageAPI.BITMAPINFO"/> structure to compare to this instance.</param>
            <returns><b>true</b> if <paramref name="obj"/> is a <see cref="T:FreeImageAPI.BITMAPINFO"/> structure
            equivalent to this <see cref="T:FreeImageAPI.BITMAPINFO"/> structure; otherwise, <b>false</b>.</returns>
        </member>
        <member name="M:FreeImageAPI.BITMAPINFO.Equals(System.Object)">
            <summary>
            Tests whether the specified object is a <see cref="T:FreeImageAPI.BITMAPINFO"/> structure
            and is equivalent to this <see cref="T:FreeImageAPI.BITMAPINFO"/> structure.
            </summary>
            <param name="obj">The object to test.</param>
            <returns><b>true</b> if <paramref name="obj"/> is a <see cref="T:FreeImageAPI.BITMAPINFO"/> structure
            equivalent to this <see cref="T:FreeImageAPI.BITMAPINFO"/> structure; otherwise, <b>false</b>.</returns>
        </member>
        <member name="M:FreeImageAPI.BITMAPINFO.GetHashCode">
            <summary>
            Returns a hash code for this <see cref="T:FreeImageAPI.BITMAPINFO"/> structure.
            </summary>
            <returns>An integer value that specifies the hash code for this <see cref="T:FreeImageAPI.BITMAPINFO"/>.</returns>
        </member>
        <member name="T:FreeImageAPI.BITMAPINFOHEADER">
            <summary>
            This structure contains information about the dimensions and color format
            of a device-independent bitmap (DIB).
            </summary>
            <remarks>
            The <see cref="T:FreeImageAPI.BITMAPINFO"/> structure combines the
            <b>BITMAPINFOHEADER</b> structure and a color table to provide a complete
            definition of the dimensions and colors of a DIB.
            </remarks>
        </member>
        <member name="F:FreeImageAPI.BITMAPINFOHEADER.biSize">
            <summary>
            Specifies the size of the structure, in bytes.
            </summary>
        </member>
        <member name="F:FreeImageAPI.BITMAPINFOHEADER.biWidth">
            <summary>
            Specifies the width of the bitmap, in pixels.
            <para/>
            <b>Windows 98/Me, Windows 2000/XP:</b> If <b>biCompression</b> is BI_JPEG or BI_PNG,
            the <b>biWidth</b> member specifies the width of the decompressed JPEG or PNG image file,
            respectively.
            </summary>
        </member>
        <member name="F:FreeImageAPI.BITMAPINFOHEADER.biHeight">
            <summary>
            Specifies the height of the bitmap, in pixels. If <b>biHeight</b> is positive, the bitmap
            is a bottom-up DIB and its origin is the lower-left corner. If <b>biHeight</b> is negative,
            the bitmap is a top-down DIB and its origin is the upper-left corner. 
            <para/>
            If <b>biHeight</b> is negative, indicating a top-down DIB, <b>biCompression</b> must be
            either BI_RGB or BI_BITFIELDS. Top-down DIBs cannot be compressed.
            <para/>
            <b>Windows 98/Me, Windows 2000/XP:</b> If <b>biCompression</b> is BI_JPEG or BI_PNG,
            the <b>biHeight</b> member specifies the height of the decompressed JPEG or PNG image file,
            respectively.
            </summary>
        </member>
        <member name="F:FreeImageAPI.BITMAPINFOHEADER.biPlanes">
            <summary>
            Specifies the number of planes for the target device. This value must be set to 1.
            </summary>
        </member>
        <member name="F:FreeImageAPI.BITMAPINFOHEADER.biBitCount">
            <summary>
            Specifies the number of bits per pixel.The biBitCount member of the <b>BITMAPINFOHEADER</b>
            structure determines the number of bits that define each pixel and the maximum number of
            colors in the bitmap. This member must be one of the following values.
            <para/>
            
            <list type="table">
            <listheader>
            <term>Value</term>
            <description>Meaning</description>
            </listheader>
            
            <item>
            <term>0</term>
            <description>
            <b>Windows 98/Me, Windows 2000/XP:</b> The number of bits-per-pixel is specified
            or is implied by the JPEG or PNG format.
            </description>
            </item>
            
            <item>
            <term>1</term>
            <description>
            The bitmap is monochrome, and the bmiColors member of <see cref="T:FreeImageAPI.BITMAPINFO"/>
            contains two entries. Each bit in the bitmap array represents a pixel. If the bit is clear,
            the pixel is displayed with the color of the first entry in the bmiColors table; if the bit
            is set, the pixel has the color of the second entry in the table.
            </description>
            </item>
            
            <item>
            <term>4</term>
            <description>
            The bitmap has a maximum of 16 colors, and the <b>bmiColors</b> member of <b>BITMAPINFO</b>
            contains up to 16 entries. Each pixel in the bitmap is represented by a 4-bit index into the
            color table. For example, if the first byte in the bitmap is 0x1F, the byte represents two
            pixels. The first pixel contains the color in the second table entry, and the second pixel
            contains the color in the sixteenth table entry.</description>
            </item>
            
            <item>
            <term>8</term>
            <description>
            The bitmap has a maximum of 256 colors, and the <b>bmiColors</b> member of <b>BITMAPINFO</b>
            contains up to 256 entries. In this case, each byte in the array represents a single pixel.
            </description>
            </item>
            
            <item>
            <term>16</term>
            <description>
            The bitmap has a maximum of 2^16 colors. If the <b>biCompression</b> member of the
            <b>BITMAPINFOHEADER</b> is BI_RGB, the <b>bmiColors</b> member of <b>BITMAPINFO</b> is NULL.
            Each <b>WORD</b> in the bitmap array represents a single pixel. The relative intensities
            of red, green, and blue are represented with five bits for each color component.
            The value for blue is in the least significant five bits, followed by five bits each for
            green and red. The most significant bit is not used. The <b>bmiColors</b> color table is used
            for optimizing colors used on palette-based devices, and must contain the number of entries
            specified by the <b>biClrUsed</b> member of the <b>BITMAPINFOHEADER</b>.
            <para/>
            If the <b>biCompression</b> member of the <b>BITMAPINFOHEADER</b> is BI_BITFIELDS, the
            <b>bmiColors</b> member contains three <b>DWORD</b> color masks that specify the red, green,
            and blue components, respectively, of each pixel. Each <b>WORD</b> in the bitmap array represents
            a single pixel.
            <para/>
            <b>Windows NT/Windows 2000/XP:</b> When the <b>biCompression</b> member is BI_BITFIELDS,
            bits set in each <b>DWORD</b> mask must be contiguous and should not overlap the bits
            of another mask. All the bits in the pixel do not have to be used.
            <para/>
            <b>Windows 95/98/Me:</b> When the <b>biCompression</b> member is BI_BITFIELDS, the system
            supports only the following 16bpp color masks: A 5-5-5 16-bit image, where the blue mask is
            0x001F, the green mask is 0x03E0, and the red mask is 0x7C00; and a 5-6-5 16-bit image,
            where the blue mask is 0x001F, the green mask is 0x07E0, and the red mask is 0xF800.
            </description>
            </item>
            
            <item>
            <term>24</term>
            <description>
            The bitmap has a maximum of 2^24 colors, and the <b>bmiColors</b> member of <b>BITMAPINFO</b>
            is NULL. Each 3-byte triplet in the bitmap array represents the relative intensities of blue,
            green, and red, respectively, for a pixel. The <b>bmiColors</b> color table is used for
            optimizing colors used on palette-based devices, and must contain the number of entries
            specified by the <b>biClrUsed</b> member of the <b>BITMAPINFOHEADER</b>.
            </description>
            </item>
            
            <item>
            <term>32</term>
            <description>
            The bitmap has a maximum of 2^32 colors. If the <b>biCompression</b> member of the
            <b>BITMAPINFOHEADER</b> is BI_RGB, the <b>bmiColors</b> member of <b>BITMAPINFO</b> is NULL.
            Each <b>DWORD</b> in the bitmap array represents the relative intensities of blue, green, and red,
            respectively, for a pixel. The high byte in each <b>DWORD</b> is not used. The <b>bmiColors</b>
            color table is used for optimizing colors used on palette-based devices, and must contain the 
            number of entries specified by the <b>biClrUsed</b> member of the <b>BITMAPINFOHEADER</b>.
            <para/>
            If the <b>biCompression</b> member of the <b>BITMAPINFOHEADER</b> is BI_BITFIELDS,
            the <b>bmiColors</b> member contains three <b>DWORD</b> color masks that specify the red, green,
            and blue components, respectively, of each pixel. Each <b>DWORD</b> in the bitmap array represents
            a single pixel.
            <para/>
            <b>Windows NT/ 2000:</b> When the <b>biCompression</b> member is BI_BITFIELDS, bits set in each
            <b>DWORD</b> mask must be contiguous and should not overlap the bits of another mask. All the
            bits in the pixel do not need to be used.
            <para/>
            <b>Windows 95/98/Me:</b> When the <b>biCompression</b> member is BI_BITFIELDS, the system
            supports only the following 32-bpp color mask: The blue mask is 0x000000FF, the green mask is
            0x0000FF00, and the red mask is 0x00FF0000.
            </description>
            </item>
            </list>
            </summary>
        </member>
        <member name="F:FreeImageAPI.BITMAPINFOHEADER.biCompression">
            <summary>
            Specifies the type of compression for a compressed bottom-up bitmap (top-down DIBs cannot be
            compressed).
            <list type="table">
            <listheader>
            <term>Value</term>
            <description>Meaning</description>
            </listheader>
            
            <item>
            <term>BI_RGB</term>
            <description>An uncompressed format.</description>
            </item>
            
            <item>
            <term>BI_RLE8</term>
            <description>A run-length encoded (RLE) format for bitmaps with 8 bpp. The compression format
            is a 2-byte format consisting of a count byte followed by a byte containing a color index.
            </description>
            </item>
            
            <item>
            <term>BI_RLE4</term>
            <description>An RLE format for bitmaps with 4 bpp. The compression format is a 2-byte format
            consisting of a count byte followed by two word-length color indexes.</description>
            </item>
            
            <item>
            <term>BI_BITFIELDS</term>
            <description>Specifies that the bitmap is not compressed and that the color table consists
            of three <b>DWORD</b> color masks that specify the red, green, and blue components, respectively,
            of each pixel. This is valid when used with 16- and 32-bpp bitmaps.</description>
            </item>
            
            <item>
            <term>BI_JPEG</term>
            <description><b>Windows 98/Me, Windows 2000/XP:</b> Indicates that the image is a JPEG image.
            </description>
            </item>
            
            <item>
            <term>BI_PNG</term>
            <description><b>Windows 98/Me, Windows 2000/XP:</b> Indicates that the image is a PNG image.
            </description>
            </item>
            
            </list>
            </summary>
        </member>
        <member name="F:FreeImageAPI.BITMAPINFOHEADER.biSizeImage">
            <summary>
            Specifies the size, in bytes, of the image. This may be set to zero for BI_RGB bitmaps.
            <para/>
            <b>Windows 98/Me, Windows 2000/XP:</b> If <b>biCompression</b> is BI_JPEG or BI_PNG,
            <b>biSizeImage</b> indicates the size of the JPEG or PNG image buffer, respectively.
            </summary>
        </member>
        <member name="F:FreeImageAPI.BITMAPINFOHEADER.biXPelsPerMeter">
            <summary>
            Specifies the horizontal resolution, in pixels-per-meter, of the target device for the bitmap.
            An application can use this value to select a bitmap from a resource group that best matches
            the characteristics of the current device.
            </summary>
        </member>
        <member name="F:FreeImageAPI.BITMAPINFOHEADER.biYPelsPerMeter">
            <summary>
            Specifies the vertical resolution, in pixels-per-meter, of the target device for the bitmap.
            </summary>
        </member>
        <member name="F:FreeImageAPI.BITMAPINFOHEADER.biClrUsed">
            <summary>
            Specifies the number of color indexes in the color table that are actually used by the bitmap.
            If this value is zero, the bitmap uses the maximum number of colors corresponding to the value
            of the biBitCount member for the compression mode specified by <b>biCompression</b>.
            <para/>
            If <b>iClrUsed</b> is nonzero and the <b>biBitCount</b> member is less than 16, the <b>biClrUsed</b>
            member specifies the actual number of colors the graphics engine or device driver accesses.
            If <b>biBitCount</b> is 16 or greater, the <b>biClrUsed</b> member specifies the size of the color
            table used to optimize performance of the system color palettes. If <b>biBitCount</b> equals 16 or 32,
            the optimal color palette starts immediately following the three <b>DWORD</b> masks.
            <para/>
            When the bitmap array immediately follows the <see cref="T:FreeImageAPI.BITMAPINFO"/> structure, it is a packed bitmap.
            Packed bitmaps are referenced by a single pointer. Packed bitmaps require that the
            <b>biClrUsed</b> member must be either zero or the actual size of the color table.
            </summary>
        </member>
        <member name="F:FreeImageAPI.BITMAPINFOHEADER.biClrImportant">
            <summary>
            Specifies the number of color indexes that are required for displaying the bitmap. If this value
            is zero, all colors are required.
            </summary>
        </member>
        <member name="M:FreeImageAPI.BITMAPINFOHEADER.op_Equality(FreeImageAPI.BITMAPINFOHEADER,FreeImageAPI.BITMAPINFOHEADER)">
            <summary>
            Tests whether two specified <see cref="T:FreeImageAPI.BITMAPINFOHEADER"/> structures are equivalent.
            </summary>
            <param name="left">The <see cref="T:FreeImageAPI.BITMAPINFOHEADER"/> that is to the left of the equality operator.</param>
            <param name="right">The <see cref="T:FreeImageAPI.BITMAPINFOHEADER"/> that is to the right of the equality operator.</param>
            <returns>
            <b>true</b> if the two <see cref="T:FreeImageAPI.BITMAPINFOHEADER"/> structures are equal; otherwise, <b>false</b>.
            </returns>
        </member>
        <member name="M:FreeImageAPI.BITMAPINFOHEADER.op_Inequality(FreeImageAPI.BITMAPINFOHEADER,FreeImageAPI.BITMAPINFOHEADER)">
            <summary>
            Tests whether two specified <see cref="T:FreeImageAPI.BITMAPINFOHEADER"/> structures are different.
            </summary>
            <param name="left">The <see cref="T:FreeImageAPI.BITMAPINFOHEADER"/> that is to the left of the inequality operator.</param>
            <param name="right">The <see cref="T:FreeImageAPI.BITMAPINFOHEADER"/> that is to the right of the inequality operator.</param>
            <returns>
            <b>true</b> if the two <see cref="T:FreeImageAPI.BITMAPINFOHEADER"/> structures are different; otherwise, <b>false</b>.
            </returns>
        </member>
        <member name="M:FreeImageAPI.BITMAPINFOHEADER.Equals(FreeImageAPI.BITMAPINFOHEADER)">
            <summary>
            Tests whether the specified <see cref="T:FreeImageAPI.BITMAPINFOHEADER"/> structure is equivalent to this <see cref="T:FreeImageAPI.BITMAPINFOHEADER"/> structure.
            </summary>
            <param name="other">A <see cref="T:FreeImageAPI.BITMAPINFOHEADER"/> structure to compare to this instance.</param>
            <returns><b>true</b> if <paramref name="obj"/> is a <see cref="T:FreeImageAPI.BITMAPINFOHEADER"/> structure
            equivalent to this <see cref="T:FreeImageAPI.BITMAPINFOHEADER"/> structure; otherwise, <b>false</b>.</returns>
        </member>
        <member name="M:FreeImageAPI.BITMAPINFOHEADER.Equals(System.Object)">
            <summary>
            Tests whether the specified object is a <see cref="T:FreeImageAPI.BITMAPINFOHEADER"/> structure
            and is equivalent to this <see cref="T:FreeImageAPI.BITMAPINFOHEADER"/> structure.
            </summary>
            <param name="obj">The object to test.</param>
            <returns><b>true</b> if <paramref name="obj"/> is a <see cref="T:FreeImageAPI.BITMAPINFOHEADER"/> structure
            equivalent to this <see cref="T:FreeImageAPI.BITMAPINFOHEADER"/> structure; otherwise, <b>false</b>.</returns>
        </member>
        <member name="M:FreeImageAPI.BITMAPINFOHEADER.GetHashCode">
            <summary>
            Returns a hash code for this <see cref="T:FreeImageAPI.BITMAPINFOHEADER"/> structure.
            </summary>
            <returns>An integer value that specifies the hash code for this <see cref="T:FreeImageAPI.BITMAPINFOHEADER"/>.</returns>
        </member>
        <member name="T:FreeImageAPI.FI16RGB555">
            <summary>
            The <b>FI16RGB555</b> structure describes a color consisting of relative
            intensities of red, green, blue and alpha value. Each single color
            component consumes 5 bits and so, takes values in the range from 0 to 31.
            </summary>
            <remarks>
            <para>For easy integration of the underlying structure into the .NET framework,
            the <b>FI16RGB555</b> structure implements implicit conversion operators to 
            convert the represented color to and from the <see cref="T:System.Drawing.Color"/>
            type. This makes the <see cref="T:System.Drawing.Color"/> type a real replacement
            for the <b>FI16RGB555</b> structure and my be used in all situations which require
            an <b>FI16RGB555</b> type.
            </para>
            </remarks>
            <example>
            The following code example demonstrates the various conversions between the
            <b>FI16RGB555</b> structure and the <see cref="T:System.Drawing.Color"/> structure.
            <code>
            FI16RGB555 fi16rgb;
            // Initialize the structure using a native .NET Color structure.
            fi16rgb = new FI16RGB555(Color.Indigo);
            // Initialize the structure using the implicit operator.
            fi16rgb = Color.DarkSeaGreen;
            // Convert the FI16RGB555 instance into a native .NET Color
            // using its implicit operator.
            Color color = fi16rgb;
            // Using the structure's Color property for converting it
            // into a native .NET Color.
            Color another = fi16rgb.Color;
            </code>
            </example>
        </member>
        <member name="F:FreeImageAPI.FI16RGB555.value">
            <summary>
            The value of the color.
            </summary>
        </member>
        <member name="M:FreeImageAPI.FI16RGB555.#ctor(System.Drawing.Color)">
            <summary>
            Initializes a new instance based on the specified <see cref="T:System.Drawing.Color"/>.
            </summary>
            <param name="color"><see cref="T:System.Drawing.Color"/> to initialize with.</param>
        </member>
        <member name="M:FreeImageAPI.FI16RGB555.op_Equality(FreeImageAPI.FI16RGB555,FreeImageAPI.FI16RGB555)">
            <summary>
            Tests whether two specified <see cref="T:FreeImageAPI.FI16RGB555"/> structures are equivalent.
            </summary>
            <param name="left">The <see cref="T:FreeImageAPI.FI16RGB555"/> that is to the left of the equality operator.</param>
            <param name="right">The <see cref="T:FreeImageAPI.FI16RGB555"/> that is to the right of the equality operator.</param>
            <returns>
            <b>true</b> if the two <see cref="T:FreeImageAPI.FI16RGB555"/> structures are equal; otherwise, <b>false</b>.
            </returns>
        </member>
        <member name="M:FreeImageAPI.FI16RGB555.op_Inequality(FreeImageAPI.FI16RGB555,FreeImageAPI.FI16RGB555)">
            <summary>
            Tests whether two specified <see cref="T:FreeImageAPI.FI16RGB555"/> structures are different.
            </summary>
            <param name="left">The <see cref="T:FreeImageAPI.FI16RGB555"/> that is to the left of the inequality operator.</param>
            <param name="right">The <see cref="T:FreeImageAPI.FI16RGB555"/> that is to the right of the inequality operator.</param>
            <returns>
            <b>true</b> if the two <see cref="T:FreeImageAPI.FI16RGB555"/> structures are different; otherwise, <b>false</b>.
            </returns>
        </member>
        <member name="M:FreeImageAPI.FI16RGB555.op_Implicit(System.Drawing.Color)~FreeImageAPI.FI16RGB555">
            <summary>
            Converts the value of a <see cref="T:System.Drawing.Color"/> structure to a <see cref="T:FreeImageAPI.FI16RGB555"/> structure.
            </summary>
            <param name="value">A <see cref="T:System.Drawing.Color"/> structure.</param>
            <returns>A new instance of <see cref="T:FreeImageAPI.FI16RGB555"/> initialized to <paramref name="value"/>.</returns>
        </member>
        <member name="M:FreeImageAPI.FI16RGB555.op_Implicit(FreeImageAPI.FI16RGB555)~System.Drawing.Color">
            <summary>
            Converts the value of a <see cref="T:FreeImageAPI.FI16RGB555"/> structure to a <see cref="T:System.Drawing.Color"/> structure.
            </summary>
            <param name="value">A <see cref="T:FreeImageAPI.FI16RGB555"/> structure.</param>
            <returns>A new instance of <see cref="T:System.Drawing.Color"/> initialized to <paramref name="value"/>.</returns>
        </member>
        <member name="M:FreeImageAPI.FI16RGB555.CompareTo(System.Object)">
            <summary>
            Compares this instance with a specified <see cref="T:System.Object"/>.
            </summary>
            <param name="obj">An object to compare with this instance.</param>
            <returns>A 32-bit signed integer indicating the lexical relationship between the two comparands.</returns>
            <exception cref="T:System.ArgumentException"><paramref name="obj"/> is not a <see cref="T:FreeImageAPI.FI16RGB555"/>.</exception>
        </member>
        <member name="M:FreeImageAPI.FI16RGB555.CompareTo(FreeImageAPI.FI16RGB555)">
            <summary>
            Compares this instance with a specified <see cref="T:FreeImageAPI.FI16RGB555"/> object.
            </summary>
            <param name="other">A <see cref="T:FreeImageAPI.FI16RGB555"/> to compare.</param>
            <returns>A signed number indicating the relative values of this instance
            and <paramref name="other"/>.</returns>
        </member>
        <member name="M:FreeImageAPI.FI16RGB555.Equals(System.Object)">
            <summary>
            Tests whether the specified object is a <see cref="T:FreeImageAPI.FI16RGB555"/> structure
            and is equivalent to this <see cref="T:FreeImageAPI.FI16RGB555"/> structure.
            </summary>
            <param name="obj">The object to test.</param>
            <returns><b>true</b> if <paramref name="obj"/> is a <see cref="T:FreeImageAPI.FI16RGB555"/> structure
            equivalent to this <see cref="T:FreeImageAPI.FI16RGB555"/> structure; otherwise, <b>false</b>.</returns>
        </member>
        <member name="M:FreeImageAPI.FI16RGB555.Equals(FreeImageAPI.FI16RGB555)">
            <summary>
            Tests whether the specified <see cref="T:FreeImageAPI.FI16RGB555"/> structure is equivalent to this <see cref="T:FreeImageAPI.FI16RGB555"/> structure.
            </summary>
            <param name="other">A <see cref="T:FreeImageAPI.FI16RGB555"/> structure to compare to this instance.</param>
            <returns><b>true</b> if <paramref name="obj"/> is a <see cref="T:FreeImageAPI.FI16RGB555"/> structure
            equivalent to this <see cref="T:FreeImageAPI.FI16RGB555"/> structure; otherwise, <b>false</b>.</returns>
        </member>
        <member name="M:FreeImageAPI.FI16RGB555.GetHashCode">
            <summary>
            Returns a hash code for this <see cref="T:FreeImageAPI.FI16RGB555"/> structure.
            </summary>
            <returns>An integer value that specifies the hash code for this <see cref="T:FreeImageAPI.FI16RGB555"/>.</returns>
        </member>
        <member name="M:FreeImageAPI.FI16RGB555.ToString">
            <summary>
            Converts the numeric value of the <see cref="T:FreeImageAPI.FI16RGB555"/> object
            to its equivalent string representation.
            </summary>
            <returns>The string representation of the value of this instance.</returns>
        </member>
        <member name="P:FreeImageAPI.FI16RGB555.Color">
            <summary>
            Gets or sets the <see cref="T:System.Drawing.Color"/> of the structure.
            </summary>
        </member>
        <member name="P:FreeImageAPI.FI16RGB555.Red">
            <summary>
            Gets or sets the red color component.
            </summary>
        </member>
        <member name="P:FreeImageAPI.FI16RGB555.Green">
            <summary>
            Gets or sets the green color component.
            </summary>
        </member>
        <member name="P:FreeImageAPI.FI16RGB555.Blue">
            <summary>
            Gets or sets the blue color component.
            </summary>
        </member>
        <member name="T:FreeImageAPI.FI16RGB565">
            <summary>
            The <b>FI16RGB565</b> structure describes a color consisting of relative
            intensities of red, green, blue and alpha value. Each single color
            component consumes 5 bits and so, takes values in the range from 0 to 31.
            </summary>
            <remarks>
            <para>For easy integration of the underlying structure into the .NET framework,
            the <b>FI16RGB565</b> structure implements implicit conversion operators to 
            convert the represented color to and from the <see cref="T:System.Drawing.Color"/>
            type. This makes the <see cref="T:System.Drawing.Color"/> type a real replacement
            for the <b>FI16RGB565</b> structure and my be used in all situations which require
            an <b>FI16RGB565</b> type.
            </para>
            </remarks>
            <example>
            The following code example demonstrates the various conversions between the
            <b>FI16RGB565</b> structure and the <see cref="T:System.Drawing.Color"/> structure.
            <code>
            FI16RGB565 fi16rgb;
            // Initialize the structure using a native .NET Color structure.
            fi16rgb = new FI16RGB565(Color.Indigo);
            // Initialize the structure using the implicit operator.
            fi16rgb = Color.DarkSeaGreen;
            // Convert the FI16RGB565 instance into a native .NET Color
            // using its implicit operator.
            Color color = fi16rgb;
            // Using the structure's Color property for converting it
            // into a native .NET Color.
            Color another = fi16rgb.Color;
            </code>
            </example>
        </member>
        <member name="F:FreeImageAPI.FI16RGB565.value">
            <summary>
            The value of the color.
            </summary>
        </member>
        <member name="M:FreeImageAPI.FI16RGB565.#ctor(System.Drawing.Color)">
            <summary>
            Initializes a new instance based on the specified <see cref="T:System.Drawing.Color"/>.
            </summary>
            <param name="color"><see cref="T:System.Drawing.Color"/> to initialize with.</param>
        </member>
        <member name="M:FreeImageAPI.FI16RGB565.op_Equality(FreeImageAPI.FI16RGB565,FreeImageAPI.FI16RGB565)">
            <summary>
            Tests whether two specified <see cref="T:FreeImageAPI.FI16RGB565"/> structures are equivalent.
            </summary>
            <param name="left">The <see cref="T:FreeImageAPI.FI16RGB565"/> that is to the left of the equality operator.</param>
            <param name="right">The <see cref="T:FreeImageAPI.FI16RGB565"/> that is to the right of the equality operator.</param>
            <returns>
            <b>true</b> if the two <see cref="T:FreeImageAPI.FI16RGB565"/> structures are equal; otherwise, <b>false</b>.
            </returns>
        </member>
        <member name="M:FreeImageAPI.FI16RGB565.op_Inequality(FreeImageAPI.FI16RGB565,FreeImageAPI.FI16RGB565)">
            <summary>
            Tests whether two specified <see cref="T:FreeImageAPI.FI16RGB565"/> structures are different.
            </summary>
            <param name="left">The <see cref="T:FreeImageAPI.FI16RGB565"/> that is to the left of the inequality operator.</param>
            <param name="right">The <see cref="T:FreeImageAPI.FI16RGB565"/> that is to the right of the inequality operator.</param>
            <returns>
            <b>true</b> if the two <see cref="T:FreeImageAPI.FI16RGB565"/> structures are different; otherwise, <b>false</b>.
            </returns>
        </member>
        <member name="M:FreeImageAPI.FI16RGB565.op_Implicit(System.Drawing.Color)~FreeImageAPI.FI16RGB565">
            <summary>
            Converts the value of a <see cref="T:System.Drawing.Color"/> structure to a <see cref="T:FreeImageAPI.FI16RGB565"/> structure.
            </summary>
            <param name="value">A <see cref="T:System.Drawing.Color"/> structure.</param>
            <returns>A new instance of <see cref="T:FreeImageAPI.FI16RGB565"/> initialized to <paramref name="value"/>.</returns>
        </member>
        <member name="M:FreeImageAPI.FI16RGB565.op_Implicit(FreeImageAPI.FI16RGB565)~System.Drawing.Color">
            <summary>
            Converts the value of a <see cref="T:FreeImageAPI.FI16RGB565"/> structure to a <see cref="T:System.Drawing.Color"/> structure.
            </summary>
            <param name="value">A <see cref="T:FreeImageAPI.FI16RGB565"/> structure.</param>
            <returns>A new instance of <see cref="T:System.Drawing.Color"/> initialized to <paramref name="value"/>.</returns>
        </member>
        <member name="M:FreeImageAPI.FI16RGB565.CompareTo(System.Object)">
            <summary>
            Compares this instance with a specified <see cref="T:System.Object"/>.
            </summary>
            <param name="obj">An object to compare with this instance.</param>
            <returns>A 32-bit signed integer indicating the lexical relationship between the two comparands.</returns>
            <exception cref="T:System.ArgumentException"><paramref name="obj"/> is not a <see cref="T:FreeImageAPI.FI16RGB565"/>.</exception>
        </member>
        <member name="M:FreeImageAPI.FI16RGB565.CompareTo(FreeImageAPI.FI16RGB565)">
            <summary>
            Compares this instance with a specified <see cref="T:FreeImageAPI.FI16RGB565"/> object.
            </summary>
            <param name="other">A <see cref="T:FreeImageAPI.FI16RGB565"/> to compare.</param>
            <returns>A signed number indicating the relative values of this instance
            and <paramref name="other"/>.</returns>
        </member>
        <member name="M:FreeImageAPI.FI16RGB565.Equals(System.Object)">
            <summary>
            Tests whether the specified object is a <see cref="T:FreeImageAPI.FI16RGB565"/> structure
            and is equivalent to this <see cref="T:FreeImageAPI.FI16RGB565"/> structure.
            </summary>
            <param name="obj">The object to test.</param>
            <returns><b>true</b> if <paramref name="obj"/> is a <see cref="T:FreeImageAPI.FI16RGB565"/> structure
            equivalent to this <see cref="T:FreeImageAPI.FI16RGB565"/> structure; otherwise, <b>false</b>.</returns>
        </member>
        <member name="M:FreeImageAPI.FI16RGB565.Equals(FreeImageAPI.FI16RGB565)">
            <summary>
            Tests whether the specified <see cref="T:FreeImageAPI.FI16RGB565"/> structure is equivalent to this <see cref="T:FreeImageAPI.FI16RGB565"/> structure.
            </summary>
            <param name="other">A <see cref="T:FreeImageAPI.FI16RGB565"/> structure to compare to this instance.</param>
            <returns><b>true</b> if <paramref name="obj"/> is a <see cref="T:FreeImageAPI.FI16RGB565"/> structure
            equivalent to this <see cref="T:FreeImageAPI.FI16RGB565"/> structure; otherwise, <b>false</b>.</returns>
        </member>
        <member name="M:FreeImageAPI.FI16RGB565.GetHashCode">
            <summary>
            Returns a hash code for this <see cref="T:FreeImageAPI.FI16RGB565"/> structure.
            </summary>
            <returns>An integer value that specifies the hash code for this <see cref="T:FreeImageAPI.FI16RGB565"/>.</returns>
        </member>
        <member name="M:FreeImageAPI.FI16RGB565.ToString">
            <summary>
            Converts the numeric value of the <see cref="T:FreeImageAPI.FI16RGB565"/> object
            to its equivalent string representation.
            </summary>
            <returns>The string representation of the value of this instance.</returns>
        </member>
        <member name="P:FreeImageAPI.FI16RGB565.Color">
            <summary>
            Gets or sets the <see cref="T:System.Drawing.Color"/> of the structure.
            </summary>
        </member>
        <member name="P:FreeImageAPI.FI16RGB565.Red">
            <summary>
            Gets or sets the red color component.
            </summary>
        </member>
        <member name="P:FreeImageAPI.FI16RGB565.Green">
            <summary>
            Gets or sets the green color component.
            </summary>
        </member>
        <member name="P:FreeImageAPI.FI16RGB565.Blue">
            <summary>
            Gets or sets the blue color component.
            </summary>
        </member>
        <member name="T:FreeImageAPI.FI1BIT">
            <summary>
            The <b>FI1BIT</b> structure represents a single bit.
            It's value can be <i>0</i> or <i>1</i>.
            </summary>
        </member>
        <member name="F:FreeImageAPI.FI1BIT.MaxValue">
            <summary>
            Represents the largest possible value of <see cref="T:FreeImageAPI.FI1BIT"/>. This field is constant.
            </summary>
        </member>
        <member name="F:FreeImageAPI.FI1BIT.MinValue">
            <summary>
            Represents the smallest possible value of <see cref="T:FreeImageAPI.FI1BIT"/>. This field is constant.
            </summary>
        </member>
        <member name="F:FreeImageAPI.FI1BIT.value">
            <summary>
            The value of the structure.
            </summary>
        </member>
        <member name="M:FreeImageAPI.FI1BIT.#ctor(System.Byte)">
            <summary>
            Initializes a new instance based on the specified value.
            </summary>
            <param name="value">The value to initialize with.</param>
        </member>
        <member name="M:FreeImageAPI.FI1BIT.op_Implicit(FreeImageAPI.FI1BIT)~System.Byte">
            <summary>
            Converts the value of a <see cref="T:FreeImageAPI.FI1BIT"/> structure to a <see cref="T:System.Byte"/> structure.
            </summary>
            <param name="value">A <see cref="T:FreeImageAPI.FI1BIT"/> structure.</param>
            <returns>A new instance of <see cref="T:FreeImageAPI.FI1BIT"/> initialized to <paramref name="value"/>.</returns>
        </member>
        <member name="M:FreeImageAPI.FI1BIT.op_Implicit(System.Byte)~FreeImageAPI.FI1BIT">
            <summary>
            Converts the value of a <see cref="T:System.Byte"/> structure to a <see cref="T:FreeImageAPI.FI1BIT"/> structure.
            </summary>
            <param name="value">A <see cref="T:System.Byte"/> structure.</param>
            <returns>A new instance of <see cref="T:FreeImageAPI.FI1BIT"/> initialized to <paramref name="value"/>.</returns>
        </member>
        <member name="M:FreeImageAPI.FI1BIT.ToString">
            <summary>
            Converts the numeric value of the <see cref="T:FreeImageAPI.FI1BIT"/> object
            to its equivalent string representation.
            </summary>
            <returns>The string representation of the value of this instance.</returns>
        </member>
        <member name="T:FreeImageAPI.FI4BIT">
            <summary>
            The <b>FI4BIT</b> structure represents the half of a <see cref="T:System.Byte"/>.
            It's valuerange is between <i>0</i> and <i>15</i>.
            </summary>
        </member>
        <member name="F:FreeImageAPI.FI4BIT.MaxValue">
            <summary>
            Represents the largest possible value of <see cref="T:FreeImageAPI.FI4BIT"/>. This field is constant.
            </summary>
        </member>
        <member name="F:FreeImageAPI.FI4BIT.MinValue">
            <summary>
            Represents the smallest possible value of <see cref="T:FreeImageAPI.FI4BIT"/>. This field is constant.
            </summary>
        </member>
        <member name="F:FreeImageAPI.FI4BIT.value">
            <summary>
            The value of the structure.
            </summary>
        </member>
        <member name="M:FreeImageAPI.FI4BIT.#ctor(System.Byte)">
            <summary>
            Initializes a new instance based on the specified value.
            </summary>
            <param name="value">The value to initialize with.</param>
        </member>
        <member name="M:FreeImageAPI.FI4BIT.op_Implicit(FreeImageAPI.FI4BIT)~System.Byte">
            <summary>
            Converts the value of a <see cref="T:FreeImageAPI.FI4BIT"/> structure to a <see cref="T:System.Byte"/> structure.
            </summary>
            <param name="value">A <see cref="T:FreeImageAPI.FI4BIT"/> structure.</param>
            <returns>A new instance of <see cref="T:FreeImageAPI.FI4BIT"/> initialized to <paramref name="value"/>.</returns>
        </member>
        <member name="M:FreeImageAPI.FI4BIT.op_Implicit(System.Byte)~FreeImageAPI.FI4BIT">
            <summary>
            Converts the value of a <see cref="T:System.Byte"/> structure to a <see cref="T:FreeImageAPI.FI4BIT"/> structure.
            </summary>
            <param name="value">A <see cref="T:System.Byte"/> structure.</param>
            <returns>A new instance of <see cref="T:FreeImageAPI.FI4BIT"/> initialized to <paramref name="value"/>.</returns>
        </member>
        <member name="M:FreeImageAPI.FI4BIT.ToString">
            <summary>
            Converts the numeric value of the <see cref="T:FreeImageAPI.FI4BIT"/> object
            to its equivalent string representation.
            </summary>
            <returns>The string representation of the value of this instance.</returns>
        </member>
        <member name="T:FreeImageAPI.FIBITMAP">
            <summary>
            The <b>FIBITMAP</b> structure is a handle to a FreeImage bimtap.
            </summary>
            <remarks>
            The handle represented by a <b>FIBITBAP</b> structure provides
            access to either a singlepage bitmap or exactly one page of
            a multipage bitmap.
            </remarks>
        </member>
        <member name="F:FreeImageAPI.FIBITMAP.Zero">
            <summary>
            A read-only field that represents a handle that has been initialized to zero.
            </summary>
        </member>
        <member name="M:FreeImageAPI.FIBITMAP.op_Equality(FreeImageAPI.FIBITMAP,FreeImageAPI.FIBITMAP)">
            <summary>
            Tests whether two specified <see cref="T:FreeImageAPI.FIBITMAP"/> structures are equivalent.
            </summary>
            <param name="left">The <see cref="T:FreeImageAPI.FIBITMAP"/> that is to the left of the equality operator.</param>
            <param name="right">The <see cref="T:FreeImageAPI.FIBITMAP"/> that is to the right of the equality operator.</param>
            <returns>
            <b>true</b> if the two <see cref="T:FreeImageAPI.FIBITMAP"/> structures are equal; otherwise, <b>false</b>.
            </returns>
        </member>
        <member name="M:FreeImageAPI.FIBITMAP.op_Inequality(FreeImageAPI.FIBITMAP,FreeImageAPI.FIBITMAP)">
            <summary>
            Tests whether two specified <see cref="T:FreeImageAPI.FIBITMAP"/> structures are different.
            </summary>
            <param name="left">The <see cref="T:FreeImageAPI.FIBITMAP"/> that is to the left of the inequality operator.</param>
            <param name="right">The <see cref="T:FreeImageAPI.FIBITMAP"/> that is to the right of the inequality operator.</param>
            <returns>
            <b>true</b> if the two <see cref="T:FreeImageAPI.FIBITMAP"/> structures are different; otherwise, <b>false</b>.
            </returns>
        </member>
        <member name="M:FreeImageAPI.FIBITMAP.SetNull">
            <summary>
            Sets the handle to <i>null</i>.
            </summary>
        </member>
        <member name="M:FreeImageAPI.FIBITMAP.ToString">
            <summary>
            Converts the numeric value of the <see cref="T:FreeImageAPI.FIBITMAP"/> object
            to its equivalent string representation.
            </summary>
            <returns>The string representation of the value of this instance.</returns>
        </member>
        <member name="M:FreeImageAPI.FIBITMAP.GetHashCode">
            <summary>
            Returns a hash code for this <see cref="T:FreeImageAPI.FIBITMAP"/> structure.
            </summary>
            <returns>An integer value that specifies the hash code for this <see cref="T:FreeImageAPI.FIBITMAP"/>.</returns>
        </member>
        <member name="M:FreeImageAPI.FIBITMAP.Equals(System.Object)">
            <summary>
            Determines whether the specified <see cref="T:System.Object"/> is equal to the current <see cref="T:System.Object"/>.
            </summary>
            <param name="obj">The <see cref="T:System.Object"/> to compare with the current <see cref="T:System.Object"/>.</param>
            <returns><b>true</b> if the specified <see cref="T:System.Object"/> is equal to the current <see cref="T:System.Object"/>; otherwise, <b>false</b>.</returns>
        </member>
        <member name="M:FreeImageAPI.FIBITMAP.Equals(FreeImageAPI.FIBITMAP)">
            <summary>
            Indicates whether the current object is equal to another object of the same type.
            </summary>
            <param name="other">An object to compare with this object.</param>
            <returns><b>true</b> if the current object is equal to the other parameter; otherwise, <b>false</b>.</returns>
        </member>
        <member name="M:FreeImageAPI.FIBITMAP.CompareTo(System.Object)">
            <summary>
            Compares this instance with a specified <see cref="T:System.Object"/>.
            </summary>
            <param name="obj">An object to compare with this instance.</param>
            <returns>A 32-bit signed integer indicating the lexical relationship between the two comparands.</returns>
            <exception cref="T:System.ArgumentException"><paramref name="obj"/> is not a <see cref="T:FreeImageAPI.FIBITMAP"/>.</exception>
        </member>
        <member name="M:FreeImageAPI.FIBITMAP.CompareTo(FreeImageAPI.FIBITMAP)">
            <summary>
            Compares this instance with a specified <see cref="T:FreeImageAPI.FIBITMAP"/> object.
            </summary>
            <param name="other">A <see cref="T:FreeImageAPI.FIBITMAP"/> to compare.</param>
            <returns>A signed number indicating the relative values of this instance
            and <paramref name="other"/>.</returns>
        </member>
        <member name="P:FreeImageAPI.FIBITMAP.IsNull">
            <summary>
            Gets whether the handle is a null or not.
            </summary>
            <value><b>true</b> if this <see cref="T:FreeImageAPI.FIBITMAP"/> handle is a null;
            otherwise, <b>false</b>.</value>		
        </member>
        <member name="T:FreeImageAPI.FICOMPLEX">
            <summary>
            The <b>FICOMPLEX</b> structure describes a color consisting of a real and an imaginary part.
            Each part is using 4 bytes of data.
            </summary>
        </member>
        <member name="F:FreeImageAPI.FICOMPLEX.real">
            <summary>
            Real part of the color.
            </summary>
        </member>
        <member name="F:FreeImageAPI.FICOMPLEX.imag">
            <summary>
            Imaginary part of the color.
            </summary>
        </member>
        <member name="M:FreeImageAPI.FICOMPLEX.op_Equality(FreeImageAPI.FICOMPLEX,FreeImageAPI.FICOMPLEX)">
            <summary>
            Tests whether two specified <see cref="T:FreeImageAPI.FICOMPLEX"/> structures are equivalent.
            </summary>
            <param name="left">The <see cref="T:FreeImageAPI.FICOMPLEX"/> that is to the left of the equality operator.</param>
            <param name="right">The <see cref="T:FreeImageAPI.FICOMPLEX"/> that is to the right of the equality operator.</param>
            <returns>
            <b>true</b> if the two <see cref="T:FreeImageAPI.FICOMPLEX"/> structures are equal; otherwise, <b>false</b>.
            </returns>
        </member>
        <member name="M:FreeImageAPI.FICOMPLEX.op_Inequality(FreeImageAPI.FICOMPLEX,FreeImageAPI.FICOMPLEX)">
            <summary>
            Tests whether two specified <see cref="T:FreeImageAPI.FICOMPLEX"/> structures are different.
            </summary>
            <param name="left">The <see cref="T:FreeImageAPI.FICOMPLEX"/> that is to the left of the inequality operator.</param>
            <param name="right">The <see cref="T:FreeImageAPI.FICOMPLEX"/> that is to the right of the inequality operator.</param>
            <returns>
            <b>true</b> if the two <see cref="T:FreeImageAPI.FICOMPLEX"/> structures are different; otherwise, <b>false</b>.
            </returns>
        </member>
        <member name="M:FreeImageAPI.FICOMPLEX.CompareTo(System.Object)">
            <summary>
            Compares this instance with a specified <see cref="T:System.Object"/>.
            </summary>
            <param name="obj">An object to compare with this instance.</param>
            <returns>A 32-bit signed integer indicating the lexical relationship between the two comparands.</returns>
            <exception cref="T:System.ArgumentException"><paramref name="obj"/> is not a <see cref="T:FreeImageAPI.FICOMPLEX"/>.</exception>
        </member>
        <member name="M:FreeImageAPI.FICOMPLEX.CompareTo(FreeImageAPI.FICOMPLEX)">
            <summary>
            Compares this instance with a specified <see cref="T:FreeImageAPI.FICOMPLEX"/> object.
            </summary>
            <param name="other">A <see cref="T:FreeImageAPI.FICOMPLEX"/> to compare.</param>
            <returns>A signed number indicating the relative values of this instance
            and <paramref name="other"/>.</returns>
        </member>
        <member name="M:FreeImageAPI.FICOMPLEX.Equals(System.Object)">
            <summary>
            Tests whether the specified object is a <see cref="T:FreeImageAPI.FICOMPLEX"/> structure
            and is equivalent to this <see cref="T:FreeImageAPI.FICOMPLEX"/> structure.
            </summary>
            <param name="obj">The object to test.</param>
            <returns><b>true</b> if <paramref name="obj"/> is a <see cref="T:FreeImageAPI.FICOMPLEX"/> structure
            equivalent to this <see cref="T:FreeImageAPI.FICOMPLEX"/> structure; otherwise, <b>false</b>.</returns>
        </member>
        <member name="M:FreeImageAPI.FICOMPLEX.Equals(FreeImageAPI.FICOMPLEX)">
            <summary>
            Tests whether the specified <see cref="T:FreeImageAPI.FICOMPLEX"/> structure is equivalent to this <see cref="T:FreeImageAPI.FICOMPLEX"/> structure.
            </summary>
            <param name="other">A <see cref="T:FreeImageAPI.FICOMPLEX"/> structure to compare to this instance.</param>
            <returns><b>true</b> if <paramref name="obj"/> is a <see cref="T:FreeImageAPI.FICOMPLEX"/> structure
            equivalent to this <see cref="T:FreeImageAPI.FICOMPLEX"/> structure; otherwise, <b>false</b>.</returns>
        </member>
        <member name="M:FreeImageAPI.FICOMPLEX.GetHashCode">
            <summary>
            Returns a hash code for this <see cref="T:FreeImageAPI.FICOMPLEX"/> structure.
            </summary>
            <returns>An integer value that specifies the hash code for this <see cref="T:FreeImageAPI.FICOMPLEX"/>.</returns>
        </member>
        <member name="T:FreeImageAPI.FIICCPROFILE">
            <summary>
            This Structure contains ICC-Profile data.
            </summary>
        </member>
        <member name="M:FreeImageAPI.FIICCPROFILE.#ctor(FreeImageAPI.FIBITMAP,System.Byte[])">
            <summary>
            Creates a new ICC-Profile for <paramref name="dib"/>.
            </summary>
            <param name="dib">Handle to a FreeImage bitmap.</param>
            <param name="data">The ICC-Profile data.</param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="dib"/> is null.</exception>
        </member>
        <member name="M:FreeImageAPI.FIICCPROFILE.#ctor(FreeImageAPI.FIBITMAP,System.Byte[],System.Int32)">
            <summary>
            Creates a new ICC-Profile for <paramref name="dib"/>.
            </summary>
            <param name="dib">Handle to a FreeImage bitmap.</param>
            <param name="data">The ICC-Profile data.</param>
            <param name="size">Number of bytes to use from data.</param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="dib"/> is null.</exception>
        </member>
        <member name="P:FreeImageAPI.FIICCPROFILE.Flags">
            <summary>
            Info flag of the profile.
            </summary>
        </member>
        <member name="P:FreeImageAPI.FIICCPROFILE.Size">
            <summary>
            Profile's size measured in bytes.
            </summary>
        </member>
        <member name="P:FreeImageAPI.FIICCPROFILE.DataPointer">
            <summary>
            Points to a block of contiguous memory containing the profile.
            </summary>
        </member>
        <member name="P:FreeImageAPI.FIICCPROFILE.Data">
            <summary>
            Copy of the ICC-Profiles data.
            </summary>
        </member>
        <member name="P:FreeImageAPI.FIICCPROFILE.IsCMYK">
            <summary>
            Indicates whether the profile is CMYK.
            </summary>
        </member>
        <member name="T:FreeImageAPI.FIMEMORY">
            <summary>
            The <b>FIMEMORY</b> structure is a handle to an opened memory stream.
            </summary>
        </member>
        <member name="F:FreeImageAPI.FIMEMORY.Zero">
            <summary>
            A read-only field that represents a handle that has been initialized to zero.
            </summary>
        </member>
        <member name="M:FreeImageAPI.FIMEMORY.op_Equality(FreeImageAPI.FIMEMORY,FreeImageAPI.FIMEMORY)">
            <summary>
            Tests whether two specified <see cref="T:FreeImageAPI.FIMEMORY"/> structures are equivalent.
            </summary>
            <param name="left">The <see cref="T:FreeImageAPI.FIMEMORY"/> that is to the left of the equality operator.</param>
            <param name="right">The <see cref="T:FreeImageAPI.FIMEMORY"/> that is to the right of the equality operator.</param>
            <returns>
            <b>true</b> if the two <see cref="T:FreeImageAPI.FIMEMORY"/> structures are equal; otherwise, <b>false</b>.
            </returns>
        </member>
        <member name="M:FreeImageAPI.FIMEMORY.op_Inequality(FreeImageAPI.FIMEMORY,FreeImageAPI.FIMEMORY)">
            <summary>
            Tests whether two specified <see cref="T:FreeImageAPI.FIMEMORY"/> structures are different.
            </summary>
            <param name="left">The <see cref="T:FreeImageAPI.FIMEMORY"/> that is to the left of the inequality operator.</param>
            <param name="right">The <see cref="T:FreeImageAPI.FIMEMORY"/> that is to the right of the inequality operator.</param>
            <returns>
            <b>true</b> if the two <see cref="T:FreeImageAPI.FIMEMORY"/> structures are different; otherwise, <b>false</b>.
            </returns>
        </member>
        <member name="M:FreeImageAPI.FIMEMORY.SetNull">
            <summary>
            Sets the handle to <i>null</i>.
            </summary>
        </member>
        <member name="M:FreeImageAPI.FIMEMORY.ToString">
            <summary>
            Converts the numeric value of the <see cref="T:FreeImageAPI.FIMEMORY"/> object
            to its equivalent string representation.
            </summary>
            <returns>The string representation of the value of this instance.</returns>
        </member>
        <member name="M:FreeImageAPI.FIMEMORY.GetHashCode">
            <summary>
            Returns a hash code for this <see cref="T:FreeImageAPI.FIMEMORY"/> structure.
            </summary>
            <returns>An integer value that specifies the hash code for this <see cref="T:FreeImageAPI.FIMEMORY"/>.</returns>
        </member>
        <member name="M:FreeImageAPI.FIMEMORY.Equals(System.Object)">
            <summary>
            Determines whether the specified <see cref="T:System.Object"/> is equal to the current <see cref="T:System.Object"/>.
            </summary>
            <param name="obj">The <see cref="T:System.Object"/> to compare with the current <see cref="T:System.Object"/>.</param>
            <returns><b>true</b> if the specified <see cref="T:System.Object"/> is equal to the current <see cref="T:System.Object"/>; otherwise, <b>false</b>.</returns>
        </member>
        <member name="M:FreeImageAPI.FIMEMORY.Equals(FreeImageAPI.FIMEMORY)">
            <summary>
            Indicates whether the current object is equal to another object of the same type.
            </summary>
            <param name="other">An object to compare with this object.</param>
            <returns><b>true</b> if the current object is equal to the other parameter; otherwise, <b>false</b>.</returns>
        </member>
        <member name="M:FreeImageAPI.FIMEMORY.CompareTo(System.Object)">
            <summary>
            Compares this instance with a specified <see cref="T:System.Object"/>.
            </summary>
            <param name="obj">An object to compare with this instance.</param>
            <returns>A 32-bit signed integer indicating the lexical relationship between the two comparands.</returns>
            <exception cref="T:System.ArgumentException"><paramref name="obj"/> is not a <see cref="T:FreeImageAPI.FIMEMORY"/>.</exception>
        </member>
        <member name="M:FreeImageAPI.FIMEMORY.CompareTo(FreeImageAPI.FIMEMORY)">
            <summary>
            Compares this instance with a specified <see cref="T:FreeImageAPI.FIMEMORY"/> object.
            </summary>
            <param name="other">A <see cref="T:FreeImageAPI.FIMEMORY"/> to compare.</param>
            <returns>A signed number indicating the relative values of this instance
            and <paramref name="other"/>.</returns>
        </member>
        <member name="P:FreeImageAPI.FIMEMORY.IsNull">
            <summary>
            Gets whether the pointer is a null pointer or not.
            </summary>
            <value><b>true</b> if this <see cref="T:FreeImageAPI.FIMEMORY"/> is a null pointer;
            otherwise, <b>false</b>.</value>		
        </member>
        <member name="T:FreeImageAPI.FIMETADATA">
            <summary>
            The <b>FIMETADATA</b> structure is an unique search handle for metadata search operations.
            </summary>
            <remarks>
            The <b>FIMETADATA</b> structure is usually returned by the
            <see cref="M:FreeImageAPI.FreeImage.FindFirstMetadata(FreeImageAPI.FREE_IMAGE_MDMODEL,FreeImageAPI.FIBITMAP,FreeImageAPI.FITAG@)"/>
            function and then used on subsequent calls to
            <see cref="M:FreeImageAPI.FreeImage.FindNextMetadata(FreeImageAPI.FIMETADATA,FreeImageAPI.FITAG@)"/>.
            When the <b>FIMETADATA</b> handle is no longer used, it needs to be freed by the
            <see cref="M:FreeImageAPI.FreeImage.FindCloseMetadata(FreeImageAPI.FIMETADATA)"/> function.
            </remarks>
        </member>
        <member name="F:FreeImageAPI.FIMETADATA.Zero">
            <summary>
            A read-only field that represents a handle that has been initialized to zero.
            </summary>
        </member>
        <member name="M:FreeImageAPI.FIMETADATA.op_Equality(FreeImageAPI.FIMETADATA,FreeImageAPI.FIMETADATA)">
            <summary>
            Tests whether two specified <see cref="T:FreeImageAPI.FIMETADATA"/> structures are equivalent.
            </summary>
            <param name="left">The <see cref="T:FreeImageAPI.FIMETADATA"/> that is to the left of the equality operator.</param>
            <param name="right">The <see cref="T:FreeImageAPI.FIMETADATA"/> that is to the right of the equality operator.</param>
            <returns>
            <b>true</b> if the two <see cref="T:FreeImageAPI.FIMETADATA"/> structures are equal; otherwise, <b>false</b>.
            </returns>
        </member>
        <member name="M:FreeImageAPI.FIMETADATA.op_Inequality(FreeImageAPI.FIMETADATA,FreeImageAPI.FIMETADATA)">
            <summary>
            Tests whether two specified <see cref="T:FreeImageAPI.FIMETADATA"/> structures are different.
            </summary>
            <param name="left">The <see cref="T:FreeImageAPI.FIMETADATA"/> that is to the left of the inequality operator.</param>
            <param name="right">The <see cref="T:FreeImageAPI.FIMETADATA"/> that is to the right of the inequality operator.</param>
            <returns>
            <b>true</b> if the two <see cref="T:FreeImageAPI.FIMETADATA"/> structures are different; otherwise, <b>false</b>.
            </returns>
        </member>
        <member name="M:FreeImageAPI.FIMETADATA.SetNull">
            <summary>
            Sets the handle to <i>null</i>.
            </summary>
        </member>
        <member name="M:FreeImageAPI.FIMETADATA.ToString">
            <summary>
            Converts the numeric value of the <see cref="T:FreeImageAPI.FIMETADATA"/> object
            to its equivalent string representation.
            </summary>
            <returns>The string representation of the value of this instance.</returns>
        </member>
        <member name="M:FreeImageAPI.FIMETADATA.GetHashCode">
            <summary>
            Returns a hash code for this <see cref="T:FreeImageAPI.FIMETADATA"/> structure.
            </summary>
            <returns>An integer value that specifies the hash code for this <see cref="T:FreeImageAPI.FIMETADATA"/>.</returns>
        </member>
        <member name="M:FreeImageAPI.FIMETADATA.Equals(System.Object)">
            <summary>
            Determines whether the specified <see cref="T:System.Object"/> is equal to the current <see cref="T:System.Object"/>.
            </summary>
            <param name="obj">The <see cref="T:System.Object"/> to compare with the current <see cref="T:System.Object"/>.</param>
            <returns><b>true</b> if the specified <see cref="T:System.Object"/> is equal to the current <see cref="T:System.Object"/>; otherwise, <b>false</b>.</returns>
        </member>
        <member name="M:FreeImageAPI.FIMETADATA.Equals(FreeImageAPI.FIMETADATA)">
            <summary>
            Indicates whether the current object is equal to another object of the same type.
            </summary>
            <param name="other">An object to compare with this object.</param>
            <returns><b>true</b> if the current object is equal to the other parameter; otherwise, <b>false</b>.</returns>
        </member>
        <member name="M:FreeImageAPI.FIMETADATA.CompareTo(System.Object)">
            <summary>
            Compares this instance with a specified <see cref="T:System.Object"/>.
            </summary>
            <param name="obj">An object to compare with this instance.</param>
            <returns>A 32-bit signed integer indicating the lexical relationship between the two comparands.</returns>
            <exception cref="T:System.ArgumentException"><paramref name="obj"/> is not a <see cref="T:FreeImageAPI.FIMETADATA"/>.</exception>
        </member>
        <member name="M:FreeImageAPI.FIMETADATA.CompareTo(FreeImageAPI.FIMETADATA)">
            <summary>
            Compares this instance with a specified <see cref="T:FreeImageAPI.FIMETADATA"/> object.
            </summary>
            <param name="other">A <see cref="T:FreeImageAPI.FIMETADATA"/> to compare.</param>
            <returns>A signed number indicating the relative values of this instance
            and <paramref name="other"/>.</returns>
        </member>
        <member name="P:FreeImageAPI.FIMETADATA.IsNull">
            <summary>
            Gets whether the pointer is a null pointer or not.
            </summary>
            <value><b>true</b> if this <see cref="T:FreeImageAPI.FIMETADATA"/> is a null pointer;
            otherwise, <b>false</b>.</value>		
        </member>
        <member name="T:FreeImageAPI.FIMULTIBITMAP">
            <summary>
            The <b>FIMULTIBITMAP</b> structure is a handle to a FreeImage multipaged bimtap.
            </summary>
        </member>
        <member name="F:FreeImageAPI.FIMULTIBITMAP.Zero">
            <summary>
            A read-only field that represents a handle that has been initialized to zero.
            </summary>
        </member>
        <member name="M:FreeImageAPI.FIMULTIBITMAP.op_Equality(FreeImageAPI.FIMULTIBITMAP,FreeImageAPI.FIMULTIBITMAP)">
            <summary>
            Tests whether two specified <see cref="T:FreeImageAPI.FIMULTIBITMAP"/> structures are equivalent.
            </summary>
            <param name="left">The <see cref="T:FreeImageAPI.FIMULTIBITMAP"/> that is to the left of the equality operator.</param>
            <param name="right">The <see cref="T:FreeImageAPI.FIMULTIBITMAP"/> that is to the right of the equality operator.</param>
            <returns>
            <b>true</b> if the two <see cref="T:FreeImageAPI.FIMULTIBITMAP"/> structures are equal; otherwise, <b>false</b>.
            </returns>
        </member>
        <member name="M:FreeImageAPI.FIMULTIBITMAP.op_Inequality(FreeImageAPI.FIMULTIBITMAP,FreeImageAPI.FIMULTIBITMAP)">
            <summary>
            Tests whether two specified <see cref="T:FreeImageAPI.FIMULTIBITMAP"/> structures are different.
            </summary>
            <param name="left">The <see cref="T:FreeImageAPI.FIMULTIBITMAP"/> that is to the left of the inequality operator.</param>
            <param name="right">The <see cref="T:FreeImageAPI.FIMULTIBITMAP"/> that is to the right of the inequality operator.</param>
            <returns>
            <b>true</b> if the two <see cref="T:FreeImageAPI.FIMULTIBITMAP"/> structures are different; otherwise, <b>false</b>.
            </returns>
        </member>
        <member name="M:FreeImageAPI.FIMULTIBITMAP.SetNull">
            <summary>
            Sets the handle to <i>null</i>.
            </summary>
        </member>
        <member name="M:FreeImageAPI.FIMULTIBITMAP.ToString">
            <summary>
            Converts the numeric value of the <see cref="T:FreeImageAPI.FIMULTIBITMAP"/> object
            to its equivalent string representation.
            </summary>
            <returns>The string representation of the value of this instance.</returns>
        </member>
        <member name="M:FreeImageAPI.FIMULTIBITMAP.GetHashCode">
            <summary>
            Returns a hash code for this <see cref="T:FreeImageAPI.FIMULTIBITMAP"/> structure.
            </summary>
            <returns>An integer value that specifies the hash code for this <see cref="T:FreeImageAPI.FIMULTIBITMAP"/>.</returns>
        </member>
        <member name="M:FreeImageAPI.FIMULTIBITMAP.Equals(System.Object)">
            <summary>
            Determines whether the specified <see cref="T:System.Object"/> is equal to the current <see cref="T:System.Object"/>.
            </summary>
            <param name="obj">The <see cref="T:System.Object"/> to compare with the current <see cref="T:System.Object"/>.</param>
            <returns><b>true</b> if the specified <see cref="T:System.Object"/> is equal to the current <see cref="T:System.Object"/>; otherwise, <b>false</b>.</returns>
        </member>
        <member name="M:FreeImageAPI.FIMULTIBITMAP.Equals(FreeImageAPI.FIMULTIBITMAP)">
            <summary>
            Indicates whether the current object is equal to another object of the same type.
            </summary>
            <param name="other">An object to compare with this object.</param>
            <returns><b>true</b> if the current object is equal to the other parameter; otherwise, <b>false</b>.</returns>
        </member>
        <member name="M:FreeImageAPI.FIMULTIBITMAP.CompareTo(System.Object)">
            <summary>
            Compares this instance with a specified <see cref="T:System.Object"/>.
            </summary>
            <param name="obj">An object to compare with this instance.</param>
            <returns>A 32-bit signed integer indicating the lexical relationship between the two comparands.</returns>
            <exception cref="T:System.ArgumentException"><paramref name="obj"/> is not a <see cref="T:FreeImageAPI.FIMULTIBITMAP"/>.</exception>
        </member>
        <member name="M:FreeImageAPI.FIMULTIBITMAP.CompareTo(FreeImageAPI.FIMULTIBITMAP)">
            <summary>
            Compares this instance with a specified <see cref="T:FreeImageAPI.FIMULTIBITMAP"/> object.
            </summary>
            <param name="other">A <see cref="T:FreeImageAPI.FIMULTIBITMAP"/> to compare.</param>
            <returns>A signed number indicating the relative values of this instance
            and <paramref name="other"/>.</returns>
        </member>
        <member name="P:FreeImageAPI.FIMULTIBITMAP.IsNull">
            <summary>
            Gets whether the handle is a null or not.
            </summary>
            <value><b>true</b> if this <see cref="T:FreeImageAPI.FIMULTIBITMAP"/> handle is a null;
            otherwise, <b>false</b>.</value>		
        </member>
        <member name="T:FreeImageAPI.FIRational">
            <summary>
            The <b>FIRational</b> structure represents a fraction via two <see cref="T:System.Int32"/>
            instances which are interpreted as numerator and denominator.
            </summary>
            <remarks>
            The structure tries to approximate the value of <see cref="M:FreeImageAPI.FIRational.#ctor(System.Decimal)"/>
            when creating a new instance by using a better algorithm than FreeImage does.
            <para/>
            The structure implements the following operators:
            +, -, ++, --, ==, != , &gt;, &gt;==, &lt;, &lt;== and ~ (which switches nominator and denomiator).
            <para/>
            The structure can be converted into all .NET standard types either implicit or
            explicit.
            </remarks>
        </member>
        <member name="F:FreeImageAPI.FIRational.MaxValue">
            <summary>
            Represents the largest possible value of <see cref="T:FreeImageAPI.FIRational"/>. This field is constant.
            </summary>
        </member>
        <member name="F:FreeImageAPI.FIRational.MinValue">
            <summary>
            Represents the smallest possible value of <see cref="T:FreeImageAPI.FIRational"/>. This field is constant.
            </summary>
        </member>
        <member name="F:FreeImageAPI.FIRational.Epsilon">
            <summary>
            Represents the smallest positive <see cref="T:FreeImageAPI.FIRational"/> value greater than zero. This field is constant.
            </summary>
        </member>
        <member name="M:FreeImageAPI.FIRational.#ctor(System.Int32,System.Int32)">
            <summary>
            Initializes a new instance based on the specified parameters.
            </summary>
            <param name="n">The numerator.</param>
            <param name="d">The denominator.</param>
        </member>
        <member name="M:FreeImageAPI.FIRational.#ctor(FreeImageAPI.FITAG)">
            <summary>
            Initializes a new instance based on the specified parameters.
            </summary>
            <param name="tag">The tag to read the data from.</param>
        </member>
        <member name="M:FreeImageAPI.FIRational.#ctor(System.Decimal)">
            <summary>
            Initializes a new instance based on the specified parameters.
            </summary>
            <param name="value">The value to convert into a fraction.</param>
            <exception cref="T:System.OverflowException">
            <paramref name="value"/> cannot be converted into a fraction
            represented by two integer values.</exception>
        </member>
        <member name="M:FreeImageAPI.FIRational.Truncate">
            <summary>
            Returns the truncated value of the fraction.
            </summary>
            <returns></returns>
        </member>
        <member name="M:FreeImageAPI.FIRational.Gcd(System.Int64,System.Int64)">
            <summary>
            Calculated the greatest common divisor of 'a' and 'b'.
            </summary>
        </member>
        <member name="M:FreeImageAPI.FIRational.Scm(System.Int32,System.Int32)">
            <summary>
            Calculated the smallest common multiple of 'a' and 'b'.
            </summary>
        </member>
        <member name="M:FreeImageAPI.FIRational.Normalize">
            <summary>
            Normalizes the fraction.
            </summary>
        </member>
        <member name="M:FreeImageAPI.FIRational.Normalize(System.Int64@,System.Int64@)">
            <summary>
            Normalizes a fraction.
            </summary>
        </member>
        <member name="M:FreeImageAPI.FIRational.GetDigits(System.Decimal)">
            <summary>
            Returns the digits after the point.
            </summary>
        </member>
        <member name="M:FreeImageAPI.FIRational.CreateContinuedFraction(System.Decimal)">
            <summary>
            Creates a continued fraction of a decimal value.
            </summary>
        </member>
        <member name="M:FreeImageAPI.FIRational.CreateFraction(System.Int32[],System.Int32@,System.Int32@)">
            <summary>
            Creates a fraction from a continued fraction.
            </summary>
        </member>
        <member name="M:FreeImageAPI.FIRational.ApproximateFraction(System.Decimal,System.Int32,System.Int32@,System.Int32@)">
            <summary>
            Tries 'brute force' to approximate <paramref name="value"/> with a fraction.
            </summary>
        </member>
        <member name="M:FreeImageAPI.FIRational.ToString">
            <summary>
            Converts the numeric value of the <see cref="T:FreeImageAPI.FIRational"/> object
            to its equivalent string representation.
            </summary>
            <returns>The string representation of the value of this instance.</returns>
        </member>
        <member name="M:FreeImageAPI.FIRational.Equals(System.Object)">
            <summary>
            Tests whether the specified object is a <see cref="T:FreeImageAPI.FIRational"/> structure
            and is equivalent to this <see cref="T:FreeImageAPI.FIRational"/> structure.
            </summary>
            <param name="obj">The object to test.</param>
            <returns><b>true</b> if <paramref name="obj"/> is a <see cref="T:FreeImageAPI.FIRational"/> structure
            equivalent to this <see cref="T:FreeImageAPI.FIRational"/> structure; otherwise, <b>false</b>.</returns>
        </member>
        <member name="M:FreeImageAPI.FIRational.GetHashCode">
            <summary>
            Returns a hash code for this <see cref="T:FreeImageAPI.FIRational"/> structure.
            </summary>
            <returns>An integer value that specifies the hash code for this <see cref="T:FreeImageAPI.FIRational"/>.</returns>
        </member>
        <member name="M:FreeImageAPI.FIRational.op_UnaryPlus(FreeImageAPI.FIRational)">
            <summary>
            Standard implementation of the operator.
            </summary>
        </member>
        <member name="M:FreeImageAPI.FIRational.op_UnaryNegation(FreeImageAPI.FIRational)">
            <summary>
            Standard implementation of the operator.
            </summary>
        </member>
        <member name="M:FreeImageAPI.FIRational.op_OnesComplement(FreeImageAPI.FIRational)">
            <summary>
            Returns the reciprocal value of this instance.
            </summary>
        </member>
        <member name="M:FreeImageAPI.FIRational.op_Increment(FreeImageAPI.FIRational)">
            <summary>
            Standard implementation of the operator.
            </summary>
        </member>
        <member name="M:FreeImageAPI.FIRational.op_Decrement(FreeImageAPI.FIRational)">
            <summary>
            Standard implementation of the operator.
            </summary>
        </member>
        <member name="M:FreeImageAPI.FIRational.op_Addition(FreeImageAPI.FIRational,FreeImageAPI.FIRational)">
            <summary>
            Standard implementation of the operator.
            </summary>
        </member>
        <member name="M:FreeImageAPI.FIRational.op_Subtraction(FreeImageAPI.FIRational,FreeImageAPI.FIRational)">
            <summary>
            Standard implementation of the operator.
            </summary>
        </member>
        <member name="M:FreeImageAPI.FIRational.op_Multiply(FreeImageAPI.FIRational,FreeImageAPI.FIRational)">
            <summary>
            Standard implementation of the operator.
            </summary>
        </member>
        <member name="M:FreeImageAPI.FIRational.op_Division(FreeImageAPI.FIRational,FreeImageAPI.FIRational)">
            <summary>
            Standard implementation of the operator.
            </summary>
        </member>
        <member name="M:FreeImageAPI.FIRational.op_Modulus(FreeImageAPI.FIRational,FreeImageAPI.FIRational)">
            <summary>
            Standard implementation of the operator.
            </summary>
        </member>
        <member name="M:FreeImageAPI.FIRational.op_Equality(FreeImageAPI.FIRational,FreeImageAPI.FIRational)">
            <summary>
            Standard implementation of the operator.
            </summary>
        </member>
        <member name="M:FreeImageAPI.FIRational.op_Inequality(FreeImageAPI.FIRational,FreeImageAPI.FIRational)">
            <summary>
            Standard implementation of the operator.
            </summary>
        </member>
        <member name="M:FreeImageAPI.FIRational.op_GreaterThan(FreeImageAPI.FIRational,FreeImageAPI.FIRational)">
            <summary>
            Standard implementation of the operator.
            </summary>
        </member>
        <member name="M:FreeImageAPI.FIRational.op_LessThan(FreeImageAPI.FIRational,FreeImageAPI.FIRational)">
            <summary>
            Standard implementation of the operator.
            </summary>
        </member>
        <member name="M:FreeImageAPI.FIRational.op_GreaterThanOrEqual(FreeImageAPI.FIRational,FreeImageAPI.FIRational)">
            <summary>
            Standard implementation of the operator.
            </summary>
        </member>
        <member name="M:FreeImageAPI.FIRational.op_LessThanOrEqual(FreeImageAPI.FIRational,FreeImageAPI.FIRational)">
            <summary>
            Standard implementation of the operator.
            </summary>
        </member>
        <member name="M:FreeImageAPI.FIRational.op_Explicit(FreeImageAPI.FIRational)~System.Boolean">
            <summary>
            Converts the value of a <see cref="T:FreeImageAPI.FIRational"/> structure to a <see cref="T:System.Boolean"/> structure.
            </summary>
            <param name="value">A <see cref="T:FreeImageAPI.FIRational"/> structure.</param>
            <returns>A new instance of <see cref="T:System.Boolean"/> initialized to <paramref name="value"/>.</returns>
        </member>
        <member name="M:FreeImageAPI.FIRational.op_Explicit(FreeImageAPI.FIRational)~System.Byte">
            <summary>
            Converts the value of a <see cref="T:FreeImageAPI.FIRational"/> structure to a <see cref="T:System.Byte"/> structure.
            </summary>
            <param name="value">A <see cref="T:FreeImageAPI.FIRational"/> structure.</param>
            <returns>A new instance of <see cref="T:System.Byte"/> initialized to <paramref name="value"/>.</returns>
        </member>
        <member name="M:FreeImageAPI.FIRational.op_Explicit(FreeImageAPI.FIRational)~System.Char">
            <summary>
            Converts the value of a <see cref="T:FreeImageAPI.FIRational"/> structure to a <see cref="T:System.Char"/> structure.
            </summary>
            <param name="value">A <see cref="T:FreeImageAPI.FIRational"/> structure.</param>
            <returns>A new instance of <see cref="T:System.Char"/> initialized to <paramref name="value"/>.</returns>
        </member>
        <member name="M:FreeImageAPI.FIRational.op_Implicit(FreeImageAPI.FIRational)~System.Decimal">
            <summary>
            Converts the value of a <see cref="T:FreeImageAPI.FIRational"/> structure to a <see cref="T:System.Decimal"/> structure.
            </summary>
            <param name="value">A <see cref="T:FreeImageAPI.FIRational"/> structure.</param>
            <returns>A new instance of <see cref="T:System.Decimal"/> initialized to <paramref name="value"/>.</returns>
        </member>
        <member name="M:FreeImageAPI.FIRational.op_Implicit(FreeImageAPI.FIRational)~System.Double">
            <summary>
            Converts the value of a <see cref="T:FreeImageAPI.FIRational"/> structure to a <see cref="T:System.Double"/> structure.
            </summary>
            <param name="value">A <see cref="T:FreeImageAPI.FIRational"/> structure.</param>
            <returns>A new instance of <see cref="T:System.Double"/> initialized to <paramref name="value"/>.</returns>
        </member>
        <member name="M:FreeImageAPI.FIRational.op_Explicit(FreeImageAPI.FIRational)~System.Int16">
            <summary>
            Converts the value of a <see cref="T:FreeImageAPI.FIRational"/> structure to an <see cref="T:System.Int16"/> structure.
            </summary>
            <param name="value">A <see cref="T:FreeImageAPI.FIRational"/> structure.</param>
            <returns>A new instance of <see cref="T:System.Int16"/> initialized to <paramref name="value"/>.</returns>
        </member>
        <member name="M:FreeImageAPI.FIRational.op_Explicit(FreeImageAPI.FIRational)~System.Int32">
            <summary>
            Converts the value of a <see cref="T:FreeImageAPI.FIRational"/> structure to an <see cref="T:System.Int32"/> structure.
            </summary>
            <param name="value">A <see cref="T:FreeImageAPI.FIRational"/> structure.</param>
            <returns>A new instance of <see cref="T:System.Int32"/> initialized to <paramref name="value"/>.</returns>
        </member>
        <member name="M:FreeImageAPI.FIRational.op_Explicit(FreeImageAPI.FIRational)~System.Int64">
            <summary>
            Converts the value of a <see cref="T:FreeImageAPI.FIRational"/> structure to an <see cref="T:System.Int64"/> structure.
            </summary>
            <param name="value">A <see cref="T:FreeImageAPI.FIRational"/> structure.</param>
            <returns>A new instance of <see cref="T:System.Int64"/> initialized to <paramref name="value"/>.</returns>
        </member>
        <member name="M:FreeImageAPI.FIRational.op_Implicit(FreeImageAPI.FIRational)~System.Single">
            <summary>
            Converts the value of a <see cref="T:FreeImageAPI.FIRational"/> structure to a <see cref="T:System.Single"/> structure.
            </summary>
            <param name="value">A <see cref="T:FreeImageAPI.FIRational"/> structure.</param>
            <returns>A new instance of <see cref="T:System.Single"/> initialized to <paramref name="value"/>.</returns>
        </member>
        <member name="M:FreeImageAPI.FIRational.op_Explicit(FreeImageAPI.FIRational)~System.SByte">
            <summary>
            Converts the value of a <see cref="T:FreeImageAPI.FIRational"/> structure to a <see cref="T:System.SByte"/> structure.
            </summary>
            <param name="value">A <see cref="T:FreeImageAPI.FIRational"/> structure.</param>
            <returns>A new instance of <see cref="T:System.SByte"/> initialized to <paramref name="value"/>.</returns>
        </member>
        <member name="M:FreeImageAPI.FIRational.op_Explicit(FreeImageAPI.FIRational)~System.UInt16">
            <summary>
            Converts the value of a <see cref="T:FreeImageAPI.FIRational"/> structure to an <see cref="T:System.UInt16"/> structure.
            </summary>
            <param name="value">A <see cref="T:FreeImageAPI.FIRational"/> structure.</param>
            <returns>A new instance of <see cref="T:System.UInt16"/> initialized to <paramref name="value"/>.</returns>
        </member>
        <member name="M:FreeImageAPI.FIRational.op_Explicit(FreeImageAPI.FIRational)~System.UInt32">
            <summary>
            Converts the value of a <see cref="T:FreeImageAPI.FIRational"/> structure to an <see cref="T:System.UInt32"/> structure.
            </summary>
            <param name="value">A <see cref="T:FreeImageAPI.FIRational"/> structure.</param>
            <returns>A new instance of <see cref="T:System.UInt32"/> initialized to <paramref name="value"/>.</returns>
        </member>
        <member name="M:FreeImageAPI.FIRational.op_Explicit(FreeImageAPI.FIRational)~System.UInt64">
            <summary>
            Converts the value of a <see cref="T:FreeImageAPI.FIRational"/> structure to an <see cref="T:System.UInt64"/> structure.
            </summary>
            <param name="value">A <see cref="T:FreeImageAPI.FIRational"/> structure.</param>
            <returns>A new instance of <see cref="T:System.UInt64"/> initialized to <paramref name="value"/>.</returns>
        </member>
        <member name="M:FreeImageAPI.FIRational.op_Explicit(System.Boolean)~FreeImageAPI.FIRational">
            <summary>
            Converts the value of a <see cref="T:System.Boolean"/> structure to a <see cref="T:FreeImageAPI.FIRational"/> structure.
            </summary>
            <param name="value">A <see cref="T:System.Boolean"/> structure.</param>
            <returns>A new instance of <see cref="T:FreeImageAPI.FIRational"/> initialized to <paramref name="value"/>.</returns>
        </member>
        <member name="M:FreeImageAPI.FIRational.op_Implicit(System.Byte)~FreeImageAPI.FIRational">
            <summary>
            Converts the value of a <see cref="T:System.Byte"/> structure to a <see cref="T:FreeImageAPI.FIRational"/> structure.
            </summary>
            <param name="value">A <see cref="T:System.Byte"/> structure.</param>
            <returns>A new instance of <see cref="T:FreeImageAPI.FIRational"/> initialized to <paramref name="value"/>.</returns>
        </member>
        <member name="M:FreeImageAPI.FIRational.op_Implicit(System.Char)~FreeImageAPI.FIRational">
            <summary>
            Converts the value of a <see cref="T:System.Char"/> structure to a <see cref="T:FreeImageAPI.FIRational"/> structure.
            </summary>
            <param name="value">A <see cref="T:System.Char"/> structure.</param>
            <returns>A new instance of <see cref="T:FreeImageAPI.FIRational"/> initialized to <paramref name="value"/>.</returns>
        </member>
        <member name="M:FreeImageAPI.FIRational.op_Explicit(System.Decimal)~FreeImageAPI.FIRational">
            <summary>
            Converts the value of a <see cref="T:System.Decimal"/> structure to a <see cref="T:FreeImageAPI.FIRational"/> structure.
            </summary>
            <param name="value">A <see cref="T:System.Decimal"/> structure.</param>
            <returns>A new instance of <see cref="T:FreeImageAPI.FIRational"/> initialized to <paramref name="value"/>.</returns>
        </member>
        <member name="M:FreeImageAPI.FIRational.op_Explicit(System.Double)~FreeImageAPI.FIRational">
            <summary>
            Converts the value of a <see cref="T:System.Double"/> structure to a <see cref="T:FreeImageAPI.FIRational"/> structure.
            </summary>
            <param name="value">A <see cref="T:System.Double"/> structure.</param>
            <returns>A new instance of <see cref="T:FreeImageAPI.FIRational"/> initialized to <paramref name="value"/>.</returns>
        </member>
        <member name="M:FreeImageAPI.FIRational.op_Implicit(System.Int16)~FreeImageAPI.FIRational">
            <summary>
            Converts the value of an <see cref="T:System.Int16"/> structure to a <see cref="T:FreeImageAPI.FIRational"/> structure.
            </summary>
            <param name="value">An <see cref="T:System.Int16"/> structure.</param>
            <returns>A new instance of <see cref="T:FreeImageAPI.FIRational"/> initialized to <paramref name="value"/>.</returns>
        </member>
        <member name="M:FreeImageAPI.FIRational.op_Implicit(System.Int32)~FreeImageAPI.FIRational">
            <summary>
            Converts the value of an <see cref="T:System.Int32"/> structure to a <see cref="T:FreeImageAPI.FIRational"/> structure.
            </summary>
            <param name="value">An <see cref="T:System.Int32"/> structure.</param>
            <returns>A new instance of <see cref="T:FreeImageAPI.FIRational"/> initialized to <paramref name="value"/>.</returns>
        </member>
        <member name="M:FreeImageAPI.FIRational.op_Explicit(System.Int64)~FreeImageAPI.FIRational">
            <summary>
            Converts the value of an <see cref="T:System.Int64"/> structure to a <see cref="T:FreeImageAPI.FIRational"/> structure.
            </summary>
            <param name="value">An <see cref="T:System.Int64"/> structure.</param>
            <returns>A new instance of <see cref="T:FreeImageAPI.FIRational"/> initialized to <paramref name="value"/>.</returns>
        </member>
        <member name="M:FreeImageAPI.FIRational.op_Implicit(System.SByte)~FreeImageAPI.FIRational">
            <summary>
            Converts the value of a <see cref="T:System.SByte"/> structure to a <see cref="T:FreeImageAPI.FIRational"/> structure.
            </summary>
            <param name="value">A <see cref="T:System.SByte"/> structure.</param>
            <returns>A new instance of <see cref="T:FreeImageAPI.FIRational"/> initialized to <paramref name="value"/>.</returns>
        </member>
        <member name="M:FreeImageAPI.FIRational.op_Explicit(System.Single)~FreeImageAPI.FIRational">
            <summary>
            Converts the value of a <see cref="T:System.Single"/> structure to a <see cref="T:FreeImageAPI.FIRational"/> structure.
            </summary>
            <param name="value">A <see cref="T:System.Single"/> structure.</param>
            <returns>A new instance of <see cref="T:FreeImageAPI.FIRational"/> initialized to <paramref name="value"/>.</returns>
        </member>
        <member name="M:FreeImageAPI.FIRational.op_Implicit(System.UInt16)~FreeImageAPI.FIRational">
            <summary>
            Converts the value of an <see cref="T:System.UInt16"/> structure to a <see cref="T:FreeImageAPI.FIRational"/> structure.
            </summary>
            <param name="value">An <see cref="T:System.UInt16"/> structure.</param>
            <returns>A new instance of <see cref="T:FreeImageAPI.FIRational"/> initialized to <paramref name="value"/>.</returns>
        </member>
        <member name="M:FreeImageAPI.FIRational.op_Explicit(System.UInt32)~FreeImageAPI.FIRational">
            <summary>
            Converts the value of an <see cref="T:System.UInt32"/> structure to a <see cref="T:FreeImageAPI.FIRational"/> structure.
            </summary>
            <param name="value">An <see cref="T:System.UInt32"/> structure.</param>
            <returns>A new instance of <see cref="T:FreeImageAPI.FIRational"/> initialized to <paramref name="value"/>.</returns>
        </member>
        <member name="M:FreeImageAPI.FIRational.op_Explicit(System.UInt64)~FreeImageAPI.FIRational">
            <summary>
            Converts the value of an <see cref="T:System.UInt64"/> structure to a <see cref="T:FreeImageAPI.FIRational"/> structure.
            </summary>
            <param name="value">An <see cref="T:System.UInt64"/> structure.</param>
            <returns>A new instance of <see cref="T:FreeImageAPI.FIRational"/> initialized to <paramref name="value"/>.</returns>
        </member>
        <member name="M:FreeImageAPI.FIRational.CompareTo(System.Object)">
            <summary>
            Compares this instance with a specified <see cref="T:System.Object"/>.
            </summary>
            <param name="obj">An object to compare with this instance.</param>
            <returns>A 32-bit signed integer indicating the lexical relationship between the two comparands.</returns>
            <exception cref="T:System.ArgumentException"><paramref name="obj"/> is not a <see cref="T:FreeImageAPI.FIRational"/>.</exception>
        </member>
        <member name="M:FreeImageAPI.FIRational.ToString(System.String,System.IFormatProvider)">
            <summary>
            Formats the value of the current instance using the specified format.
            </summary>
            <param name="format">The String specifying the format to use.</param>
            <param name="formatProvider">The IFormatProvider to use to format the value.</param>
            <returns>A String containing the value of the current instance in the specified format.</returns>
        </member>
        <member name="M:FreeImageAPI.FIRational.Equals(FreeImageAPI.FIRational)">
            <summary>
            Tests whether the specified <see cref="T:FreeImageAPI.FIRational"/> structure is equivalent to this <see cref="T:FreeImageAPI.FIRational"/> structure.
            </summary>
            <param name="other">A <see cref="T:FreeImageAPI.FIRational"/> structure to compare to this instance.</param>
            <returns><b>true</b> if <paramref name="obj"/> is a <see cref="T:FreeImageAPI.FIRational"/> structure
            equivalent to this <see cref="T:FreeImageAPI.FIRational"/> structure; otherwise, <b>false</b>.</returns>
        </member>
        <member name="M:FreeImageAPI.FIRational.CompareTo(FreeImageAPI.FIRational)">
            <summary>
            Compares this instance with a specified <see cref="T:FreeImageAPI.FIRational"/> object.
            </summary>
            <param name="other">A <see cref="T:FreeImageAPI.FIRational"/> to compare.</param>
            <returns>A signed number indicating the relative values of this instance
            and <paramref name="other"/>.</returns>
        </member>
        <member name="P:FreeImageAPI.FIRational.Numerator">
            <summary>
            The numerator of the fraction.
            </summary>
        </member>
        <member name="P:FreeImageAPI.FIRational.Denominator">
            <summary>
            The denominator of the fraction.
            </summary>
        </member>
        <member name="P:FreeImageAPI.FIRational.IsInteger">
            <summary>
            Returns whether the fraction is representing an integer value.
            </summary>
        </member>
        <member name="T:FreeImageAPI.FIRGB16">
            <summary>
            The <b>FIRGB16</b> structure describes a color consisting of relative
            intensities of red, green, blue and alpha value. Each single color
            component consumes 16 bits and so, takes values in the range from 0 to 65535.
            </summary>
            <remarks>
            <para>
            The <b>FIRGB16</b> structure provides access to an underlying FreeImage <b>FIRGB16</b>
            structure. To determine the red, green or blue component of a color,
            use the red, green or blue fields, respectively.
            </para>
            <para>For easy integration of the underlying structure into the .NET framework,
            the <b>FIRGB16</b> structure implements implicit conversion operators to 
            convert the represented color to and from the <see cref="T:System.Drawing.Color"/>
            type. This makes the <see cref="T:System.Drawing.Color"/> type a real replacement
            for the <b>FIRGB16</b> structure and my be used in all situations which require
            an <b>FIRGB16</b> type.
            </para>
            <para>
            Each color component red, green or blue of <b>FIRGB16</b> is translated into
            it's corresponding color component R, G or B of
            <see cref="T:System.Drawing.Color"/> by right shifting 8 bits and shifting left 8 bits for the reverse conversion.
            When converting from <see cref="T:System.Drawing.Color"/> into <b>FIRGB16</b>, the
            color's alpha value is ignored and assumed to be 255 when converting from
            <b>FIRGB16</b> into <see cref="T:System.Drawing.Color"/>, creating a fully
            opaque color.
            </para>
            <para>
            <b>Conversion from System.Drawing.Color to FIRGB16</b>
            </para>
            <c>FIRGB16.component = Color.component &lt;&lt; 8</c>
            <para>
            <b>Conversion from FIRGB16 to System.Drawing.Color</b>
            </para>
            <c>Color.component = FIRGB16.component &gt;&gt; 8</c>
            <para>
            The same conversion is also applied when the <see cref="P:FreeImageAPI.FIRGB16.Color"/>
            property or the <see cref="M:FreeImageAPI.FIRGB16.#ctor(System.Drawing.Color)"/> constructor
            is invoked.
            </para>
            </remarks>
            <example>
            The following code example demonstrates the various conversions between the
            <b>FIRGB16</b> structure and the <see cref="T:System.Drawing.Color"/> structure.
            <code>
            FIRGB16 firgb16;
            // Initialize the structure using a native .NET Color structure.
            firgb16 = new FIRGBA16(Color.Indigo);
            // Initialize the structure using the implicit operator.
            firgb16 = Color.DarkSeaGreen;
            // Convert the FIRGB16 instance into a native .NET Color
            // using its implicit operator.
            Color color = firgb16;
            // Using the structure's Color property for converting it
            // into a native .NET Color.
            Color another = firgb16.Color;
            </code>
            </example>
        </member>
        <member name="F:FreeImageAPI.FIRGB16.red">
            <summary>
            The red color component.
            </summary>
        </member>
        <member name="F:FreeImageAPI.FIRGB16.green">
            <summary>
            The green color component.
            </summary>
        </member>
        <member name="F:FreeImageAPI.FIRGB16.blue">
            <summary>
            The blue color component.
            </summary>
        </member>
        <member name="M:FreeImageAPI.FIRGB16.#ctor(System.Drawing.Color)">
            <summary>
            Initializes a new instance based on the specified <see cref="T:System.Drawing.Color"/>.
            </summary>
            <param name="color"><see cref="T:System.Drawing.Color"/> to initialize with.</param>
        </member>
        <member name="M:FreeImageAPI.FIRGB16.op_Equality(FreeImageAPI.FIRGB16,FreeImageAPI.FIRGB16)">
            <summary>
            Tests whether two specified <see cref="T:FreeImageAPI.FIRGB16"/> structures are equivalent.
            </summary>
            <param name="left">The <see cref="T:FreeImageAPI.FIRGB16"/> that is to the left of the equality operator.</param>
            <param name="right">The <see cref="T:FreeImageAPI.FIRGB16"/> that is to the right of the equality operator.</param>
            <returns>
            <b>true</b> if the two <see cref="T:FreeImageAPI.FIRGB16"/> structures are equal; otherwise, <b>false</b>.
            </returns>
        </member>
        <member name="M:FreeImageAPI.FIRGB16.op_Inequality(FreeImageAPI.FIRGB16,FreeImageAPI.FIRGB16)">
            <summary>
            Tests whether two specified <see cref="T:FreeImageAPI.FIRGB16"/> structures are different.
            </summary>
            <param name="left">The <see cref="T:FreeImageAPI.FIRGB16"/> that is to the left of the inequality operator.</param>
            <param name="right">The <see cref="T:FreeImageAPI.FIRGB16"/> that is to the right of the inequality operator.</param>
            <returns>
            <b>true</b> if the two <see cref="T:FreeImageAPI.FIRGB16"/> structures are different; otherwise, <b>false</b>.
            </returns>
        </member>
        <member name="M:FreeImageAPI.FIRGB16.op_Implicit(System.Drawing.Color)~FreeImageAPI.FIRGB16">
            <summary>
            Converts the value of a <see cref="T:System.Drawing.Color"/> structure to a <see cref="T:FreeImageAPI.FIRGB16"/> structure.
            </summary>
            <param name="value">A <see cref="T:System.Drawing.Color"/> structure.</param>
            <returns>A new instance of <see cref="T:FreeImageAPI.FIRGB16"/> initialized to <paramref name="value"/>.</returns>
        </member>
        <member name="M:FreeImageAPI.FIRGB16.op_Implicit(FreeImageAPI.FIRGB16)~System.Drawing.Color">
            <summary>
            Converts the value of a <see cref="T:FreeImageAPI.FIRGB16"/> structure to a <see cref="T:System.Drawing.Color"/> structure.
            </summary>
            <param name="value">A <see cref="T:FreeImageAPI.FIRGB16"/> structure.</param>
            <returns>A new instance of <see cref="T:System.Drawing.Color"/> initialized to <paramref name="value"/>.</returns>
        </member>
        <member name="M:FreeImageAPI.FIRGB16.CompareTo(System.Object)">
            <summary>
            Compares this instance with a specified <see cref="T:System.Object"/>.
            </summary>
            <param name="obj">An object to compare with this instance.</param>
            <returns>A 32-bit signed integer indicating the lexical relationship between the two comparands.</returns>
            <exception cref="T:System.ArgumentException"><paramref name="obj"/> is not a <see cref="T:FreeImageAPI.FIRGB16"/>.</exception>
        </member>
        <member name="M:FreeImageAPI.FIRGB16.CompareTo(FreeImageAPI.FIRGB16)">
            <summary>
            Compares this instance with a specified <see cref="T:FreeImageAPI.FIRGB16"/> object.
            </summary>
            <param name="other">A <see cref="T:FreeImageAPI.FIRGB16"/> to compare.</param>
            <returns>A signed number indicating the relative values of this instance
            and <paramref name="other"/>.</returns>
        </member>
        <member name="M:FreeImageAPI.FIRGB16.Equals(System.Object)">
            <summary>
            Tests whether the specified object is a <see cref="T:FreeImageAPI.FIRGB16"/> structure
            and is equivalent to this <see cref="T:FreeImageAPI.FIRGB16"/> structure.
            </summary>
            <param name="obj">The object to test.</param>
            <returns><b>true</b> if <paramref name="obj"/> is a <see cref="T:FreeImageAPI.FIRGB16"/> structure
            equivalent to this <see cref="T:FreeImageAPI.FIRGB16"/> structure; otherwise, <b>false</b>.</returns>
        </member>
        <member name="M:FreeImageAPI.FIRGB16.Equals(FreeImageAPI.FIRGB16)">
            <summary>
            Tests whether the specified <see cref="T:FreeImageAPI.FIRGB16"/> structure is equivalent to this <see cref="T:FreeImageAPI.FIRGB16"/> structure.
            </summary>
            <param name="other">A <see cref="T:FreeImageAPI.FIRGB16"/> structure to compare to this instance.</param>
            <returns><b>true</b> if <paramref name="obj"/> is a <see cref="T:FreeImageAPI.FIRGB16"/> structure
            equivalent to this <see cref="T:FreeImageAPI.FIRGB16"/> structure; otherwise, <b>false</b>.</returns>
        </member>
        <member name="M:FreeImageAPI.FIRGB16.GetHashCode">
            <summary>
            Returns a hash code for this <see cref="T:FreeImageAPI.FIRGB16"/> structure.
            </summary>
            <returns>An integer value that specifies the hash code for this <see cref="T:FreeImageAPI.FIRGB16"/>.</returns>
        </member>
        <member name="M:FreeImageAPI.FIRGB16.ToString">
            <summary>
            Converts the numeric value of the <see cref="T:FreeImageAPI.FIRGB16"/> object
            to its equivalent string representation.
            </summary>
            <returns>The string representation of the value of this instance.</returns>
        </member>
        <member name="P:FreeImageAPI.FIRGB16.Color">
            <summary>
            Gets or sets the <see cref="T:System.Drawing.Color"/> of the structure.
            </summary>
        </member>
        <member name="T:FreeImageAPI.FIRGBA16">
            <summary>
            The <b>FIRGBA16</b> structure describes a color consisting of relative
            intensities of red, green, blue and alpha value. Each single color
            component consumes 16 bits and so, takes values in the range from 0 to 65535.
            </summary>
            <remarks>
            <para>
            The <b>FIRGBA16</b> structure provides access to an underlying FreeImage <b>FIRGBA16</b>
            structure. To determine the alpha, red, green or blue component of a color,
            use the alpha, red, green or blue fields, respectively.
            </para>
            <para>For easy integration of the underlying structure into the .NET framework,
            the <b>FIRGBA16</b> structure implements implicit conversion operators to 
            convert the represented color to and from the <see cref="T:System.Drawing.Color"/>
            type. This makes the <see cref="T:System.Drawing.Color"/> type a real replacement
            for the <b>FIRGBA16</b> structure and my be used in all situations which require
            an <b>FIRGBA16</b> type.
            </para>
            <para>
            Each color component alpha, red, green or blue of <b>FIRGBA16</b>
            is translated into it's corresponding color component A, R, G or B of
            <see cref="T:System.Drawing.Color"/> by an 8 bit right shift and vice versa.
            </para>
            <para>
            <b>Conversion from System.Drawing.Color to FIRGBA16</b>
            </para>
            <c>FIRGBA16.component = Color.component &lt;&lt; 8</c>
            <para>
            <b>Conversion from FIRGBA16 to System.Drawing.Color</b>
            </para>
            <c>Color.component = FIRGBA16.component &gt;&gt; 8</c>
            <para>
            The same conversion is also applied when the <see cref="P:FreeImageAPI.FIRGBA16.Color"/>
            property or the <see cref="M:FreeImageAPI.FIRGBA16.#ctor(System.Drawing.Color)"/> constructor
            is invoked.
            </para>
            </remarks>
            <example>
            The following code example demonstrates the various conversions between the
            <b>FIRGBA16</b> structure and the <see cref="T:System.Drawing.Color"/> structure.
            <code>
            FIRGBA16 firgba16;
            // Initialize the structure using a native .NET Color structure.
            firgba16 = new FIRGBA16(Color.Indigo);
            // Initialize the structure using the implicit operator.
            firgba16 = Color.DarkSeaGreen;
            // Convert the FIRGBA16 instance into a native .NET Color
            // using its implicit operator.
            Color color = firgba16;
            // Using the structure's Color property for converting it
            // into a native .NET Color.
            Color another = firgba16.Color;
            </code>
            </example>
        </member>
        <member name="F:FreeImageAPI.FIRGBA16.red">
            <summary>
            The red color component.
            </summary>
        </member>
        <member name="F:FreeImageAPI.FIRGBA16.green">
            <summary>
            The green color component.
            </summary>
        </member>
        <member name="F:FreeImageAPI.FIRGBA16.blue">
            <summary>
            The blue color component.
            </summary>
        </member>
        <member name="F:FreeImageAPI.FIRGBA16.alpha">
            <summary>
            The alpha color component.
            </summary>
        </member>
        <member name="M:FreeImageAPI.FIRGBA16.#ctor(System.Drawing.Color)">
            <summary>
            Initializes a new instance based on the specified <see cref="T:System.Drawing.Color"/>.
            </summary>
            <param name="color"><see cref="T:System.Drawing.Color"/> to initialize with.</param>
        </member>
        <member name="M:FreeImageAPI.FIRGBA16.op_Equality(FreeImageAPI.FIRGBA16,FreeImageAPI.FIRGBA16)">
            <summary>
            Tests whether two specified <see cref="T:FreeImageAPI.FIRGBA16"/> structures are equivalent.
            </summary>
            <param name="left">The <see cref="T:FreeImageAPI.FIRGBA16"/> that is to the left of the equality operator.</param>
            <param name="right">The <see cref="T:FreeImageAPI.FIRGBA16"/> that is to the right of the equality operator.</param>
            <returns>
            <b>true</b> if the two <see cref="T:FreeImageAPI.FIRGBA16"/> structures are equal; otherwise, <b>false</b>.
            </returns>
        </member>
        <member name="M:FreeImageAPI.FIRGBA16.op_Inequality(FreeImageAPI.FIRGBA16,FreeImageAPI.FIRGBA16)">
            <summary>
            Tests whether two specified <see cref="T:FreeImageAPI.FIRGBA16"/> structures are different.
            </summary>
            <param name="left">The <see cref="T:FreeImageAPI.FIRGBA16"/> that is to the left of the inequality operator.</param>
            <param name="right">The <see cref="T:FreeImageAPI.FIRGBA16"/> that is to the right of the inequality operator.</param>
            <returns>
            <b>true</b> if the two <see cref="T:FreeImageAPI.FIRGBA16"/> structures are different; otherwise, <b>false</b>.
            </returns>
        </member>
        <member name="M:FreeImageAPI.FIRGBA16.op_Implicit(System.Drawing.Color)~FreeImageAPI.FIRGBA16">
            <summary>
            Converts the value of a <see cref="T:System.Drawing.Color"/> structure to a <see cref="T:FreeImageAPI.FIRGBA16"/> structure.
            </summary>
            <param name="value">A <see cref="T:System.Drawing.Color"/> structure.</param>
            <returns>A new instance of <see cref="T:FreeImageAPI.FIRGBA16"/> initialized to <paramref name="value"/>.</returns>
        </member>
        <member name="M:FreeImageAPI.FIRGBA16.op_Implicit(FreeImageAPI.FIRGBA16)~System.Drawing.Color">
            <summary>
            Converts the value of a <see cref="T:FreeImageAPI.FIRGBA16"/> structure to a <see cref="T:System.Drawing.Color"/> structure.
            </summary>
            <param name="value">A <see cref="T:FreeImageAPI.FIRGBA16"/> structure.</param>
            <returns>A new instance of <see cref="T:System.Drawing.Color"/> initialized to <paramref name="value"/>.</returns>
        </member>
        <member name="M:FreeImageAPI.FIRGBA16.CompareTo(System.Object)">
            <summary>
            Compares this instance with a specified <see cref="T:System.Object"/>.
            </summary>
            <param name="obj">An object to compare with this instance.</param>
            <returns>A 32-bit signed integer indicating the lexical relationship between the two comparands.</returns>
            <exception cref="T:System.ArgumentException"><paramref name="obj"/> is not a <see cref="T:FreeImageAPI.FIRGBA16"/>.</exception>
        </member>
        <member name="M:FreeImageAPI.FIRGBA16.CompareTo(FreeImageAPI.FIRGBA16)">
            <summary>
            Compares this instance with a specified <see cref="T:FreeImageAPI.FIRGBA16"/> object.
            </summary>
            <param name="other">A <see cref="T:FreeImageAPI.FIRGBA16"/> to compare.</param>
            <returns>A signed number indicating the relative values of this instance
            and <paramref name="other"/>.</returns>
        </member>
        <member name="M:FreeImageAPI.FIRGBA16.Equals(System.Object)">
            <summary>
            Tests whether the specified object is a <see cref="T:FreeImageAPI.FIRGBA16"/> structure
            and is equivalent to this <see cref="T:FreeImageAPI.FIRGBA16"/> structure.
            </summary>
            <param name="obj">The object to test.</param>
            <returns><b>true</b> if <paramref name="obj"/> is a <see cref="T:FreeImageAPI.FIRGBA16"/> structure
            equivalent to this <see cref="T:FreeImageAPI.FIRGBA16"/> structure; otherwise, <b>false</b>.</returns>
        </member>
        <member name="M:FreeImageAPI.FIRGBA16.Equals(FreeImageAPI.FIRGBA16)">
            <summary>
            Tests whether the specified <see cref="T:FreeImageAPI.FIRGBA16"/> structure is equivalent to this <see cref="T:FreeImageAPI.FIRGBA16"/> structure.
            </summary>
            <param name="other">A <see cref="T:FreeImageAPI.FIRGBA16"/> structure to compare to this instance.</param>
            <returns><b>true</b> if <paramref name="obj"/> is a <see cref="T:FreeImageAPI.FIRGBA16"/> structure
            equivalent to this <see cref="T:FreeImageAPI.FIRGBA16"/> structure; otherwise, <b>false</b>.</returns>
        </member>
        <member name="M:FreeImageAPI.FIRGBA16.GetHashCode">
            <summary>
            Returns a hash code for this <see cref="T:FreeImageAPI.FIRGBA16"/> structure.
            </summary>
            <returns>An integer value that specifies the hash code for this <see cref="T:FreeImageAPI.FIRGBA16"/>.</returns>
        </member>
        <member name="M:FreeImageAPI.FIRGBA16.ToString">
            <summary>
            Converts the numeric value of the <see cref="T:FreeImageAPI.FIRGBA16"/> object
            to its equivalent string representation.
            </summary>
            <returns>The string representation of the value of this instance.</returns>
        </member>
        <member name="P:FreeImageAPI.FIRGBA16.Color">
            <summary>
            Gets or sets the <see cref="T:System.Drawing.Color"/> of the structure.
            </summary>
        </member>
        <member name="T:FreeImageAPI.FIRGBAF">
            <summary>
            The <b>FIRGBAF</b> structure describes a color consisting of relative
            intensities of red, green, blue and alpha value. Each single color
            component consumes 32 bits and takes values in the range from 0 to 1.
            </summary>
            <remarks>
            <para>
            The <b>FIRGBAF</b> structure provides access to an underlying FreeImage <b>FIRGBAF</b>
            structure. To determine the alpha, red, green or blue component of a color,
            use the alpha, red, green or blue fields, respectively.
            </para>
            <para>For easy integration of the underlying structure into the .NET framework,
            the <b>FIRGBAF</b> structure implements implicit conversion operators to 
            convert the represented color to and from the <see cref="T:System.Drawing.Color"/>
            type. This makes the <see cref="T:System.Drawing.Color"/> type a real replacement
            for the <b>FIRGBAF</b> structure and my be used in all situations which require
            an <b>FIRGBAF</b> type.
            </para>
            <para>
            Each color component alpha, red, green or blue of <b>FIRGBAF</b> is translated
            into it's corresponding color component A, R, G or B of
            <see cref="T:System.Drawing.Color"/> by linearly mapping the values of one range
            into the other range and vice versa.
            </para>
            <para>
            <b>Conversion from System.Drawing.Color to FIRGBAF</b>
            </para>
            <c>FIRGBAF.component = (float)Color.component / 255f</c>
            <para>
            <b>Conversion from FIRGBAF to System.Drawing.Color</b>
            </para>
            <c>Color.component = (int)(FIRGBAF.component * 255f)</c>
            <para>
            The same conversion is also applied when the <see cref="P:FreeImageAPI.FIRGBAF.Color"/>
            property or the <see cref="M:FreeImageAPI.FIRGBAF.#ctor(System.Drawing.Color)"/> constructor
            is invoked.
            </para>
            </remarks>
            <example>
            The following code example demonstrates the various conversions between the
            <b>FIRGBAF</b> structure and the <see cref="T:System.Drawing.Color"/> structure.
            <code>
            FIRGBAF firgbaf;
            // Initialize the structure using a native .NET Color structure.
            firgbaf = new FIRGBAF(Color.Indigo);
            // Initialize the structure using the implicit operator.
            firgbaf = Color.DarkSeaGreen;
            // Convert the FIRGBAF instance into a native .NET Color
            // using its implicit operator.
            Color color = firgbaf;
            // Using the structure's Color property for converting it
            // into a native .NET Color.
            Color another = firgbaf.Color;
            </code>
            </example>
        </member>
        <member name="F:FreeImageAPI.FIRGBAF.red">
            <summary>
            The red color component.
            </summary>
        </member>
        <member name="F:FreeImageAPI.FIRGBAF.green">
            <summary>
            The green color component.
            </summary>
        </member>
        <member name="F:FreeImageAPI.FIRGBAF.blue">
            <summary>
            The blue color component.
            </summary>
        </member>
        <member name="F:FreeImageAPI.FIRGBAF.alpha">
            <summary>
            The alpha color component.
            </summary>
        </member>
        <member name="M:FreeImageAPI.FIRGBAF.#ctor(System.Drawing.Color)">
            <summary>
            Initializes a new instance based on the specified <see cref="T:System.Drawing.Color"/>.
            </summary>
            <param name="color"><see cref="T:System.Drawing.Color"/> to initialize with.</param>
        </member>
        <member name="M:FreeImageAPI.FIRGBAF.op_Equality(FreeImageAPI.FIRGBAF,FreeImageAPI.FIRGBAF)">
            <summary>
            Tests whether two specified <see cref="T:FreeImageAPI.FIRGBAF"/> structures are equivalent.
            </summary>
            <param name="left">The <see cref="T:FreeImageAPI.FIRGBAF"/> that is to the left of the equality operator.</param>
            <param name="right">The <see cref="T:FreeImageAPI.FIRGBAF"/> that is to the right of the equality operator.</param>
            <returns>
            <b>true</b> if the two <see cref="T:FreeImageAPI.FIRGBAF"/> structures are equal; otherwise, <b>false</b>.
            </returns>
        </member>
        <member name="M:FreeImageAPI.FIRGBAF.op_Inequality(FreeImageAPI.FIRGBAF,FreeImageAPI.FIRGBAF)">
            <summary>
            Tests whether two specified <see cref="T:FreeImageAPI.FIRGBAF"/> structures are different.
            </summary>
            <param name="left">The <see cref="T:FreeImageAPI.FIRGBAF"/> that is to the left of the inequality operator.</param>
            <param name="right">The <see cref="T:FreeImageAPI.FIRGBAF"/> that is to the right of the inequality operator.</param>
            <returns>
            <b>true</b> if the two <see cref="T:FreeImageAPI.FIRGBAF"/> structures are different; otherwise, <b>false</b>.
            </returns>
        </member>
        <member name="M:FreeImageAPI.FIRGBAF.op_Implicit(System.Drawing.Color)~FreeImageAPI.FIRGBAF">
            <summary>
            Converts the value of a <see cref="T:System.Drawing.Color"/> structure to a <see cref="T:FreeImageAPI.FIRGBAF"/> structure.
            </summary>
            <param name="value">A <see cref="T:System.Drawing.Color"/> structure.</param>
            <returns>A new instance of <see cref="T:FreeImageAPI.FIRGBAF"/> initialized to <paramref name="value"/>.</returns>
        </member>
        <member name="M:FreeImageAPI.FIRGBAF.op_Implicit(FreeImageAPI.FIRGBAF)~System.Drawing.Color">
            <summary>
            Converts the value of a <see cref="T:FreeImageAPI.FIRGBAF"/> structure to a <see cref="T:System.Drawing.Color"/> structure.
            </summary>
            <param name="value">A <see cref="T:FreeImageAPI.FIRGBAF"/> structure.</param>
            <returns>A new instance of <see cref="T:System.Drawing.Color"/> initialized to <paramref name="value"/>.</returns>
        </member>
        <member name="M:FreeImageAPI.FIRGBAF.CompareTo(System.Object)">
            <summary>
            Compares this instance with a specified <see cref="T:System.Object"/>.
            </summary>
            <param name="obj">An object to compare with this instance.</param>
            <returns>A 32-bit signed integer indicating the lexical relationship between the two comparands.</returns>
            <exception cref="T:System.ArgumentException"><paramref name="obj"/> is not a <see cref="T:FreeImageAPI.FIRGBAF"/>.</exception>
        </member>
        <member name="M:FreeImageAPI.FIRGBAF.CompareTo(FreeImageAPI.FIRGBAF)">
            <summary>
            Compares this instance with a specified <see cref="T:FreeImageAPI.FIRGBAF"/> object.
            </summary>
            <param name="other">A <see cref="T:FreeImageAPI.FIRGBAF"/> to compare.</param>
            <returns>A signed number indicating the relative values of this instance
            and <paramref name="other"/>.</returns>
        </member>
        <member name="M:FreeImageAPI.FIRGBAF.Equals(System.Object)">
            <summary>
            Tests whether the specified object is a <see cref="T:FreeImageAPI.FIRGBAF"/> structure
            and is equivalent to this <see cref="T:FreeImageAPI.FIRGBAF"/> structure.
            </summary>
            <param name="obj">The object to test.</param>
            <returns><b>true</b> if <paramref name="obj"/> is a <see cref="T:FreeImageAPI.FIRGBAF"/> structure
            equivalent to this <see cref="T:FreeImageAPI.FIRGBAF"/> structure; otherwise, <b>false</b>.</returns>
        </member>
        <member name="M:FreeImageAPI.FIRGBAF.Equals(FreeImageAPI.FIRGBAF)">
            <summary>
            Tests whether the specified <see cref="T:FreeImageAPI.FIRGBAF"/> structure is equivalent to this <see cref="T:FreeImageAPI.FIRGBAF"/> structure.
            </summary>
            <param name="other">A <see cref="T:FreeImageAPI.FIRGBAF"/> structure to compare to this instance.</param>
            <returns><b>true</b> if <paramref name="obj"/> is a <see cref="T:FreeImageAPI.FIRGBAF"/> structure
            equivalent to this <see cref="T:FreeImageAPI.FIRGBAF"/> structure; otherwise, <b>false</b>.</returns>
        </member>
        <member name="M:FreeImageAPI.FIRGBAF.GetHashCode">
            <summary>
            Returns a hash code for this <see cref="T:FreeImageAPI.FIRGBAF"/> structure.
            </summary>
            <returns>An integer value that specifies the hash code for this <see cref="T:FreeImageAPI.FIRGBAF"/>.</returns>
        </member>
        <member name="M:FreeImageAPI.FIRGBAF.ToString">
            <summary>
            Converts the numeric value of the <see cref="T:FreeImageAPI.FIRGBAF"/> object
            to its equivalent string representation.
            </summary>
            <returns>The string representation of the value of this instance.</returns>
        </member>
        <member name="P:FreeImageAPI.FIRGBAF.Color">
            <summary>
            Gets or sets the <see cref="T:System.Drawing.Color"/> of the structure.
            </summary>
        </member>
        <member name="T:FreeImageAPI.FIRGBF">
            <summary>
            The <b>FIRGBF</b> structure describes a color consisting of relative
            intensities of red, green, blue and alpha value. Each single color
            component consumes 32 bits and takes values in the range from 0 to 1.
            </summary>
            <remarks>
            <para>
            The <b>FIRGBF</b> structure provides access to an underlying FreeImage <b>FIRGBF</b>
            structure. To determine the red, green or blue component of a color, use the
            red, green or blue fields, respectively.
            </para>
            <para>For easy integration of the underlying structure into the .NET framework,
            the <b>FIRGBF</b> structure implements implicit conversion operators to 
            convert the represented color to and from the <see cref="T:System.Drawing.Color"/>
            type. This makes the <see cref="T:System.Drawing.Color"/> type a real replacement
            for the <b>FIRGBF</b> structure and my be used in all situations which require
            an <b>FIRGBF</b> type.
            </para>
            <para>
            Each color component alpha, red, green or blue of <b>FIRGBF</b> is translated
            into it's corresponding color component A, R, G or B of
            <see cref="T:System.Drawing.Color"/> by linearly mapping the values of one range
            into the other range and vice versa.
            When converting from <see cref="T:System.Drawing.Color"/> into <b>FIRGBF</b>, the
            color's alpha value is ignored and assumed to be 255 when converting from
            <b>FIRGBF</b> into <see cref="T:System.Drawing.Color"/>, creating a fully
            opaque color.
            </para>
            <para>
            <b>Conversion from System.Drawing.Color to FIRGBF</b>
            </para>
            <c>FIRGBF.component = (float)Color.component / 255f</c>
            <para>
            <b>Conversion from FIRGBF to System.Drawing.Color</b>
            </para>
            <c>Color.component = (int)(FIRGBF.component * 255f)</c>
            <para>
            The same conversion is also applied when the <see cref="P:FreeImageAPI.FIRGBF.Color"/>
            property or the <see cref="M:FreeImageAPI.FIRGBF.#ctor(System.Drawing.Color)"/> constructor
            is invoked.
            </para>
            </remarks>
            <example>
            The following code example demonstrates the various conversions between the
            <b>FIRGBF</b> structure and the <see cref="T:System.Drawing.Color"/> structure.
            <code>
            FIRGBF firgbf;
            // Initialize the structure using a native .NET Color structure.
            firgbf = new FIRGBF(Color.Indigo);
            // Initialize the structure using the implicit operator.
            firgbf = Color.DarkSeaGreen;
            // Convert the FIRGBF instance into a native .NET Color
            // using its implicit operator.
            Color color = firgbf;
            // Using the structure's Color property for converting it
            // into a native .NET Color.
            Color another = firgbf.Color;
            </code>
            </example>
        </member>
        <member name="F:FreeImageAPI.FIRGBF.red">
            <summary>
            The red color component.
            </summary>
        </member>
        <member name="F:FreeImageAPI.FIRGBF.green">
            <summary>
            The green color component.
            </summary>
        </member>
        <member name="F:FreeImageAPI.FIRGBF.blue">
            <summary>
            The blue color component.
            </summary>
        </member>
        <member name="M:FreeImageAPI.FIRGBF.#ctor(System.Drawing.Color)">
            <summary>
            Initializes a new instance based on the specified <see cref="T:System.Drawing.Color"/>.
            </summary>
            <param name="color"><see cref="T:System.Drawing.Color"/> to initialize with.</param>
        </member>
        <member name="M:FreeImageAPI.FIRGBF.op_Equality(FreeImageAPI.FIRGBF,FreeImageAPI.FIRGBF)">
            <summary>
            Tests whether two specified <see cref="T:FreeImageAPI.FIRGBF"/> structures are equivalent.
            </summary>
            <param name="left">The <see cref="T:FreeImageAPI.FIRGBF"/> that is to the left of the equality operator.</param>
            <param name="right">The <see cref="T:FreeImageAPI.FIRGBF"/> that is to the right of the equality operator.</param>
            <returns>
            <b>true</b> if the two <see cref="T:FreeImageAPI.FIRGBF"/> structures are equal; otherwise, <b>false</b>.
            </returns>
        </member>
        <member name="M:FreeImageAPI.FIRGBF.op_Inequality(FreeImageAPI.FIRGBF,FreeImageAPI.FIRGBF)">
            <summary>
            Tests whether two specified <see cref="T:FreeImageAPI.FIRGBF"/> structures are different.
            </summary>
            <param name="left">The <see cref="T:FreeImageAPI.FIRGBF"/> that is to the left of the inequality operator.</param>
            <param name="right">The <see cref="T:FreeImageAPI.FIRGBF"/> that is to the right of the inequality operator.</param>
            <returns>
            <b>true</b> if the two <see cref="T:FreeImageAPI.FIRGBF"/> structures are different; otherwise, <b>false</b>.
            </returns>
        </member>
        <member name="M:FreeImageAPI.FIRGBF.op_Implicit(System.Drawing.Color)~FreeImageAPI.FIRGBF">
            <summary>
            Converts the value of a <see cref="T:System.Drawing.Color"/> structure to a <see cref="T:FreeImageAPI.FIRGBF"/> structure.
            </summary>
            <param name="value">A <see cref="T:System.Drawing.Color"/> structure.</param>
            <returns>A new instance of <see cref="T:FreeImageAPI.FIRGBF"/> initialized to <paramref name="value"/>.</returns>
        </member>
        <member name="M:FreeImageAPI.FIRGBF.op_Implicit(FreeImageAPI.FIRGBF)~System.Drawing.Color">
            <summary>
            Converts the value of a <see cref="T:FreeImageAPI.FIRGBF"/> structure to a <see cref="T:System.Drawing.Color"/> structure.
            </summary>
            <param name="value">A <see cref="T:FreeImageAPI.FIRGBF"/> structure.</param>
            <returns>A new instance of <see cref="T:System.Drawing.Color"/> initialized to <paramref name="value"/>.</returns>
        </member>
        <member name="M:FreeImageAPI.FIRGBF.CompareTo(System.Object)">
            <summary>
            Compares this instance with a specified <see cref="T:System.Object"/>.
            </summary>
            <param name="obj">An object to compare with this instance.</param>
            <returns>A 32-bit signed integer indicating the lexical relationship between the two comparands.</returns>
            <exception cref="T:System.ArgumentException"><paramref name="obj"/> is not a <see cref="T:FreeImageAPI.FIRGBF"/>.</exception>
        </member>
        <member name="M:FreeImageAPI.FIRGBF.CompareTo(FreeImageAPI.FIRGBF)">
            <summary>
            Compares this instance with a specified <see cref="T:FreeImageAPI.FIRGBF"/> object.
            </summary>
            <param name="other">A <see cref="T:FreeImageAPI.FIRGBF"/> to compare.</param>
            <returns>A signed number indicating the relative values of this instance
            and <paramref name="other"/>.</returns>
        </member>
        <member name="M:FreeImageAPI.FIRGBF.Equals(System.Object)">
            <summary>
            Tests whether the specified object is a <see cref="T:FreeImageAPI.FIRGBF"/> structure
            and is equivalent to this <see cref="T:FreeImageAPI.FIRGBF"/> structure.
            </summary>
            <param name="obj">The object to test.</param>
            <returns><b>true</b> if <paramref name="obj"/> is a <see cref="T:FreeImageAPI.FIRGBF"/> structure
            equivalent to this <see cref="T:FreeImageAPI.FIRGBF"/> structure; otherwise, <b>false</b>.</returns>
        </member>
        <member name="M:FreeImageAPI.FIRGBF.Equals(FreeImageAPI.FIRGBF)">
            <summary>
            Tests whether the specified <see cref="T:FreeImageAPI.FIRGBF"/> structure is equivalent to this <see cref="T:FreeImageAPI.FIRGBF"/> structure.
            </summary>
            <param name="other">A <see cref="T:FreeImageAPI.FIRGBF"/> structure to compare to this instance.</param>
            <returns><b>true</b> if <paramref name="obj"/> is a <see cref="T:FreeImageAPI.FIRGBF"/> structure
            equivalent to this <see cref="T:FreeImageAPI.FIRGBF"/> structure; otherwise, <b>false</b>.</returns>
        </member>
        <member name="M:FreeImageAPI.FIRGBF.GetHashCode">
            <summary>
            Returns a hash code for this <see cref="T:FreeImageAPI.FIRGBF"/> structure.
            </summary>
            <returns>An integer value that specifies the hash code for this <see cref="T:FreeImageAPI.FIRGBF"/>.</returns>
        </member>
        <member name="M:FreeImageAPI.FIRGBF.ToString">
            <summary>
            Converts the numeric value of the <see cref="T:FreeImageAPI.FIRGBF"/> object
            to its equivalent string representation.
            </summary>
            <returns>The string representation of the value of this instance.</returns>
        </member>
        <member name="P:FreeImageAPI.FIRGBF.Color">
            <summary>
            Gets or sets the <see cref="T:System.Drawing.Color"/> of the structure.
            </summary>
        </member>
        <member name="T:FreeImageAPI.FITAG">
            <summary>
            The <b>FITAG</b> structure is a handle to a FreeImage metadata tag.
            </summary>
        </member>
        <member name="F:FreeImageAPI.FITAG.Zero">
            <summary>
            A read-only field that represents a handle that has been initialized to zero.
            </summary>
        </member>
        <member name="M:FreeImageAPI.FITAG.op_Equality(FreeImageAPI.FITAG,FreeImageAPI.FITAG)">
            <summary>
            Tests whether two specified <see cref="T:FreeImageAPI.FITAG"/> structures are equivalent.
            </summary>
            <param name="left">The <see cref="T:FreeImageAPI.FITAG"/> that is to the left of the equality operator.</param>
            <param name="right">The <see cref="T:FreeImageAPI.FITAG"/> that is to the right of the equality operator.</param>
            <returns>
            <b>true</b> if the two <see cref="T:FreeImageAPI.FITAG"/> structures are equal; otherwise, <b>false</b>.
            </returns>
        </member>
        <member name="M:FreeImageAPI.FITAG.op_Inequality(FreeImageAPI.FITAG,FreeImageAPI.FITAG)">
            <summary>
            Tests whether two specified <see cref="T:FreeImageAPI.FITAG"/> structures are different.
            </summary>
            <param name="left">The <see cref="T:FreeImageAPI.FITAG"/> that is to the left of the inequality operator.</param>
            <param name="right">The <see cref="T:FreeImageAPI.FITAG"/> that is to the right of the inequality operator.</param>
            <returns>
            <b>true</b> if the two <see cref="T:FreeImageAPI.FITAG"/> structures are different; otherwise, <b>false</b>.
            </returns>
        </member>
        <member name="M:FreeImageAPI.FITAG.SetNull">
            <summary>
            Sets the handle to <i>null</i>.
            </summary>
        </member>
        <member name="M:FreeImageAPI.FITAG.ToString">
            <summary>
            Converts the numeric value of the <see cref="T:FreeImageAPI.FITAG"/> object
            to its equivalent string representation.
            </summary>
            <returns>The string representation of the value of this instance.</returns>
        </member>
        <member name="M:FreeImageAPI.FITAG.GetHashCode">
            <summary>
            Returns a hash code for this <see cref="T:FreeImageAPI.FITAG"/> structure.
            </summary>
            <returns>An integer value that specifies the hash code for this <see cref="T:FreeImageAPI.FITAG"/>.</returns>
        </member>
        <member name="M:FreeImageAPI.FITAG.Equals(System.Object)">
            <summary>
            Determines whether the specified <see cref="T:System.Object"/> is equal to the current <see cref="T:System.Object"/>.
            </summary>
            <param name="obj">The <see cref="T:System.Object"/> to compare with the current <see cref="T:System.Object"/>.</param>
            <returns><b>true</b> if the specified <see cref="T:System.Object"/> is equal to the current <see cref="T:System.Object"/>; otherwise, <b>false</b>.</returns>
        </member>
        <member name="M:FreeImageAPI.FITAG.Equals(FreeImageAPI.FITAG)">
            <summary>
            Indicates whether the current object is equal to another object of the same type.
            </summary>
            <param name="other">An object to compare with this object.</param>
            <returns><b>true</b> if the current object is equal to the other parameter; otherwise, <b>false</b>.</returns>
        </member>
        <member name="M:FreeImageAPI.FITAG.CompareTo(System.Object)">
            <summary>
            Compares this instance with a specified <see cref="T:System.Object"/>.
            </summary>
            <param name="obj">An object to compare with this instance.</param>
            <returns>A 32-bit signed integer indicating the lexical relationship between the two comparands.</returns>
            <exception cref="T:System.ArgumentException"><paramref name="obj"/> is not a <see cref="T:FreeImageAPI.FITAG"/>.</exception>
        </member>
        <member name="M:FreeImageAPI.FITAG.CompareTo(FreeImageAPI.FITAG)">
            <summary>
            Compares this instance with a specified <see cref="T:FreeImageAPI.FITAG"/> object.
            </summary>
            <param name="other">A <see cref="T:FreeImageAPI.FITAG"/> to compare.</param>
            <returns>A signed number indicating the relative values of this instance
            and <paramref name="other"/>.</returns>
        </member>
        <member name="P:FreeImageAPI.FITAG.IsNull">
            <summary>
            Gets whether the pointer is a null pointer or not.
            </summary>
            <value><b>true</b> if this <see cref="T:FreeImageAPI.FITAG"/> is a null pointer;
            otherwise, <b>false</b>.</value>		
        </member>
        <member name="T:FreeImageAPI.FIURational">
            <summary>
            The <b>FIURational</b> structure represents a fraction via two <see cref="T:System.UInt32"/>
            instances which are interpreted as numerator and denominator.
            </summary>
            <remarks>
            The structure tries to approximate the value of <see cref="M:FreeImageAPI.FIURational.#ctor(System.Decimal)"/>
            when creating a new instance by using a better algorithm than FreeImage does.
            <para/>
            The structure implements the following operators:
            +, ++, --, ==, != , &gt;, &gt;==, &lt;, &lt;== and ~ (which switches nominator and denomiator).
            <para/>
            The structure can be converted into all .NET standard types either implicit or
            explicit.
            </remarks>
        </member>
        <member name="F:FreeImageAPI.FIURational.MaxValue">
            <summary>
            Represents the largest possible value of <see cref="T:FreeImageAPI.FIURational"/>. This field is constant.
            </summary>
        </member>
        <member name="F:FreeImageAPI.FIURational.MinValue">
            <summary>
            Represents the smallest possible value of <see cref="T:FreeImageAPI.FIURational"/>. This field is constant.
            </summary>
        </member>
        <member name="F:FreeImageAPI.FIURational.Epsilon">
            <summary>
            Represents the smallest positive <see cref="T:FreeImageAPI.FIURational"/> value greater than zero. This field is constant.
            </summary>
        </member>
        <member name="M:FreeImageAPI.FIURational.#ctor(System.UInt32,System.UInt32)">
            <summary>
            Initializes a new instance based on the specified parameters.
            </summary>
            <param name="n">The numerator.</param>
            <param name="d">The denominator.</param>
        </member>
        <member name="M:FreeImageAPI.FIURational.#ctor(FreeImageAPI.FITAG)">
            <summary>
            Initializes a new instance based on the specified parameters.
            </summary>
            <param name="tag">The tag to read the data from.</param>
        </member>
        <member name="M:FreeImageAPI.FIURational.#ctor(System.Decimal)">
             <summary>
            Initializes a new instance based on the specified parameters.
             </summary>
             <param name="value">The value to convert into a fraction.</param>
             <exception cref="T:System.OverflowException">
             <paramref name="value"/> cannot be converted into a fraction
             represented by two unsigned integer values.</exception>
        </member>
        <member name="M:FreeImageAPI.FIURational.Truncate">
            <summary>
            Returns the truncated value of the fraction.
            </summary>
            <returns></returns>
        </member>
        <member name="M:FreeImageAPI.FIURational.Gcd(System.UInt64,System.UInt64)">
            <summary>
            Calculated the greatest common divisor of 'a' and 'b'.
            </summary>
        </member>
        <member name="M:FreeImageAPI.FIURational.Scm(System.UInt32,System.UInt32)">
            <summary>
            Calculated the smallest common multiple of 'a' and 'b'.
            </summary>
        </member>
        <member name="M:FreeImageAPI.FIURational.Normalize">
            <summary>
            Normalizes the fraction.
            </summary>
        </member>
        <member name="M:FreeImageAPI.FIURational.Normalize(System.UInt64@,System.UInt64@)">
            <summary>
            Normalizes a fraction.
            </summary>
        </member>
        <member name="M:FreeImageAPI.FIURational.GetDigits(System.Decimal)">
            <summary>
            Returns the digits after the point.
            </summary>
        </member>
        <member name="M:FreeImageAPI.FIURational.CreateContinuedFraction(System.Decimal)">
            <summary>
            Creates a continued fraction of a decimal value.
            </summary>
        </member>
        <member name="M:FreeImageAPI.FIURational.CreateFraction(System.Int32[],System.UInt32@,System.UInt32@)">
            <summary>
            Creates a fraction from a continued fraction.
            </summary>
        </member>
        <member name="M:FreeImageAPI.FIURational.ApproximateFraction(System.Decimal,System.Int32,System.UInt32@,System.UInt32@)">
            <summary>
            Tries 'brute force' to approximate <paramref name="value"/> with a fraction.
            </summary>
        </member>
        <member name="M:FreeImageAPI.FIURational.ToString">
            <summary>
            Converts the numeric value of the <see cref="T:FreeImageAPI.FIURational"/> object
            to its equivalent string representation.
            </summary>
            <returns>The string representation of the value of this instance.</returns>
        </member>
        <member name="M:FreeImageAPI.FIURational.Equals(System.Object)">
            <summary>
            Tests whether the specified object is a <see cref="T:FreeImageAPI.FIURational"/> structure
            and is equivalent to this <see cref="T:FreeImageAPI.FIURational"/> structure.
            </summary>
            <param name="obj">The object to test.</param>
            <returns><b>true</b> if <paramref name="obj"/> is a <see cref="T:FreeImageAPI.FIURational"/> structure
            equivalent to this <see cref="T:FreeImageAPI.FIURational"/> structure; otherwise, <b>false</b>.</returns>
        </member>
        <member name="M:FreeImageAPI.FIURational.GetHashCode">
            <summary>
            Returns a hash code for this <see cref="T:FreeImageAPI.FIURational"/> structure.
            </summary>
            <returns>An integer value that specifies the hash code for this <see cref="T:FreeImageAPI.FIURational"/>.</returns>
        </member>
        <member name="M:FreeImageAPI.FIURational.op_UnaryPlus(FreeImageAPI.FIURational)">
            <summary>
            Standard implementation of the operator.
            </summary>
        </member>
        <member name="M:FreeImageAPI.FIURational.op_OnesComplement(FreeImageAPI.FIURational)">
            <summary>
            Returns the reciprocal value of this instance.
            </summary>
        </member>
        <member name="M:FreeImageAPI.FIURational.op_Increment(FreeImageAPI.FIURational)">
            <summary>
            Standard implementation of the operator.
            </summary>
        </member>
        <member name="M:FreeImageAPI.FIURational.op_Decrement(FreeImageAPI.FIURational)">
            <summary>
            Standard implementation of the operator.
            </summary>
        </member>
        <member name="M:FreeImageAPI.FIURational.op_Addition(FreeImageAPI.FIURational,FreeImageAPI.FIURational)">
            <summary>
            Standard implementation of the operator.
            </summary>
        </member>
        <member name="M:FreeImageAPI.FIURational.op_Subtraction(FreeImageAPI.FIURational,FreeImageAPI.FIURational)">
            <summary>
            Standard implementation of the operator.
            </summary>
        </member>
        <member name="M:FreeImageAPI.FIURational.op_Multiply(FreeImageAPI.FIURational,FreeImageAPI.FIURational)">
            <summary>
            Standard implementation of the operator.
            </summary>
        </member>
        <member name="M:FreeImageAPI.FIURational.op_Division(FreeImageAPI.FIURational,FreeImageAPI.FIURational)">
            <summary>
            Standard implementation of the operator.
            </summary>
        </member>
        <member name="M:FreeImageAPI.FIURational.op_Modulus(FreeImageAPI.FIURational,FreeImageAPI.FIURational)">
            <summary>
            Standard implementation of the operator.
            </summary>
        </member>
        <member name="M:FreeImageAPI.FIURational.op_Equality(FreeImageAPI.FIURational,FreeImageAPI.FIURational)">
            <summary>
            Standard implementation of the operator.
            </summary>
        </member>
        <member name="M:FreeImageAPI.FIURational.op_Inequality(FreeImageAPI.FIURational,FreeImageAPI.FIURational)">
            <summary>
            Standard implementation of the operator.
            </summary>
        </member>
        <member name="M:FreeImageAPI.FIURational.op_GreaterThan(FreeImageAPI.FIURational,FreeImageAPI.FIURational)">
            <summary>
            Standard implementation of the operator.
            </summary>
        </member>
        <member name="M:FreeImageAPI.FIURational.op_LessThan(FreeImageAPI.FIURational,FreeImageAPI.FIURational)">
            <summary>
            Standard implementation of the operator.
            </summary>
        </member>
        <member name="M:FreeImageAPI.FIURational.op_GreaterThanOrEqual(FreeImageAPI.FIURational,FreeImageAPI.FIURational)">
            <summary>
            Standard implementation of the operator.
            </summary>
        </member>
        <member name="M:FreeImageAPI.FIURational.op_LessThanOrEqual(FreeImageAPI.FIURational,FreeImageAPI.FIURational)">
            <summary>
            Standard implementation of the operator.
            </summary>
        </member>
        <member name="M:FreeImageAPI.FIURational.op_Explicit(FreeImageAPI.FIURational)~System.Boolean">
            <summary>
            Converts the value of a <see cref="T:FreeImageAPI.FIURational"/> structure to a <see cref="T:System.Boolean"/> structure.
            </summary>
            <param name="value">A <see cref="T:FreeImageAPI.FIURational"/> structure.</param>
            <returns>A new instance of <see cref="T:System.Boolean"/> initialized to <paramref name="value"/>.</returns>
        </member>
        <member name="M:FreeImageAPI.FIURational.op_Explicit(FreeImageAPI.FIURational)~System.Byte">
            <summary>
            Converts the value of a <see cref="T:FreeImageAPI.FIURational"/> structure to a <see cref="T:System.Byte"/> structure.
            </summary>
            <param name="value">A <see cref="T:FreeImageAPI.FIURational"/> structure.</param>
            <returns>A new instance of <see cref="T:System.Byte"/> initialized to <paramref name="value"/>.</returns>
        </member>
        <member name="M:FreeImageAPI.FIURational.op_Explicit(FreeImageAPI.FIURational)~System.Char">
            <summary>
            Converts the value of a <see cref="T:FreeImageAPI.FIURational"/> structure to a <see cref="T:System.Char"/> structure.
            </summary>
            <param name="value">A <see cref="T:FreeImageAPI.FIURational"/> structure.</param>
            <returns>A new instance of <see cref="T:System.Char"/> initialized to <paramref name="value"/>.</returns>
        </member>
        <member name="M:FreeImageAPI.FIURational.op_Implicit(FreeImageAPI.FIURational)~System.Decimal">
            <summary>
            Converts the value of a <see cref="T:FreeImageAPI.FIURational"/> structure to a <see cref="T:System.Decimal"/> structure.
            </summary>
            <param name="value">A <see cref="T:FreeImageAPI.FIURational"/> structure.</param>
            <returns>A new instance of <see cref="T:System.Decimal"/> initialized to <paramref name="value"/>.</returns>
        </member>
        <member name="M:FreeImageAPI.FIURational.op_Implicit(FreeImageAPI.FIURational)~System.Double">
            <summary>
            Converts the value of a <see cref="T:FreeImageAPI.FIURational"/> structure to a <see cref="T:System.Double"/> structure.
            </summary>
            <param name="value">A <see cref="T:FreeImageAPI.FIURational"/> structure.</param>
            <returns>A new instance of <see cref="T:System.Double"/> initialized to <paramref name="value"/>.</returns>
        </member>
        <member name="M:FreeImageAPI.FIURational.op_Explicit(FreeImageAPI.FIURational)~System.Int16">
            <summary>
            Converts the value of a <see cref="T:FreeImageAPI.FIURational"/> structure to an <see cref="T:System.Int16"/> structure.
            </summary>
            <param name="value">A <see cref="T:FreeImageAPI.FIURational"/> structure.</param>
            <returns>A new instance of <see cref="T:System.Int16"/> initialized to <paramref name="value"/>.</returns>
        </member>
        <member name="M:FreeImageAPI.FIURational.op_Explicit(FreeImageAPI.FIURational)~System.Int32">
            <summary>
            Converts the value of a <see cref="T:FreeImageAPI.FIURational"/> structure to an <see cref="T:System.Int32"/> structure.
            </summary>
            <param name="value">A <see cref="T:FreeImageAPI.FIURational"/> structure.</param>
            <returns>A new instance of <see cref="T:System.Int32"/> initialized to <paramref name="value"/>.</returns>
        </member>
        <member name="M:FreeImageAPI.FIURational.op_Explicit(FreeImageAPI.FIURational)~System.Int64">
            <summary>
            Converts the value of a <see cref="T:FreeImageAPI.FIURational"/> structure to an <see cref="T:System.Int64"/> structure.
            </summary>
            <param name="value">A <see cref="T:FreeImageAPI.FIURational"/> structure.</param>
            <returns>A new instance of <see cref="T:System.Int64"/> initialized to <paramref name="value"/>.</returns>
        </member>
        <member name="M:FreeImageAPI.FIURational.op_Implicit(FreeImageAPI.FIURational)~System.Single">
            <summary>
            Converts the value of a <see cref="T:FreeImageAPI.FIURational"/> structure to a <see cref="T:System.Single"/> structure.
            </summary>
            <param name="value">A <see cref="T:FreeImageAPI.FIURational"/> structure.</param>
            <returns>A new instance of <see cref="T:System.Single"/> initialized to <paramref name="value"/>.</returns>
        </member>
        <member name="M:FreeImageAPI.FIURational.op_Explicit(FreeImageAPI.FIURational)~System.SByte">
            <summary>
            Converts the value of a <see cref="T:FreeImageAPI.FIURational"/> structure to a <see cref="T:System.SByte"/> structure.
            </summary>
            <param name="value">A <see cref="T:FreeImageAPI.FIURational"/> structure.</param>
            <returns>A new instance of <see cref="T:System.SByte"/> initialized to <paramref name="value"/>.</returns>
        </member>
        <member name="M:FreeImageAPI.FIURational.op_Explicit(FreeImageAPI.FIURational)~System.UInt16">
            <summary>
            Converts the value of a <see cref="T:FreeImageAPI.FIURational"/> structure to an <see cref="T:System.UInt16"/> structure.
            </summary>
            <param name="value">A <see cref="T:FreeImageAPI.FIURational"/> structure.</param>
            <returns>A new instance of <see cref="T:System.UInt16"/> initialized to <paramref name="value"/>.</returns>
        </member>
        <member name="M:FreeImageAPI.FIURational.op_Explicit(FreeImageAPI.FIURational)~System.UInt32">
            <summary>
            Converts the value of a <see cref="T:FreeImageAPI.FIURational"/> structure to an <see cref="T:System.UInt32"/> structure.
            </summary>
            <param name="value">A <see cref="T:FreeImageAPI.FIURational"/> structure.</param>
            <returns>A new instance of <see cref="T:System.UInt32"/> initialized to <paramref name="value"/>.</returns>
        </member>
        <member name="M:FreeImageAPI.FIURational.op_Explicit(FreeImageAPI.FIURational)~System.UInt64">
            <summary>
            Converts the value of a <see cref="T:FreeImageAPI.FIURational"/> structure to an <see cref="T:System.UInt32"/> structure.
            </summary>
            <param name="value">A <see cref="T:FreeImageAPI.FIURational"/> structure.</param>
            <returns>A new instance of <see cref="T:System.UInt32"/> initialized to <paramref name="value"/>.</returns>
        </member>
        <member name="M:FreeImageAPI.FIURational.op_Explicit(System.Boolean)~FreeImageAPI.FIURational">
            <summary>
            Converts the value of a <see cref="T:System.Boolean"/> structure to a <see cref="T:FreeImageAPI.FIURational"/> structure.
            </summary>
            <param name="value">A <see cref="T:System.Boolean"/> structure.</param>
            <returns>A new instance of <see cref="T:FreeImageAPI.FIURational"/> initialized to <paramref name="value"/>.</returns>
        </member>
        <member name="M:FreeImageAPI.FIURational.op_Implicit(System.Byte)~FreeImageAPI.FIURational">
            <summary>
            Converts the value of a <see cref="T:System.Byte"/> structure to a <see cref="T:FreeImageAPI.FIURational"/> structure.
            </summary>
            <param name="value">A <see cref="T:System.Byte"/> structure.</param>
            <returns>A new instance of <see cref="T:FreeImageAPI.FIURational"/> initialized to <paramref name="value"/>.</returns>
        </member>
        <member name="M:FreeImageAPI.FIURational.op_Implicit(System.Char)~FreeImageAPI.FIURational">
            <summary>
            Converts the value of a <see cref="T:System.Char"/> structure to a <see cref="T:FreeImageAPI.FIURational"/> structure.
            </summary>
            <param name="value">A <see cref="T:System.Char"/> structure.</param>
            <returns>A new instance of <see cref="T:FreeImageAPI.FIURational"/> initialized to <paramref name="value"/>.</returns>
        </member>
        <member name="M:FreeImageAPI.FIURational.op_Explicit(System.Decimal)~FreeImageAPI.FIURational">
            <summary>
            Converts the value of a <see cref="T:System.Decimal"/> structure to a <see cref="T:FreeImageAPI.FIURational"/> structure.
            </summary>
            <param name="value">A <see cref="T:System.Decimal"/> structure.</param>
            <returns>A new instance of <see cref="T:FreeImageAPI.FIURational"/> initialized to <paramref name="value"/>.</returns>
        </member>
        <member name="M:FreeImageAPI.FIURational.op_Explicit(System.Double)~FreeImageAPI.FIURational">
            <summary>
            Converts the value of a <see cref="T:System.Double"/> structure to a <see cref="T:FreeImageAPI.FIURational"/> structure.
            </summary>
            <param name="value">A <see cref="T:System.Double"/> structure.</param>
            <returns>A new instance of <see cref="T:FreeImageAPI.FIURational"/> initialized to <paramref name="value"/>.</returns>
        </member>
        <member name="M:FreeImageAPI.FIURational.op_Implicit(System.Int16)~FreeImageAPI.FIURational">
            <summary>
            Converts the value of an <see cref="T:System.Int16"/> structure to a <see cref="T:FreeImageAPI.FIURational"/> structure.
            </summary>
            <param name="value">An <see cref="T:System.Int16"/> structure.</param>
            <returns>A new instance of <see cref="T:FreeImageAPI.FIURational"/> initialized to <paramref name="value"/>.</returns>
        </member>
        <member name="M:FreeImageAPI.FIURational.op_Implicit(System.Int32)~FreeImageAPI.FIURational">
            <summary>
            Converts the value of an <see cref="T:System.Int32"/> structure to a <see cref="T:FreeImageAPI.FIURational"/> structure.
            </summary>
            <param name="value">An <see cref="T:System.Int32"/> structure.</param>
            <returns>A new instance of <see cref="T:FreeImageAPI.FIURational"/> initialized to <paramref name="value"/>.</returns>
        </member>
        <member name="M:FreeImageAPI.FIURational.op_Explicit(System.Int64)~FreeImageAPI.FIURational">
            <summary>
            Converts the value of an <see cref="T:System.Int64"/> structure to a <see cref="T:FreeImageAPI.FIURational"/> structure.
            </summary>
            <param name="value">An <see cref="T:System.Int64"/> structure.</param>
            <returns>A new instance of <see cref="T:FreeImageAPI.FIURational"/> initialized to <paramref name="value"/>.</returns>
        </member>
        <member name="M:FreeImageAPI.FIURational.op_Implicit(System.SByte)~FreeImageAPI.FIURational">
            <summary>
            Converts the value of a <see cref="T:System.SByte"/> structure to a <see cref="T:FreeImageAPI.FIURational"/> structure.
            </summary>
            <param name="value">A <see cref="T:System.SByte"/> structure.</param>
            <returns>A new instance of <see cref="T:FreeImageAPI.FIURational"/> initialized to <paramref name="value"/>.</returns>
        </member>
        <member name="M:FreeImageAPI.FIURational.op_Explicit(System.Single)~FreeImageAPI.FIURational">
            <summary>
            Converts the value of a <see cref="T:System.Single"/> structure to a <see cref="T:FreeImageAPI.FIURational"/> structure.
            </summary>
            <param name="value">A <see cref="T:System.Single"/> structure.</param>
            <returns>A new instance of <see cref="T:FreeImageAPI.FIURational"/> initialized to <paramref name="value"/>.</returns>
        </member>
        <member name="M:FreeImageAPI.FIURational.op_Implicit(System.UInt16)~FreeImageAPI.FIURational">
            <summary>
            Converts the value of an <see cref="T:System.UInt16"/> structure to a <see cref="T:FreeImageAPI.FIURational"/> structure.
            </summary>
            <param name="value">An <see cref="T:System.UInt16"/> structure.</param>
            <returns>A new instance of <see cref="T:FreeImageAPI.FIURational"/> initialized to <paramref name="value"/>.</returns>
        </member>
        <member name="M:FreeImageAPI.FIURational.op_Explicit(System.UInt32)~FreeImageAPI.FIURational">
            <summary>
            Converts the value of an <see cref="T:System.UInt32"/> structure to a <see cref="T:FreeImageAPI.FIURational"/> structure.
            </summary>
            <param name="value">An <see cref="T:System.UInt32"/> structure.</param>
            <returns>A new instance of <see cref="T:FreeImageAPI.FIURational"/> initialized to <paramref name="value"/>.</returns>
        </member>
        <member name="M:FreeImageAPI.FIURational.op_Explicit(System.UInt64)~FreeImageAPI.FIURational">
            <summary>
            Converts the value of an <see cref="T:System.UInt64"/> structure to a <see cref="T:FreeImageAPI.FIURational"/> structure.
            </summary>
            <param name="value">An <see cref="T:System.UInt64"/> structure.</param>
            <returns>A new instance of <see cref="T:FreeImageAPI.FIURational"/> initialized to <paramref name="value"/>.</returns>
        </member>
        <member name="M:FreeImageAPI.FIURational.CompareTo(System.Object)">
            <summary>
            Compares this instance with a specified <see cref="T:System.Object"/>.
            </summary>
            <param name="obj">An object to compare with this instance.</param>
            <returns>A 32-bit signed integer indicating the lexical relationship between the two comparands.</returns>
            <exception cref="T:System.ArgumentException"><paramref name="obj"/> is not a <see cref="T:FreeImageAPI.FIURational"/>.</exception>
        </member>
        <member name="M:FreeImageAPI.FIURational.ToString(System.String,System.IFormatProvider)">
            <summary>
            Formats the value of the current instance using the specified format.
            </summary>
            <param name="format">The String specifying the format to use.</param>
            <param name="formatProvider">The IFormatProvider to use to format the value.</param>
            <returns>A String containing the value of the current instance in the specified format.</returns>
        </member>
        <member name="M:FreeImageAPI.FIURational.Equals(FreeImageAPI.FIURational)">
            <summary>
            Tests whether the specified <see cref="T:FreeImageAPI.FIURational"/> structure is equivalent to this <see cref="T:FreeImageAPI.FIURational"/> structure.
            </summary>
            <param name="other">A <see cref="T:FreeImageAPI.FIURational"/> structure to compare to this instance.</param>
            <returns><b>true</b> if <paramref name="obj"/> is a <see cref="T:FreeImageAPI.FIURational"/> structure
            equivalent to this <see cref="T:FreeImageAPI.FIURational"/> structure; otherwise, <b>false</b>.</returns>
        </member>
        <member name="M:FreeImageAPI.FIURational.CompareTo(FreeImageAPI.FIURational)">
            <summary>
            Compares this instance with a specified <see cref="T:FreeImageAPI.FIURational"/> object.
            </summary>
            <param name="other">A <see cref="T:FreeImageAPI.FIURational"/> to compare.</param>
            <returns>A signed number indicating the relative values of this instance
            and <paramref name="other"/>.</returns>
        </member>
        <member name="P:FreeImageAPI.FIURational.Numerator">
            <summary>
            The numerator of the fraction.
            </summary>
        </member>
        <member name="P:FreeImageAPI.FIURational.Denominator">
            <summary>
            The denominator of the fraction.
            </summary>
        </member>
        <member name="P:FreeImageAPI.FIURational.IsInteger">
            <summary>
            Returns whether the fraction is representing an integer value.
            </summary>
        </member>
        <member name="T:FreeImageAPI.IO.fi_handle">
             <summary>
             Wrapper for a custom handle.
             </summary>
             <remarks>
             The <b>fi_handle</b> of FreeImage in C++ is a simple pointer, but in .NET
             it's not that simple. This wrapper uses fi_handle in two different ways.
            
             We implement a new plugin and FreeImage gives us a handle (pointer) that
             we can simply pass through to the given functions in a 'FreeImageIO'
             structure.
             But when we want to use LoadFromhandle or SaveToHandle we need
             a fi_handle (that we receive again in our own functions).
             This handle is for example a stream (see LoadFromStream / SaveToStream)
             that we want to work with. To know which stream a read/write is meant for
             we could use a hash value that the wrapper itself handles or we can
             go the unmanaged way of using a handle.
             Therefor we use a <see cref="T:System.Runtime.InteropServices.GCHandle"/> to receive a unique pointer that we can
             convert back into a .NET object.
             When the <b>fi_handle</b> instance is no longer needed the instance must be disposed
             by the creater manually! It is recommended to use the <c>using</c> statement to
             be sure the instance is always disposed:
             
             <code>
             using (fi_handle handle = new fi_handle(object))
             {
                 callSomeFunctions(handle);
             }
             </code>
             
             What does that mean?
             If we get a <b>fi_handle</b> from unmanaged code we get a pointer to unmanaged
             memory that we do not have to care about, and just pass ist back to FreeImage.
             If we have to create a handle our own we use the standard constructur
             that fills the <see cref="T:System.IntPtr"/> with an pointer that represents the given object.
             With calling <see cref="M:FreeImageAPI.IO.fi_handle.GetObject"/> the <see cref="T:System.IntPtr"/> is used to retrieve the original
             object we passed through the constructor.
            
             This way we can implement a <b>fi_handle</b> that works with managed an unmanaged
             code.
             </remarks>
        </member>
        <member name="F:FreeImageAPI.IO.fi_handle.handle">
            <summary>
            The handle to wrap.
            </summary>
        </member>
        <member name="M:FreeImageAPI.IO.fi_handle.#ctor(System.Object)">
            <summary>
            Initializes a new instance wrapping a managed object.
            </summary>
            <param name="obj">The object to wrap.</param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="obj"/> is null.</exception>
        </member>
        <member name="M:FreeImageAPI.IO.fi_handle.op_Equality(FreeImageAPI.IO.fi_handle,FreeImageAPI.IO.fi_handle)">
            <summary>
            Tests whether two specified <see cref="T:FreeImageAPI.IO.fi_handle"/> structures are equivalent.
            </summary>
            <param name="left">The <see cref="T:FreeImageAPI.IO.fi_handle"/> that is to the left of the equality operator.</param>
            <param name="right">The <see cref="T:FreeImageAPI.IO.fi_handle"/> that is to the right of the equality operator.</param>
            <returns>
            <b>true</b> if the two <see cref="T:FreeImageAPI.IO.fi_handle"/> structures are equal; otherwise, <b>false</b>.
            </returns>
        </member>
        <member name="M:FreeImageAPI.IO.fi_handle.op_Inequality(FreeImageAPI.IO.fi_handle,FreeImageAPI.IO.fi_handle)">
            <summary>
            Tests whether two specified <see cref="T:FreeImageAPI.IO.fi_handle"/> structures are different.
            </summary>
            <param name="left">The <see cref="T:FreeImageAPI.IO.fi_handle"/> that is to the left of the inequality operator.</param>
            <param name="right">The <see cref="T:FreeImageAPI.IO.fi_handle"/> that is to the right of the inequality operator.</param>
            <returns>
            <b>true</b> if the two <see cref="T:FreeImageAPI.IO.fi_handle"/> structures are different; otherwise, <b>false</b>.
            </returns>
        </member>
        <member name="M:FreeImageAPI.IO.fi_handle.GetObject">
            <summary>
            Returns the object assigned to the handle in case this instance
            was created by managed code.
            </summary>
            <returns><see cref="T:System.Object"/> assigned to this handle or null on failure.</returns>
        </member>
        <member name="M:FreeImageAPI.IO.fi_handle.ToString">
            <summary>
            Converts the numeric value of the <see cref="T:FreeImageAPI.IO.fi_handle"/> object
            to its equivalent string representation.
            </summary>
            <returns>The string representation of the value of this instance.</returns>
        </member>
        <member name="M:FreeImageAPI.IO.fi_handle.GetHashCode">
            <summary>
            Returns a hash code for this <see cref="T:FreeImageAPI.IO.fi_handle"/> structure.
            </summary>
            <returns>An integer value that specifies the hash code for this <see cref="T:FreeImageAPI.IO.fi_handle"/>.</returns>
        </member>
        <member name="M:FreeImageAPI.IO.fi_handle.Equals(System.Object)">
            <summary>
            Tests whether the specified object is a <see cref="T:FreeImageAPI.IO.fi_handle"/> structure
            and is equivalent to this <see cref="T:FreeImageAPI.IO.fi_handle"/> structure.
            </summary>
            <param name="obj">The object to test.</param>
            <returns><b>true</b> if <paramref name="obj"/> is a <see cref="T:FreeImageAPI.IO.fi_handle"/> structure
            equivalent to this <see cref="T:FreeImageAPI.IO.fi_handle"/> structure; otherwise, <b>false</b>.</returns>
        </member>
        <member name="M:FreeImageAPI.IO.fi_handle.Equals(FreeImageAPI.IO.fi_handle)">
            <summary>
            Indicates whether the current object is equal to another object of the same type.
            </summary>
            <param name="other">An object to compare with this object.</param>
            <returns>True if the current object is equal to the other parameter; otherwise, <b>false</b>.</returns>
        </member>
        <member name="M:FreeImageAPI.IO.fi_handle.CompareTo(System.Object)">
            <summary>
            Compares this instance with a specified <see cref="T:System.Object"/>.
            </summary>
            <param name="obj">An object to compare with this instance.</param>
            <returns>A 32-bit signed integer indicating the lexical relationship between the two comparands.</returns>
            <exception cref="T:System.ArgumentException"><paramref name="obj"/> is not a <see cref="T:FreeImageAPI.IO.fi_handle"/>.</exception>
        </member>
        <member name="M:FreeImageAPI.IO.fi_handle.CompareTo(FreeImageAPI.IO.fi_handle)">
            <summary>
            Compares this instance with a specified <see cref="T:FreeImageAPI.IO.fi_handle"/> object.
            </summary>
            <param name="other">A <see cref="T:FreeImageAPI.IO.fi_handle"/> to compare.</param>
            <returns>A signed number indicating the relative values of this instance
            and <paramref name="other"/>.</returns>
        </member>
        <member name="M:FreeImageAPI.IO.fi_handle.Dispose">
            <summary>
            Releases all resources used by the instance.
            </summary>
        </member>
        <member name="P:FreeImageAPI.IO.fi_handle.IsNull">
            <summary>
            Gets whether the pointer is a null pointer.
            </summary>
        </member>
        <member name="T:FreeImageAPI.IO.FreeImageIO">
            <summary>
            Structure for implementing access to custom handles.
            </summary>
        </member>
        <member name="F:FreeImageAPI.IO.FreeImageIO.readProc">
            <summary>
            Delegate to the C++ function <b>fread</b>.
            </summary>
        </member>
        <member name="F:FreeImageAPI.IO.FreeImageIO.writeProc">
            <summary>
            Delegate to the C++ function <b>fwrite</b>.
            </summary>
        </member>
        <member name="F:FreeImageAPI.IO.FreeImageIO.seekProc">
            <summary>
            Delegate to the C++ function <b>fseek</b>.
            </summary>
        </member>
        <member name="F:FreeImageAPI.IO.FreeImageIO.tellProc">
            <summary>
            Delegate to the C++ function <b>ftell</b>.
            </summary>
        </member>
        <member name="T:FreeImageAPI.Plugins.Plugin">
            <summary>
            The structure contains functionpointers that make up a FreeImage plugin.
            </summary>
        </member>
        <member name="F:FreeImageAPI.Plugins.Plugin.formatProc">
            <summary>
            Delegate to a function that returns a string which describes
            the plugins format.
            </summary>
        </member>
        <member name="F:FreeImageAPI.Plugins.Plugin.descriptionProc">
            <summary>
            Delegate to a function that returns a string which contains
            a more detailed description.
            </summary>
        </member>
        <member name="F:FreeImageAPI.Plugins.Plugin.extensionListProc">
            <summary>
            Delegate to a function that returns a comma seperated list
            of file extensions the plugin can read or write.
            </summary>
        </member>
        <member name="F:FreeImageAPI.Plugins.Plugin.regExprProc">
            <summary>
            Delegate to a function that returns a regular expression that
            can be used to idientify whether a file can be handled by the plugin.
            </summary>
        </member>
        <member name="F:FreeImageAPI.Plugins.Plugin.openProc">
            <summary>
            Delegate to a function that opens a file.
            </summary>
        </member>
        <member name="F:FreeImageAPI.Plugins.Plugin.closeProc">
            <summary>
            Delegate to a function that closes a previosly opened file.
            </summary>
        </member>
        <member name="F:FreeImageAPI.Plugins.Plugin.pageCountProc">
            <summary>
            Delegate to a function that returns the number of pages of a multipage
            bitmap if the plugin is capable of handling multipage bitmaps.
            </summary>
        </member>
        <member name="F:FreeImageAPI.Plugins.Plugin.pageCapabilityProc">
            <summary>
            UNKNOWN
            </summary>
        </member>
        <member name="F:FreeImageAPI.Plugins.Plugin.loadProc">
            <summary>
            Delegate to a function that loads and decodes a bitmap into memory.
            </summary>
        </member>
        <member name="F:FreeImageAPI.Plugins.Plugin.saveProc">
            <summary>
             Delegate to a function that saves a bitmap.
            </summary>
        </member>
        <member name="F:FreeImageAPI.Plugins.Plugin.validateProc">
            <summary>
            Delegate to a function that determines whether the source is a valid image.
            </summary>
        </member>
        <member name="F:FreeImageAPI.Plugins.Plugin.mimeProc">
            <summary>
            Delegate to a function that returns a string which contains
            the plugin's mime type.
            </summary>
        </member>
        <member name="F:FreeImageAPI.Plugins.Plugin.supportsExportBPPProc">
            <summary>
            Delegate to a function that returns whether the plugin can handle the
            specified color depth.
            </summary>
        </member>
        <member name="F:FreeImageAPI.Plugins.Plugin.supportsExportTypeProc">
            <summary>
            Delegate to a function that returns whether the plugin can handle the
            specified image type.
            </summary>
        </member>
        <member name="F:FreeImageAPI.Plugins.Plugin.supportsICCProfilesProc">
            <summary>
            Delegate to a function that returns whether the plugin can handle
            ICC-Profiles.
            </summary>
        </member>
        <member name="T:FreeImageAPI.RGBQUAD">
            <summary>
            The <b>RGBQUAD</b> structure describes a color consisting of relative
            intensities of red, green, blue and alpha value. Each single color
            component consumes 8 bits and so, takes values in the range from 0 to 255.
            </summary>
            <remarks>
            <para>
            The <b>RGBQUAD</b> structure provides access to an underlying Win32 <b>RGBQUAD</b>
            structure. To determine the alpha, red, green or blue component of a color,
            use the rgbReserved, rgbRed, rgbGreen or rgbBlue fields, respectively.
            </para>
            <para>For easy integration of the underlying structure into the .NET framework,
            the <b>RGBQUAD</b> structure implements implicit conversion operators to 
            convert the represented color to and from the <see cref="T:System.Drawing.Color"/>
            type. This makes the <see cref="T:System.Drawing.Color"/> type a real replacement
            for the <b>RGBQUAD</b> structure and my be used in all situations which require
            an <b>RGBQUAD</b> type.
            </para>
            <para>
            Each color component rgbReserved, rgbRed, rgbGreen or rgbBlue of <b>RGBQUAD</b>
            is translated into it's corresponding color component A, R, G or B of
            <see cref="T:System.Drawing.Color"/> by an one-to-one manner and vice versa.
            </para>
            <para>
            <b>Conversion from System.Drawing.Color to RGBQUAD</b>
            </para>
            <c>RGBQUAD.component = Color.component</c>
            <para>
            <b>Conversion from RGBQUAD to System.Drawing.Color</b>
            </para>
            <c>Color.component = RGBQUAD.component</c>
            <para>
            The same conversion is also applied when the <see cref="P:FreeImageAPI.RGBQUAD.Color"/>
            property or the <see cref="M:FreeImageAPI.RGBQUAD.#ctor(System.Drawing.Color)"/> constructor
            is invoked.
            </para>
            </remarks>
            <example>
            The following code example demonstrates the various conversions between the
            <b>RGBQUAD</b> structure and the <see cref="T:System.Drawing.Color"/> structure.
            <code>
            RGBQUAD rgbq;
            // Initialize the structure using a native .NET Color structure.
            rgbq = new RGBQUAD(Color.Indigo);
            // Initialize the structure using the implicit operator.
            rgbq = Color.DarkSeaGreen;
            // Convert the RGBQUAD instance into a native .NET Color
            // using its implicit operator.
            Color color = rgbq;
            // Using the structure's Color property for converting it
            // into a native .NET Color.
            Color another = rgbq.Color;
            </code>
            </example>
        </member>
        <member name="F:FreeImageAPI.RGBQUAD.rgbBlue">
            <summary>
            The blue color component.
            </summary>
        </member>
        <member name="F:FreeImageAPI.RGBQUAD.rgbGreen">
            <summary>
            The green color component.
            </summary>
        </member>
        <member name="F:FreeImageAPI.RGBQUAD.rgbRed">
            <summary>
            The red color component.
            </summary>
        </member>
        <member name="F:FreeImageAPI.RGBQUAD.rgbReserved">
            <summary>
            The alpha color component.
            </summary>
        </member>
        <member name="F:FreeImageAPI.RGBQUAD.uintValue">
            <summary>
            The color's value.
            </summary>
        </member>
        <member name="M:FreeImageAPI.RGBQUAD.#ctor(System.Drawing.Color)">
            <summary>
            Initializes a new instance based on the specified <see cref="T:System.Drawing.Color"/>.
            </summary>
            <param name="color"><see cref="T:System.Drawing.Color"/> to initialize with.</param>
        </member>
        <member name="M:FreeImageAPI.RGBQUAD.op_Equality(FreeImageAPI.RGBQUAD,FreeImageAPI.RGBQUAD)">
            <summary>
            Tests whether two specified <see cref="T:FreeImageAPI.RGBQUAD"/> structures are equivalent.
            </summary>
            <param name="left">The <see cref="T:FreeImageAPI.RGBQUAD"/> that is to the left of the equality operator.</param>
            <param name="right">The <see cref="T:FreeImageAPI.RGBQUAD"/> that is to the right of the equality operator.</param>
            <returns>
            <b>true</b> if the two <see cref="T:FreeImageAPI.RGBQUAD"/> structures are equal; otherwise, <b>false</b>.
            </returns>
        </member>
        <member name="M:FreeImageAPI.RGBQUAD.op_Inequality(FreeImageAPI.RGBQUAD,FreeImageAPI.RGBQUAD)">
            <summary>
            Tests whether two specified <see cref="T:FreeImageAPI.RGBQUAD"/> structures are different.
            </summary>
            <param name="left">The <see cref="T:FreeImageAPI.RGBQUAD"/> that is to the left of the inequality operator.</param>
            <param name="right">The <see cref="T:FreeImageAPI.RGBQUAD"/> that is to the right of the inequality operator.</param>
            <returns>
            <b>true</b> if the two <see cref="T:FreeImageAPI.RGBQUAD"/> structures are different; otherwise, <b>false</b>.
            </returns>
        </member>
        <member name="M:FreeImageAPI.RGBQUAD.op_Implicit(System.Drawing.Color)~FreeImageAPI.RGBQUAD">
            <summary>
            Converts the value of a <see cref="T:System.Drawing.Color"/> structure to a <see cref="T:FreeImageAPI.RGBQUAD"/> structure.
            </summary>
            <param name="value">A <see cref="T:System.Drawing.Color"/> structure.</param>
            <returns>A new instance of <see cref="T:FreeImageAPI.RGBQUAD"/> initialized to <paramref name="value"/>.</returns>
        </member>
        <member name="M:FreeImageAPI.RGBQUAD.op_Implicit(FreeImageAPI.RGBQUAD)~System.Drawing.Color">
            <summary>
            Converts the value of a <see cref="T:FreeImageAPI.RGBQUAD"/> structure to a Color structure.
            </summary>
            <param name="value">A <see cref="T:FreeImageAPI.RGBQUAD"/> structure.</param>
            <returns>A new instance of <see cref="T:System.Drawing.Color"/> initialized to <paramref name="value"/>.</returns>
        </member>
        <member name="M:FreeImageAPI.RGBQUAD.op_Implicit(System.UInt32)~FreeImageAPI.RGBQUAD">
            <summary>
            Converts the value of an <see cref="T:System.UInt32"/> structure to a <see cref="T:FreeImageAPI.RGBQUAD"/> structure.
            </summary>
            <param name="value">An <see cref="T:System.UInt32"/> structure.</param>
            <returns>A new instance of <see cref="T:FreeImageAPI.RGBQUAD"/> initialized to <paramref name="value"/>.</returns>
        </member>
        <member name="M:FreeImageAPI.RGBQUAD.op_Implicit(FreeImageAPI.RGBQUAD)~System.UInt32">
            <summary>
            Converts the value of a <see cref="T:FreeImageAPI.RGBQUAD"/> structure to an <see cref="T:System.UInt32"/> structure.
            </summary>
            <param name="value">A <see cref="T:FreeImageAPI.RGBQUAD"/> structure.</param>
            <returns>A new instance of <see cref="T:FreeImageAPI.RGBQUAD"/> initialized to <paramref name="value"/>.</returns>
        </member>
        <member name="M:FreeImageAPI.RGBQUAD.ToRGBQUAD(System.Drawing.Color[])">
            <summary>
            Converts an array of <see cref="P:FreeImageAPI.RGBQUAD.Color"/> into an array of
            <see cref="T:FreeImageAPI.RGBQUAD"/>.
            </summary>
            <param name="array">The array to convert.</param>
            <returns>An array of <see cref="T:FreeImageAPI.RGBQUAD"/>.</returns>
        </member>
        <member name="M:FreeImageAPI.RGBQUAD.ToColor(FreeImageAPI.RGBQUAD[])">
            <summary>
            Converts an array of <see cref="T:FreeImageAPI.RGBQUAD"/> into an array of
            <see cref="P:FreeImageAPI.RGBQUAD.Color"/>.
            </summary>
            <param name="array">The array to convert.</param>
            <returns>An array of <see cref="T:FreeImageAPI.RGBQUAD"/>.</returns>
        </member>
        <member name="M:FreeImageAPI.RGBQUAD.CompareTo(System.Object)">
            <summary>
            Compares this instance with a specified <see cref="T:System.Object"/>.
            </summary>
            <param name="obj">An object to compare with this instance.</param>
            <returns>A 32-bit signed integer indicating the lexical relationship between the two comparands.</returns>
            <exception cref="T:System.ArgumentException"><paramref name="obj"/> is not a <see cref="T:FreeImageAPI.RGBQUAD"/>.</exception>
        </member>
        <member name="M:FreeImageAPI.RGBQUAD.CompareTo(FreeImageAPI.RGBQUAD)">
            <summary>
            Compares this instance with a specified <see cref="T:FreeImageAPI.RGBQUAD"/> object.
            </summary>
            <param name="other">A <see cref="T:FreeImageAPI.RGBQUAD"/> to compare.</param>
            <returns>A signed number indicating the relative values of this instance
            and <paramref name="other"/>.</returns>
        </member>
        <member name="M:FreeImageAPI.RGBQUAD.Equals(System.Object)">
            <summary>
            Tests whether the specified object is a <see cref="T:FreeImageAPI.RGBQUAD"/> structure
            and is equivalent to this <see cref="T:FreeImageAPI.RGBQUAD"/> structure.
            </summary>
            <param name="obj">The object to test.</param>
            <returns><b>true</b> if <paramref name="obj"/> is a <see cref="T:FreeImageAPI.RGBQUAD"/> structure
            equivalent to this <see cref="T:FreeImageAPI.RGBQUAD"/> structure; otherwise, <b>false</b>.</returns>
        </member>
        <member name="M:FreeImageAPI.RGBQUAD.Equals(FreeImageAPI.RGBQUAD)">
            <summary>
            Tests whether the specified <see cref="T:FreeImageAPI.RGBQUAD"/> structure is equivalent to this <see cref="T:FreeImageAPI.RGBQUAD"/> structure.
            </summary>
            <param name="other">A <see cref="T:FreeImageAPI.RGBQUAD"/> structure to compare to this instance.</param>
            <returns><b>true</b> if <paramref name="obj"/> is a <see cref="T:FreeImageAPI.RGBQUAD"/> structure
            equivalent to this <see cref="T:FreeImageAPI.RGBQUAD"/> structure; otherwise, <b>false</b>.</returns>
        </member>
        <member name="M:FreeImageAPI.RGBQUAD.GetHashCode">
            <summary>
            Returns a hash code for this <see cref="T:FreeImageAPI.RGBQUAD"/> structure.
            </summary>
            <returns>An integer value that specifies the hash code for this <see cref="T:FreeImageAPI.RGBQUAD"/>.</returns>
        </member>
        <member name="M:FreeImageAPI.RGBQUAD.ToString">
            <summary>
            Converts the numeric value of the <see cref="T:FreeImageAPI.RGBQUAD"/> object
            to its equivalent string representation.
            </summary>
            <returns>The string representation of the value of this instance.</returns>
        </member>
        <member name="P:FreeImageAPI.RGBQUAD.Color">
            <summary>
            Gets or sets the <see cref="T:System.Drawing.Color"/> of the structure.
            </summary>
        </member>
        <member name="T:FreeImageAPI.RGBTRIPLE">
            <summary>
            The <b>RGBTRIPLE</b> structure describes a color consisting of relative
            intensities of red, green and blue value. Each single color component
            consumes 8 bits and so, takes values in the range from 0 to 255.
            </summary>
            <remarks>
            <para>
            The <b>RGBTRIPLE</b> structure provides access to an underlying Win32 <b>RGBTRIPLE</b>
            structure. To determine the red, green or blue component of a color, use the
            rgbtRed, rgbtGreen or rgbtBlue fields, respectively.
            </para>
            <para>For easy integration of the underlying structure into the .NET framework,
            the <b>RGBTRIPLE</b> structure implements implicit conversion operators to 
            convert the represented color to and from the <see cref="T:System.Drawing.Color"/>
            type. This makes the <see cref="T:System.Drawing.Color"/> type a real replacement
            for the <b>RGBTRIPLE</b> structure and my be used in all situations which require
            an <b>RGBTRIPLE</b> type.
            </para>
            <para>
            Each of the color components rgbtRed, rgbtGreen or rgbtBlue of <b>RGBTRIPLE</b> is
            translated into it's corresponding color component R, G or B of
            <see cref="T:System.Drawing.Color"/> by an one-to-one manner and vice versa.
            When converting from <see cref="T:System.Drawing.Color"/> into <b>RGBTRIPLE</b>, the
            color's alpha value is ignored and assumed to be 255 when converting from
            <b>RGBTRIPLE</b> into <see cref="T:System.Drawing.Color"/>, creating a fully
            opaque color.
            </para>
            <para>
            <b>Conversion from System.Drawing.Color to RGBTRIPLE</b>
            </para>
            <c>RGBTRIPLE.component = Color.component</c>
            <para>
            <b>Conversion from RGBTRIPLE to System.Drawing.Color</b>
            </para>
            <c>Color.component = RGBTRIPLE.component</c>
            <para>
            The same conversion is also applied when the <see cref="P:FreeImageAPI.RGBTRIPLE.Color"/>
            property or the <see cref="M:FreeImageAPI.RGBTRIPLE.#ctor(System.Drawing.Color)"/> constructor
            is invoked.
            </para>
            </remarks>
            <example>
            The following code example demonstrates the various conversions between the
            <b>RGBTRIPLE</b> structure and the <see cref="T:System.Drawing.Color"/> structure.
            <code>
            RGBTRIPLE rgbt;
            // Initialize the structure using a native .NET Color structure.
            rgbt = new RGBTRIPLE(Color.Indigo);
            // Initialize the structure using the implicit operator.
            rgbt = Color.DarkSeaGreen;
            // Convert the RGBTRIPLE instance into a native .NET Color
            // using its implicit operator.
            Color color = rgbt;
            // Using the structure's Color property for converting it
            // into a native .NET Color.
            Color another = rgbt.Color;
            </code>
            </example>
        </member>
        <member name="F:FreeImageAPI.RGBTRIPLE.rgbtBlue">
            <summary>
            The blue color component.
            </summary>
        </member>
        <member name="F:FreeImageAPI.RGBTRIPLE.rgbtGreen">
            <summary>
            The green color component.
            </summary>
        </member>
        <member name="F:FreeImageAPI.RGBTRIPLE.rgbtRed">
            <summary>
            The red color component.
            </summary>
        </member>
        <member name="M:FreeImageAPI.RGBTRIPLE.#ctor(System.Drawing.Color)">
            <summary>
            Initializes a new instance based on the specified <see cref="T:System.Drawing.Color"/>.
            </summary>
            <param name="color"><see cref="T:System.Drawing.Color"/> to initialize with.</param>
        </member>
        <member name="M:FreeImageAPI.RGBTRIPLE.op_Equality(FreeImageAPI.RGBTRIPLE,FreeImageAPI.RGBTRIPLE)">
            <summary>
            Tests whether two specified <see cref="T:FreeImageAPI.RGBTRIPLE"/> structures are equivalent.
            </summary>
            <param name="left">The <see cref="T:FreeImageAPI.RGBTRIPLE"/> that is to the left of the equality operator.</param>
            <param name="right">The <see cref="T:FreeImageAPI.RGBTRIPLE"/> that is to the right of the equality operator.</param>
            <returns>
            <b>true</b> if the two <see cref="T:FreeImageAPI.RGBTRIPLE"/> structures are equal; otherwise, <b>false</b>.
            </returns>
        </member>
        <member name="M:FreeImageAPI.RGBTRIPLE.op_Inequality(FreeImageAPI.RGBTRIPLE,FreeImageAPI.RGBTRIPLE)">
            <summary>
            Tests whether two specified <see cref="T:FreeImageAPI.RGBTRIPLE"/> structures are different.
            </summary>
            <param name="left">The <see cref="T:FreeImageAPI.RGBTRIPLE"/> that is to the left of the inequality operator.</param>
            <param name="right">The <see cref="T:FreeImageAPI.RGBTRIPLE"/> that is to the right of the inequality operator.</param>
            <returns>
            <b>true</b> if the two <see cref="T:FreeImageAPI.RGBTRIPLE"/> structures are different; otherwise, <b>false</b>.
            </returns>
        </member>
        <member name="M:FreeImageAPI.RGBTRIPLE.op_Implicit(System.Drawing.Color)~FreeImageAPI.RGBTRIPLE">
            <summary>
            Converts the value of a <see cref="T:System.Drawing.Color"/> structure to a <see cref="T:FreeImageAPI.RGBTRIPLE"/> structure.
            </summary>
            <param name="value">A <see cref="T:System.Drawing.Color"/> structure.</param>
            <returns>A new instance of <see cref="T:FreeImageAPI.RGBTRIPLE"/> initialized to <paramref name="value"/>.</returns>
        </member>
        <member name="M:FreeImageAPI.RGBTRIPLE.op_Implicit(FreeImageAPI.RGBTRIPLE)~System.Drawing.Color">
            <summary>
            Converts the value of a <see cref="T:FreeImageAPI.RGBTRIPLE"/> structure to a <see cref="T:System.Drawing.Color"/> structure.
            </summary>
            <param name="value">A <see cref="T:FreeImageAPI.RGBTRIPLE"/> structure.</param>
            <returns>A new instance of <see cref="T:System.Drawing.Color"/> initialized to <paramref name="value"/>.</returns>
        </member>
        <member name="M:FreeImageAPI.RGBTRIPLE.op_Implicit(System.UInt32)~FreeImageAPI.RGBTRIPLE">
            <summary>
            Converts the value of an <see cref="T:System.UInt32"/> structure to a <see cref="T:FreeImageAPI.RGBTRIPLE"/> structure.
            </summary>
            <param name="value">An <see cref="T:System.UInt32"/> structure.</param>
            <returns>A new instance of <see cref="T:FreeImageAPI.RGBTRIPLE"/> initialized to <paramref name="value"/>.</returns>
        </member>
        <member name="M:FreeImageAPI.RGBTRIPLE.op_Implicit(FreeImageAPI.RGBTRIPLE)~System.UInt32">
            <summary>
            Converts the value of a <see cref="T:FreeImageAPI.RGBTRIPLE"/> structure to an <see cref="T:System.UInt32"/> structure.
            </summary>
            <param name="value">A <see cref="T:FreeImageAPI.RGBTRIPLE"/> structure.</param>
            <returns>A new instance of <see cref="T:FreeImageAPI.RGBTRIPLE"/> initialized to <paramref name="value"/>.</returns>
        </member>
        <member name="M:FreeImageAPI.RGBTRIPLE.CompareTo(System.Object)">
            <summary>
            Compares this instance with a specified <see cref="T:System.Object"/>.
            </summary>
            <param name="obj">An object to compare with this instance.</param>
            <returns>A 32-bit signed integer indicating the lexical relationship between the two comparands.</returns>
            <exception cref="T:System.ArgumentException"><paramref name="obj"/> is not a <see cref="T:FreeImageAPI.RGBTRIPLE"/>.</exception>
        </member>
        <member name="M:FreeImageAPI.RGBTRIPLE.CompareTo(FreeImageAPI.RGBTRIPLE)">
            <summary>
            Compares this instance with a specified <see cref="T:FreeImageAPI.RGBTRIPLE"/> object.
            </summary>
            <param name="other">A <see cref="T:FreeImageAPI.RGBTRIPLE"/> to compare.</param>
            <returns>A signed number indicating the relative values of this instance
            and <paramref name="other"/>.</returns>
        </member>
        <member name="M:FreeImageAPI.RGBTRIPLE.Equals(System.Object)">
            <summary>
            Tests whether the specified object is a <see cref="T:FreeImageAPI.RGBTRIPLE"/> structure
            and is equivalent to this <see cref="T:FreeImageAPI.RGBTRIPLE"/> structure.
            </summary>
            <param name="obj">The object to test.</param>
            <returns><b>true</b> if <paramref name="obj"/> is a <see cref="T:FreeImageAPI.RGBTRIPLE"/> structure
            equivalent to this <see cref="T:FreeImageAPI.RGBTRIPLE"/> structure; otherwise, <b>false</b>.</returns>
        </member>
        <member name="M:FreeImageAPI.RGBTRIPLE.Equals(FreeImageAPI.RGBTRIPLE)">
            <summary>
            Tests whether the specified <see cref="T:FreeImageAPI.RGBTRIPLE"/> structure is equivalent to this
            <see cref="T:FreeImageAPI.RGBTRIPLE"/> structure.
            </summary>
            <param name="other">A <see cref="T:FreeImageAPI.RGBTRIPLE"/> structure to compare to this instance.</param>
            <returns><b>true</b> if <paramref name="obj"/> is a <see cref="T:FreeImageAPI.RGBTRIPLE"/> structure
            equivalent to this <see cref="T:FreeImageAPI.RGBTRIPLE"/> structure; otherwise, <b>false</b>.</returns>
        </member>
        <member name="M:FreeImageAPI.RGBTRIPLE.GetHashCode">
            <summary>
            Returns a hash code for this <see cref="T:FreeImageAPI.RGBTRIPLE"/> structure.
            </summary>
            <returns>An integer value that specifies the hash code for this <see cref="T:FreeImageAPI.RGBTRIPLE"/>.</returns>
        </member>
        <member name="M:FreeImageAPI.RGBTRIPLE.ToString">
            <summary>
            Converts the numeric value of the <see cref="T:FreeImageAPI.RGBTRIPLE"/> object
            to its equivalent string representation.
            </summary>
            <returns>The string representation of the value of this instance.</returns>
        </member>
        <member name="P:FreeImageAPI.RGBTRIPLE.Color">
            <summary>
            Gets or sets the <see cref="T:System.Drawing.Color"/> of the structure.
            </summary>
        </member>
        <member name="T:FreeImageAPI.OutputMessageFunction">
            <summary>
            Delegate for capturing FreeImage error messages.
            </summary>
            <param name="fif">The format of the image.</param>
            <param name="message">The errormessage.</param>
        </member>
        <member name="T:FreeImageAPI.IO.ReadProc">
            <summary>
            Delegate to the C++ function <b>fread</b>.
            </summary>
            <param name="buffer">Pointer to read from.</param>
            <param name="size">Item size in bytes.</param>
            <param name="count">Maximum number of items to be read.</param>
            <param name="handle">Handle/stream to read from.</param>
            <returns>Number of full items actually read,
            which may be less than count if an error occurs or
            if the end of the file is encountered before reaching count.</returns>
        </member>
        <member name="T:FreeImageAPI.IO.WriteProc">
            <summary>
            Delegate to the C++ function <b>fwrite</b>.
            </summary>
            <param name="buffer">Pointer to data to be written.</param>
            <param name="size">Item size in bytes.</param>
            <param name="count">Maximum number of items to be written.</param>
            <param name="handle">Handle/stream to write to.</param>
            <returns>Number of full items actually written,
            which may be less than count if an error occurs.
            Also, if an error occurs, the file-position indicator cannot be determined.</returns>
        </member>
        <member name="T:FreeImageAPI.IO.SeekProc">
            <summary>
            Delegate to the C++ function <b>fseek</b>.
            </summary>
            <param name="handle">Handle/stream to seek in.</param>
            <param name="offset">Number of bytes from origin.</param>
            <param name="origin">Initial position.</param>
            <returns>If successful 0 is returned; otherwise a nonzero value. </returns>
        </member>
        <member name="T:FreeImageAPI.IO.TellProc">
            <summary>
            Delegate to the C++ function <b>ftell</b>.
            </summary>
            <param name="handle">Handle/stream to retrieve its currents position from.</param>
            <returns>The current position.</returns>
        </member>
        <member name="T:FreeImageAPI.Plugins.FormatProc">
            <summary>
            Delegate to a function that returns a string which describes
            the plugins format.
            </summary>
        </member>
        <member name="T:FreeImageAPI.Plugins.DescriptionProc">
            <summary>
            Delegate to a function that returns a string which contains
            a more detailed description.
            </summary>
        </member>
        <member name="T:FreeImageAPI.Plugins.ExtensionListProc">
            <summary>
            Delegate to a function that returns a comma seperated list
            of file extensions the plugin can read or write.
            </summary>
        </member>
        <member name="T:FreeImageAPI.Plugins.RegExprProc">
            <summary>
            Delegate to a function that returns a regular expression that
            can be used to idientify whether a file can be handled by the plugin.
            </summary>
        </member>
        <member name="T:FreeImageAPI.Plugins.OpenProc">
            <summary>
            Delegate to a function that opens a file.
            </summary>
        </member>
        <member name="T:FreeImageAPI.Plugins.CloseProc">
            <summary>
            Delegate to a function that closes a previosly opened file.
            </summary>
        </member>
        <member name="T:FreeImageAPI.Plugins.PageCountProc">
            <summary>
            Delegate to a function that returns the number of pages of a multipage
            bitmap if the plugin is capable of handling multipage bitmaps.
            </summary>
        </member>
        <member name="T:FreeImageAPI.Plugins.PageCapabilityProc">
            <summary>
            UNKNOWN
            </summary>
        </member>
        <member name="T:FreeImageAPI.Plugins.LoadProc">
            <summary>
            Delegate to a function that loads and decodes a bitmap into memory.
            </summary>
        </member>
        <member name="T:FreeImageAPI.Plugins.SaveProc">
            <summary>
             Delegate to a function that saves a bitmap.
            </summary>
        </member>
        <member name="T:FreeImageAPI.Plugins.ValidateProc">
            <summary>
            Delegate to a function that determines whether the source defined
            by <param name="io"/> and <param name="handle"/> is a valid image.
            </summary>
        </member>
        <member name="T:FreeImageAPI.Plugins.MimeProc">
            <summary>
            Delegate to a function that returns a string which contains
            the plugin's mime type.
            </summary>
        </member>
        <member name="T:FreeImageAPI.Plugins.SupportsExportBPPProc">
            <summary>
            Delegate to a function that returns whether the plugin can handle the
            specified color depth.
            </summary>
        </member>
        <member name="T:FreeImageAPI.Plugins.SupportsExportTypeProc">
            <summary>
            Delegate to a function that returns whether the plugin can handle the
            specified image type.
            </summary>
        </member>
        <member name="T:FreeImageAPI.Plugins.SupportsICCProfilesProc">
            <summary>
            Delegate to a function that returns whether the plugin can handle
            ICC-Profiles.
            </summary>
        </member>
        <member name="T:FreeImageAPI.Plugins.InitProc">
            <summary>
            Callback function used by FreeImage to register plugins.
            </summary>
        </member>
        <member name="T:FreeImageAPI.FreeImage">
            <summary>
            Static class importing functions from the FreeImage library
            and providing additional functions.
            </summary>
        </member>
        <member name="F:FreeImageAPI.FreeImage.FreeImageLibrary">
            <summary>
            Filename of the FreeImage library.
            </summary>
        </member>
        <member name="F:FreeImageAPI.FreeImage.FI_RGBA_RED">
            <summary>
            Number of bytes to shift left within a 4 byte block.
            </summary>
        </member>
        <member name="F:FreeImageAPI.FreeImage.FI_RGBA_GREEN">
            <summary>
            Number of bytes to shift left within a 4 byte block.
            </summary>
        </member>
        <member name="F:FreeImageAPI.FreeImage.FI_RGBA_BLUE">
            <summary>
            Number of bytes to shift left within a 4 byte block.
            </summary>
        </member>
        <member name="F:FreeImageAPI.FreeImage.FI_RGBA_ALPHA">
            <summary>
            Number of bytes to shift left within a 4 byte block.
            </summary>
        </member>
        <member name="F:FreeImageAPI.FreeImage.FI_RGBA_RED_MASK">
            <summary>
            Mask indicating the position of the given color.
            </summary>
        </member>
        <member name="F:FreeImageAPI.FreeImage.FI_RGBA_GREEN_MASK">
            <summary>
            Mask indicating the position of the given color.
            </summary>
        </member>
        <member name="F:FreeImageAPI.FreeImage.FI_RGBA_BLUE_MASK">
            <summary>
            Mask indicating the position of the given color.
            </summary>
        </member>
        <member name="F:FreeImageAPI.FreeImage.FI_RGBA_ALPHA_MASK">
            <summary>
            Mask indicating the position of the given color.
            </summary>
        </member>
        <member name="F:FreeImageAPI.FreeImage.FI_RGBA_RED_SHIFT">
            <summary>
            Number of bits to shift left within a 32 bit block.
            </summary>
        </member>
        <member name="F:FreeImageAPI.FreeImage.FI_RGBA_GREEN_SHIFT">
            <summary>
            Number of bits to shift left within a 32 bit block.
            </summary>
        </member>
        <member name="F:FreeImageAPI.FreeImage.FI_RGBA_BLUE_SHIFT">
            <summary>
            Number of bits to shift left within a 32 bit block.
            </summary>
        </member>
        <member name="F:FreeImageAPI.FreeImage.FI_RGBA_ALPHA_SHIFT">
            <summary>
            Number of bits to shift left within a 32 bit block.
            </summary>
        </member>
        <member name="F:FreeImageAPI.FreeImage.FI_RGBA_RGB_MASK">
            <summary>
            Mask indicating the position of color components of a 32 bit color.
            </summary>
        </member>
        <member name="F:FreeImageAPI.FreeImage.FI16_555_RED_MASK">
            <summary>
            Mask indicating the position of the given color.
            </summary>
        </member>
        <member name="F:FreeImageAPI.FreeImage.FI16_555_GREEN_MASK">
            <summary>
            Mask indicating the position of the given color.
            </summary>
        </member>
        <member name="F:FreeImageAPI.FreeImage.FI16_555_BLUE_MASK">
            <summary>
            Mask indicating the position of the given color.
            </summary>
        </member>
        <member name="F:FreeImageAPI.FreeImage.FI16_555_RED_SHIFT">
            <summary>
            Number of bits to shift left within a 16 bit block.
            </summary>
        </member>
        <member name="F:FreeImageAPI.FreeImage.FI16_555_GREEN_SHIFT">
            <summary>
            Number of bits to shift left within a 16 bit block.
            </summary>
        </member>
        <member name="F:FreeImageAPI.FreeImage.FI16_555_BLUE_SHIFT">
            <summary>
            Number of bits to shift left within a 16 bit block.
            </summary>
        </member>
        <member name="F:FreeImageAPI.FreeImage.FI16_565_RED_MASK">
            <summary>
            Mask indicating the position of the given color.
            </summary>
        </member>
        <member name="F:FreeImageAPI.FreeImage.FI16_565_GREEN_MASK">
            <summary>
            Mask indicating the position of the given color.
            </summary>
        </member>
        <member name="F:FreeImageAPI.FreeImage.FI16_565_BLUE_MASK">
            <summary>
            Mask indicating the position of the given color.
            </summary>
        </member>
        <member name="F:FreeImageAPI.FreeImage.FI16_565_RED_SHIFT">
            <summary>
            Number of bits to shift left within a 16 bit block.
            </summary>
        </member>
        <member name="F:FreeImageAPI.FreeImage.FI16_565_GREEN_SHIFT">
            <summary>
            Number of bits to shift left within a 16 bit block.
            </summary>
        </member>
        <member name="F:FreeImageAPI.FreeImage.FI16_565_BLUE_SHIFT">
            <summary>
            Number of bits to shift left within a 16 bit block.
            </summary>
        </member>
        <member name="F:FreeImageAPI.FreeImage.BI_RGB">
            <summary>
            An uncompressed format.
            </summary>
        </member>
        <member name="F:FreeImageAPI.FreeImage.BI_RLE8">
            <summary>
            A run-length encoded (RLE) format for bitmaps with 8 bpp. The compression format is a 2-byte
            format consisting of a count byte followed by a byte containing a color index.
            </summary>
        </member>
        <member name="F:FreeImageAPI.FreeImage.BI_RLE4">
            <summary>
            An RLE format for bitmaps with 4 bpp. The compression format is a 2-byte format consisting
            of a count byte followed by two word-length color indexes.
            </summary>
        </member>
        <member name="F:FreeImageAPI.FreeImage.BI_BITFIELDS">
            <summary>
            Specifies that the bitmap is not compressed and that the color table consists of three
            <b>DWORD</b> color masks that specify the red, green, and blue components, respectively,
            of each pixel. This is valid when used with 16- and 32-bpp bitmaps.
            </summary>
        </member>
        <member name="F:FreeImageAPI.FreeImage.BI_JPEG">
            <summary>
            <b>Windows 98/Me, Windows 2000/XP:</b> Indicates that the image is a JPEG image.
            </summary>
        </member>
        <member name="F:FreeImageAPI.FreeImage.BI_PNG">
            <summary>
            <b>Windows 98/Me, Windows 2000/XP:</b> Indicates that the image is a PNG image.
            </summary>
        </member>
        <member name="M:FreeImageAPI.FreeImage.Initialise(System.Boolean)">
            <summary>
            Initialises the library.
            </summary>
            <param name="load_local_plugins_only">
            When the <paramref name="load_local_plugins_only"/> is true, FreeImage won't make use of external plugins.
            </param>
        </member>
        <member name="M:FreeImageAPI.FreeImage.DeInitialise">
            <summary>
            Deinitialises the library.
            </summary>
        </member>
        <member name="M:FreeImageAPI.FreeImage.GetVersion">
            <summary>
            Returns a string containing the current version of the library.
            </summary>
            <returns>The current version of the library.</returns>
        </member>
        <member name="M:FreeImageAPI.FreeImage.GetCopyrightMessage">
            <summary>
            Returns a string containing a standard copyright message.
            </summary>
            <returns>A standard copyright message.</returns>
        </member>
        <member name="M:FreeImageAPI.FreeImage.OutputMessageProc(FreeImageAPI.FREE_IMAGE_FORMAT,System.String)">
            <summary>
            Calls the set error message function in FreeImage.
            </summary>
            <param name="fif">Format of the bitmaps.</param>
            <param name="message">The error message.</param>
        </member>
        <member name="M:FreeImageAPI.FreeImage.SetOutputMessage(FreeImageAPI.OutputMessageFunction)">
            <summary>
            You use the function FreeImage_SetOutputMessage to capture the log string
            so that you can show it to the user of the program.
            The callback is implemented in the <see cref="E:FreeImageAPI.FreeImageEngine.Message"/> event of this class.
            </summary>
            <remarks>The function is private because FreeImage can only have a single
            callback function. To use the callback use the <see cref="E:FreeImageAPI.FreeImageEngine.Message"/>
            event of this class.</remarks>
            <param name="omf">Handler to the callback function.</param>
        </member>
        <member name="M:FreeImageAPI.FreeImage.Allocate(System.Int32,System.Int32,System.Int32,System.UInt32,System.UInt32,System.UInt32)">
            <summary>
            Creates a new bitmap in memory.
            </summary>
            <param name="width">Width of the new bitmap.</param>
            <param name="height">Height of the new bitmap.</param>
            <param name="bpp">Bit depth of the new Bitmap.
            Supported pixel depth: 1-, 4-, 8-, 16-, 24-, 32-bit per pixel for standard bitmap</param>
            <param name="red_mask">Red part of the color layout.
            eg: 0xFF0000</param>
            <param name="green_mask">Green part of the color layout.
            eg: 0x00FF00</param>
            <param name="blue_mask">Blue part of the color layout.
            eg: 0x0000FF</param>
            <returns>Handle to a FreeImage bitmap.</returns>
        </member>
        <member name="M:FreeImageAPI.FreeImage.AllocateT(FreeImageAPI.FREE_IMAGE_TYPE,System.Int32,System.Int32,System.Int32,System.UInt32,System.UInt32,System.UInt32)">
            <summary>
            Creates a new bitmap in memory.
            </summary>
            <param name="type">Type of the image.</param>
            <param name="width">Width of the new bitmap.</param>
            <param name="height">Height of the new bitmap.</param>
            <param name="bpp">Bit depth of the new Bitmap.
            Supported pixel depth: 1-, 4-, 8-, 16-, 24-, 32-bit per pixel for standard bitmap</param>
            <param name="red_mask">Red part of the color layout.
            eg: 0xFF0000</param>
            <param name="green_mask">Green part of the color layout.
            eg: 0x00FF00</param>
            <param name="blue_mask">Blue part of the color layout.
            eg: 0x0000FF</param>
            <returns>Handle to a FreeImage bitmap.</returns>
        </member>
        <member name="M:FreeImageAPI.FreeImage.Clone(FreeImageAPI.FIBITMAP)">
            <summary>
            Makes an exact reproduction of an existing bitmap, including metadata and attached profile if any.
            </summary>
            <param name="dib">Handle to a FreeImage bitmap.</param>
            <returns>Handle to a FreeImage bitmap.</returns>
        </member>
        <member name="M:FreeImageAPI.FreeImage.Unload(FreeImageAPI.FIBITMAP)">
            <summary>
            Deletes a previously loaded FIBITMAP from memory.
            </summary>
            <param name="dib">Handle to a FreeImage bitmap.</param>
        </member>
        <member name="M:FreeImageAPI.FreeImage.Load(FreeImageAPI.FREE_IMAGE_FORMAT,System.String,FreeImageAPI.FREE_IMAGE_LOAD_FLAGS)">
            <summary>
            Decodes a bitmap, allocates memory for it and returns it as a FIBITMAP.
            </summary>
            <param name="fif">Type of the bitmap.</param>
            <param name="filename">Name of the file to decode.</param>
            <param name="flags">Flags to enable or disable plugin-features.</param>
            <returns>Handle to a FreeImage bitmap.</returns>
        </member>
        <member name="M:FreeImageAPI.FreeImage.LoadU(FreeImageAPI.FREE_IMAGE_FORMAT,System.String,FreeImageAPI.FREE_IMAGE_LOAD_FLAGS)">
            <summary>
            Decodes a bitmap, allocates memory for it and returns it as a FIBITMAP.
            The filename supports UNICODE.
            </summary>
            <param name="fif">Type of the bitmap.</param>
            <param name="filename">Name of the file to decode.</param>
            <param name="flags">Flags to enable or disable plugin-features.</param>
            <returns>Handle to a FreeImage bitmap.</returns>
        </member>
        <member name="M:FreeImageAPI.FreeImage.LoadFromHandle(FreeImageAPI.FREE_IMAGE_FORMAT,FreeImageAPI.IO.FreeImageIO@,FreeImageAPI.IO.fi_handle,FreeImageAPI.FREE_IMAGE_LOAD_FLAGS)">
            <summary>
            Loads a bitmap from an arbitrary source.
            </summary>
            <param name="fif">Type of the bitmap.</param>
            <param name="io">A FreeImageIO structure with functionpointers to handle the source.</param>
            <param name="handle">A handle to the source.</param>
            <param name="flags">Flags to enable or disable plugin-features.</param>
            <returns>Handle to a FreeImage bitmap.</returns>
        </member>
        <member name="M:FreeImageAPI.FreeImage.Save(FreeImageAPI.FREE_IMAGE_FORMAT,FreeImageAPI.FIBITMAP,System.String,FreeImageAPI.FREE_IMAGE_SAVE_FLAGS)">
            <summary>
            Saves a previosly loaded FIBITMAP to a file.
            </summary>
            <param name="fif">Type of the bitmap.</param>
            <param name="dib">Handle to a FreeImage bitmap.</param>
            <param name="filename">Name of the file to save to.</param>
            <param name="flags">Flags to enable or disable plugin-features.</param>
            <returns>Returns true on success, false on failure.</returns>
        </member>
        <member name="M:FreeImageAPI.FreeImage.SaveU(FreeImageAPI.FREE_IMAGE_FORMAT,FreeImageAPI.FIBITMAP,System.String,FreeImageAPI.FREE_IMAGE_SAVE_FLAGS)">
            <summary>
            Saves a previosly loaded FIBITMAP to a file.
            The filename supports UNICODE.
            </summary>
            <param name="fif">Type of the bitmap.</param>
            <param name="dib">Handle to a FreeImage bitmap.</param>
            <param name="filename">Name of the file to save to.</param>
            <param name="flags">Flags to enable or disable plugin-features.</param>
            <returns>Returns true on success, false on failure.</returns>
        </member>
        <member name="M:FreeImageAPI.FreeImage.SaveToHandle(FreeImageAPI.FREE_IMAGE_FORMAT,FreeImageAPI.FIBITMAP,FreeImageAPI.IO.FreeImageIO@,FreeImageAPI.IO.fi_handle,FreeImageAPI.FREE_IMAGE_SAVE_FLAGS)">
            <summary>
            Saves a bitmap to an arbitrary source.
            </summary>
            <param name="fif">Type of the bitmap.</param>
            <param name="dib">Handle to a FreeImage bitmap.</param>
            <param name="io">A FreeImageIO structure with functionpointers to handle the source.</param>
            <param name="handle">A handle to the source.</param>
            <param name="flags">Flags to enable or disable plugin-features.</param>
            <returns>Returns true on success, false on failure.</returns>
        </member>
        <member name="M:FreeImageAPI.FreeImage.OpenMemory(System.IntPtr,System.UInt32)">
            <summary>
            Open a memory stream.
            </summary>
            <param name="data">Pointer to the data in memory.</param>
            <param name="size_in_bytes">Length of the data in byte.</param>
            <returns>Handle to a memory stream.</returns>
        </member>
        <member name="M:FreeImageAPI.FreeImage.CloseMemory(FreeImageAPI.FIMEMORY)">
            <summary>
            Close and free a memory stream.
            </summary>
            <param name="stream">Handle to a memory stream.</param>
        </member>
        <member name="M:FreeImageAPI.FreeImage.LoadFromMemory(FreeImageAPI.FREE_IMAGE_FORMAT,FreeImageAPI.FIMEMORY,FreeImageAPI.FREE_IMAGE_LOAD_FLAGS)">
            <summary>
            Decodes a bitmap from a stream, allocates memory for it and returns it as a FIBITMAP.
            </summary>
            <param name="fif">Type of the bitmap.</param>
            <param name="stream">Handle to a memory stream.</param>
            <param name="flags">Flags to enable or disable plugin-features.</param>
            <returns>Handle to a FreeImage bitmap.</returns>
        </member>
        <member name="M:FreeImageAPI.FreeImage.SaveToMemory(FreeImageAPI.FREE_IMAGE_FORMAT,FreeImageAPI.FIBITMAP,FreeImageAPI.FIMEMORY,FreeImageAPI.FREE_IMAGE_SAVE_FLAGS)">
            <summary>
            Saves a previosly loaded FIBITMAP to a stream.
            </summary>
            <param name="fif">Type of the bitmap.</param>
            <param name="dib">Handle to a FreeImage bitmap.</param>
            <param name="stream">Handle to a memory stream.</param>
            <param name="flags">Flags to enable or disable plugin-features.</param>
            <returns>Returns true on success, false on failure.</returns>
        </member>
        <member name="M:FreeImageAPI.FreeImage.TellMemory(FreeImageAPI.FIMEMORY)">
            <summary>
            Gets the current position of a memory handle.
            </summary>
            <param name="stream">Handle to a memory stream.</param>
            <returns>The current file position if successful, -1 otherwise.</returns>
        </member>
        <member name="M:FreeImageAPI.FreeImage.SeekMemory(FreeImageAPI.FIMEMORY,System.Int32,System.IO.SeekOrigin)">
            <summary>
            Moves the memory handle to a specified location.
            </summary>
            <param name="stream">Handle to a memory stream.</param>
            <param name="offset">Number of bytes from origin.</param>
            <param name="origin">Initial position.</param>
            <returns>Returns true on success, false on failure.</returns>
        </member>
        <member name="M:FreeImageAPI.FreeImage.AcquireMemory(FreeImageAPI.FIMEMORY,System.IntPtr@,System.UInt32@)">
            <summary>
            Provides a direct buffer access to a memory stream.
            </summary>
            <param name="stream">The target memory stream.</param>
            <param name="data">Pointer to the data in memory.</param>
            <param name="size_in_bytes">Size of the data in bytes.</param>
            <returns>Returns true on success, false on failure.</returns>
        </member>
        <member name="M:FreeImageAPI.FreeImage.ReadMemory(System.Byte[],System.UInt32,System.UInt32,FreeImageAPI.FIMEMORY)">
            <summary>
            Reads data from a memory stream.
            </summary>
            <param name="buffer">The buffer to store the data in.</param>
            <param name="size">Size in bytes of the items.</param>
            <param name="count">Number of items to read.</param>
            <param name="stream">The stream to read from.
            The memory pointer associated with stream is increased by the number of bytes actually read.</param>
            <returns>The number of full items actually read.
            May be less than count on error or stream-end.</returns>
        </member>
        <member name="M:FreeImageAPI.FreeImage.WriteMemory(System.Byte[],System.UInt32,System.UInt32,FreeImageAPI.FIMEMORY)">
            <summary>
            Writes data to a memory stream.
            </summary>
            <param name="buffer">The buffer to read the data from.</param>
            <param name="size">Size in bytes of the items.</param>
            <param name="count">Number of items to write.</param>
            <param name="stream">The stream to write to.
            The memory pointer associated with stream is increased by the number of bytes actually written.</param>
            <returns>The number of full items actually written.
            May be less than count on error or stream-end.</returns>
        </member>
        <member name="M:FreeImageAPI.FreeImage.LoadMultiBitmapFromMemory(FreeImageAPI.FREE_IMAGE_FORMAT,FreeImageAPI.FIMEMORY,FreeImageAPI.FREE_IMAGE_LOAD_FLAGS)">
            <summary>
            Open a multi-page bitmap from a memory stream.
            </summary>
            <param name="fif">Type of the bitmap.</param>
            <param name="stream">The stream to decode.</param>
            <param name="flags">Flags to enable or disable plugin-features.</param>
            <returns>Handle to a FreeImage multi-paged bitmap.</returns>
        </member>
        <member name="M:FreeImageAPI.FreeImage.RegisterLocalPlugin(FreeImageAPI.Plugins.InitProc,System.String,System.String,System.String,System.String)">
            <summary>
            Registers a new plugin to be used in FreeImage.
            </summary>
            <param name="proc_address">Pointer to the function that initialises the plugin.</param>
            <param name="format">A string describing the format of the plugin.</param>
            <param name="description">A string describing the plugin.</param>
            <param name="extension">A string witha comma sperated list of extensions. f.e: "pl,pl2,pl4"</param>
            <param name="regexpr">A regular expression used to identify the bitmap.</param>
            <returns>The format idientifier assigned by FreeImage.</returns>
        </member>
        <member name="M:FreeImageAPI.FreeImage.RegisterExternalPlugin(System.String,System.String,System.String,System.String,System.String)">
            <summary>
            Registers a new plugin to be used in FreeImage. The plugin is residing in a DLL.
            The Init function must be called “Init” and must use the stdcall calling convention.
            </summary>
            <param name="path">Complete path to the dll file hosting the plugin.</param>
            <param name="format">A string describing the format of the plugin.</param>
            <param name="description">A string describing the plugin.</param>
            <param name="extension">A string witha comma sperated list of extensions. f.e: "pl,pl2,pl4"</param>
            <param name="regexpr">A regular expression used to identify the bitmap.</param>
            <returns>The format idientifier assigned by FreeImage.</returns>
        </member>
        <member name="M:FreeImageAPI.FreeImage.GetFIFCount">
            <summary>
            Retrieves the number of FREE_IMAGE_FORMAT identifiers being currently registered.
            </summary>
            <returns>The number of registered formats.</returns>
        </member>
        <member name="M:FreeImageAPI.FreeImage.SetPluginEnabled(FreeImageAPI.FREE_IMAGE_FORMAT,System.Boolean)">
            <summary>
            Enables or disables a plugin.
            </summary>
            <param name="fif">The plugin to enable or disable.</param>
            <param name="enable">True: enable the plugin. false: disable the plugin.</param>
            <returns>The previous state of the plugin.
            1 - enabled. 0 - disables. -1 plugin does not exist.</returns>
        </member>
        <member name="M:FreeImageAPI.FreeImage.IsPluginEnabled(FreeImageAPI.FREE_IMAGE_FORMAT)">
            <summary>
            Retrieves the state of a plugin.
            </summary>
            <param name="fif">The plugin to check.</param>
            <returns>1 - enabled. 0 - disables. -1 plugin does not exist.</returns>
        </member>
        <member name="M:FreeImageAPI.FreeImage.GetFIFFromFormat(System.String)">
            <summary>
            Returns a <see cref="T:FreeImageAPI.FREE_IMAGE_FORMAT"/> identifier from the format string that was used to register the FIF.
            </summary>
            <param name="format">The string that was used to register the plugin.</param>
            <returns>A <see cref="T:FreeImageAPI.FREE_IMAGE_FORMAT"/> identifier from the format.</returns>
        </member>
        <member name="M:FreeImageAPI.FreeImage.GetFIFFromMime(System.String)">
            <summary>
            Returns a <see cref="T:FreeImageAPI.FREE_IMAGE_FORMAT"/> identifier from a MIME content type string
            (MIME stands for Multipurpose Internet Mail Extension).
            </summary>
            <param name="mime">A MIME content type.</param>
            <returns>A <see cref="T:FreeImageAPI.FREE_IMAGE_FORMAT"/> identifier from the MIME.</returns>
        </member>
        <member name="M:FreeImageAPI.FreeImage.GetFormatFromFIF(FreeImageAPI.FREE_IMAGE_FORMAT)">
            <summary>
            Returns the string that was used to register a plugin from the system assigned <see cref="T:FreeImageAPI.FREE_IMAGE_FORMAT"/>.
            </summary>
            <param name="fif">The assigned <see cref="T:FreeImageAPI.FREE_IMAGE_FORMAT"/>.</param>
            <returns>The string that was used to register the plugin.</returns>
        </member>
        <member name="M:FreeImageAPI.FreeImage.GetFIFExtensionList(FreeImageAPI.FREE_IMAGE_FORMAT)">
            <summary>
            Returns a comma-delimited file extension list describing the bitmap formats the given plugin can read and/or write.
            </summary>
            <param name="fif">The desired <see cref="T:FreeImageAPI.FREE_IMAGE_FORMAT"/>.</param>
            <returns>A comma-delimited file extension list.</returns>
        </member>
        <member name="M:FreeImageAPI.FreeImage.GetFIFDescription(FreeImageAPI.FREE_IMAGE_FORMAT)">
            <summary>
            Returns a descriptive string that describes the bitmap formats the given plugin can read and/or write.
            </summary>
            <param name="fif">The desired <see cref="T:FreeImageAPI.FREE_IMAGE_FORMAT"/>.</param>
            <returns>A descriptive string that describes the bitmap formats.</returns>
        </member>
        <member name="M:FreeImageAPI.FreeImage.GetFIFRegExpr(FreeImageAPI.FREE_IMAGE_FORMAT)">
            <summary>
            Returns a regular expression string that can be used by a regular expression engine to identify the bitmap.
            FreeImageQt makes use of this function.
            </summary>
            <param name="fif">The desired <see cref="T:FreeImageAPI.FREE_IMAGE_FORMAT"/>.</param>
            <returns>A regular expression string.</returns>
        </member>
        <member name="M:FreeImageAPI.FreeImage.GetFIFMimeType(FreeImageAPI.FREE_IMAGE_FORMAT)">
            <summary>
            Given a <see cref="T:FreeImageAPI.FREE_IMAGE_FORMAT"/> identifier, returns a MIME content type string (MIME stands for Multipurpose Internet Mail Extension).
            </summary>
            <param name="fif">The desired <see cref="T:FreeImageAPI.FREE_IMAGE_FORMAT"/>.</param>
            <returns>A MIME content type string.</returns>
        </member>
        <member name="M:FreeImageAPI.FreeImage.GetFIFFromFilename(System.String)">
            <summary>
            This function takes a filename or a file-extension and returns the plugin that can
            read/write files with that extension in the form of a <see cref="T:FreeImageAPI.FREE_IMAGE_FORMAT"/> identifier.
            </summary>
            <param name="filename">The filename or -extension.</param>
            <returns>The <see cref="T:FreeImageAPI.FREE_IMAGE_FORMAT"/> of the plugin.</returns>
        </member>
        <member name="M:FreeImageAPI.FreeImage.GetFIFFromFilenameU(System.String)">
            <summary>
            This function takes a filename or a file-extension and returns the plugin that can
            read/write files with that extension in the form of a <see cref="T:FreeImageAPI.FREE_IMAGE_FORMAT"/> identifier.
            Supports UNICODE filenames.
            </summary>
            <param name="filename">The filename or -extension.</param>
            <returns>The <see cref="T:FreeImageAPI.FREE_IMAGE_FORMAT"/> of the plugin.</returns>
        </member>
        <member name="M:FreeImageAPI.FreeImage.FIFSupportsReading(FreeImageAPI.FREE_IMAGE_FORMAT)">
            <summary>
            Checks if a plugin can load bitmaps.
            </summary>
            <param name="fif">The <see cref="T:FreeImageAPI.FREE_IMAGE_FORMAT"/> of the plugin.</param>
            <returns>True if the plugin can load bitmaps, else false.</returns>
        </member>
        <member name="M:FreeImageAPI.FreeImage.FIFSupportsWriting(FreeImageAPI.FREE_IMAGE_FORMAT)">
            <summary>
            Checks if a plugin can save bitmaps.
            </summary>
            <param name="fif">The <see cref="T:FreeImageAPI.FREE_IMAGE_FORMAT"/> of the plugin.</param>
            <returns>True if the plugin can save bitmaps, else false.</returns>
        </member>
        <member name="M:FreeImageAPI.FreeImage.FIFSupportsExportBPP(FreeImageAPI.FREE_IMAGE_FORMAT,System.Int32)">
            <summary>
            Checks if a plugin can save bitmaps in the desired bit depth.
            </summary>
            <param name="fif">The <see cref="T:FreeImageAPI.FREE_IMAGE_FORMAT"/> of the plugin.</param>
            <param name="bpp">The desired bit depth.</param>
            <returns>True if the plugin can save bitmaps in the desired bit depth, else false.</returns>
        </member>
        <member name="M:FreeImageAPI.FreeImage.FIFSupportsExportType(FreeImageAPI.FREE_IMAGE_FORMAT,FreeImageAPI.FREE_IMAGE_TYPE)">
            <summary>
            Checks if a plugin can save a bitmap in the desired data type.
            </summary>
            <param name="fif">The <see cref="T:FreeImageAPI.FREE_IMAGE_FORMAT"/> of the plugin.</param>
            <param name="type">The desired image type.</param>
            <returns>True if the plugin can save bitmaps as the desired type, else false.</returns>
        </member>
        <member name="M:FreeImageAPI.FreeImage.FIFSupportsICCProfiles(FreeImageAPI.FREE_IMAGE_FORMAT)">
            <summary>
            Checks if a plugin can load or save an ICC profile.
            </summary>
            <param name="fif">The <see cref="T:FreeImageAPI.FREE_IMAGE_FORMAT"/> of the plugin.</param>
            <returns>True if the plugin can load or save an ICC profile, else false.</returns>
        </member>
        <member name="M:FreeImageAPI.FreeImage.OpenMultiBitmap(FreeImageAPI.FREE_IMAGE_FORMAT,System.String,System.Boolean,System.Boolean,System.Boolean,FreeImageAPI.FREE_IMAGE_LOAD_FLAGS)">
            <summary>
            Loads a FreeImage multi-paged bitmap.
            Load flags can be provided by the flags parameter.
            </summary>
            <param name="fif">Format of the image.</param>
            <param name="filename">The complete name of the file to load.</param>
            <param name="create_new">When true a new bitmap is created.</param>
            <param name="read_only">When true the bitmap will be loaded read only.</param>
            <param name="keep_cache_in_memory">When true performance is increased at the cost of memory.</param>
            <param name="flags">Flags to enable or disable plugin-features.</param>
            <returns>Handle to a FreeImage multi-paged bitmap.</returns>
        </member>
        <member name="M:FreeImageAPI.FreeImage.OpenMultiBitmapFromHandle(FreeImageAPI.FREE_IMAGE_FORMAT,FreeImageAPI.IO.FreeImageIO@,FreeImageAPI.IO.fi_handle,FreeImageAPI.FREE_IMAGE_LOAD_FLAGS)">
            <summary>
            Loads a FreeImage multi-pages bitmap from the specified handle
            using the specified functions.
            Load flags can be provided by the flags parameter.
            </summary>
            <param name="fif">Format of the image.</param>
            <param name="io">IO functions used to read from the specified handle.</param>
            <param name="handle">The handle to load the bitmap from.</param>
            <param name="flags">Flags to enable or disable plugin-features.</param>
            <returns>Handle to a FreeImage multi-paged bitmap.</returns>
        </member>
        <member name="M:FreeImageAPI.FreeImage.CloseMultiBitmap_(FreeImageAPI.FIMULTIBITMAP,FreeImageAPI.FREE_IMAGE_SAVE_FLAGS)">
            <summary>
            Closes a previously opened multi-page bitmap and, when the bitmap was not opened read-only, applies any changes made to it.
            </summary>
            <param name="bitmap">Handle to a FreeImage multi-paged bitmap.</param>
            <param name="flags">Flags to enable or disable plugin-features.</param>
            <returns>Returns true on success, false on failure.</returns>
        </member>
        <member name="M:FreeImageAPI.FreeImage.GetPageCount(FreeImageAPI.FIMULTIBITMAP)">
            <summary>
            Returns the number of pages currently available in the multi-paged bitmap.
            </summary>
            <param name="bitmap">Handle to a FreeImage multi-paged bitmap.</param>
            <returns>Number of pages.</returns>
        </member>
        <member name="M:FreeImageAPI.FreeImage.AppendPage(FreeImageAPI.FIMULTIBITMAP,FreeImageAPI.FIBITMAP)">
            <summary>
            Appends a new page to the end of the bitmap.
            </summary>
            <param name="bitmap">Handle to a FreeImage multi-paged bitmap.</param>
            <param name="data">Handle to a FreeImage bitmap.</param>
        </member>
        <member name="M:FreeImageAPI.FreeImage.InsertPage(FreeImageAPI.FIMULTIBITMAP,System.Int32,FreeImageAPI.FIBITMAP)">
            <summary>
            Inserts a new page before the given position in the bitmap.
            </summary>
            <param name="bitmap">Handle to a FreeImage multi-paged bitmap.</param>
            <param name="page">Page has to be a number smaller than the current number of pages available in the bitmap.</param>
            <param name="data">Handle to a FreeImage bitmap.</param>
        </member>
        <member name="M:FreeImageAPI.FreeImage.DeletePage(FreeImageAPI.FIMULTIBITMAP,System.Int32)">
            <summary>
            Deletes the page on the given position.
            </summary>
            <param name="bitmap">Handle to a FreeImage multi-paged bitmap.</param>
            <param name="page">Number of the page to delete.</param>
        </member>
        <member name="M:FreeImageAPI.FreeImage.LockPage(FreeImageAPI.FIMULTIBITMAP,System.Int32)">
            <summary>
            Locks a page in memory for editing.
            </summary>
            <param name="bitmap">Handle to a FreeImage multi-paged bitmap.</param>
            <param name="page">Number of the page to lock.</param>
            <returns>Handle to a FreeImage bitmap.</returns>
        </member>
        <member name="M:FreeImageAPI.FreeImage.UnlockPage(FreeImageAPI.FIMULTIBITMAP,FreeImageAPI.FIBITMAP,System.Boolean)">
            <summary>
            Unlocks a previously locked page and gives it back to the multi-page engine.
            </summary>
            <param name="bitmap">Handle to a FreeImage multi-paged bitmap.</param>
            <param name="data">Handle to a FreeImage bitmap.</param>
            <param name="changed">If true, the page is applied to the multi-page bitmap.</param>
        </member>
        <member name="M:FreeImageAPI.FreeImage.MovePage(FreeImageAPI.FIMULTIBITMAP,System.Int32,System.Int32)">
            <summary>
            Moves the source page to the position of the target page.
            </summary>
            <param name="bitmap">Handle to a FreeImage multi-paged bitmap.</param>
            <param name="target">New position of the page.</param>
            <param name="source">Old position of the page.</param>
            <returns>Returns true on success, false on failure.</returns>
        </member>
        <member name="M:FreeImageAPI.FreeImage.GetLockedPageNumbers(FreeImageAPI.FIMULTIBITMAP,System.Int32[],System.Int32@)">
            <summary>
            Returns an array of page-numbers that are currently locked in memory.
            When the pages parameter is null, the size of the array is returned in the count variable.
            </summary>
            <example>
            <code>
            int[] lockedPages = null;
            int count = 0;
            GetLockedPageNumbers(dib, lockedPages, ref count);
            lockedPages = new int[count];
            GetLockedPageNumbers(dib, lockedPages, ref count);
            </code>
            </example>
            <param name="bitmap">Handle to a FreeImage multi-paged bitmap.</param>
            <param name="pages">The list of locked pages in the multi-pages bitmap.
            If set to null, count will contain the number of pages.</param>
            <param name="count">If <paramref name="pages"/> is set to null count will contain the number of locked pages.</param>
            <returns>Returns true on success, false on failure.</returns>
        </member>
        <member name="M:FreeImageAPI.FreeImage.GetFileType(System.String,System.Int32)">
            <summary>
            Orders FreeImage to analyze the bitmap signature.
            </summary>
            <param name="filename">Name of the file to analyze.</param>
            <param name="size">Reserved parameter - use 0.</param>
            <returns>Type of the bitmap.</returns>
        </member>
        <member name="M:FreeImageAPI.FreeImage.GetFileTypeU(System.String,System.Int32)">
            <summary>
            Orders FreeImage to analyze the bitmap signature.
            Supports UNICODE filenames.
            </summary>
            <param name="filename">Name of the file to analyze.</param>
            <param name="size">Reserved parameter - use 0.</param>
            <returns>Type of the bitmap.</returns>
        </member>
        <member name="M:FreeImageAPI.FreeImage.GetFileTypeFromHandle(FreeImageAPI.IO.FreeImageIO@,FreeImageAPI.IO.fi_handle,System.Int32)">
            <summary>
            Uses the <see cref="T:FreeImageAPI.IO.FreeImageIO"/> structure as described in the topic bitmap management functions
            to identify a bitmap type.
            </summary>
            <param name="io">A <see cref="T:FreeImageAPI.IO.FreeImageIO"/> structure with functionpointers to handle the source.</param>
            <param name="handle">A handle to the source.</param>
            <param name="size">Size in bytes of the source.</param>
            <returns>Type of the bitmap.</returns>
        </member>
        <member name="M:FreeImageAPI.FreeImage.GetFileTypeFromMemory(FreeImageAPI.FIMEMORY,System.Int32)">
            <summary>
            Uses a memory handle to identify a bitmap type.
            </summary>
            <param name="stream">Pointer to the stream.</param>
            <param name="size">Size in bytes of the source.</param>
            <returns>Type of the bitmap.</returns>
        </member>
        <member name="M:FreeImageAPI.FreeImage.IsLittleEndian">
            <summary>
            Returns whether the platform is using Little Endian.
            </summary>
            <returns>Returns true if the platform is using Litte Endian, else false.</returns>
        </member>
        <member name="M:FreeImageAPI.FreeImage.LookupX11Color(System.String,System.Byte@,System.Byte@,System.Byte@)">
            <summary>
            Converts a X11 color name into a corresponding RGB value.
            </summary>
            <param name="szColor">Name of the color to convert.</param>
            <param name="nRed">Red component.</param>
            <param name="nGreen">Green component.</param>
            <param name="nBlue">Blue component.</param>
            <returns>Returns true on success, false on failure.</returns>
        </member>
        <member name="M:FreeImageAPI.FreeImage.LookupSVGColor(System.String,System.Byte@,System.Byte@,System.Byte@)">
            <summary>
            Converts a SVG color name into a corresponding RGB value.
            </summary>
            <param name="szColor">Name of the color to convert.</param>
            <param name="nRed">Red component.</param>
            <param name="nGreen">Green component.</param>
            <param name="nBlue">Blue component.</param>
            <returns>Returns true on success, false on failure.</returns>
        </member>
        <member name="M:FreeImageAPI.FreeImage.GetBits(FreeImageAPI.FIBITMAP)">
            <summary>
            Returns a pointer to the data-bits of the bitmap.
            </summary>
            <param name="dib">Handle to a FreeImage bitmap.</param>
            <returns>Pointer to the data-bits.</returns>
        </member>
        <member name="M:FreeImageAPI.FreeImage.GetScanLine(FreeImageAPI.FIBITMAP,System.Int32)">
            <summary>
            Returns a pointer to the start of the given scanline in the bitmap's data-bits.
            </summary>
            <param name="dib">Handle to a FreeImage bitmap.</param>
            <param name="scanline">Number of the scanline.</param>
            <returns>Pointer to the scanline.</returns>
        </member>
        <member name="M:FreeImageAPI.FreeImage.GetPixelIndex(FreeImageAPI.FIBITMAP,System.UInt32,System.UInt32,System.Byte@)">
            <summary>
            Get the pixel index of a palettized image at position (x, y), including range check (slow access).
            </summary>
            <param name="dib">Handle to a FreeImage bitmap.</param>
            <param name="x">Pixel position in horizontal direction.</param>
            <param name="y">Pixel position in vertical direction.</param>
            <param name="value">The pixel index.</param>
            <returns>Returns true on success, false on failure.</returns>
        </member>
        <member name="M:FreeImageAPI.FreeImage.GetPixelColor(FreeImageAPI.FIBITMAP,System.UInt32,System.UInt32,FreeImageAPI.RGBQUAD@)">
            <summary>
            Get the pixel color of a 16-, 24- or 32-bit image at position (x, y), including range check (slow access).
            </summary>
            <param name="dib">Handle to a FreeImage bitmap.</param>
            <param name="x">Pixel position in horizontal direction.</param>
            <param name="y">Pixel position in vertical direction.</param>
            <param name="value">The pixel color.</param>
            <returns>Returns true on success, false on failure.</returns>
        </member>
        <member name="M:FreeImageAPI.FreeImage.SetPixelIndex(FreeImageAPI.FIBITMAP,System.UInt32,System.UInt32,System.Byte@)">
            <summary>
            Set the pixel index of a palettized image at position (x, y), including range check (slow access).
            </summary>
            <param name="dib">Handle to a FreeImage bitmap.</param>
            <param name="x">Pixel position in horizontal direction.</param>
            <param name="y">Pixel position in vertical direction.</param>
            <param name="value">The new pixel index.</param>
            <returns>Returns true on success, false on failure.</returns>
        </member>
        <member name="M:FreeImageAPI.FreeImage.SetPixelColor(FreeImageAPI.FIBITMAP,System.UInt32,System.UInt32,FreeImageAPI.RGBQUAD@)">
            <summary>
            Set the pixel color of a 16-, 24- or 32-bit image at position (x, y), including range check (slow access).
            </summary>
            <param name="dib">Handle to a FreeImage bitmap.</param>
            <param name="x">Pixel position in horizontal direction.</param>
            <param name="y">Pixel position in vertical direction.</param>
            <param name="value">The new pixel color.</param>
            <returns>Returns true on success, false on failure.</returns>
        </member>
        <member name="M:FreeImageAPI.FreeImage.GetImageType(FreeImageAPI.FIBITMAP)">
            <summary>
            Retrieves the type of the bitmap.
            </summary>
            <param name="dib">Handle to a FreeImage bitmap.</param>
            <returns>Type of the bitmap.</returns>
        </member>
        <member name="M:FreeImageAPI.FreeImage.GetColorsUsed(FreeImageAPI.FIBITMAP)">
            <summary>
            Returns the number of colors used in a bitmap.
            </summary>
            <param name="dib">Handle to a FreeImage bitmap.</param>
            <returns>Palette-size for palletised bitmaps, and 0 for high-colour bitmaps.</returns>
        </member>
        <member name="M:FreeImageAPI.FreeImage.GetBPP(FreeImageAPI.FIBITMAP)">
            <summary>
            Returns the size of one pixel in the bitmap in bits.
            </summary>
            <param name="dib">Handle to a FreeImage bitmap.</param>
            <returns>Size of one pixel in the bitmap in bits.</returns>
        </member>
        <member name="M:FreeImageAPI.FreeImage.GetWidth(FreeImageAPI.FIBITMAP)">
            <summary>
            Returns the width of the bitmap in pixel units.
            </summary>
            <param name="dib">Handle to a FreeImage bitmap.</param>
            <returns>With of the bitmap.</returns>
        </member>
        <member name="M:FreeImageAPI.FreeImage.GetHeight(FreeImageAPI.FIBITMAP)">
            <summary>
            Returns the height of the bitmap in pixel units.
            </summary>
            <param name="dib">Handle to a FreeImage bitmap.</param>
            <returns>Height of the bitmap.</returns>
        </member>
        <member name="M:FreeImageAPI.FreeImage.GetLine(FreeImageAPI.FIBITMAP)">
            <summary>
            Returns the width of the bitmap in bytes.
            </summary>
            <param name="dib">Handle to a FreeImage bitmap.</param>
            <returns>With of the bitmap in bytes.</returns>
        </member>
        <member name="M:FreeImageAPI.FreeImage.GetPitch(FreeImageAPI.FIBITMAP)">
            <summary>
            Returns the width of the bitmap in bytes, rounded to the next 32-bit boundary,
            also known as pitch or stride or scan width.
            </summary>
            <param name="dib">Handle to a FreeImage bitmap.</param>
            <returns>With of the bitmap in bytes.</returns>
        </member>
        <member name="M:FreeImageAPI.FreeImage.GetDIBSize(FreeImageAPI.FIBITMAP)">
            <summary>
            Returns the size of the DIB-element of a FIBITMAP in memory.
            </summary>
            <param name="dib">Handle to a FreeImage bitmap.</param>
            <returns>Size of the DIB-element</returns>
        </member>
        <member name="M:FreeImageAPI.FreeImage.GetPalette(FreeImageAPI.FIBITMAP)">
            <summary>
            Returns a pointer to the bitmap's palette.
            </summary>
            <param name="dib">Handle to a FreeImage bitmap.</param>
            <returns>Pointer to the bitmap's palette.</returns>
        </member>
        <member name="M:FreeImageAPI.FreeImage.GetDotsPerMeterX(FreeImageAPI.FIBITMAP)">
            <summary>
            Returns the horizontal resolution, in pixels-per-meter, of the target device for the bitmap.
            </summary>
            <param name="dib">Handle to a FreeImage bitmap.</param>
            <returns>The horizontal resolution, in pixels-per-meter.</returns>
        </member>
        <member name="M:FreeImageAPI.FreeImage.GetDotsPerMeterY(FreeImageAPI.FIBITMAP)">
            <summary>
            Returns the vertical resolution, in pixels-per-meter, of the target device for the bitmap.
            </summary>
            <param name="dib">Handle to a FreeImage bitmap.</param>
            <returns>The vertical resolution, in pixels-per-meter.</returns>
        </member>
        <member name="M:FreeImageAPI.FreeImage.SetDotsPerMeterX(FreeImageAPI.FIBITMAP,System.UInt32)">
            <summary>
            Set the horizontal resolution, in pixels-per-meter, of the target device for the bitmap.
            </summary>
            <param name="dib">Handle to a FreeImage bitmap.</param>
            <param name="res">The new horizontal resolution.</param>
        </member>
        <member name="M:FreeImageAPI.FreeImage.SetDotsPerMeterY(FreeImageAPI.FIBITMAP,System.UInt32)">
            <summary>
            Set the vertical resolution, in pixels-per-meter, of the target device for the bitmap.
            </summary>
            <param name="dib">Handle to a FreeImage bitmap.</param>
            <param name="res">The new vertical resolution.</param>
        </member>
        <member name="M:FreeImageAPI.FreeImage.GetInfoHeader(FreeImageAPI.FIBITMAP)">
            <summary>
            Returns a pointer to the <see cref="T:FreeImageAPI.BITMAPINFOHEADER"/> of the DIB-element in a FIBITMAP.
            </summary>
            <param name="dib">Handle to a FreeImage bitmap.</param>
            <returns>Poiter to the header of the bitmap.</returns>
        </member>
        <member name="M:FreeImageAPI.FreeImage.GetInfo(FreeImageAPI.FIBITMAP)">
            <summary>
            Alias for FreeImage_GetInfoHeader that returns a pointer to a <see cref="T:FreeImageAPI.BITMAPINFO"/>
            rather than to a <see cref="T:FreeImageAPI.BITMAPINFOHEADER"/>.
            </summary>
            <param name="dib">Handle to a FreeImage bitmap.</param>
            <returns>Pointer to the <see cref="T:FreeImageAPI.BITMAPINFO"/> structure for the bitmap.</returns>
        </member>
        <member name="M:FreeImageAPI.FreeImage.GetColorType(FreeImageAPI.FIBITMAP)">
            <summary>
            Investigates the color type of the bitmap by reading the bitmap's pixel bits and analysing them.
            </summary>
            <param name="dib">Handle to a FreeImage bitmap.</param>
            <returns>The color type of the bitmap.</returns>
        </member>
        <member name="M:FreeImageAPI.FreeImage.GetRedMask(FreeImageAPI.FIBITMAP)">
            <summary>
            Returns a bit pattern describing the red color component of a pixel in a FreeImage bitmap.
            </summary>
            <param name="dib">Handle to a FreeImage bitmap.</param>
            <returns>The bit pattern for RED.</returns>
        </member>
        <member name="M:FreeImageAPI.FreeImage.GetGreenMask(FreeImageAPI.FIBITMAP)">
            <summary>
            Returns a bit pattern describing the green color component of a pixel in a FreeImage bitmap.
            </summary>
            <param name="dib">Handle to a FreeImage bitmap.</param>
            <returns>The bit pattern for green.</returns>
        </member>
        <member name="M:FreeImageAPI.FreeImage.GetBlueMask(FreeImageAPI.FIBITMAP)">
            <summary>
            Returns a bit pattern describing the blue color component of a pixel in a FreeImage bitmap.
            </summary>
            <param name="dib">Handle to a FreeImage bitmap.</param>
            <returns>The bit pattern for blue.</returns>
        </member>
        <member name="M:FreeImageAPI.FreeImage.GetTransparencyCount(FreeImageAPI.FIBITMAP)">
            <summary>
            Returns the number of transparent colors in a palletised bitmap.
            </summary>
            <param name="dib">Handle to a FreeImage bitmap.</param>
            <returns>The number of transparent colors in a palletised bitmap.</returns>
        </member>
        <member name="M:FreeImageAPI.FreeImage.GetTransparencyTable(FreeImageAPI.FIBITMAP)">
            <summary>
            Returns a pointer to the bitmap's transparency table.
            </summary>
            <param name="dib">Handle to a FreeImage bitmap.</param>
            <returns>Pointer to the bitmap's transparency table.</returns>
        </member>
        <member name="M:FreeImageAPI.FreeImage.SetTransparent(FreeImageAPI.FIBITMAP,System.Boolean)">
            <summary>
            Tells FreeImage if it should make use of the transparency table
            or the alpha channel that may accompany a bitmap.
            </summary>
            <param name="dib">Handle to a FreeImage bitmap.</param>
            <param name="enabled">True to enable the transparency, false to disable.</param>
        </member>
        <member name="M:FreeImageAPI.FreeImage.SetTransparencyTable(FreeImageAPI.FIBITMAP,System.Byte[],System.Int32)">
            <summary>
            Set the bitmap's transparency table. Only affects palletised bitmaps.
            </summary>
            <param name="dib">Handle to a FreeImage bitmap.</param>
            <param name="table">Pointer to the bitmap's new transparency table.</param>
            <param name="count">The number of transparent colors in the new transparency table.</param>
        </member>
        <member name="M:FreeImageAPI.FreeImage.IsTransparent(FreeImageAPI.FIBITMAP)">
            <summary>
            Returns whether the transparency table is enabled.
            </summary>
            <param name="dib">Handle to a FreeImage bitmap.</param>
            <returns>Returns true when the transparency table is enabled (1-, 4- or 8-bit images)
            or when the input dib contains alpha values (32-bit images). Returns false otherwise.</returns>
        </member>
        <member name="M:FreeImageAPI.FreeImage.HasBackgroundColor(FreeImageAPI.FIBITMAP)">
            <summary>
            Returns whether the bitmap has a file background color.
            </summary>
            <param name="dib">Handle to a FreeImage bitmap.</param>
            <returns>Returns true when the image has a file background color, false otherwise.</returns>
        </member>
        <member name="M:FreeImageAPI.FreeImage.GetBackgroundColor(FreeImageAPI.FIBITMAP,FreeImageAPI.RGBQUAD@)">
            <summary>
            Returns the file background color of an image.
            For 8-bit images, the color index in the palette is returned in the
            rgbReserved member of the bkcolor parameter.
            </summary>
            <param name="dib">Handle to a FreeImage bitmap.</param>
            <param name="bkcolor">The background color.</param>
            <returns>Returns true on success, false on failure.</returns>
        </member>
        <member name="M:FreeImageAPI.FreeImage.SetBackgroundColor(FreeImageAPI.FIBITMAP,FreeImageAPI.RGBQUAD@)">
            <summary>
            Set the file background color of an image.
            When saving an image to PNG, this background color is transparently saved to the PNG file.
            </summary>
            <param name="dib">Handle to a FreeImage bitmap.</param>
            <param name="bkcolor">The new background color.</param>
            <returns>Returns true on success, false on failure.</returns>
        </member>
        <member name="M:FreeImageAPI.FreeImage.SetBackgroundColor(FreeImageAPI.FIBITMAP,FreeImageAPI.RGBQUAD[])">
            <summary>
            Set the file background color of an image.
            When saving an image to PNG, this background color is transparently saved to the PNG file.
            When the bkcolor parameter is null, the background color is removed from the image.
            <para>
            This overloaded version of the function with an array parameter is provided to allow
            passing <c>null</c> in the <paramref name="bkcolor"/> parameter. This is similar to the
            original C/C++ function. Passing <c>null</c> as <paramref name="bkcolor"/> parameter will
            unset the dib's previously set background color.
            </para> 
            </summary>
            <param name="dib">Handle to a FreeImage bitmap.</param>
            <param name="bkcolor">The new background color.
            The first entry in the array is used.</param>
            <returns>Returns true on success, false on failure.</returns>
            <example>
            <code>
            // create a RGBQUAD color
            RGBQUAD color = new RGBQUAD(Color.Green);
            
            // set the dib's background color (using the other version of the function)
            FreeImage.SetBackgroundColor(dib, ref color);
            
            // remove it again (this only works due to the array parameter RGBQUAD[])
            FreeImage.SetBackgroundColor(dib, null);
            </code>
            </example>
        </member>
        <member name="M:FreeImageAPI.FreeImage.SetTransparentIndex(FreeImageAPI.FIBITMAP,System.Int32)">
            <summary>
            Sets the index of the palette entry to be used as transparent color
            for the image specified. Does nothing on high color images.
            </summary>
            <param name="dib">Handle to a FreeImage bitmap.</param>
            <param name="index">The index of the palette entry to be set as transparent color.</param>
        </member>
        <member name="M:FreeImageAPI.FreeImage.GetTransparentIndex(FreeImageAPI.FIBITMAP)">
            <summary>
            Returns the palette entry used as transparent color for the image specified.
            Works for palletised images only and returns -1 for high color
            images or if the image has no color set to be transparent.
            </summary>
            <param name="dib">Handle to a FreeImage bitmap.</param>
            <returns>the index of the palette entry used as transparent color for
            the image specified or -1 if there is no transparent color found
            (e.g. the image is a high color image).</returns>
        </member>
        <member name="M:FreeImageAPI.FreeImage.GetICCProfileEx(FreeImageAPI.FIBITMAP)">
            <summary>
            Retrieves the <see cref="T:FreeImageAPI.FIICCPROFILE"/> data of the bitmap.
            This function can also be called safely, when the original format does not support profiles.
            </summary>
            <param name="dib">Handle to a FreeImage bitmap.</param>
            <returns>The <see cref="T:FreeImageAPI.FIICCPROFILE"/> data of the bitmap.</returns>
        </member>
        <member name="M:FreeImageAPI.FreeImage.GetICCProfile(FreeImageAPI.FIBITMAP)">
            <summary>
            Retrieves a pointer to the <see cref="T:FreeImageAPI.FIICCPROFILE"/> data of the bitmap.
            This function can also be called safely, when the original format does not support profiles.
            </summary>
            <param name="dib">Handle to a FreeImage bitmap.</param>
            <returns>Pointer to the <see cref="T:FreeImageAPI.FIICCPROFILE"/> data of the bitmap.</returns>
        </member>
        <member name="M:FreeImageAPI.FreeImage.CreateICCProfile(FreeImageAPI.FIBITMAP,System.Byte[],System.Int32)">
            <summary>
            Creates a new <see cref="T:FreeImageAPI.FIICCPROFILE"/> block from ICC profile data previously read from a file
            or built by a color management system. The profile data is attached to the bitmap.
            </summary>
            <param name="dib">Handle to a FreeImage bitmap.</param>
            <param name="data">Pointer to the new <see cref="T:FreeImageAPI.FIICCPROFILE"/> data.</param>
            <param name="size">Size of the <see cref="T:FreeImageAPI.FIICCPROFILE"/> data.</param>
            <returns>Pointer to the created <see cref="T:FreeImageAPI.FIICCPROFILE"/> structure.</returns>
        </member>
        <member name="M:FreeImageAPI.FreeImage.DestroyICCProfile(FreeImageAPI.FIBITMAP)">
            <summary>
            This function destroys an <see cref="T:FreeImageAPI.FIICCPROFILE"/> previously created by <see cref="M:FreeImageAPI.FreeImage.CreateICCProfile(FreeImageAPI.FIBITMAP,System.Byte[],System.Int32)"/>.
            After this call the bitmap will contain no profile information.
            This function should be called to ensure that a stored bitmap will not contain any profile information.
            </summary>
            <param name="dib">Handle to a FreeImage bitmap.</param>
        </member>
        <member name="M:FreeImageAPI.FreeImage.ConvertTo4Bits(FreeImageAPI.FIBITMAP)">
            <summary>
            Converts a bitmap to 4 bits.
            If the bitmap was a high-color bitmap (16, 24 or 32-bit) or if it was a
            monochrome or greyscale bitmap (1 or 8-bit), the end result will be a
            greyscale bitmap, otherwise (1-bit palletised bitmaps) it will be a palletised bitmap.
            </summary>
            <param name="dib">Handle to a FreeImage bitmap.</param>
            <returns>Handle to a FreeImage bitmap.</returns>
        </member>
        <member name="M:FreeImageAPI.FreeImage.ConvertTo8Bits(FreeImageAPI.FIBITMAP)">
            <summary>
            Converts a bitmap to 8 bits. If the bitmap was a high-color bitmap (16, 24 or 32-bit)
            or if it was a monochrome or greyscale bitmap (1 or 4-bit), the end result will be a
            greyscale bitmap, otherwise (1 or 4-bit palletised bitmaps) it will be a palletised bitmap.
            </summary>
            <param name="dib">Handle to a FreeImage bitmap.</param>
            <returns>Handle to a FreeImage bitmap.</returns>
        </member>
        <member name="M:FreeImageAPI.FreeImage.ConvertToGreyscale(FreeImageAPI.FIBITMAP)">
            <summary>
            Converts a bitmap to a 8-bit greyscale image with a linear ramp.
            </summary>
            <param name="dib">Handle to a FreeImage bitmap.</param>
            <returns>Handle to a FreeImage bitmap.</returns>
        </member>
        <member name="M:FreeImageAPI.FreeImage.ConvertTo16Bits555(FreeImageAPI.FIBITMAP)">
            <summary>
            Converts a bitmap to 16 bits, where each pixel has a color pattern of
            5 bits red, 5 bits green and 5 bits blue. One bit in each pixel is unused.
            </summary>
            <param name="dib">Handle to a FreeImage bitmap.</param>
            <returns>Handle to a FreeImage bitmap.</returns>
        </member>
        <member name="M:FreeImageAPI.FreeImage.ConvertTo16Bits565(FreeImageAPI.FIBITMAP)">
            <summary>
            Converts a bitmap to 16 bits, where each pixel has a color pattern of
            5 bits red, 6 bits green and 5 bits blue.
            </summary>
            <param name="dib">Handle to a FreeImage bitmap.</param>
            <returns>Handle to a FreeImage bitmap.</returns>
        </member>
        <member name="M:FreeImageAPI.FreeImage.ConvertTo24Bits(FreeImageAPI.FIBITMAP)">
            <summary>
            Converts a bitmap to 24 bits. A clone of the input bitmap is returned for 24-bit bitmaps.
            </summary>
            <param name="dib">Handle to a FreeImage bitmap.</param>
            <returns>Handle to a FreeImage bitmap.</returns>
        </member>
        <member name="M:FreeImageAPI.FreeImage.ConvertTo32Bits(FreeImageAPI.FIBITMAP)">
            <summary>
            Converts a bitmap to 32 bits. A clone of the input bitmap is returned for 32-bit bitmaps.
            </summary>
            <param name="dib">Handle to a FreeImage bitmap.</param>
            <returns>Handle to a FreeImage bitmap.</returns>
        </member>
        <member name="M:FreeImageAPI.FreeImage.ColorQuantize(FreeImageAPI.FIBITMAP,FreeImageAPI.FREE_IMAGE_QUANTIZE)">
            <summary>
            Quantizes a high-color 24-bit bitmap to an 8-bit palette color bitmap.
            </summary>
            <param name="dib">Handle to a FreeImage bitmap.</param>
            <param name="quantize">Specifies the color reduction algorithm to be used.</param>
            <returns>Handle to a FreeImage bitmap.</returns>
        </member>
        <member name="M:FreeImageAPI.FreeImage.ColorQuantizeEx(FreeImageAPI.FIBITMAP,FreeImageAPI.FREE_IMAGE_QUANTIZE,System.Int32,System.Int32,FreeImageAPI.RGBQUAD[])">
            <summary>
            ColorQuantizeEx is an extension to the <see cref="M:FreeImageAPI.FreeImage.ColorQuantize(FreeImageAPI.FIBITMAP,FreeImageAPI.FREE_IMAGE_QUANTIZE)"/> method that
            provides additional options used to quantize a 24-bit image to any
            number of colors (up to 256), as well as quantize a 24-bit image using a
            partial or full provided palette.
            </summary>
            <param name="dib">Handle to a FreeImage bitmap.</param>
            <param name="quantize">Specifies the color reduction algorithm to be used.</param>
            <param name="PaletteSize">Size of the desired output palette.</param>
            <param name="ReserveSize">Size of the provided palette of ReservePalette.</param>
            <param name="ReservePalette">The provided palette.</param>
            <returns>Handle to a FreeImage bitmap.</returns>
        </member>
        <member name="M:FreeImageAPI.FreeImage.Threshold(FreeImageAPI.FIBITMAP,System.Byte)">
            <summary>
            Converts a bitmap to 1-bit monochrome bitmap using a threshold T between [0..255].
            The function first converts the bitmap to a 8-bit greyscale bitmap.
            Then, any brightness level that is less than T is set to zero, otherwise to 1.
            For 1-bit input bitmaps, the function clones the input bitmap and builds a monochrome palette.
            </summary>
            <param name="dib">Handle to a FreeImage bitmap.</param>
            <param name="t">The threshold.</param>
            <returns>Handle to a FreeImage bitmap.</returns>
        </member>
        <member name="M:FreeImageAPI.FreeImage.Dither(FreeImageAPI.FIBITMAP,FreeImageAPI.FREE_IMAGE_DITHER)">
            <summary>
            Converts a bitmap to 1-bit monochrome bitmap using a dithering algorithm.
            For 1-bit input bitmaps, the function clones the input bitmap and builds a monochrome palette.
            </summary>
            <param name="dib">Handle to a FreeImage bitmap.</param>
            <param name="algorithm">The dithering algorithm to use.</param>
            <returns>Handle to a FreeImage bitmap.</returns>
        </member>
        <member name="M:FreeImageAPI.FreeImage.ConvertFromRawBits(System.IntPtr,System.Int32,System.Int32,System.Int32,System.UInt32,System.UInt32,System.UInt32,System.UInt32,System.Boolean)">
            <summary>
            Converts a raw bitmap to a FreeImage bitmap.
            </summary>
            <param name="bits">Pointer to the memory block containing the raw bitmap.</param>
            <param name="width">The width in pixels of the raw bitmap.</param>
            <param name="height">The height in pixels of the raw bitmap.</param>
            <param name="pitch">Defines the total width of a scanline in the raw bitmap,
            including padding bytes.</param>
            <param name="bpp">The bit depth (bits per pixel) of the raw bitmap.</param>
            <param name="red_mask">The bit mask describing the bits used to store a single 
            pixel's red component in the raw bitmap. This is only applied to 16-bpp raw bitmaps.</param>
            <param name="green_mask">The bit mask describing the bits used to store a single
            pixel's green component in the raw bitmap. This is only applied to 16-bpp raw bitmaps.</param>
            <param name="blue_mask">The bit mask describing the bits used to store a single
            pixel's blue component in the raw bitmap. This is only applied to 16-bpp raw bitmaps.</param>
            <param name="topdown">If true, the raw bitmap is stored in top-down order (top-left pixel first)
            and in bottom-up order (bottom-left pixel first) otherwise.</param>
            <returns>Handle to a FreeImage bitmap.</returns>
        </member>
        <member name="M:FreeImageAPI.FreeImage.ConvertFromRawBits(System.Byte[],System.Int32,System.Int32,System.Int32,System.UInt32,System.UInt32,System.UInt32,System.UInt32,System.Boolean)">
            <summary>
            Converts a raw bitmap to a FreeImage bitmap.
            </summary>
            <param name="bits">Array of bytes containing the raw bitmap.</param>
            <param name="width">The width in pixels of the raw bitmap.</param>
            <param name="height">The height in pixels of the raw bitmap.</param>
            <param name="pitch">Defines the total width of a scanline in the raw bitmap,
            including padding bytes.</param>
            <param name="bpp">The bit depth (bits per pixel) of the raw bitmap.</param>
            <param name="red_mask">The bit mask describing the bits used to store a single 
            pixel's red component in the raw bitmap. This is only applied to 16-bpp raw bitmaps.</param>
            <param name="green_mask">The bit mask describing the bits used to store a single
            pixel's green component in the raw bitmap. This is only applied to 16-bpp raw bitmaps.</param>
            <param name="blue_mask">The bit mask describing the bits used to store a single
            pixel's blue component in the raw bitmap. This is only applied to 16-bpp raw bitmaps.</param>
            <param name="topdown">If true, the raw bitmap is stored in top-down order (top-left pixel first)
            and in bottom-up order (bottom-left pixel first) otherwise.</param>
            <returns>Handle to a FreeImage bitmap.</returns>
        </member>
        <member name="M:FreeImageAPI.FreeImage.ConvertToRawBits(System.IntPtr,FreeImageAPI.FIBITMAP,System.Int32,System.UInt32,System.UInt32,System.UInt32,System.UInt32,System.Boolean)">
            <summary>
            Converts a FreeImage bitmap to a raw bitmap, that is a raw piece of memory.
            </summary>
            <param name="bits">Pointer to the memory block receiving the raw bitmap.</param>
            <param name="dib">Handle to a FreeImage bitmap.</param>
            <param name="pitch">The desired total width in bytes of a scanline in the raw bitmap,
            including any padding bytes.</param>
            <param name="bpp">The desired bit depth (bits per pixel) of the raw bitmap.</param>
            <param name="red_mask">The desired bit mask describing the bits used to store a single 
            pixel's red component in the raw bitmap. This is only applied to 16-bpp raw bitmaps.</param>
            <param name="green_mask">The desired bit mask describing the bits used to store a single
            pixel's green component in the raw bitmap. This is only applied to 16-bpp raw bitmaps.</param>
            <param name="blue_mask">The desired bit mask describing the bits used to store a single
            pixel's blue component in the raw bitmap. This is only applied to 16-bpp raw bitmaps.</param>
            <param name="topdown">If true, the raw bitmap will be stored in top-down order (top-left pixel first)
            and in bottom-up order (bottom-left pixel first) otherwise.</param>
        </member>
        <member name="M:FreeImageAPI.FreeImage.ConvertToRawBits(System.Byte[],FreeImageAPI.FIBITMAP,System.Int32,System.UInt32,System.UInt32,System.UInt32,System.UInt32,System.Boolean)">
            <summary>
            Converts a FreeImage bitmap to a raw bitmap, that is a raw piece of memory.
            </summary>
            <param name="bits">Array of bytes receiving the raw bitmap.</param>
            <param name="dib">Handle to a FreeImage bitmap.</param>
            <param name="pitch">The desired total width in bytes of a scanline in the raw bitmap,
            including any padding bytes.</param>
            <param name="bpp">The desired bit depth (bits per pixel) of the raw bitmap.</param>
            <param name="red_mask">The desired bit mask describing the bits used to store a single 
            pixel's red component in the raw bitmap. This is only applied to 16-bpp raw bitmaps.</param>
            <param name="green_mask">The desired bit mask describing the bits used to store a single
            pixel's green component in the raw bitmap. This is only applied to 16-bpp raw bitmaps.</param>
            <param name="blue_mask">The desired bit mask describing the bits used to store a single
            pixel's blue component in the raw bitmap. This is only applied to 16-bpp raw bitmaps.</param>
            <param name="topdown">If true, the raw bitmap will be stored in top-down order (top-left pixel first)
            and in bottom-up order (bottom-left pixel first) otherwise.</param>
        </member>
        <member name="M:FreeImageAPI.FreeImage.ConvertToRGBF(FreeImageAPI.FIBITMAP)">
            <summary>
            Converts a 24- or 32-bit RGB(A) standard image or a 48-bit RGB image to a FIT_RGBF type image.
            </summary>
            <param name="dib">Handle to a FreeImage bitmap.</param>
            <returns>Handle to a FreeImage bitmap.</returns>
        </member>
        <member name="M:FreeImageAPI.FreeImage.ConvertToStandardType(FreeImageAPI.FIBITMAP,System.Boolean)">
             <summary>
             Converts a non standard image whose color type is FIC_MINISBLACK
             to a standard 8-bit greyscale image.
             </summary>
             <param name="src">Handle to a FreeImage bitmap.</param>
             <param name="scale_linear">When true the conversion is done by scaling linearly
             each pixel value from [min, max] to an integer value between [0..255],
             where min and max are the minimum and maximum pixel values in the image.
             When false the conversion is done by rounding each pixel value to an integer between [0..255].
            
             Rounding is done using the following formula:
            
             dst_pixel = (BYTE) MIN(255, MAX(0, q)) where int q = int(src_pixel + 0.5);</param>
             <returns>Handle to a FreeImage bitmap.</returns>
        </member>
        <member name="M:FreeImageAPI.FreeImage.ConvertToType(FreeImageAPI.FIBITMAP,FreeImageAPI.FREE_IMAGE_TYPE,System.Boolean)">
            <summary>
            Converts an image of any type to type dst_type.
            </summary>
            <param name="src">Handle to a FreeImage bitmap.</param>
            <param name="dst_type">Destination type.</param>
            <param name="scale_linear">True to scale linear, else false.</param>
            <returns>Handle to a FreeImage bitmap.</returns>
        </member>
        <member name="M:FreeImageAPI.FreeImage.ToneMapping(FreeImageAPI.FIBITMAP,FreeImageAPI.FREE_IMAGE_TMO,System.Double,System.Double)">
            <summary>
            Converts a High Dynamic Range image (48-bit RGB or 96-bit RGBF) to a 24-bit RGB image, suitable for display.
            </summary>
            <param name="dib">Handle to a FreeImage bitmap.</param>
            <param name="tmo">The tone mapping operator to be used.</param>
            <param name="first_param">Parmeter depending on the used algorithm</param>
            <param name="second_param">Parmeter depending on the used algorithm</param>
            <returns>Handle to a FreeImage bitmap.</returns>
        </member>
        <member name="M:FreeImageAPI.FreeImage.TmoDrago03(FreeImageAPI.FIBITMAP,System.Double,System.Double)">
            <summary>
            Converts a High Dynamic Range image to a 24-bit RGB image using a global
            operator based on logarithmic compression of luminance values, imitating the human response to light.
            </summary>
            <param name="src">Handle to a FreeImage bitmap.</param>
            <param name="gamma">A gamma correction that is applied after the tone mapping.
            A value of 1 means no correction.</param>
            <param name="exposure">Scale factor allowing to adjust the brightness of the output image.</param>
            <returns>Handle to a FreeImage bitmap.</returns>
        </member>
        <member name="M:FreeImageAPI.FreeImage.TmoReinhard05(FreeImageAPI.FIBITMAP,System.Double,System.Double)">
            <summary>
            Converts a High Dynamic Range image to a 24-bit RGB image using a global operator inspired
            by photoreceptor physiology of the human visual system.
            </summary>
            <param name="src">Handle to a FreeImage bitmap.</param>
            <param name="intensity">Controls the overall image intensity in the range [-8, 8].</param>
            <param name="contrast">Controls the overall image contrast in the range [0.3, 1.0[.</param>
            <returns>Handle to a FreeImage bitmap.</returns>
        </member>
        <member name="M:FreeImageAPI.FreeImage.TmoFattal02(FreeImageAPI.FIBITMAP,System.Double,System.Double)">
            <summary>
            Apply the Gradient Domain High Dynamic Range Compression to a RGBF image and convert to 24-bit RGB.
            </summary>
            <param name="src">Handle to a FreeImage bitmap.</param>
            <param name="color_saturation">Color saturation (s parameter in the paper) in [0.4..0.6]</param>
            <param name="attenuation">Atenuation factor (beta parameter in the paper) in [0.8..0.9]</param>
            <returns>Handle to a FreeImage bitmap.</returns>
        </member>
        <member name="M:FreeImageAPI.FreeImage.ZLibCompress(System.Byte[],System.UInt32,System.Byte[],System.UInt32)">
            <summary>
            Compresses a source buffer into a target buffer, using the ZLib library.
            </summary>
            <param name="target">Pointer to the target buffer.</param>
            <param name="target_size">Size of the target buffer.
            Must be at least 0.1% larger than source_size plus 12 bytes.</param>
            <param name="source">Pointer to the source buffer.</param>
            <param name="source_size">Size of the source buffer.</param>
            <returns>The actual size of the compressed buffer, or 0 if an error occurred.</returns>
        </member>
        <member name="M:FreeImageAPI.FreeImage.ZLibUncompress(System.Byte[],System.UInt32,System.Byte[],System.UInt32)">
            <summary>
            Decompresses a source buffer into a target buffer, using the ZLib library.
            </summary>
            <param name="target">Pointer to the target buffer.</param>
            <param name="target_size">Size of the target buffer.
            Must have been saved outlide of zlib.</param>
            <param name="source">Pointer to the source buffer.</param>
            <param name="source_size">Size of the source buffer.</param>
            <returns>The actual size of the uncompressed buffer, or 0 if an error occurred.</returns>
        </member>
        <member name="M:FreeImageAPI.FreeImage.ZLibGZip(System.Byte[],System.UInt32,System.Byte[],System.UInt32)">
            <summary>
            Compresses a source buffer into a target buffer, using the ZLib library.
            </summary>
            <param name="target">Pointer to the target buffer.</param>
            <param name="target_size">Size of the target buffer.
            Must be at least 0.1% larger than source_size plus 24 bytes.</param>
            <param name="source">Pointer to the source buffer.</param>
            <param name="source_size">Size of the source buffer.</param>
            <returns>The actual size of the compressed buffer, or 0 if an error occurred.</returns>
        </member>
        <member name="M:FreeImageAPI.FreeImage.ZLibGUnzip(System.Byte[],System.UInt32,System.Byte[],System.UInt32)">
            <summary>
            Decompresses a source buffer into a target buffer, using the ZLib library.
            </summary>
            <param name="target">Pointer to the target buffer.</param>
            <param name="target_size">Size of the target buffer.
            Must have been saved outlide of zlib.</param>
            <param name="source">Pointer to the source buffer.</param>
            <param name="source_size">Size of the source buffer.</param>
            <returns>The actual size of the uncompressed buffer, or 0 if an error occurred.</returns>
        </member>
        <member name="M:FreeImageAPI.FreeImage.ZLibCRC32(System.UInt32,System.Byte[],System.UInt32)">
            <summary>
            Generates a CRC32 checksum.
            </summary>
            <param name="crc">The CRC32 checksum to begin with.</param>
            <param name="source">Pointer to the source buffer.
            If the value is 0, the function returns the required initial value for the crc.</param>
            <param name="source_size">Size of the source buffer.</param>
            <returns></returns>
        </member>
        <member name="M:FreeImageAPI.FreeImage.CreateTag">
            <summary>
            Allocates a new <see cref="T:FreeImageAPI.FITAG"/> object.
            This object must be destroyed with a call to
            <see cref="M:FreeImageAPI.FreeImage.DeleteTag(FreeImageAPI.FITAG)"/> when no longer in use.
            </summary>
            <returns>The new <see cref="T:FreeImageAPI.FITAG"/>.</returns>
        </member>
        <member name="M:FreeImageAPI.FreeImage.DeleteTag(FreeImageAPI.FITAG)">
            <summary>
            Delete a previously allocated <see cref="T:FreeImageAPI.FITAG"/> object.
            </summary>
            <param name="tag">The <see cref="T:FreeImageAPI.FITAG"/> to destroy.</param>
        </member>
        <member name="M:FreeImageAPI.FreeImage.CloneTag(FreeImageAPI.FITAG)">
            <summary>
            Creates and returns a copy of a <see cref="T:FreeImageAPI.FITAG"/> object.
            </summary>
            <param name="tag">The <see cref="T:FreeImageAPI.FITAG"/> to clone.</param>
            <returns>The new <see cref="T:FreeImageAPI.FITAG"/>.</returns>
        </member>
        <member name="M:FreeImageAPI.FreeImage.GetTagKey(FreeImageAPI.FITAG)">
            <summary>
            Returns the tag field name (unique inside a metadata model).
            </summary>
            <param name="tag">The tag field.</param>
            <returns>The field name.</returns>
        </member>
        <member name="M:FreeImageAPI.FreeImage.GetTagDescription(FreeImageAPI.FITAG)">
            <summary>
            Returns the tag description.
            </summary>
            <param name="tag">The tag field.</param>
            <returns>The description or NULL if unavailable.</returns>
        </member>
        <member name="M:FreeImageAPI.FreeImage.GetTagID(FreeImageAPI.FITAG)">
            <summary>
            Returns the tag ID.
            </summary>
            <param name="tag">The tag field.</param>
            <returns>The ID or 0 if unavailable.</returns>
        </member>
        <member name="M:FreeImageAPI.FreeImage.GetTagType(FreeImageAPI.FITAG)">
            <summary>
            Returns the tag data type.
            </summary>
            <param name="tag">The tag field.</param>
            <returns>The tag type.</returns>
        </member>
        <member name="M:FreeImageAPI.FreeImage.GetTagCount(FreeImageAPI.FITAG)">
            <summary>
            Returns the number of components in the tag (in tag type units).
            </summary>
            <param name="tag">The tag field.</param>
            <returns>The number of components.</returns>
        </member>
        <member name="M:FreeImageAPI.FreeImage.GetTagLength(FreeImageAPI.FITAG)">
            <summary>
            Returns the length of the tag value in bytes.
            </summary>
            <param name="tag">The tag field.</param>
            <returns>The length of the tag value.</returns>
        </member>
        <member name="M:FreeImageAPI.FreeImage.GetTagValue(FreeImageAPI.FITAG)">
            <summary>
            Returns the tag value.
            It is up to the programmer to interpret the returned pointer correctly,
            according to the results of GetTagType and GetTagCount.
            </summary>
            <param name="tag">The tag field.</param>
            <returns>Pointer to the value.</returns>
        </member>
        <member name="M:FreeImageAPI.FreeImage.SetTagKey(FreeImageAPI.FITAG,System.String)">
            <summary>
            Sets the tag field name.
            </summary>
            <param name="tag">The tag field.</param>
            <param name="key">The new name.</param>
            <returns>Returns true on success, false on failure.</returns>
        </member>
        <member name="M:FreeImageAPI.FreeImage.SetTagDescription(FreeImageAPI.FITAG,System.String)">
            <summary>
            Sets the tag description.
            </summary>
            <param name="tag">The tag field.</param>
            <param name="description">The new description.</param>
            <returns>Returns true on success, false on failure.</returns>
        </member>
        <member name="M:FreeImageAPI.FreeImage.SetTagID(FreeImageAPI.FITAG,System.UInt16)">
            <summary>
            Sets the tag ID.
            </summary>
            <param name="tag">The tag field.</param>
            <param name="id">The new ID.</param>
            <returns>Returns true on success, false on failure.</returns>
        </member>
        <member name="M:FreeImageAPI.FreeImage.SetTagType(FreeImageAPI.FITAG,FreeImageAPI.FREE_IMAGE_MDTYPE)">
            <summary>
            Sets the tag data type.
            </summary>
            <param name="tag">The tag field.</param>
            <param name="type">The new type.</param>
            <returns>Returns true on success, false on failure.</returns>
        </member>
        <member name="M:FreeImageAPI.FreeImage.SetTagCount(FreeImageAPI.FITAG,System.UInt32)">
            <summary>
            Sets the number of data in the tag.
            </summary>
            <param name="tag">The tag field.</param>
            <param name="count">New number of data.</param>
            <returns>Returns true on success, false on failure.</returns>
        </member>
        <member name="M:FreeImageAPI.FreeImage.SetTagLength(FreeImageAPI.FITAG,System.UInt32)">
            <summary>
            Sets the length of the tag value in bytes.
            </summary>
            <param name="tag">The tag field.</param>
            <param name="length">The new length.</param>
            <returns>Returns true on success, false on failure.</returns>
        </member>
        <member name="M:FreeImageAPI.FreeImage.SetTagValue(FreeImageAPI.FITAG,System.Byte[])">
            <summary>
            Sets the tag value.
            </summary>
            <param name="tag">The tag field.</param>
            <param name="value">Pointer to the new value.</param>
            <returns>Returns true on success, false on failure.</returns>
        </member>
        <member name="M:FreeImageAPI.FreeImage.FindFirstMetadata(FreeImageAPI.FREE_IMAGE_MDMODEL,FreeImageAPI.FIBITMAP,FreeImageAPI.FITAG@)">
            <summary>
            Provides information about the first instance of a tag that matches the metadata model.
            </summary>
            <param name="model">The model to match.</param>
            <param name="dib">Handle to a FreeImage bitmap.</param>
            <param name="tag">Tag that matches the metadata model.</param>
            <returns>Unique search handle that can be used to call FindNextMetadata or FindCloseMetadata.
            Null if the metadata model does not exist.</returns>
        </member>
        <member name="M:FreeImageAPI.FreeImage.FindNextMetadata(FreeImageAPI.FIMETADATA,FreeImageAPI.FITAG@)">
            <summary>
            Find the next tag, if any, that matches the metadata model argument in a previous call
            to FindFirstMetadata, and then alters the tag object contents accordingly.
            </summary>
            <param name="mdhandle">Unique search handle provided by FindFirstMetadata.</param>
            <param name="tag">Tag that matches the metadata model.</param>
            <returns>Returns true on success, false on failure.</returns>
        </member>
        <member name="M:FreeImageAPI.FreeImage.FindCloseMetadata_(FreeImageAPI.FIMETADATA)">
            <summary>
            Closes the specified metadata search handle and releases associated resources.
            </summary>
            <param name="mdhandle">The handle to close.</param>
        </member>
        <member name="M:FreeImageAPI.FreeImage.GetMetadata(FreeImageAPI.FREE_IMAGE_MDMODEL,FreeImageAPI.FIBITMAP,System.String,FreeImageAPI.FITAG@)">
            <summary>
            Retrieve a metadata attached to a dib.
            </summary>
            <param name="model">The metadata model to look for.</param>
            <param name="dib">Handle to a FreeImage bitmap.</param>
            <param name="key">The metadata field name.</param>
            <param name="tag">A FITAG structure returned by the function.</param>
            <returns>Returns true on success, false on failure.</returns>
        </member>
        <member name="M:FreeImageAPI.FreeImage.SetMetadata(FreeImageAPI.FREE_IMAGE_MDMODEL,FreeImageAPI.FIBITMAP,System.String,FreeImageAPI.FITAG)">
            <summary>
            Attach a new FreeImage tag to a dib.
            </summary>
            <param name="model">The metadata model used to store the tag.</param>
            <param name="dib">Handle to a FreeImage bitmap.</param>
            <param name="key">The tag field name.</param>
            <param name="tag">The FreeImage tag to be attached.</param>
            <returns>Returns true on success, false on failure.</returns>
        </member>
        <member name="M:FreeImageAPI.FreeImage.GetMetadataCount(FreeImageAPI.FREE_IMAGE_MDMODEL,FreeImageAPI.FIBITMAP)">
            <summary>
            Returns the number of tags contained in the model metadata model attached to the input dib.
            </summary>
            <param name="model">The metadata model.</param>
            <param name="dib">Handle to a FreeImage bitmap.</param>
            <returns>Number of tags contained in the metadata model.</returns>
        </member>
        <member name="M:FreeImageAPI.FreeImage.CloneMetadata(FreeImageAPI.FIBITMAP,FreeImageAPI.FIBITMAP)">
            <summary>
            Copies the metadata of FreeImage bitmap to another.
            </summary>
            <param name="dst">The FreeImage bitmap to copy the metadata to.</param>
            <param name="src">The FreeImage bitmap to copy the metadata from.</param>
            <returns>Returns true on success, false on failure.</returns>
        </member>
        <member name="M:FreeImageAPI.FreeImage.TagToString(FreeImageAPI.FREE_IMAGE_MDMODEL,FreeImageAPI.FITAG,System.UInt32)">
            <summary>
            Converts a FreeImage tag structure to a string that represents the interpreted tag value.
            The function is not thread safe.
            </summary>
            <param name="model">The metadata model.</param>
            <param name="tag">The interpreted tag value.</param>
            <param name="Make">Reserved.</param>
            <returns>The representing string.</returns>
        </member>
        <member name="M:FreeImageAPI.FreeImage.RotateClassic(FreeImageAPI.FIBITMAP,System.Double)">
            <summary>
            This function rotates a 1-, 8-bit greyscale or a 24-, 32-bit color image by means of 3 shears.
            1-bit images rotation is limited to integer multiple of 90°.
            <c>null</c> is returned for other values.
            </summary>
            <param name="dib">Handle to a FreeImage bitmap.</param>
            <param name="angle">The angle of rotation.</param>
            <returns>Handle to a FreeImage bitmap.</returns>
        </member>
        <member name="M:FreeImageAPI.FreeImage.RotateEx(FreeImageAPI.FIBITMAP,System.Double,System.Double,System.Double,System.Double,System.Double,System.Boolean)">
            <summary>
            This function performs a rotation and / or translation of an 8-bit greyscale,
            24- or 32-bit image, using a 3rd order (cubic) B-Spline.
            </summary>
            <param name="dib">Handle to a FreeImage bitmap.</param>
            <param name="angle">The angle of rotation.</param>
            <param name="x_shift">Horizontal image translation.</param>
            <param name="y_shift">Vertical image translation.</param>
            <param name="x_origin">Rotation center x-coordinate.</param>
            <param name="y_origin">Rotation center y-coordinate.</param>
            <param name="use_mask">When true the irrelevant part of the image is set to a black color,
            otherwise, a mirroring technique is used to fill irrelevant pixels.</param>
            <returns>Handle to a FreeImage bitmap.</returns>
        </member>
        <member name="M:FreeImageAPI.FreeImage.FlipHorizontal(FreeImageAPI.FIBITMAP)">
            <summary>
            Flip the input dib horizontally along the vertical axis.
            </summary>
            <param name="dib">Handle to a FreeImage bitmap.</param>
            <returns>Returns true on success, false on failure.</returns>
        </member>
        <member name="M:FreeImageAPI.FreeImage.FlipVertical(FreeImageAPI.FIBITMAP)">
            <summary>
            Flip the input dib vertically along the horizontal axis.
            </summary>
            <param name="dib">Handle to a FreeImage bitmap.</param>
            <returns>Returns true on success, false on failure.</returns>
        </member>
        <member name="M:FreeImageAPI.FreeImage.JPEGTransform(System.String,System.String,FreeImageAPI.FREE_IMAGE_JPEG_OPERATION,System.Boolean)">
            <summary>
            Performs a lossless rotation or flipping on a JPEG file.
            </summary>
            <param name="src_file">Source file.</param>
            <param name="dst_file">Destination file; can be the source file; will be overwritten.</param>
            <param name="operation">The operation to apply.</param>
            <param name="perfect">To avoid lossy transformation, you can set the perfect parameter to true.</param>
            <returns>Returns true on success, false on failure.</returns>
        </member>
        <member name="M:FreeImageAPI.FreeImage.Rescale(FreeImageAPI.FIBITMAP,System.Int32,System.Int32,FreeImageAPI.FREE_IMAGE_FILTER)">
            <summary>
            Performs resampling (or scaling, zooming) of a greyscale or RGB(A) image
            to the desired destination width and height.
            </summary>
            <param name="dib">Handle to a FreeImage bitmap.</param>
            <param name="dst_width">Destination width.</param>
            <param name="dst_height">Destination height.</param>
            <param name="filter">The filter to apply.</param>
            <returns>Handle to a FreeImage bitmap.</returns>
        </member>
        <member name="M:FreeImageAPI.FreeImage.MakeThumbnail(FreeImageAPI.FIBITMAP,System.Int32,System.Boolean)">
            <summary>
            Creates a thumbnail from a greyscale or RGB(A) image, keeping aspect ratio.
            </summary>
            <param name="dib">Handle to a FreeImage bitmap.</param>
            <param name="max_pixel_size">Thumbnail square size.</param>
            <param name="convert">When true HDR images are transperantly converted to standard images.</param>
            <returns>Handle to a FreeImage bitmap.</returns>
        </member>
        <member name="M:FreeImageAPI.FreeImage.AdjustCurve(FreeImageAPI.FIBITMAP,System.Byte[],FreeImageAPI.FREE_IMAGE_COLOR_CHANNEL)">
            <summary>
            Perfoms an histogram transformation on a 8-, 24- or 32-bit image.
            </summary>
            <param name="dib">Handle to a FreeImage bitmap.</param>
            <param name="lookUpTable">The lookup table.
            It's size is assumed to be 256 in length.</param>
            <param name="channel">The color channel to be transformed.</param>
            <returns>Returns true on success, false on failure.</returns>
        </member>
        <member name="M:FreeImageAPI.FreeImage.AdjustGamma(FreeImageAPI.FIBITMAP,System.Double)">
            <summary>
            Performs gamma correction on a 8-, 24- or 32-bit image.
            </summary>
            <param name="dib">Handle to a FreeImage bitmap.</param>
            <param name="gamma">The parameter represents the gamma value to use (gamma > 0).
            A value of 1.0 leaves the image alone, less than one darkens it, and greater than one lightens it.</param>
            <returns>Returns true on success, false on failure.</returns>
        </member>
        <member name="M:FreeImageAPI.FreeImage.AdjustBrightness(FreeImageAPI.FIBITMAP,System.Double)">
            <summary>
            Adjusts the brightness of a 8-, 24- or 32-bit image by a certain amount.
            </summary>
            <param name="dib">Handle to a FreeImage bitmap.</param>
            <param name="percentage">A value 0 means no change,
            less than 0 will make the image darker and greater than 0 will make the image brighter.</param>
            <returns>Returns true on success, false on failure.</returns>
        </member>
        <member name="M:FreeImageAPI.FreeImage.AdjustContrast(FreeImageAPI.FIBITMAP,System.Double)">
            <summary>
            Adjusts the contrast of a 8-, 24- or 32-bit image by a certain amount.
            </summary>
            <param name="dib">Handle to a FreeImage bitmap.</param>
            <param name="percentage">A value 0 means no change,
            less than 0 will decrease the contrast and greater than 0 will increase the contrast of the image.</param>
            <returns>Returns true on success, false on failure.</returns>
        </member>
        <member name="M:FreeImageAPI.FreeImage.Invert(FreeImageAPI.FIBITMAP)">
            <summary>
            Inverts each pixel data.
            </summary>
            <param name="dib">Handle to a FreeImage bitmap.</param>
            <returns>Returns true on success, false on failure.</returns>
        </member>
        <member name="M:FreeImageAPI.FreeImage.GetHistogram(FreeImageAPI.FIBITMAP,System.Int32[],FreeImageAPI.FREE_IMAGE_COLOR_CHANNEL)">
            <summary>
            Computes the image histogram.
            </summary>
            <param name="dib">Handle to a FreeImage bitmap.</param>
            <param name="histo">Array of integers with a size of 256.</param>
            <param name="channel">Channel to compute from.</param>
            <returns>Returns true on success, false on failure.</returns>
        </member>
        <member name="M:FreeImageAPI.FreeImage.GetChannel(FreeImageAPI.FIBITMAP,FreeImageAPI.FREE_IMAGE_COLOR_CHANNEL)">
            <summary>
            Retrieves the red, green, blue or alpha channel of a 24- or 32-bit image.
            </summary>
            <param name="dib">Handle to a FreeImage bitmap.</param>
            <param name="channel">The color channel to extract.</param>
            <returns>Handle to a FreeImage bitmap.</returns>
        </member>
        <member name="M:FreeImageAPI.FreeImage.SetChannel(FreeImageAPI.FIBITMAP,FreeImageAPI.FIBITMAP,FreeImageAPI.FREE_IMAGE_COLOR_CHANNEL)">
            <summary>
            Insert a 8-bit dib into a 24- or 32-bit image.
            Both images must have to same width and height.
            </summary>
            <param name="dib">Handle to a FreeImage bitmap.</param>
            <param name="dib8">Handle to the bitmap to insert.</param>
            <param name="channel">The color channel to replace.</param>
            <returns>Returns true on success, false on failure.</returns>
        </member>
        <member name="M:FreeImageAPI.FreeImage.GetComplexChannel(FreeImageAPI.FIBITMAP,FreeImageAPI.FREE_IMAGE_COLOR_CHANNEL)">
            <summary>
            Retrieves the real part, imaginary part, magnitude or phase of a complex image.
            </summary>
            <param name="src">Handle to a FreeImage bitmap.</param>
            <param name="channel">The color channel to extract.</param>
            <returns>Handle to a FreeImage bitmap.</returns>
        </member>
        <member name="M:FreeImageAPI.FreeImage.SetComplexChannel(FreeImageAPI.FIBITMAP,FreeImageAPI.FIBITMAP,FreeImageAPI.FREE_IMAGE_COLOR_CHANNEL)">
            <summary>
            Set the real or imaginary part of a complex image.
            Both images must have to same width and height.
            </summary>
            <param name="dst">Handle to a FreeImage bitmap.</param>
            <param name="src">Handle to a FreeImage bitmap.</param>
            <param name="channel">The color channel to replace.</param>
            <returns>Returns true on success, false on failure.</returns>
        </member>
        <member name="M:FreeImageAPI.FreeImage.Copy(FreeImageAPI.FIBITMAP,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Copy a sub part of the current dib image.
            </summary>
            <param name="dib">Handle to a FreeImage bitmap.</param>
            <param name="left">Specifies the left position of the cropped rectangle.</param>
            <param name="top">Specifies the top position of the cropped rectangle.</param>
            <param name="right">Specifies the right position of the cropped rectangle.</param>
            <param name="bottom">Specifies the bottom position of the cropped rectangle.</param>
            <returns>Handle to a FreeImage bitmap.</returns>
        </member>
        <member name="M:FreeImageAPI.FreeImage.Paste(FreeImageAPI.FIBITMAP,FreeImageAPI.FIBITMAP,System.Int32,System.Int32,System.Int32)">
            <summary>
            Alpha blend or combine a sub part image with the current dib image.
            The bit depth of the dst bitmap must be greater than or equal to the bit depth of the src.
            </summary>
            <param name="dst">Handle to a FreeImage bitmap.</param>
            <param name="src">Handle to a FreeImage bitmap.</param>
            <param name="left">Specifies the left position of the sub image.</param>
            <param name="top">Specifies the top position of the sub image.</param>
            <param name="alpha">alpha blend factor.
            The source and destination images are alpha blended if alpha=0..255.
            If alpha > 255, then the source image is combined to the destination image.</param>
            <returns>Returns true on success, false on failure.</returns>
        </member>
        <member name="M:FreeImageAPI.FreeImage.Composite(FreeImageAPI.FIBITMAP,System.Boolean,FreeImageAPI.RGBQUAD@,FreeImageAPI.FIBITMAP)">
            <summary>
            This function composite a transparent foreground image against a single background color or
            against a background image.
            </summary>
            <param name="fg">Handle to a FreeImage bitmap.</param>
            <param name="useFileBkg">When true the background of fg is used if it contains one.</param>
            <param name="appBkColor">The application background is used if useFileBkg is false.</param>
            <param name="bg">Image used as background when useFileBkg is false or fg has no background
            and appBkColor is null.</param>
            <returns>Handle to a FreeImage bitmap.</returns>
        </member>
        <member name="M:FreeImageAPI.FreeImage.Composite(FreeImageAPI.FIBITMAP,System.Boolean,FreeImageAPI.RGBQUAD[],FreeImageAPI.FIBITMAP)">
            <summary>
            This function composite a transparent foreground image against a single background color or
            against a background image.
            </summary>
            <param name="fg">Handle to a FreeImage bitmap.</param>
            <param name="useFileBkg">When true the background of fg is used if it contains one.</param>
            <param name="appBkColor">The application background is used if useFileBkg is false
            and 'appBkColor' is not null.</param>
            <param name="bg">Image used as background when useFileBkg is false or fg has no background
            and appBkColor is null.</param>
            <returns>Handle to a FreeImage bitmap.</returns>
        </member>
        <member name="M:FreeImageAPI.FreeImage.JPEGCrop(System.String,System.String,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Performs a lossless crop on a JPEG file.
            </summary>
            <param name="src_file">Source filename.</param>
            <param name="dst_file">Destination filename.</param>
            <param name="left">Specifies the left position of the cropped rectangle.</param>
            <param name="top">Specifies the top position of the cropped rectangle.</param>
            <param name="right">Specifies the right position of the cropped rectangle.</param>
            <param name="bottom">Specifies the bottom position of the cropped rectangle.</param>
            <returns>Returns true on success, false on failure.</returns>
        </member>
        <member name="M:FreeImageAPI.FreeImage.PreMultiplyWithAlpha(FreeImageAPI.FIBITMAP)">
            <summary>
            Applies the alpha value of each pixel to its color components.
            The aplha value stays unchanged.
            Only works with 32-bits color depth.
            </summary>
            <param name="dib">Handle to a FreeImage bitmap.</param>
            <returns>Returns true on success, false on failure.</returns>
        </member>
        <member name="M:FreeImageAPI.FreeImage.MultigridPoissonSolver(FreeImageAPI.FIBITMAP,System.Int32)">
            <summary>
            Solves a Poisson equation, remap result pixels to [0..1] and returns the solution.
            </summary>
            <param name="Laplacian">Handle to a FreeImage bitmap.</param>
            <param name="ncycle">Number of cycles in the multigrid algorithm (usually 2 or 3)</param>
            <returns>Handle to a FreeImage bitmap.</returns>
        </member>
        <member name="M:FreeImageAPI.FreeImage.GetAdjustColorsLookupTable(System.Byte[],System.Double,System.Double,System.Double,System.Boolean)">
            <summary>
            Creates a lookup table to be used with <see cref="M:FreeImageAPI.FreeImage.AdjustCurve(FreeImageAPI.FIBITMAP,System.Byte[],FreeImageAPI.FREE_IMAGE_COLOR_CHANNEL)"/> which may adjusts brightness and
            contrast, correct gamma and invert the image with a single call to <see cref="M:FreeImageAPI.FreeImage.AdjustCurve(FreeImageAPI.FIBITMAP,System.Byte[],FreeImageAPI.FREE_IMAGE_COLOR_CHANNEL)"/>.
            </summary>
            <param name="lookUpTable">Output lookup table to be used with <see cref="M:FreeImageAPI.FreeImage.AdjustCurve(FreeImageAPI.FIBITMAP,System.Byte[],FreeImageAPI.FREE_IMAGE_COLOR_CHANNEL)"/>.
            The size of 'lookUpTable' is assumed to be 256.</param>
            <param name="brightness">Percentage brightness value where -100 &lt;= brightness &lt;= 100.
            <para>A value of 0 means no change, less than 0 will make the image darker and greater
            than 0 will make the image brighter.</para></param>
            <param name="contrast">Percentage contrast value where -100 &lt;= contrast &lt;= 100.
            <para>A value of 0 means no change, less than 0 will decrease the contrast
            and greater than 0 will increase the contrast of the image.</para></param>
            <param name="gamma">Gamma value to be used for gamma correction.
            <para>A value of 1.0 leaves the image alone, less than one darkens it,
            and greater than one lightens it.</para></param>
            <param name="invert">If set to true, the image will be inverted.</param>
            <returns>The number of adjustments applied to the resulting lookup table
            compared to a blind lookup table.</returns>
            <remarks>
            This function creates a lookup table to be used with <see cref="M:FreeImageAPI.FreeImage.AdjustCurve(FreeImageAPI.FIBITMAP,System.Byte[],FreeImageAPI.FREE_IMAGE_COLOR_CHANNEL)"/> which may adjust
            brightness and contrast, correct gamma and invert the image with a single call to
            <see cref="M:FreeImageAPI.FreeImage.AdjustCurve(FreeImageAPI.FIBITMAP,System.Byte[],FreeImageAPI.FREE_IMAGE_COLOR_CHANNEL)"/>. If more than one of these image display properties need to be adjusted,
            using a combined lookup table should be preferred over calling each adjustment function
            separately. That's particularly true for huge images or if performance is an issue. Then,
            the expensive process of iterating over all pixels of an image is performed only once and
            not up to four times.
            <para/>
            Furthermore, the lookup table created does not depend on the order, in which each single
            adjustment operation is performed. Due to rounding and byte casting issues, it actually
            matters in which order individual adjustment operations are performed. Both of the following
            snippets most likely produce different results:
            <para/>
            <code>
            // snippet 1: contrast, brightness
            AdjustContrast(dib, 15.0);
            AdjustBrightness(dib, 50.0); 
            </code>
            <para/>
            <code>
            // snippet 2: brightness, contrast
            AdjustBrightness(dib, 50.0);
            AdjustContrast(dib, 15.0);
            </code>
            <para/>
            Better and even faster would be snippet 3:
            <para/>
            <code>
            // snippet 3:
            byte[] lut = new byte[256];
            GetAdjustColorsLookupTable(lut, 50.0, 15.0, 1.0, false);
            AdjustCurve(dib, lut, FREE_IMAGE_COLOR_CHANNEL.FICC_RGB);
            </code>
            <para/>
            This function is also used internally by <see cref="M:FreeImageAPI.FreeImage.AdjustColors(FreeImageAPI.FIBITMAP,System.Double,System.Double,System.Double,System.Boolean)"/>, which does not return the
            lookup table, but uses it to call <see cref="M:FreeImageAPI.FreeImage.AdjustCurve(FreeImageAPI.FIBITMAP,System.Byte[],FreeImageAPI.FREE_IMAGE_COLOR_CHANNEL)"/> on the passed image.
            </remarks>
        </member>
        <member name="M:FreeImageAPI.FreeImage.AdjustColors(FreeImageAPI.FIBITMAP,System.Double,System.Double,System.Double,System.Boolean)">
            <summary>
            Adjusts an image's brightness, contrast and gamma as well as it may
            optionally invert the image within a single operation.
            </summary>
            <param name="dib">Handle to a FreeImage bitmap.</param>
            <param name="brightness">Percentage brightness value where -100 &lt;= brightness &lt;= 100.
            <para>A value of 0 means no change, less than 0 will make the image darker and greater
            than 0 will make the image brighter.</para></param>
            <param name="contrast">Percentage contrast value where -100 &lt;= contrast &lt;= 100.
            <para>A value of 0 means no change, less than 0 will decrease the contrast
            and greater than 0 will increase the contrast of the image.</para></param>
            <param name="gamma">Gamma value to be used for gamma correction.
            <para>A value of 1.0 leaves the image alone, less than one darkens it,
            and greater than one lightens it.</para>
            This parameter must not be zero or smaller than zero.
            If so, it will be ignored and no gamma correction will be performed on the image.</param>
            <param name="invert">If set to true, the image will be inverted.</param>
            <returns>Returns true on success, false on failure.</returns>
            <remarks>
            This function adjusts an image's brightness, contrast and gamma as well as it
            may optionally invert the image within a single operation. If more than one of
            these image display properties need to be adjusted, using this function should
            be preferred over calling each adjustment function separately. That's particularly
            true for huge images or if performance is an issue.
            <para/>
            This function relies on <see cref="M:FreeImageAPI.FreeImage.GetAdjustColorsLookupTable(System.Byte[],System.Double,System.Double,System.Double,System.Boolean)"/>,
            which creates a single lookup table, that combines all adjustment operations requested.
            <para/>
            Furthermore, the lookup table created by <see cref="M:FreeImageAPI.FreeImage.GetAdjustColorsLookupTable(System.Byte[],System.Double,System.Double,System.Double,System.Boolean)"/> does
            not depend on the order, in which each single adjustment operation is performed.
            Due to rounding and byte casting issues, it actually matters in which order individual
            adjustment operations are performed. Both of the following snippets most likely produce
            different results:
            <para/>
            <code>
            // snippet 1: contrast, brightness
            AdjustContrast(dib, 15.0);
            AdjustBrightness(dib, 50.0);
            </code>
            <para/>
            <code>
            // snippet 2: brightness, contrast
            AdjustBrightness(dib, 50.0);
            AdjustContrast(dib, 15.0);
            </code>
            <para/>
            Better and even faster would be snippet 3:
            <para/>
            <code>
            // snippet 3:
            AdjustColors(dib, 50.0, 15.0, 1.0, false);
            </code>
            </remarks>
        </member>
        <member name="M:FreeImageAPI.FreeImage.ApplyColorMapping(FreeImageAPI.FIBITMAP,FreeImageAPI.RGBQUAD[],FreeImageAPI.RGBQUAD[],System.UInt32,System.Boolean,System.Boolean)">
            <summary>
            Applies color mapping for one or several colors on a 1-, 4- or 8-bit
            palletized or a 16-, 24- or 32-bit high color image.
            </summary>
            <param name="dib">Handle to a FreeImage bitmap.</param>
            <param name="srccolors">Array of colors to be used as the mapping source.</param>
            <param name="dstcolors">Array of colors to be used as the mapping destination.</param>
            <param name="count">The number of colors to be mapped. This is the size of both
            srccolors and dstcolors.</param>
            <param name="ignore_alpha">If true, 32-bit images and colors are treated as 24-bit.</param>
            <param name="swap">If true, source and destination colors are swapped, that is,
            each destination color is also mapped to the corresponding source color.</param>
            <returns>The total number of pixels changed.</returns>
            <remarks>
            This function maps up to <paramref name="count"/> colors specified in
            <paramref name="srccolors"/> to these specified in <paramref name="dstcolors"/>.
            Thereby, color <i>srccolors[N]</i>, if found in the image, will be replaced by color
            <i>dstcolors[N]</i>. If <paramref name="swap"/> is <b>true</b>, additionally all colors
            specified in <paramref name="dstcolors"/> are also mapped to these specified
            in <paramref name="srccolors"/>. For high color images, the actual image data will be
            modified whereas, for palletized images only the palette will be changed.
            <para/>
            The function returns the number of pixels changed or zero, if no pixels were changed. 
            <para/>
            Both arrays <paramref name="srccolors"/> and <paramref name="dstcolors"/> are assumed
            not to hold less than <paramref name="count"/> colors.
            <para/>
            For 16-bit images, all colors specified are transparently converted to their 
            proper 16-bit representation (either in RGB555 or RGB565 format, which is determined
            by the image's red- green- and blue-mask).
            <para/>
            <b>Note, that this behaviour is different from what <see cref="M:FreeImageAPI.FreeImage.ApplyPaletteIndexMapping(FreeImageAPI.FIBITMAP,System.Byte[],System.Byte[],System.UInt32,System.Boolean)"/> does,
            which modifies the actual image data on palletized images.</b>
            </remarks>
        </member>
        <member name="M:FreeImageAPI.FreeImage.SwapColors(FreeImageAPI.FIBITMAP,FreeImageAPI.RGBQUAD@,FreeImageAPI.RGBQUAD@,System.Boolean)">
            <summary>
            Swaps two specified colors on a 1-, 4- or 8-bit palletized
            or a 16-, 24- or 32-bit high color image.
            </summary>
            <param name="dib">Handle to a FreeImage bitmap.</param>
            <param name="color_a">One of the two colors to be swapped.</param>
            <param name="color_b">The other of the two colors to be swapped.</param>
            <param name="ignore_alpha">If true, 32-bit images and colors are treated as 24-bit.</param>
            <returns>The total number of pixels changed.</returns>
            <remarks>
            This function swaps the two specified colors <paramref name="color_a"/> and
            <paramref name="color_b"/> on a palletized or high color image.
            For high color images, the actual image data will be modified whereas, for palletized
            images only the palette will be changed.
            <para/>
            <b>Note, that this behaviour is different from what <see cref="M:FreeImageAPI.FreeImage.SwapPaletteIndices(FreeImageAPI.FIBITMAP,System.Byte@,System.Byte@)"/> does,
            which modifies the actual image data on palletized images.</b>
            <para/>
            This is just a thin wrapper for <see cref="M:FreeImageAPI.FreeImage.ApplyColorMapping(FreeImageAPI.FIBITMAP,FreeImageAPI.RGBQUAD[],FreeImageAPI.RGBQUAD[],System.UInt32,System.Boolean,System.Boolean)"/> and resolves to:
            <para/>
            <code>
            return ApplyColorMapping(dib, color_a, color_b, 1, ignore_alpha, true);
            </code>
            </remarks>
        </member>
        <member name="M:FreeImageAPI.FreeImage.ApplyPaletteIndexMapping(FreeImageAPI.FIBITMAP,System.Byte[],System.Byte[],System.UInt32,System.Boolean)">
            <summary>
            Applies palette index mapping for one or several indices
            on a 1-, 4- or 8-bit palletized image.
            </summary>
            <param name="dib">Handle to a FreeImage bitmap.</param>
            <param name="srcindices">Array of palette indices to be used as the mapping source.</param>
            <param name="dstindices">Array of palette indices to be used as the mapping destination.</param>
            <param name="count">The number of palette indices to be mapped. This is the size of both
            srcindices and dstindices</param>
            <param name="swap">If true, source and destination palette indices are swapped, that is,
            each destination index is also mapped to the corresponding source index.</param>
            <returns>The total number of pixels changed.</returns>
            <remarks>
            This function maps up to <paramref name="count"/> palette indices specified in
            <paramref name="srcindices"/> to these specified in <paramref name="dstindices"/>.
            Thereby, index <i>srcindices[N]</i>, if present in the image, will be replaced by index
            <i>dstindices[N]</i>. If <paramref name="swap"/> is <b>true</b>, additionally all indices
            specified in <paramref name="dstindices"/> are also mapped to these specified in 
            <paramref name="srcindices"/>.
            <para/>
            The function returns the number of pixels changed or zero, if no pixels were changed.
            Both arrays <paramref name="srcindices"/> and <paramref name="dstindices"/> are assumed not to
            hold less than <paramref name="count"/> indices.
            <para/>
            <b>Note, that this behaviour is different from what <see cref="M:FreeImageAPI.FreeImage.ApplyColorMapping(FreeImageAPI.FIBITMAP,FreeImageAPI.RGBQUAD[],FreeImageAPI.RGBQUAD[],System.UInt32,System.Boolean,System.Boolean)"/> does, which
            modifies the actual image data on palletized images.</b>
            </remarks>
        </member>
        <member name="M:FreeImageAPI.FreeImage.SwapPaletteIndices(FreeImageAPI.FIBITMAP,System.Byte@,System.Byte@)">
            <summary>
            Swaps two specified palette indices on a 1-, 4- or 8-bit palletized image.
            </summary>
            <param name="dib">Handle to a FreeImage bitmap.</param>
            <param name="index_a">One of the two palette indices to be swapped.</param>
            <param name="index_b">The other of the two palette indices to be swapped.</param>
            <returns>The total number of pixels changed.</returns>
            <remarks>
            This function swaps the two specified palette indices <i>index_a</i> and
            <i>index_b</i> on a palletized image. Therefore, not the palette, but the
            actual image data will be modified.
            <para/>
            <b>Note, that this behaviour is different from what <see cref="M:FreeImageAPI.FreeImage.SwapColors(FreeImageAPI.FIBITMAP,FreeImageAPI.RGBQUAD@,FreeImageAPI.RGBQUAD@,System.Boolean)"/> does on palletized images,
            which only swaps the colors in the palette.</b>
            <para/>
            This is just a thin wrapper for <see cref="M:FreeImageAPI.FreeImage.ApplyColorMapping(FreeImageAPI.FIBITMAP,FreeImageAPI.RGBQUAD[],FreeImageAPI.RGBQUAD[],System.UInt32,System.Boolean,System.Boolean)"/> and resolves to:
            <para/>
            <code>
            return ApplyPaletteIndexMapping(dib, index_a, index_b, 1, true);
            </code>
            </remarks>
        </member>
        <member name="F:FreeImageAPI.FreeImage.FREE_IMAGE_MDMODELS">
            <summary>
            Array containing all 'FREE_IMAGE_MDMODEL's.
            </summary>
        </member>
        <member name="F:FreeImageAPI.FreeImage.streamHandles">
            <summary>
            Stores handles used to read from streams.
            </summary>
        </member>
        <member name="F:FreeImageAPI.FreeImage.WrapperVersion">
            <summary>
            Version of the wrapper library.
            </summary>
        </member>
        <member name="M:FreeImageAPI.FreeImage.GetWrapperVersion">
            <summary>
            Returns the internal version of this FreeImage .NET wrapper.
            </summary>
            <returns>The internal version of this FreeImage .NET wrapper.</returns>
        </member>
        <member name="M:FreeImageAPI.FreeImage.GetNativeVersion">
            <summary>
            Returns the version of the native FreeImage library.
            </summary>
            <returns>The version of the native FreeImage library.</returns>
        </member>
        <member name="M:FreeImageAPI.FreeImage.IsAvailable">
            <summary>
            Returns a value indicating if the FreeImage library is available or not.
            See remarks for further details.
            </summary>
            <returns><c>false</c> if the file is not available or out of date;
            <c>true</c>, otherwise.</returns>
            <remarks>
            The FreeImage.NET library is a wrapper for the native C++ library
            (FreeImage.dll ... dont mix ist up with this library FreeImageNet.dll).
            The native library <b>must</b> be either in the same folder as the program's
            executable or in a folder contained in the envirent variable <i>PATH</i>
            (for example %WINDIR%\System32).<para/>
            Further more must both libraries, including the program itself,
            be the same architecture (x86 or x64).
            </remarks>
        </member>
        <member name="M:FreeImageAPI.FreeImage.Allocate(System.Int32,System.Int32,System.Int32)">
            <summary>
            Creates a new bitmap in memory.
            </summary>
            <param name="width">Width of the new bitmap.</param>
            <param name="height">Height of the new bitmap.</param>
            <param name="bpp">Bit depth of the new Bitmap.
            Supported pixel depth: 1-, 4-, 8-, 16-, 24-, 32-bit per pixel for standard bitmap</param>
            <returns>Handle to a FreeImage bitmap.</returns>
        </member>
        <member name="M:FreeImageAPI.FreeImage.AllocateT(FreeImageAPI.FREE_IMAGE_TYPE,System.Int32,System.Int32,System.Int32)">
            <summary>
            Creates a new bitmap in memory.
            </summary>
            <param name="type">Type of the image.</param>
            <param name="width">Width of the new bitmap.</param>
            <param name="height">Height of the new bitmap.</param>
            <param name="bpp">Bit depth of the new Bitmap.
            Supported pixel depth: 1-, 4-, 8-, 16-, 24-, 32-bit per pixel for standard bitmap</param>
            <returns>Handle to a FreeImage bitmap.</returns>
        </member>
        <member name="M:FreeImageAPI.FreeImage.AllocateEx(System.Int32,System.Int32,System.Int32,System.Nullable{FreeImageAPI.RGBQUAD},FreeImageAPI.FREE_IMAGE_COLOR_OPTIONS,FreeImageAPI.RGBQUAD[])">
            <summary>
            Allocates a new image of the specified width, height and bit depth and optionally
            fills it with the specified color. See remarks for further details.
            </summary>
            <param name="width">Width of the new bitmap.</param>
            <param name="height">Height of the new bitmap.</param>
            <param name="bpp">Bit depth of the new bitmap.
            Supported pixel depth: 1-, 4-, 8-, 16-, 24-, 32-bit per pixel for standard bitmaps.</param>
            <param name="color">The color to fill the bitmap with or <c>null</c>.</param>
            <param name="options">Options to enable or disable function-features.</param>
            <param name="palette">The palette of the bitmap or <c>null</c>.</param>
            <returns>Handle to a FreeImage bitmap.</returns>
            <remarks>
            This function is an extension to <see cref="M:FreeImageAPI.FreeImage.Allocate(System.Int32,System.Int32,System.Int32,System.UInt32,System.UInt32,System.UInt32)"/>, which additionally supports
            specifying a palette to be set for the newly create image, as well as specifying a
            background color, the newly created image should initially be filled with.
            <para/>
            Basically, this function internally relies on function <see cref="M:FreeImageAPI.FreeImage.Allocate(System.Int32,System.Int32,System.Int32,System.UInt32,System.UInt32,System.UInt32)"/>, followed by a
            call to <see cref="M:FreeImageAPI.FreeImage.FillBackground``1(FreeImageAPI.FIBITMAP,``0,FreeImageAPI.FREE_IMAGE_COLOR_OPTIONS)"/>. This is why both parameters
            <paramref name="color"/> and <paramref name="options"/> behave the same as it is
            documented for function <see cref="M:FreeImageAPI.FreeImage.FillBackground``1(FreeImageAPI.FIBITMAP,``0,FreeImageAPI.FREE_IMAGE_COLOR_OPTIONS)"/>.
            So, please refer to the documentation of <see cref="M:FreeImageAPI.FreeImage.FillBackground``1(FreeImageAPI.FIBITMAP,``0,FreeImageAPI.FREE_IMAGE_COLOR_OPTIONS)"/> to
            learn more about parameters <paramref name="color"/> and <paramref name="options"/>.
            <para/>
            The palette specified through parameter <paramref name="palette"/> is only copied to the
            newly created image, if the desired bit depth is smaller than or equal to 8 bits per pixel.
            In other words, the <paramref name="palette"/> parameter is only taken into account for
            palletized images. So, for an 8-bit image, the length is 256, for an 4-bit image it is 16
            and it is 2 for a 1-bit image. In other words, this function does not support partial palettes.
            <para/>
            However, specifying a palette is not necesarily needed, even for palletized images. This
            function is capable of implicitly creating a palette, if <paramref name="palette"/> is <c>null</c>.
            If the specified background color is a greyscale value (red = green = blue) or if option
            <see cref="F:FreeImageAPI.FREE_IMAGE_COLOR_OPTIONS.FICO_ALPHA_IS_INDEX"/> is specified, a greyscale palette
            is created. For a 1-bit image, only if the specified background color is either black or white,
            a monochrome palette, consisting of black and white only is created. In any case, the darker
            colors are stored at the smaller palette indices.
            <para/>
            If the specified background color is not a greyscale value, or is neither black nor white
            for a 1-bit image, solely this specified color is injected into the otherwise black-initialized
            palette. For this operation, option <see cref="F:FreeImageAPI.FREE_IMAGE_COLOR_OPTIONS.FICO_ALPHA_IS_INDEX"/>
            is implicit, so the specified <paramref name="color"/> is applied to the palette entry,
            specified by the background color's <see cref="F:FreeImageAPI.RGBQUAD.rgbReserved"/> field.
            The image is then filled with this palette index.
            <para/>
            This function returns a newly created image as function <see cref="M:FreeImageAPI.FreeImage.Allocate(System.Int32,System.Int32,System.Int32,System.UInt32,System.UInt32,System.UInt32)"/> does, if both
            parameters <paramref name="color"/> and <paramref name="palette"/> are <c>null</c>.
            If only <paramref name="color"/> is <c>null</c>, the palette pointed to by
            parameter <paramref name="palette"/> is initially set for the new image, if a palletized
            image of type <see cref="F:FreeImageAPI.FREE_IMAGE_TYPE.FIT_BITMAP"/> is created.
            However, in the latter case, this function returns an image, whose
            pixels are all initialized with zeros so, the image will be filled with the color of the
            first palette entry.
            </remarks>
        </member>
        <member name="M:FreeImageAPI.FreeImage.AllocateEx(System.Int32,System.Int32,System.Int32,System.Nullable{FreeImageAPI.RGBQUAD},FreeImageAPI.FREE_IMAGE_COLOR_OPTIONS,FreeImageAPI.RGBQUAD[],System.UInt32,System.UInt32,System.UInt32)">
            <summary>
            Allocates a new image of the specified width, height and bit depth and optionally
            fills it with the specified color. See remarks for further details.
            </summary>
            <param name="width">Width of the new bitmap.</param>
            <param name="height">Height of the new bitmap.</param>
            <param name="bpp">Bit depth of the new bitmap.
            Supported pixel depth: 1-, 4-, 8-, 16-, 24-, 32-bit per pixel for standard bitmaps.</param>
            <param name="color">The color to fill the bitmap with or <c>null</c>.</param>
            <param name="options">Options to enable or disable function-features.</param>
            <param name="palette">The palette of the bitmap or <c>null</c>.</param>
            <param name="red_mask">Red part of the color layout.
            eg: 0xFF0000</param>
            <param name="green_mask">Green part of the color layout.
            eg: 0x00FF00</param>
            <param name="blue_mask">Blue part of the color layout.
            eg: 0x0000FF</param>
            <returns>Handle to a FreeImage bitmap.</returns>
            <remarks>
            This function is an extension to <see cref="M:FreeImageAPI.FreeImage.Allocate(System.Int32,System.Int32,System.Int32,System.UInt32,System.UInt32,System.UInt32)"/>, which additionally supports
            specifying a palette to be set for the newly create image, as well as specifying a
            background color, the newly created image should initially be filled with.
            <para/>
            Basically, this function internally relies on function <see cref="M:FreeImageAPI.FreeImage.Allocate(System.Int32,System.Int32,System.Int32,System.UInt32,System.UInt32,System.UInt32)"/>, followed by a
            call to <see cref="M:FreeImageAPI.FreeImage.FillBackground``1(FreeImageAPI.FIBITMAP,``0,FreeImageAPI.FREE_IMAGE_COLOR_OPTIONS)"/>. This is why both parameters
            <paramref name="color"/> and <paramref name="options"/> behave the same as it is
            documented for function <see cref="M:FreeImageAPI.FreeImage.FillBackground``1(FreeImageAPI.FIBITMAP,``0,FreeImageAPI.FREE_IMAGE_COLOR_OPTIONS)"/>.
            So, please refer to the documentation of <see cref="M:FreeImageAPI.FreeImage.FillBackground``1(FreeImageAPI.FIBITMAP,``0,FreeImageAPI.FREE_IMAGE_COLOR_OPTIONS)"/> to
            learn more about parameters <paramref name="color"/> and <paramref name="options"/>.
            <para/>
            The palette specified through parameter <paramref name="palette"/> is only copied to the
            newly created image, if the desired bit depth is smaller than or equal to 8 bits per pixel.
            In other words, the <paramref name="palette"/> parameter is only taken into account for
            palletized images. So, for an 8-bit image, the length is 256, for an 4-bit image it is 16
            and it is 2 for a 1-bit image. In other words, this function does not support partial palettes.
            <para/>
            However, specifying a palette is not necesarily needed, even for palletized images. This
            function is capable of implicitly creating a palette, if <paramref name="palette"/> is <c>null</c>.
            If the specified background color is a greyscale value (red = green = blue) or if option
            <see cref="F:FreeImageAPI.FREE_IMAGE_COLOR_OPTIONS.FICO_ALPHA_IS_INDEX"/> is specified, a greyscale palette
            is created. For a 1-bit image, only if the specified background color is either black or white,
            a monochrome palette, consisting of black and white only is created. In any case, the darker
            colors are stored at the smaller palette indices.
            <para/>
            If the specified background color is not a greyscale value, or is neither black nor white
            for a 1-bit image, solely this specified color is injected into the otherwise black-initialized
            palette. For this operation, option <see cref="F:FreeImageAPI.FREE_IMAGE_COLOR_OPTIONS.FICO_ALPHA_IS_INDEX"/>
            is implicit, so the specified <paramref name="color"/> is applied to the palette entry,
            specified by the background color's <see cref="F:FreeImageAPI.RGBQUAD.rgbReserved"/> field.
            The image is then filled with this palette index.
            <para/>
            This function returns a newly created image as function <see cref="M:FreeImageAPI.FreeImage.Allocate(System.Int32,System.Int32,System.Int32,System.UInt32,System.UInt32,System.UInt32)"/> does, if both
            parameters <paramref name="color"/> and <paramref name="palette"/> are <c>null</c>.
            If only <paramref name="color"/> is <c>null</c>, the palette pointed to by
            parameter <paramref name="palette"/> is initially set for the new image, if a palletized
            image of type <see cref="F:FreeImageAPI.FREE_IMAGE_TYPE.FIT_BITMAP"/> is created.
            However, in the latter case, this function returns an image, whose
            pixels are all initialized with zeros so, the image will be filled with the color of the
            first palette entry.
            </remarks>
        </member>
        <member name="M:FreeImageAPI.FreeImage.AllocateExT``1(FreeImageAPI.FREE_IMAGE_TYPE,System.Int32,System.Int32,System.Int32,System.Nullable{``0},FreeImageAPI.FREE_IMAGE_COLOR_OPTIONS,FreeImageAPI.RGBQUAD[])">
            <summary>
            Allocates a new image of the specified type, width, height and bit depth and optionally
            fills it with the specified color. See remarks for further details.
            </summary>
            <typeparam name="T">The type of the specified color.</typeparam>
            <param name="type">Type of the image.</param>
            <param name="width">Width of the new bitmap.</param>
            <param name="height">Height of the new bitmap.</param>
            <param name="bpp">Bit depth of the new bitmap.
            Supported pixel depth: 1-, 4-, 8-, 16-, 24-, 32-bit per pixel for standard bitmap</param>
            <param name="color">The color to fill the bitmap with or <c>null</c>.</param>
            <param name="options">Options to enable or disable function-features.</param>
            <param name="palette">The palette of the bitmap or <c>null</c>.</param>
            <returns>Handle to a FreeImage bitmap.</returns>
            <remarks>
            This function is an extension to <see cref="M:FreeImageAPI.FreeImage.AllocateT(FreeImageAPI.FREE_IMAGE_TYPE,System.Int32,System.Int32,System.Int32,System.UInt32,System.UInt32,System.UInt32)"/>, which additionally supports
            specifying a palette to be set for the newly create image, as well as specifying a
            background color, the newly created image should initially be filled with.
            <para/>
            Basically, this function internally relies on function <see cref="M:FreeImageAPI.FreeImage.AllocateT(FreeImageAPI.FREE_IMAGE_TYPE,System.Int32,System.Int32,System.Int32,System.UInt32,System.UInt32,System.UInt32)"/>, followed by a
            call to <see cref="M:FreeImageAPI.FreeImage.FillBackground``1(FreeImageAPI.FIBITMAP,``0,FreeImageAPI.FREE_IMAGE_COLOR_OPTIONS)"/>. This is why both parameters 
            <paramref name="color"/> and <paramref name="options"/> behave the same as it is
            documented for function <see cref="M:FreeImageAPI.FreeImage.FillBackground``1(FreeImageAPI.FIBITMAP,``0,FreeImageAPI.FREE_IMAGE_COLOR_OPTIONS)"/>. So, please refer to the
            documentation of <see cref="M:FreeImageAPI.FreeImage.FillBackground``1(FreeImageAPI.FIBITMAP,``0,FreeImageAPI.FREE_IMAGE_COLOR_OPTIONS)"/> to learn more about parameters color and options.
            <para/>
            The palette specified through parameter palette is only copied to the newly created
            image, if its image type is <see cref="F:FreeImageAPI.FREE_IMAGE_TYPE.FIT_BITMAP"/> and the desired bit
            depth is smaller than or equal to 8 bits per pixel. In other words, the <paramref name="palette"/>
            palette is only taken into account for palletized images. However, if the preceding conditions
            match and if <paramref name="palette"/> is not <c>null</c>, the palette is assumed to be at
            least as large as the size of a fully populated palette for the desired bit depth.
            So, for an 8-bit image, this length is 256, for an 4-bit image it is 16 and it is
            2 for a 1-bit image. In other words, this function does not support partial palettes.
            <para/>
            However, specifying a palette is not necesarily needed, even for palletized images. This
            function is capable of implicitly creating a palette, if <paramref name="palette"/> is <c>null</c>.
            If the specified background color is a greyscale value (red = green = blue) or if option
            <see cref="F:FreeImageAPI.FREE_IMAGE_COLOR_OPTIONS.FICO_ALPHA_IS_INDEX"/> is specified, a greyscale palette
            is created. For a 1-bit image, only if the specified background color is either black or white,
            a monochrome palette, consisting of black and white only is created. In any case, the darker
            colors are stored at the smaller palette indices.
            <para/>
            If the specified background color is not a greyscale value, or is neither black nor white
            for a 1-bit image, solely this specified color is injected into the otherwise black-initialized
            palette. For this operation, option <see cref="F:FreeImageAPI.FREE_IMAGE_COLOR_OPTIONS.FICO_ALPHA_IS_INDEX"/>
            is implicit, so the specified color is applied to the palette entry, specified by the
            background color's <see cref="F:FreeImageAPI.RGBQUAD.rgbReserved"/> field. The image is then filled with
            this palette index.
            <para/>
            This function returns a newly created image as function <see cref="M:FreeImageAPI.FreeImage.AllocateT(FreeImageAPI.FREE_IMAGE_TYPE,System.Int32,System.Int32,System.Int32,System.UInt32,System.UInt32,System.UInt32)"/> does, if both
            parameters <paramref name="color"/> and <paramref name="palette"/> are <c>null</c>.
            If only <paramref name="color"/> is <c>null</c>, the palette pointed to by
            parameter <paramref name="palette"/> is initially set for the new image, if a palletized
            image of type <see cref="F:FreeImageAPI.FREE_IMAGE_TYPE.FIT_BITMAP"/> is created.
            However, in the latter case, this function returns an image, whose
            pixels are all initialized with zeros so, the image will be filled with the color of the
            first palette entry.
            </remarks>
        </member>
        <member name="M:FreeImageAPI.FreeImage.AllocateExT``1(FreeImageAPI.FREE_IMAGE_TYPE,System.Int32,System.Int32,System.Int32,System.Nullable{``0},FreeImageAPI.FREE_IMAGE_COLOR_OPTIONS,FreeImageAPI.RGBQUAD[],System.UInt32,System.UInt32,System.UInt32)">
            <summary>
            Allocates a new image of the specified type, width, height and bit depth and optionally
            fills it with the specified color. See remarks for further details.
            </summary>
            <typeparam name="T">The type of the specified color.</typeparam>
            <param name="type">Type of the image.</param>
            <param name="width">Width of the new bitmap.</param>
            <param name="height">Height of the new bitmap.</param>
            <param name="bpp">Bit depth of the new bitmap.
            Supported pixel depth: 1-, 4-, 8-, 16-, 24-, 32-bit per pixel for standard bitmap</param>
            <param name="color">The color to fill the bitmap with or <c>null</c>.</param>
            <param name="options">Options to enable or disable function-features.</param>
            <param name="palette">The palette of the bitmap or <c>null</c>.</param>
            <param name="red_mask">Red part of the color layout.
            eg: 0xFF0000</param>
            <param name="green_mask">Green part of the color layout.
            eg: 0x00FF00</param>
            <param name="blue_mask">Blue part of the color layout.
            eg: 0x0000FF</param>
            <returns>Handle to a FreeImage bitmap.</returns>
            <remarks>
            This function is an extension to <see cref="M:FreeImageAPI.FreeImage.AllocateT(FreeImageAPI.FREE_IMAGE_TYPE,System.Int32,System.Int32,System.Int32,System.UInt32,System.UInt32,System.UInt32)"/>, which additionally supports
            specifying a palette to be set for the newly create image, as well as specifying a
            background color, the newly created image should initially be filled with.
            <para/>
            Basically, this function internally relies on function <see cref="M:FreeImageAPI.FreeImage.AllocateT(FreeImageAPI.FREE_IMAGE_TYPE,System.Int32,System.Int32,System.Int32,System.UInt32,System.UInt32,System.UInt32)"/>, followed by a
            call to <see cref="M:FreeImageAPI.FreeImage.FillBackground``1(FreeImageAPI.FIBITMAP,``0,FreeImageAPI.FREE_IMAGE_COLOR_OPTIONS)"/>. This is why both parameters 
            <paramref name="color"/> and <paramref name="options"/> behave the same as it is
            documented for function <see cref="M:FreeImageAPI.FreeImage.FillBackground``1(FreeImageAPI.FIBITMAP,``0,FreeImageAPI.FREE_IMAGE_COLOR_OPTIONS)"/>. So, please refer to the
            documentation of <see cref="M:FreeImageAPI.FreeImage.FillBackground``1(FreeImageAPI.FIBITMAP,``0,FreeImageAPI.FREE_IMAGE_COLOR_OPTIONS)"/> to learn more about parameters color and options.
            <para/>
            The palette specified through parameter palette is only copied to the newly created
            image, if its image type is <see cref="F:FreeImageAPI.FREE_IMAGE_TYPE.FIT_BITMAP"/> and the desired bit
            depth is smaller than or equal to 8 bits per pixel. In other words, the <paramref name="palette"/>
            palette is only taken into account for palletized images. However, if the preceding conditions
            match and if <paramref name="palette"/> is not <c>null</c>, the palette is assumed to be at
            least as large as the size of a fully populated palette for the desired bit depth.
            So, for an 8-bit image, this length is 256, for an 4-bit image it is 16 and it is
            2 for a 1-bit image. In other words, this function does not support partial palettes.
            <para/>
            However, specifying a palette is not necesarily needed, even for palletized images. This
            function is capable of implicitly creating a palette, if <paramref name="palette"/> is <c>null</c>.
            If the specified background color is a greyscale value (red = green = blue) or if option
            <see cref="F:FreeImageAPI.FREE_IMAGE_COLOR_OPTIONS.FICO_ALPHA_IS_INDEX"/> is specified, a greyscale palette
            is created. For a 1-bit image, only if the specified background color is either black or white,
            a monochrome palette, consisting of black and white only is created. In any case, the darker
            colors are stored at the smaller palette indices.
            <para/>
            If the specified background color is not a greyscale value, or is neither black nor white
            for a 1-bit image, solely this specified color is injected into the otherwise black-initialized
            palette. For this operation, option <see cref="F:FreeImageAPI.FREE_IMAGE_COLOR_OPTIONS.FICO_ALPHA_IS_INDEX"/>
            is implicit, so the specified color is applied to the palette entry, specified by the
            background color's <see cref="F:FreeImageAPI.RGBQUAD.rgbReserved"/> field. The image is then filled with
            this palette index.
            <para/>
            This function returns a newly created image as function <see cref="M:FreeImageAPI.FreeImage.AllocateT(FreeImageAPI.FREE_IMAGE_TYPE,System.Int32,System.Int32,System.Int32,System.UInt32,System.UInt32,System.UInt32)"/> does, if both
            parameters <paramref name="color"/> and <paramref name="palette"/> are <c>null</c>.
            If only <paramref name="color"/> is <c>null</c>, the palette pointed to by
            parameter <paramref name="palette"/> is initially set for the new image, if a palletized
            image of type <see cref="F:FreeImageAPI.FREE_IMAGE_TYPE.FIT_BITMAP"/> is created.
            However, in the latter case, this function returns an image, whose
            pixels are all initialized with zeros so, the image will be filled with the color of the
            first palette entry.
            </remarks>
        </member>
        <member name="M:FreeImageAPI.FreeImage.GetBitmap(FreeImageAPI.FIBITMAP)">
            <summary>
            Converts a FreeImage bitmap to a .NET <see cref="T:System.Drawing.Bitmap"/>.
            </summary>
            <param name="dib">Handle to a FreeImage bitmap.</param>
            <returns>The converted .NET <see cref="T:System.Drawing.Bitmap"/>.</returns>
            <remarks>Copying metadata has been disabled until a proper way
            of reading and storing metadata in a .NET bitmap is found.</remarks>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="dib"/> is null.</exception>
            <exception cref="T:System.ArgumentException">
            The image type of <paramref name="dib"/> is not FIT_BITMAP.</exception>
        </member>
        <member name="M:FreeImageAPI.FreeImage.GetBitmap(FreeImageAPI.FIBITMAP,System.Boolean)">
            <summary>
            Converts a FreeImage bitmap to a .NET <see cref="T:System.Drawing.Bitmap"/>.
            </summary>
            <param name="dib">Handle to a FreeImage bitmap.</param>
            <param name="copyMetadata">When true existing metadata will be copied.</param>
            <returns>The converted .NET <see cref="T:System.Drawing.Bitmap"/>.</returns>
            <remarks>Copying metadata has been disabled until a proper way
            of reading and storing metadata in a .NET bitmap is found.</remarks>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="dib"/> is null.</exception>
            <exception cref="T:System.ArgumentException">
            The image type of <paramref name="dib"/> is not FIT_BITMAP.</exception>
        </member>
        <member name="M:FreeImageAPI.FreeImage.CreateFromBitmap(System.Drawing.Bitmap)">
            <summary>
            Converts an .NET <see cref="T:System.Drawing.Bitmap"/> into a FreeImage bitmap.
            </summary>
            <param name="bitmap">The <see cref="T:System.Drawing.Bitmap"/> to convert.</param>
            <returns>Handle to a FreeImage bitmap.</returns>
            <remarks>Copying metadata has been disabled until a proper way
            of reading and storing metadata in a .NET bitmap is found.</remarks>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="bitmap"/> is null.</exception>
            <exception cref="T:System.ArgumentException">
            The bitmaps pixelformat is invalid.</exception>
        </member>
        <member name="M:FreeImageAPI.FreeImage.CreateFromBitmap(System.Drawing.Bitmap,System.Boolean)">
            <summary>
            Converts an .NET <see cref="T:System.Drawing.Bitmap"/> into a FreeImage bitmap.
            </summary>
            <param name="bitmap">The <see cref="T:System.Drawing.Bitmap"/> to convert.</param>
            <param name="copyMetadata">When true existing metadata will be copied.</param>
            <returns>Handle to a FreeImage bitmap.</returns>
            <remarks>Copying metadata has been disabled until a proper way
            of reading and storing metadata in a .NET bitmap is found.</remarks>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="bitmap"/> is null.</exception>
            <exception cref="T:System.ArgumentException">
            The bitmaps pixelformat is invalid.</exception>
        </member>
        <member name="M:FreeImageAPI.FreeImage.ConvertFromRawBits(System.Byte[],FreeImageAPI.FREE_IMAGE_TYPE,System.Int32,System.Int32,System.Int32,System.UInt32,System.UInt32,System.UInt32,System.UInt32,System.Boolean)">
            <summary>
            Converts a raw bitmap to a FreeImage bitmap.
            </summary>
            <param name="bits">Array of bytes containing the raw bitmap.</param>
            <param name="type">The type of the raw bitmap.</param>
            <param name="width">The width in pixels of the raw bitmap.</param>
            <param name="height">The height in pixels of the raw bitmap.</param>
            <param name="pitch">Defines the total width of a scanline in the raw bitmap,
            including padding bytes.</param>
            <param name="bpp">The bit depth (bits per pixel) of the raw bitmap.</param>
            <param name="red_mask">The bit mask describing the bits used to store a single 
            pixel's red component in the raw bitmap. This is only applied to 16-bpp raw bitmaps.</param>
            <param name="green_mask">The bit mask describing the bits used to store a single
            pixel's green component in the raw bitmap. This is only applied to 16-bpp raw bitmaps.</param>
            <param name="blue_mask">The bit mask describing the bits used to store a single
            pixel's blue component in the raw bitmap. This is only applied to 16-bpp raw bitmaps.</param>
            <param name="topdown">If true, the raw bitmap is stored in top-down order (top-left pixel first)
            and in bottom-up order (bottom-left pixel first) otherwise.</param>
            <returns>Handle to a FreeImage bitmap.</returns>
        </member>
        <member name="M:FreeImageAPI.FreeImage.ConvertFromRawBits(System.IntPtr,FreeImageAPI.FREE_IMAGE_TYPE,System.Int32,System.Int32,System.Int32,System.UInt32,System.UInt32,System.UInt32,System.UInt32,System.Boolean)">
            <summary>
            Converts a raw bitmap to a FreeImage bitmap.
            </summary>
            <param name="bits">Pointer to the memory block containing the raw bitmap.</param>
            <param name="type">The type of the raw bitmap.</param>
            <param name="width">The width in pixels of the raw bitmap.</param>
            <param name="height">The height in pixels of the raw bitmap.</param>
            <param name="pitch">Defines the total width of a scanline in the raw bitmap,
            including padding bytes.</param>
            <param name="bpp">The bit depth (bits per pixel) of the raw bitmap.</param>
            <param name="red_mask">The bit mask describing the bits used to store a single 
            pixel's red component in the raw bitmap. This is only applied to 16-bpp raw bitmaps.</param>
            <param name="green_mask">The bit mask describing the bits used to store a single
            pixel's green component in the raw bitmap. This is only applied to 16-bpp raw bitmaps.</param>
            <param name="blue_mask">The bit mask describing the bits used to store a single
            pixel's blue component in the raw bitmap. This is only applied to 16-bpp raw bitmaps.</param>
            <param name="topdown">If true, the raw bitmap is stored in top-down order (top-left pixel first)
            and in bottom-up order (bottom-left pixel first) otherwise.</param>
            <returns>Handle to a FreeImage bitmap.</returns>
        </member>
        <member name="M:FreeImageAPI.FreeImage.SaveBitmap(System.Drawing.Bitmap,System.String)">
            <summary>
            Saves a .NET <see cref="T:System.Drawing.Bitmap"/> to a file.
            </summary>
            <param name="bitmap">The .NET <see cref="T:System.Drawing.Bitmap"/> to save.</param>
            <param name="filename">Name of the file to save to.</param>
            <returns>Returns true on success, false on failure.</returns>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="bitmap"/> or <paramref name="filename"/> is null.</exception>
            <exception cref="T:System.ArgumentException">
            The bitmaps pixelformat is invalid.</exception>
        </member>
        <member name="M:FreeImageAPI.FreeImage.SaveBitmap(System.Drawing.Bitmap,System.String,FreeImageAPI.FREE_IMAGE_SAVE_FLAGS)">
            <summary>
            Saves a .NET <see cref="T:System.Drawing.Bitmap"/> to a file.
            </summary>
            <param name="bitmap">The .NET <see cref="T:System.Drawing.Bitmap"/> to save.</param>
            <param name="filename">Name of the file to save to.</param>
            <param name="flags">Flags to enable or disable plugin-features.</param>
            <returns>Returns true on success, false on failure.</returns>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="bitmap"/> or <paramref name="filename"/> is null.</exception>
            <exception cref="T:System.ArgumentException">
            The bitmaps pixelformat is invalid.</exception>
        </member>
        <member name="M:FreeImageAPI.FreeImage.SaveBitmap(System.Drawing.Bitmap,System.String,FreeImageAPI.FREE_IMAGE_FORMAT,FreeImageAPI.FREE_IMAGE_SAVE_FLAGS)">
            <summary>
            Saves a .NET <see cref="T:System.Drawing.Bitmap"/> to a file.
            </summary>
            <param name="bitmap">The .NET <see cref="T:System.Drawing.Bitmap"/> to save.</param>
            <param name="filename">Name of the file to save to.</param>
            <param name="format">Format of the bitmap. If the format should be taken from the
            filename use <see cref="F:FreeImageAPI.FREE_IMAGE_FORMAT.FIF_UNKNOWN"/>.</param>
            <param name="flags">Flags to enable or disable plugin-features.</param>
            <returns>Returns true on success, false on failure.</returns>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="bitmap"/> or <paramref name="filename"/> is null.</exception>
            <exception cref="T:System.ArgumentException">
            The bitmaps pixelformat is invalid.</exception>
        </member>
        <member name="M:FreeImageAPI.FreeImage.LoadEx(System.String)">
            <summary>
            Loads a FreeImage bitmap.
            The file will be loaded with default loading flags.
            </summary>
            <param name="filename">The complete name of the file to load.</param>
            <returns>Handle to a FreeImage bitmap.</returns>
            <exception cref="T:System.IO.FileNotFoundException">
            <paramref name="filename"/> does not exists.</exception>
        </member>
        <member name="M:FreeImageAPI.FreeImage.LoadEx(System.String,FreeImageAPI.FREE_IMAGE_LOAD_FLAGS)">
            <summary>
            Loads a FreeImage bitmap.
            Load flags can be provided by the flags parameter.
            </summary>
            <param name="filename">The complete name of the file to load.</param>
            <param name="flags">Flags to enable or disable plugin-features.</param>
            <returns>Handle to a FreeImage bitmap.</returns>
            <exception cref="T:System.IO.FileNotFoundException">
            <paramref name="filename"/> does not exists.</exception>
        </member>
        <member name="M:FreeImageAPI.FreeImage.LoadEx(System.String,FreeImageAPI.FREE_IMAGE_FORMAT@)">
            <summary>
            Loads a FreeImage bitmap.
            In case the loading format is <see cref="F:FreeImageAPI.FREE_IMAGE_FORMAT.FIF_UNKNOWN"/> the files
            real format is being analysed. If no plugin can read the file, format remains
            <see cref="F:FreeImageAPI.FREE_IMAGE_FORMAT.FIF_UNKNOWN"/> and 0 is returned.
            The file will be loaded with default loading flags.
            </summary>
            <param name="filename">The complete name of the file to load.</param>
            <param name="format">Format of the image. If the format is unknown use
            <see cref="F:FreeImageAPI.FREE_IMAGE_FORMAT.FIF_UNKNOWN"/>.
            In case a suitable format was found by LoadEx it will be returned in format.</param>
            <returns>Handle to a FreeImage bitmap.</returns>
            <exception cref="T:System.IO.FileNotFoundException">
            <paramref name="filename"/> does not exists.</exception>
        </member>
        <member name="M:FreeImageAPI.FreeImage.LoadEx(System.String,FreeImageAPI.FREE_IMAGE_LOAD_FLAGS,FreeImageAPI.FREE_IMAGE_FORMAT@)">
            <summary>
            Loads a FreeImage bitmap.
            In case the loading format is <see cref="F:FreeImageAPI.FREE_IMAGE_FORMAT.FIF_UNKNOWN"/> the files
            real format is being analysed. If no plugin can read the file, format remains
            <see cref="F:FreeImageAPI.FREE_IMAGE_FORMAT.FIF_UNKNOWN"/> and 0 is returned.
            Load flags can be provided by the flags parameter.
            </summary>
            <param name="filename">The complete name of the file to load.</param>
            <param name="flags">Flags to enable or disable plugin-features.</param>
            <param name="format">Format of the image. If the format is unknown use
            <see cref="F:FreeImageAPI.FREE_IMAGE_FORMAT.FIF_UNKNOWN"/>.
            In case a suitable format was found by LoadEx it will be returned in format.
            </param>
            <returns>Handle to a FreeImage bitmap.</returns>
            <exception cref="T:System.IO.FileNotFoundException">
            <paramref name="filename"/> does not exists.</exception>
        </member>
        <member name="M:FreeImageAPI.FreeImage.LoadBitmap(System.String,FreeImageAPI.FREE_IMAGE_LOAD_FLAGS,FreeImageAPI.FREE_IMAGE_FORMAT@)">
            <summary>
            Loads a .NET <see cref="T:System.Drawing.Bitmap"/> from a file.
            </summary>
            <param name="filename">Name of the file to be loaded.</param>
            <param name="format">Format of the image. If the format should be taken from the
            filename use <see cref="F:FreeImageAPI.FREE_IMAGE_FORMAT.FIF_UNKNOWN"/>.</param>
            <param name="flags">Flags to enable or disable plugin-features.</param>
            <returns>The loaded .NET <see cref="T:System.Drawing.Bitmap"/>.</returns>
            <exception cref="T:System.IO.FileNotFoundException">
            <paramref name="filename"/> does not exists.</exception>
            <exception cref="T:System.ArgumentException">
            The image type of the image is not <see cref="F:FreeImageAPI.FREE_IMAGE_TYPE.FIT_BITMAP"/>.</exception>
        </member>
        <member name="M:FreeImageAPI.FreeImage.UnloadEx(FreeImageAPI.FIBITMAP@)">
            <summary>
            Deletes a previously loaded FreeImage bitmap from memory and resets the handle to 0.
            </summary>
            <param name="dib">Handle to a FreeImage bitmap.</param>
        </member>
        <member name="M:FreeImageAPI.FreeImage.SaveEx(FreeImageAPI.FIBITMAP,System.String)">
            <summary>
            Saves a previously loaded FreeImage bitmap to a file.
            The format is taken off the filename.
            If no suitable format was found false will be returned.
            </summary>
            <param name="dib">Handle to a FreeImage bitmap.</param>
            <param name="filename">The complete name of the file to save to.
            The extension will be corrected if it is no valid extension for the
            selected format or if no extension was specified.</param>
            <returns>Returns true on success, false on failure.</returns>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="dib"/> or <paramref name="filename"/> is null.</exception>
        </member>
        <member name="M:FreeImageAPI.FreeImage.SaveEx(FreeImageAPI.FIBITMAP,System.String,FreeImageAPI.FREE_IMAGE_FORMAT)">
            <summary>
            Saves a previously loaded FreeImage bitmap to a file.
            In case the loading format is <see cref="F:FreeImageAPI.FREE_IMAGE_FORMAT.FIF_UNKNOWN"/>
            the format is taken off the filename.
            If no suitable format was found false will be returned.
            </summary>
            <param name="dib">Handle to a FreeImage bitmap.</param>
            <param name="filename">The complete name of the file to save to.
            The extension will be corrected if it is no valid extension for the
            selected format or if no extension was specified.</param>
            <param name="format">Format of the image. If the format should be taken from the
            filename use <see cref="F:FreeImageAPI.FREE_IMAGE_FORMAT.FIF_UNKNOWN"/>.</param>
            <returns>Returns true on success, false on failure.</returns>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="dib"/> or <paramref name="filename"/> is null.</exception>
        </member>
        <member name="M:FreeImageAPI.FreeImage.SaveEx(FreeImageAPI.FIBITMAP@,System.String,System.Boolean)">
            <summary>
            Saves a previously loaded FreeImage bitmap to a file.
            The format is taken off the filename.
            If no suitable format was found false will be returned.
            </summary>
            <param name="dib">Handle to a FreeImage bitmap.</param>
            <param name="filename">The complete name of the file to save to.
            The extension will be corrected if it is no valid extension for the
            selected format or if no extension was specified.</param>
            <param name="unloadSource">When true the structure will be unloaded on success.
            If the function failed and returned false, the bitmap was not unloaded.</param>
            <returns>Returns true on success, false on failure.</returns>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="dib"/> or <paramref name="filename"/> is null.</exception>
        </member>
        <member name="M:FreeImageAPI.FreeImage.SaveEx(FreeImageAPI.FIBITMAP,System.String,FreeImageAPI.FREE_IMAGE_SAVE_FLAGS)">
            <summary>
            Saves a previously loaded FreeImage bitmap to a file.
            The format is taken off the filename.
            If no suitable format was found false will be returned.
            Save flags can be provided by the flags parameter.
            </summary>
            <param name="dib">Handle to a FreeImage bitmap.</param>
            <param name="filename">The complete name of the file to save to.
            The extension will be corrected if it is no valid extension for the
            selected format or if no extension was specified</param>
            <param name="flags">Flags to enable or disable plugin-features.</param>
            <returns>Returns true on success, false on failure.</returns>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="dib"/> or <paramref name="filename"/> is null.</exception>
        </member>
        <member name="M:FreeImageAPI.FreeImage.SaveEx(FreeImageAPI.FIBITMAP@,System.String,FreeImageAPI.FREE_IMAGE_SAVE_FLAGS,System.Boolean)">
            <summary>
            Saves a previously loaded FreeImage bitmap to a file.
            The format is taken off the filename.
            If no suitable format was found false will be returned.
            Save flags can be provided by the flags parameter.
            </summary>
            <param name="dib">Handle to a FreeImage bitmap.</param>
            <param name="filename">The complete name of the file to save to.
            The extension will be corrected if it is no valid extension for the
            selected format or if no extension was specified.</param>
            <param name="flags">Flags to enable or disable plugin-features.</param>
            <param name="unloadSource">When true the structure will be unloaded on success.
            If the function failed and returned false, the bitmap was not unloaded.</param>
            <returns>Returns true on success, false on failure.</returns>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="dib"/> or <paramref name="filename"/> is null.</exception>
        </member>
        <member name="M:FreeImageAPI.FreeImage.SaveEx(FreeImageAPI.FIBITMAP@,System.String,FreeImageAPI.FREE_IMAGE_FORMAT,System.Boolean)">
            <summary>
            Saves a previously loaded FreeImage bitmap to a file.
            In case the loading format is <see cref="F:FreeImageAPI.FREE_IMAGE_FORMAT.FIF_UNKNOWN"/>
            the format is taken off the filename.
            If no suitable format was found false will be returned.
            </summary>
            <param name="dib">Handle to a FreeImage bitmap.</param>
            <param name="filename">The complete name of the file to save to.
            The extension will be corrected if it is no valid extension for the
            selected format or if no extension was specified.</param>
            <param name="format">Format of the image. If the format should be taken from the
            filename use <see cref="F:FreeImageAPI.FREE_IMAGE_FORMAT.FIF_UNKNOWN"/>.</param>
            <param name="unloadSource">When true the structure will be unloaded on success.
            If the function failed and returned false, the bitmap was not unloaded.</param>
            <returns>Returns true on success, false on failure.</returns>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="dib"/> or <paramref name="filename"/> is null.</exception>
        </member>
        <member name="M:FreeImageAPI.FreeImage.SaveEx(FreeImageAPI.FIBITMAP,System.String,FreeImageAPI.FREE_IMAGE_FORMAT,FreeImageAPI.FREE_IMAGE_SAVE_FLAGS)">
            <summary>
            Saves a previously loaded FreeImage bitmap to a file.
            In case the loading format is <see cref="F:FreeImageAPI.FREE_IMAGE_FORMAT.FIF_UNKNOWN"/>
            the format is taken off the filename.
            If no suitable format was found false will be returned.
            Save flags can be provided by the flags parameter.
            </summary>
            <param name="dib">Handle to a FreeImage bitmap.</param>
            <param name="filename">The complete name of the file to save to.
            The extension will be corrected if it is no valid extension for the
            selected format or if no extension was specified.</param>
            <param name="format">Format of the image. If the format should be taken from the
            filename use <see cref="F:FreeImageAPI.FREE_IMAGE_FORMAT.FIF_UNKNOWN"/>.</param>
            <param name="flags">Flags to enable or disable plugin-features.</param>
            <returns>Returns true on success, false on failure.</returns>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="dib"/> or <paramref name="filename"/> is null.</exception>
        </member>
        <member name="M:FreeImageAPI.FreeImage.SaveEx(FreeImageAPI.FIBITMAP@,System.String,FreeImageAPI.FREE_IMAGE_FORMAT,FreeImageAPI.FREE_IMAGE_SAVE_FLAGS,FreeImageAPI.FREE_IMAGE_COLOR_DEPTH,System.Boolean)">
            <summary>
            Saves a previously loaded FreeImage bitmap to a file.
            In case the loading format is <see cref="F:FreeImageAPI.FREE_IMAGE_FORMAT.FIF_UNKNOWN"/>
            the format is taken off the filename.
            If no suitable format was found false will be returned.
            Save flags can be provided by the flags parameter.
            The bitmaps color depth can be set by 'colorDepth'.
            If set to <see cref="F:FreeImageAPI.FREE_IMAGE_COLOR_DEPTH.FICD_AUTO"/> a suitable color depth
            will be taken if available.
            </summary>
            <param name="dib">Handle to a FreeImage bitmap.</param>
            <param name="filename">The complete name of the file to save to.
            The extension will be corrected if it is no valid extension for the
            selected format or if no extension was specified.</param>
            <param name="format">Format of the image. If the format should be taken from the
            filename use <see cref="F:FreeImageAPI.FREE_IMAGE_FORMAT.FIF_UNKNOWN"/>.</param>
            <param name="flags">Flags to enable or disable plugin-features.</param>
            <param name="colorDepth">The new color depth of the bitmap.
            Set to <see cref="F:FreeImageAPI.FREE_IMAGE_COLOR_DEPTH.FICD_AUTO"/> if Save should take the
            best suitable color depth.
            If a color depth is selected that the provided format cannot write an
            error-message will be thrown.</param>
            <param name="unloadSource">When true the structure will be unloaded on success.
            If the function failed and returned false, the bitmap was not unloaded.</param>
            <returns>Returns true on success, false on failure.</returns>
            <exception cref="T:System.ArgumentException">
            A direct color conversion failed.</exception>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="dib"/> or <paramref name="filename"/> is null.</exception>
        </member>
        <member name="M:FreeImageAPI.FreeImage.LoadFromStream(System.IO.Stream)">
            <summary>
            Loads a FreeImage bitmap.
            The stream must be set to the correct position before calling LoadFromStream.
            </summary>
            <param name="stream">The stream to read from.</param>
            <returns>Handle to a FreeImage bitmap.</returns>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="stream"/> is null.</exception>
            <exception cref="T:System.ArgumentException">
            <paramref name="stream"/> is not capable of reading.</exception>
        </member>
        <member name="M:FreeImageAPI.FreeImage.LoadFromStream(System.IO.Stream,FreeImageAPI.FREE_IMAGE_LOAD_FLAGS)">
            <summary>
            Loads a FreeImage bitmap.
            The stream must be set to the correct position before calling LoadFromStream.
            </summary>
            <param name="stream">The stream to read from.</param>
            <param name="flags">Flags to enable or disable plugin-features.</param>
            <returns>Handle to a FreeImage bitmap.</returns>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="stream"/> is null.</exception>
            <exception cref="T:System.ArgumentException">
            <paramref name="stream"/> is not capable of reading.</exception>
        </member>
        <member name="M:FreeImageAPI.FreeImage.LoadFromStream(System.IO.Stream,FreeImageAPI.FREE_IMAGE_FORMAT@)">
            <summary>
            Loads a FreeImage bitmap.
            In case the loading format is <see cref="F:FreeImageAPI.FREE_IMAGE_FORMAT.FIF_UNKNOWN"/> the
            bitmaps real format is being analysed.
            The stream must be set to the correct position before calling LoadFromStream.
            </summary>
            <param name="stream">The stream to read from.</param>
            <param name="format">Format of the image. If the format is unknown use
            <see cref="F:FreeImageAPI.FREE_IMAGE_FORMAT.FIF_UNKNOWN"/>.
            In case a suitable format was found by LoadFromStream it will be returned in format.</param>
            <returns>Handle to a FreeImage bitmap.</returns>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="stream"/> is null.</exception>
            <exception cref="T:System.ArgumentException">
            <paramref name="stream"/> is not capable of reading.</exception>
        </member>
        <member name="M:FreeImageAPI.FreeImage.LoadFromStream(System.IO.Stream,FreeImageAPI.FREE_IMAGE_LOAD_FLAGS,FreeImageAPI.FREE_IMAGE_FORMAT@)">
            <summary>
            Loads a FreeImage bitmap.
            In case the loading format is <see cref="F:FreeImageAPI.FREE_IMAGE_FORMAT.FIF_UNKNOWN"/>
            the bitmaps real format is being analysed.
            The stream must be set to the correct position before calling LoadFromStream.
            </summary>
            <param name="stream">The stream to read from.</param>
            <param name="flags">Flags to enable or disable plugin-features.</param>
            <param name="format">Format of the image. If the format is unknown use
            <see cref="F:FreeImageAPI.FREE_IMAGE_FORMAT.FIF_UNKNOWN"/>.
            In case a suitable format was found by LoadFromStream it will be returned in format.</param>
            <returns>Handle to a FreeImage bitmap.</returns>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="stream"/> is null.</exception>
            <exception cref="T:System.ArgumentException">
            <paramref name="stream"/> is not capable of reading.</exception>
        </member>
        <member name="M:FreeImageAPI.FreeImage.SaveToStream(FreeImageAPI.FIBITMAP,System.IO.Stream,FreeImageAPI.FREE_IMAGE_FORMAT)">
            <summary>
            Saves a previously loaded FreeImage bitmap to a stream.
            The stream must be set to the correct position before calling SaveToStream.
            </summary>
            <param name="dib">Handle to a FreeImage bitmap.</param>
            <param name="stream">The stream to write to.</param>
            <param name="format">Format of the image.</param>
            <returns>Returns true on success, false on failure.</returns>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="dib"/> or <paramref name="stream"/> is null.</exception>
            <exception cref="T:System.ArgumentException">
            <paramref name="stream"/> cannot write.</exception>
        </member>
        <member name="M:FreeImageAPI.FreeImage.SaveToStream(FreeImageAPI.FIBITMAP@,System.IO.Stream,FreeImageAPI.FREE_IMAGE_FORMAT,System.Boolean)">
            <summary>
            Saves a previously loaded FreeImage bitmap to a stream.
            The stream must be set to the correct position before calling SaveToStream.
            </summary>
            <param name="dib">Handle to a FreeImage bitmap.</param>
            <param name="stream">The stream to write to.</param>
            <param name="format">Format of the image.</param>
            <param name="unloadSource">When true the structure will be unloaded on success.</param>
            <returns>Returns true on success, false on failure.</returns>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="dib"/> or <paramref name="stream"/> is null.</exception>
            <exception cref="T:System.ArgumentException">
            <paramref name="stream"/> cannot write.</exception>
        </member>
        <member name="M:FreeImageAPI.FreeImage.SaveToStream(FreeImageAPI.FIBITMAP,System.IO.Stream,FreeImageAPI.FREE_IMAGE_FORMAT,FreeImageAPI.FREE_IMAGE_SAVE_FLAGS)">
            <summary>
            Saves a previously loaded FreeImage bitmap to a stream.
            The stream must be set to the correct position before calling SaveToStream.
            </summary>
            <param name="dib">Handle to a FreeImage bitmap.</param>
            <param name="stream">The stream to write to.</param>
            <param name="format">Format of the image.</param>
            <param name="flags">Flags to enable or disable plugin-features.</param>
            <returns>Returns true on success, false on failure.</returns>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="dib"/> or <paramref name="stream"/> is null.</exception>
            <exception cref="T:System.ArgumentException">
            <paramref name="stream"/> cannot write.</exception>
        </member>
        <member name="M:FreeImageAPI.FreeImage.SaveToStream(FreeImageAPI.FIBITMAP@,System.IO.Stream,FreeImageAPI.FREE_IMAGE_FORMAT,FreeImageAPI.FREE_IMAGE_SAVE_FLAGS,System.Boolean)">
            <summary>
            Saves a previously loaded FreeImage bitmap to a stream.
            The stream must be set to the correct position before calling SaveToStream.
            </summary>
            <param name="dib">Handle to a FreeImage bitmap.</param>
            <param name="stream">The stream to write to.</param>
            <param name="format">Format of the image.</param>
            <param name="flags">Flags to enable or disable plugin-features.</param>
            <param name="unloadSource">When true the structure will be unloaded on success.</param>
            <returns>Returns true on success, false on failure.</returns>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="dib"/> or <paramref name="stream"/> is null.</exception>
            <exception cref="T:System.ArgumentException">
            <paramref name="stream"/> cannot write.</exception>
        </member>
        <member name="M:FreeImageAPI.FreeImage.SaveToStream(FreeImageAPI.FIBITMAP,System.IO.Stream,FreeImageAPI.FREE_IMAGE_FORMAT,FreeImageAPI.FREE_IMAGE_SAVE_FLAGS,FreeImageAPI.FREE_IMAGE_COLOR_DEPTH)">
            <summary>
            Saves a previously loaded FreeImage bitmap to a stream.
            The stream must be set to the correct position before calling SaveToStream.
            </summary>
            <param name="dib">Handle to a FreeImage bitmap.</param>
            <param name="stream">The stream to write to.</param>
            <param name="format">Format of the image.</param>
            <param name="flags">Flags to enable or disable plugin-features.</param>
            <param name="colorDepth">The new color depth of the bitmap.
            Set to <see cref="F:FreeImageAPI.FREE_IMAGE_COLOR_DEPTH.FICD_AUTO"/> if SaveToStream should
            take the best suitable color depth.
            If a color depth is selected that the provided format cannot write an
            error-message will be thrown.</param>
            <returns>Returns true on success, false on failure.</returns>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="dib"/> or <paramref name="stream"/> is null.</exception>
            <exception cref="T:System.ArgumentException">
            <paramref name="stream"/> cannot write.</exception>
        </member>
        <member name="M:FreeImageAPI.FreeImage.SaveToStream(FreeImageAPI.FIBITMAP@,System.IO.Stream,FreeImageAPI.FREE_IMAGE_FORMAT,FreeImageAPI.FREE_IMAGE_SAVE_FLAGS,FreeImageAPI.FREE_IMAGE_COLOR_DEPTH,System.Boolean)">
            <summary>
            Saves a previously loaded FreeImage bitmap to a stream.
            The stream must be set to the correct position before calling SaveToStream.
            </summary>
            <param name="dib">Handle to a FreeImage bitmap.</param>
            <param name="stream">The stream to write to.</param>
            <param name="format">Format of the image.</param>
            <param name="flags">Flags to enable or disable plugin-features.</param>
            <param name="colorDepth">The new color depth of the bitmap.
            Set to <see cref="F:FreeImageAPI.FREE_IMAGE_COLOR_DEPTH.FICD_AUTO"/> if SaveToStream should
            take the best suitable color depth.
            If a color depth is selected that the provided format cannot write an
            error-message will be thrown.</param>
            <param name="unloadSource">When true the structure will be unloaded on success.</param>
            <returns>Returns true on success, false on failure.</returns>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="dib"/> or <paramref name="stream"/> is null.</exception>
            <exception cref="T:System.ArgumentException">
            <paramref name="stream"/> cannot write.</exception>
        </member>
        <member name="M:FreeImageAPI.FreeImage.IsExtensionValidForFIF(FreeImageAPI.FREE_IMAGE_FORMAT,System.String)">
            <summary>
            Checks if an extension is valid for a certain format.
            </summary>
            <param name="fif">The desired format.</param>
            <param name="extension">The desired extension.</param>
            <returns>True if the extension is valid for the given format, false otherwise.</returns>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="extension"/> is null.</exception>
        </member>
        <member name="M:FreeImageAPI.FreeImage.IsExtensionValidForFIF(FreeImageAPI.FREE_IMAGE_FORMAT,System.String,System.StringComparison)">
            <summary>
            Checks if an extension is valid for a certain format.
            </summary>
            <param name="fif">The desired format.</param>
            <param name="extension">The desired extension.</param>
            <param name="comparisonType">The string comparison type.</param>
            <returns>True if the extension is valid for the given format, false otherwise.</returns>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="extension"/> is null.</exception>
        </member>
        <member name="M:FreeImageAPI.FreeImage.IsFilenameValidForFIF(FreeImageAPI.FREE_IMAGE_FORMAT,System.String)">
            <summary>
            Checks if a filename is valid for a certain format.
            </summary>
            <param name="fif">The desired format.</param>
            <param name="filename">The desired filename.</param>
            <returns>True if the filename is valid for the given format, false otherwise.</returns>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="filename"/> is null.</exception>
        </member>
        <member name="M:FreeImageAPI.FreeImage.IsFilenameValidForFIF(FreeImageAPI.FREE_IMAGE_FORMAT,System.String,System.StringComparison)">
            <summary>
            Checks if a filename is valid for a certain format.
            </summary>
            <param name="fif">The desired format.</param>
            <param name="filename">The desired filename.</param>
            <param name="comparisonType">The string comparison type.</param>
            <returns>True if the filename is valid for the given format, false otherwise.</returns>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="filename"/> is null.</exception>
        </member>
        <member name="M:FreeImageAPI.FreeImage.GetPrimaryExtensionFromFIF(FreeImageAPI.FREE_IMAGE_FORMAT)">
            <summary>
            This function returns the primary (main or most commonly used?) extension of a certain
            image format (fif). This is done by returning the first of all possible extensions
            returned by GetFIFExtensionList().
            That assumes, that the plugin returns the extensions in ordered form.</summary>
            <param name="fif">The image format to obtain the primary extension for.</param>
            <returns>The primary extension of the specified image format.</returns>
        </member>
        <member name="M:FreeImageAPI.FreeImage.OpenMultiBitmapEx(System.String)">
            <summary>
            Loads a FreeImage multi-paged bitmap.
            </summary>
            <param name="filename">The complete name of the file to load.</param>
            <returns>Handle to a FreeImage multi-paged bitmap.</returns>
            <exception cref="T:System.IO.FileNotFoundException">
            <paramref name="filename"/> does not exists while opening.</exception>
        </member>
        <member name="M:FreeImageAPI.FreeImage.OpenMultiBitmapEx(System.String,System.Boolean)">
            <summary>
            Loads a FreeImage multi-paged bitmap.
            </summary>
            <param name="filename">The complete name of the file to load.</param>
            <param name="keep_cache_in_memory">When true performance is increased at the cost of memory.</param>
            <returns>Handle to a FreeImage multi-paged bitmap.</returns>
            <exception cref="T:System.IO.FileNotFoundException">
            <paramref name="filename"/> does not exists while opening.</exception>
        </member>
        <member name="M:FreeImageAPI.FreeImage.OpenMultiBitmapEx(System.String,System.Boolean,System.Boolean)">
            <summary>
            Loads a FreeImage multi-paged bitmap.
            </summary>
            <param name="filename">The complete name of the file to load.</param>
            <param name="read_only">When true the bitmap will be loaded read only.</param>
            <param name="keep_cache_in_memory">When true performance is increased at the cost of memory.</param>
            <returns>Handle to a FreeImage multi-paged bitmap.</returns>
            <exception cref="T:System.IO.FileNotFoundException">
            <paramref name="filename"/> does not exists while opening.</exception>
        </member>
        <member name="M:FreeImageAPI.FreeImage.OpenMultiBitmapEx(System.String,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            Loads a FreeImage multi-paged bitmap.
            </summary>
            <param name="filename">The complete name of the file to load.</param>
            <param name="create_new">When true a new bitmap is created.</param>
            <param name="read_only">When true the bitmap will be loaded read only.</param>
            <param name="keep_cache_in_memory">When true performance is increased at the cost of memory.</param>
            <returns>Handle to a FreeImage multi-paged bitmap.</returns>
            <exception cref="T:System.IO.FileNotFoundException">
            <paramref name="filename"/> does not exists while opening.</exception>
        </member>
        <member name="M:FreeImageAPI.FreeImage.OpenMultiBitmapEx(System.String,FreeImageAPI.FREE_IMAGE_FORMAT@,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            Loads a FreeImage multi-paged bitmap.
            In case the loading format is <see cref="F:FreeImageAPI.FREE_IMAGE_FORMAT.FIF_UNKNOWN"/> the files real
            format is being analysed. If no plugin can read the file, format remains
            <see cref="F:FreeImageAPI.FREE_IMAGE_FORMAT.FIF_UNKNOWN"/> and 0 is returned.
            </summary>
            <param name="filename">The complete name of the file to load.</param>
            <param name="format">Format of the image. If the format is unknown use
            <see cref="F:FreeImageAPI.FREE_IMAGE_FORMAT.FIF_UNKNOWN"/>.
            In case a suitable format was found by LoadEx it will be returned in format.</param>
            <param name="create_new">When true a new bitmap is created.</param>
            <param name="read_only">When true the bitmap will be loaded read only.</param>
            <param name="keep_cache_in_memory">When true performance is increased at the cost of memory.</param>
            <returns>Handle to a FreeImage multi-paged bitmap.</returns>
            <exception cref="T:System.IO.FileNotFoundException">
            <paramref name="filename"/> does not exists while opening.</exception>
        </member>
        <member name="M:FreeImageAPI.FreeImage.OpenMultiBitmapEx(System.String,FreeImageAPI.FREE_IMAGE_FORMAT@,FreeImageAPI.FREE_IMAGE_LOAD_FLAGS,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            Loads a FreeImage multi-paged bitmap.
            In case the loading format is <see cref="F:FreeImageAPI.FREE_IMAGE_FORMAT.FIF_UNKNOWN"/> the files
            real format is being analysed. If no plugin can read the file, format remains
            <see cref="F:FreeImageAPI.FREE_IMAGE_FORMAT.FIF_UNKNOWN"/> and 0 is returned.
            Load flags can be provided by the flags parameter.
            </summary>
            <param name="filename">The complete name of the file to load.</param>
            <param name="format">Format of the image. If the format is unknown use 
            <see cref="F:FreeImageAPI.FREE_IMAGE_FORMAT.FIF_UNKNOWN"/>.
            In case a suitable format was found by LoadEx it will be returned in format.</param>
            <param name="flags">Flags to enable or disable plugin-features.</param>
            <param name="create_new">When true a new bitmap is created.</param>
            <param name="read_only">When true the bitmap will be loaded read only.</param>
            <param name="keep_cache_in_memory">When true performance is increased at the cost of memory.</param>
            <returns>Handle to a FreeImage multi-paged bitmap.</returns>
            <exception cref="T:System.IO.FileNotFoundException">
            <paramref name="filename"/> does not exists while opening.</exception>
        </member>
        <member name="M:FreeImageAPI.FreeImage.OpenMultiBitmapFromStream(System.IO.Stream)">
            <summary>
            Loads a FreeImage multi-paged bitmap.
            </summary>
            <param name="stream">The stream to load the bitmap from.</param>
            <returns>Handle to a FreeImage multi-paged bitmap.</returns>
        </member>
        <member name="M:FreeImageAPI.FreeImage.OpenMultiBitmapFromStream(System.IO.Stream,FreeImageAPI.FREE_IMAGE_FORMAT@,FreeImageAPI.FREE_IMAGE_LOAD_FLAGS)">
            <summary>
            Loads a FreeImage multi-paged bitmap.
            In case the loading format is <see cref="F:FreeImageAPI.FREE_IMAGE_FORMAT.FIF_UNKNOWN"/> the files
            real format is being analysed. If no plugin can read the file, format remains
            <see cref="F:FreeImageAPI.FREE_IMAGE_FORMAT.FIF_UNKNOWN"/> and 0 is returned.
            Load flags can be provided by the flags parameter.
            </summary>
            <param name="stream">The stream to load the bitmap from.</param>
            <param name="format">Format of the image. If the format is unknown use 
            <see cref="F:FreeImageAPI.FREE_IMAGE_FORMAT.FIF_UNKNOWN"/></param>.
            <param name="flags">Flags to enable or disable plugin-features.</param>
            <returns>Handle to a FreeImage multi-paged bitmap.</returns>
        </member>
        <member name="M:FreeImageAPI.FreeImage.CloseMultiBitmap(FreeImageAPI.FIMULTIBITMAP,FreeImageAPI.FREE_IMAGE_SAVE_FLAGS)">
            <summary>
            Closes a previously opened multi-page bitmap and, when the bitmap was not opened read-only, applies any changes made to it.
            </summary>
            <param name="bitmap">Handle to a FreeImage multi-paged bitmap.</param>
            <param name="flags">Flags to enable or disable plugin-features.</param>
            <returns>Returns true on success, false on failure.</returns>
        </member>
        <member name="M:FreeImageAPI.FreeImage.CloseMultiBitmapEx(FreeImageAPI.FIMULTIBITMAP@)">
            <summary>
            Closes a previously opened multi-page bitmap and, when the bitmap was not opened read-only,
            applies any changes made to it.
            On success the handle will be reset to null.
            </summary>
            <param name="bitmap">Handle to a FreeImage multi-paged bitmap.</param>
            <returns>Returns true on success, false on failure.</returns>
        </member>
        <member name="M:FreeImageAPI.FreeImage.CloseMultiBitmapEx(FreeImageAPI.FIMULTIBITMAP@,FreeImageAPI.FREE_IMAGE_SAVE_FLAGS)">
            <summary>
            Closes a previously opened multi-page bitmap and, when the bitmap was not opened read-only,
            applies any changes made to it.
            On success the handle will be reset to null.
            </summary>
            <param name="bitmap">Handle to a FreeImage multi-paged bitmap.</param>
            <param name="flags">Flags to enable or disable plugin-features.</param>
            <returns>Returns true on success, false on failure.</returns>
        </member>
        <member name="M:FreeImageAPI.FreeImage.GetLockedPageCount(FreeImageAPI.FIMULTIBITMAP)">
            <summary>
            Retrieves the number of pages that are locked in a multi-paged bitmap.
            </summary>
            <param name="dib">Handle to a FreeImage multi-paged bitmap.</param>
            <returns>Number of locked pages.</returns>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="dib"/> is null.</exception>
        </member>
        <member name="M:FreeImageAPI.FreeImage.GetLockedPages(FreeImageAPI.FIMULTIBITMAP)">
            <summary>
            Retrieves a list locked pages of a multi-paged bitmap.
            </summary>
            <param name="dib">Handle to a FreeImage multi-paged bitmap.</param>
            <returns>List containing the indexes of the locked pages.</returns>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="dib"/> is null.</exception>
        </member>
        <member name="M:FreeImageAPI.FreeImage.LoadMultiBitmapFromStream(System.IO.Stream,FreeImageAPI.FREE_IMAGE_FORMAT,FreeImageAPI.FREE_IMAGE_LOAD_FLAGS,FreeImageAPI.FIMEMORY@)">
            <summary>
            Loads a FreeImage multi-paged bitmap from a stream and returns the
            FreeImage memory stream used as temporary buffer.
            The bitmap can not be modified by calling
            <see cref="M:FreeImageAPI.FreeImage.AppendPage(FreeImageAPI.FIMULTIBITMAP,FreeImageAPI.FIBITMAP)"/>,
            <see cref="M:FreeImageAPI.FreeImage.InsertPage(FreeImageAPI.FIMULTIBITMAP,System.Int32,FreeImageAPI.FIBITMAP)"/>,
            <see cref="M:FreeImageAPI.FreeImage.MovePage(FreeImageAPI.FIMULTIBITMAP,System.Int32,System.Int32)"/> or
            <see cref="M:FreeImageAPI.FreeImage.DeletePage(FreeImageAPI.FIMULTIBITMAP,System.Int32)"/>.
            </summary>
            <param name="stream">The stream to read from.</param>
            <param name="format">Format of the image.</param>
            <param name="flags">Flags to enable or disable plugin-features.</param>
            <param name="memory">The temporary memory buffer used to load the bitmap.</param>
            <returns>Handle to a FreeImage multi-paged bitmap.</returns>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="stream"/> is null.</exception>
            <exception cref="T:System.ArgumentException">
            <paramref name="stream"/> can not read.</exception>
        </member>
        <member name="M:FreeImageAPI.FreeImage.GetFileTypeFromStream(System.IO.Stream)">
            <summary>
            Orders FreeImage to analyze the bitmap signature.
            In case the stream is not seekable, the stream will have been used
            and must be recreated for loading.
            </summary>
            <param name="stream">Name of the stream to analyze.</param>
            <returns>Type of the bitmap.</returns>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="stream"/> is null.</exception>
            <exception cref="T:System.ArgumentException">
            <paramref name="stream"/> can not read.</exception>
        </member>
        <member name="M:FreeImageAPI.FreeImage.GetHbitmap(FreeImageAPI.FIBITMAP,System.IntPtr,System.Boolean)">
            <summary>
            Retrieves an hBitmap for a FreeImage bitmap.
            Call FreeHbitmap(IntPtr) to free the handle.
            </summary>
            <param name="dib">Handle to a FreeImage bitmap.</param>
            <param name="hdc">A reference device context.
            Use IntPtr.Zero if no reference is available.</param>
            <param name="unload">When true dib will be unloaded if the function succeeded.</param>
            <returns>The hBitmap for the FreeImage bitmap.</returns>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="dib"/> is null.</exception>
        </member>
        <member name="M:FreeImageAPI.FreeImage.GetBitmapForDevice(FreeImageAPI.FIBITMAP,System.IntPtr,System.Boolean)">
            <summary>
            Returns an HBITMAP created by the <c>CreateDIBitmap()</c> function which in turn
            has always the same color depth as the reference DC, which may be provided
            through <paramref name="hdc"/>. The desktop DC will be used,
            if <c>IntPtr.Zero</c> DC is specified.
            Call <see cref="M:FreeImageAPI.FreeImage.FreeHbitmap(System.IntPtr)"/> to free the handle.
            </summary>
            <param name="dib">Handle to a FreeImage bitmap.</param>
            <param name="hdc">Handle to a device context.</param>
            <param name="unload">When true the structure will be unloaded on success.
            If the function failed and returned false, the bitmap was not unloaded.</param>
            <returns>If the function succeeds, the return value is a handle to the
            compatible bitmap. If the function fails, the return value is <see cref="F:System.IntPtr.Zero"/>.</returns>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="dib"/> is null.</exception>
        </member>
        <member name="M:FreeImageAPI.FreeImage.CreateFromHbitmap(System.IntPtr,System.IntPtr)">
            <summary>
            Creates a FreeImage DIB from a Device Context/Compatible Bitmap.
            </summary>
            <param name="hbitmap">Handle to the bitmap.</param>
            <param name="hdc">Handle to a device context.</param>
            <returns>Handle to a FreeImage bitmap.</returns>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="hbitmap"/> is null.</exception>
        </member>
        <member name="M:FreeImageAPI.FreeImage.FreeHbitmap(System.IntPtr)">
            <summary>
            Frees a bitmap handle.
            </summary>
            <param name="hbitmap">Handle to a bitmap.</param>
            <returns>True on success, false on failure.</returns>
        </member>
        <member name="M:FreeImageAPI.FreeImage.GetResolutionX(FreeImageAPI.FIBITMAP)">
            <summary>
            Retrieves a DIB's resolution in X-direction measured in 'dots per inch' (DPI) and not in
            'dots per meter'.
            </summary>
            <param name="dib">Handle to a FreeImage bitmap.</param>
            <returns>The resolution in 'dots per inch'.</returns>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="dib"/> is null.</exception>
        </member>
        <member name="M:FreeImageAPI.FreeImage.GetResolutionY(FreeImageAPI.FIBITMAP)">
            <summary>
            Retrieves a DIB's resolution in Y-direction measured in 'dots per inch' (DPI) and not in
            'dots per meter'.
            </summary>
            <param name="dib">Handle to a FreeImage bitmap.</param>
            <returns>The resolution in 'dots per inch'.</returns>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="dib"/> is null.</exception>
        </member>
        <member name="M:FreeImageAPI.FreeImage.SetResolutionX(FreeImageAPI.FIBITMAP,System.UInt32)">
            <summary>
            Sets a DIB's resolution in X-direction measured in 'dots per inch' (DPI) and not in
            'dots per meter'.
            </summary>
            <param name="dib">Handle to a FreeImage bitmap.</param>
            <param name="res">The new resolution in 'dots per inch'.</param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="dib"/> is null.</exception>
        </member>
        <member name="M:FreeImageAPI.FreeImage.SetResolutionY(FreeImageAPI.FIBITMAP,System.UInt32)">
            <summary>
            Sets a DIB's resolution in Y-direction measured in 'dots per inch' (DPI) and not in
            'dots per meter'.
            </summary>
            <param name="dib">Handle to a FreeImage bitmap.</param>
            <param name="res">The new resolution in 'dots per inch'.</param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="dib"/> is null.</exception>
        </member>
        <member name="M:FreeImageAPI.FreeImage.IsGreyscaleImage(FreeImageAPI.FIBITMAP)">
            <summary>
            Returns whether the image is a greyscale image or not.
            The function scans all colors in the bitmaps palette for entries where
            red, green and blue are not all the same (not a grey color).
            Supports 1-, 4- and 8-bit bitmaps.
            </summary>
            <param name="dib">Handle to a FreeImage bitmap.</param>
            <returns>True if the image is a greyscale image, else false.</returns>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="dib"/> is null.</exception>
        </member>
        <member name="M:FreeImageAPI.FreeImage.GetPaletteEx(FreeImageAPI.FIBITMAP)">
            <summary>
            Returns a structure that represents the palette of a FreeImage bitmap.
            </summary>
            <param name="dib">Handle to a FreeImage bitmap.</param>
            <returns>A structure representing the bitmaps palette.</returns>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="dib"/> is null.</exception>
        </member>
        <member name="M:FreeImageAPI.FreeImage.GetInfoHeaderEx(FreeImageAPI.FIBITMAP)">
            <summary>
            Returns the <see cref="T:FreeImageAPI.BITMAPINFOHEADER"/> structure of a FreeImage bitmap.
            The structure is a copy, so changes will have no effect on
            the bitmap itself.
            </summary>
            <param name="dib">Handle to a FreeImage bitmap.</param>
            <returns><see cref="T:FreeImageAPI.BITMAPINFOHEADER"/> structure of the bitmap.</returns>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="dib"/> is null.</exception>
        </member>
        <member name="M:FreeImageAPI.FreeImage.GetInfoEx(FreeImageAPI.FIBITMAP)">
            <summary>
            Returns the <see cref="T:FreeImageAPI.BITMAPINFO"/> structure of a FreeImage bitmap.
            The structure is a copy, so changes will have no effect on
            the bitmap itself.
            </summary>
            <param name="dib">Handle to a FreeImage bitmap.</param>
            <returns><see cref="T:FreeImageAPI.BITMAPINFO"/> structure of the bitmap.</returns>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="dib"/> is null.</exception>
        </member>
        <member name="M:FreeImageAPI.FreeImage.GetPixelFormat(FreeImageAPI.FIBITMAP)">
            <summary>
            Returns the pixelformat of the bitmap.
            </summary>
            <param name="dib">Handle to a FreeImage bitmap.</param>
            <returns><see cref="T:System.Drawing.Imaging.PixelFormat"/> of the bitmap.</returns>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="dib"/> is null.</exception>
        </member>
        <member name="M:FreeImageAPI.FreeImage.GetFormatParameters(System.Drawing.Imaging.PixelFormat,FreeImageAPI.FREE_IMAGE_TYPE@,System.UInt32@,System.UInt32@,System.UInt32@,System.UInt32@)">
            <summary>
            Retrieves all parameters needed to create a new FreeImage bitmap from
            the format of a .NET <see cref="T:System.Drawing.Image"/>.
            </summary>
            <param name="format">The <see cref="T:System.Drawing.Imaging.PixelFormat"/>
            of the .NET <see cref="T:System.Drawing.Image"/>.</param>
            <param name="type">Returns the type used for the new bitmap.</param>
            <param name="bpp">Returns the color depth for the new bitmap.</param>
            <param name="red_mask">Returns the red_mask for the new bitmap.</param>
            <param name="green_mask">Returns the green_mask for the new bitmap.</param>
            <param name="blue_mask">Returns the blue_mask for the new bitmap.</param>
            <returns>True in case a matching conversion exists; else false.
            </returns>
        </member>
        <member name="M:FreeImageAPI.FreeImage.GetFormat(System.Drawing.Imaging.ImageFormat)">
            <summary>
            Returns the <see cref="T:FreeImageAPI.FREE_IMAGE_FORMAT"/> for the specified
            <see cref="T:System.Drawing.Imaging.ImageFormat"/>.
            </summary>
            <param name="imageFormat">The <see cref="T:System.Drawing.Imaging.ImageFormat"/>
            for which to return the corresponding <see cref="T:FreeImageAPI.FREE_IMAGE_FORMAT"/>.</param>
            <returns>The <see cref="T:FreeImageAPI.FREE_IMAGE_FORMAT"/> for the specified
            <see cref="T:System.Drawing.Imaging.ImageFormat"/></returns>
        </member>
        <member name="M:FreeImageAPI.FreeImage.GetTypeParameters(FreeImageAPI.FREE_IMAGE_TYPE,System.Int32,System.UInt32@,System.UInt32@,System.UInt32@)">
            <summary>
            Retrieves all parameters needed to create a new FreeImage bitmap from
            raw bits <see cref="T:System.Drawing.Image"/>.
            </summary>
            <param name="type">The <see cref="T:FreeImageAPI.FREE_IMAGE_TYPE"/>
            of the data in memory.</param>
            <param name="bpp">The color depth for the data.</param>
            <param name="red_mask">Returns the red_mask for the data.</param>
            <param name="green_mask">Returns the green_mask for the data.</param>
            <param name="blue_mask">Returns the blue_mask for the data.</param>
            <returns>True in case a matching conversion exists; else false.
            </returns>
        </member>
        <member name="M:FreeImageAPI.FreeImage.Compare(FreeImageAPI.FIBITMAP,FreeImageAPI.FIBITMAP,FreeImageAPI.FREE_IMAGE_COMPARE_FLAGS)">
            <summary>
            Compares two FreeImage bitmaps.
            </summary>
            <param name="dib1">The first bitmap to compare.</param>
            <param name="dib2">The second bitmap to compare.</param>
            <param name="flags">Determines which components of the bitmaps will be compared.</param>
            <returns>True in case both bitmaps match the compare conditions, false otherwise.</returns>
        </member>
        <member name="M:FreeImageAPI.FreeImage.GetTransparencyTableEx(FreeImageAPI.FIBITMAP)">
            <summary>
            Returns the FreeImage bitmap's transparency table.
            The array is empty in case the bitmap has no transparency table.
            </summary>
            <param name="dib">Handle to a FreeImage bitmap.</param>
            <returns>The FreeImage bitmap's transparency table.</returns>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="dib"/> is null.</exception>
        </member>
        <member name="M:FreeImageAPI.FreeImage.SetTransparencyTable(FreeImageAPI.FIBITMAP,System.Byte[])">
            <summary>
            Set the FreeImage bitmap's transparency table. Only affects palletised bitmaps.
            </summary>
            <param name="dib">Handle to a FreeImage bitmap.</param>
            <param name="table">The FreeImage bitmap's new transparency table.</param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="dib"/> or <paramref name="table"/> is null.</exception>
        </member>
        <member name="M:FreeImageAPI.FreeImage.GetUniqueColors(FreeImageAPI.FIBITMAP)">
            <summary>
            This function returns the number of unique colors actually used by the
            specified 1-, 4-, 8-, 16-, 24- or 32-bit image. This might be different from
            what function FreeImage_GetColorsUsed() returns, which actually returns the
            palette size for palletised images. Works for
            <see cref="F:FreeImageAPI.FREE_IMAGE_TYPE.FIT_BITMAP"/> type images only.
            </summary>
            <param name="dib">Handle to a FreeImage bitmap.</param>
            <returns>Returns the number of unique colors used by the image specified or
            zero, if the image type cannot be handled.</returns>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="dib"/> is null.</exception>
        </member>
        <member name="M:FreeImageAPI.FreeImage.IsRGB555(FreeImageAPI.FIBITMAP)">
            <summary>
            Verifies whether the FreeImage bitmap is 16bit 555.
            </summary>
            <param name="dib">The FreeImage bitmap to verify.</param>
            <returns><b>true</b> if the bitmap is RGB16-555; otherwise <b>false</b>.</returns>
        </member>
        <member name="M:FreeImageAPI.FreeImage.IsRGB565(FreeImageAPI.FIBITMAP)">
            <summary>
            Verifies whether the FreeImage bitmap is 16bit 565.
            </summary>
            <param name="dib">The FreeImage bitmap to verify.</param>
            <returns><b>true</b> if the bitmap is RGB16-565; otherwise <b>false</b>.</returns>
        </member>
        <member name="M:FreeImageAPI.FreeImage.CreateICCProfileEx(FreeImageAPI.FIBITMAP,System.Byte[])">
            <summary>
            Creates a new ICC-Profile for a FreeImage bitmap.
            </summary>
            <param name="dib">Handle to a FreeImage bitmap.</param>
            <param name="data">The data of the new ICC-Profile.</param>
            <returns>The new ICC-Profile of the bitmap.</returns>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="dib"/> is null.</exception>
        </member>
        <member name="M:FreeImageAPI.FreeImage.CreateICCProfileEx(FreeImageAPI.FIBITMAP,System.Byte[],System.Int32)">
            <summary>
            Creates a new ICC-Profile for a FreeImage bitmap.
            </summary>
            <param name="dib">Handle to a FreeImage bitmap.</param>
            <param name="data">The data of the new ICC-Profile.</param>
            <param name="size">The number of bytes of <paramref name="data"/> to use.</param>
            <returns>The new ICC-Profile of the FreeImage bitmap.</returns>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="dib"/> is null.</exception>
        </member>
        <member name="M:FreeImageAPI.FreeImage.ConvertColorDepth(FreeImageAPI.FIBITMAP,FreeImageAPI.FREE_IMAGE_COLOR_DEPTH)">
            <summary>
            Converts a FreeImage bitmap from one color depth to another.
            If the conversion fails the original FreeImage bitmap is returned.
            </summary>
            <param name="dib">Handle to a FreeImage bitmap.</param>
            <param name="conversion">The desired output format.</param>
            <returns>Handle to a FreeImage bitmap.</returns>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="dib"/> is null.</exception>
        </member>
        <member name="M:FreeImageAPI.FreeImage.ConvertColorDepth(FreeImageAPI.FIBITMAP,FreeImageAPI.FREE_IMAGE_COLOR_DEPTH,System.Boolean)">
            <summary>
            Converts a FreeImage bitmap from one color depth to another.
            If the conversion fails the original FreeImage bitmap is returned.
            </summary>
            <param name="dib">Handle to a FreeImage bitmap.</param>
            <param name="conversion">The desired output format.</param>
            <param name="unloadSource">When true the structure will be unloaded on success.</param>
            <returns>Handle to a FreeImage bitmap.</returns>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="dib"/> is null.</exception>
        </member>
        <member name="M:FreeImageAPI.FreeImage.ConvertColorDepth(FreeImageAPI.FIBITMAP,FreeImageAPI.FREE_IMAGE_COLOR_DEPTH,System.Byte)">
            <summary>
            Converts a FreeImage bitmap from one color depth to another.
            If the conversion fails the original FreeImage bitmap is returned.
            </summary>
            <param name="dib">Handle to a FreeImage bitmap.</param>
            <param name="conversion">The desired output format.</param>
            <param name="threshold">Threshold value when converting with
            <see cref="F:FreeImageAPI.FREE_IMAGE_COLOR_DEPTH.FICD_01_BPP_THRESHOLD"/>.</param>
            <returns>Handle to a FreeImage bitmap.</returns>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="dib"/> is null.</exception>
        </member>
        <member name="M:FreeImageAPI.FreeImage.ConvertColorDepth(FreeImageAPI.FIBITMAP,FreeImageAPI.FREE_IMAGE_COLOR_DEPTH,FreeImageAPI.FREE_IMAGE_DITHER)">
            <summary>
            Converts a FreeImage bitmap from one color depth to another.
            If the conversion fails the original FreeImage bitmap is returned.
            </summary>
            <param name="dib">Handle to a FreeImage bitmap.</param>
            <param name="conversion">The desired output format.</param>
            <param name="ditherMethod">Dither algorithm when converting 
            with <see cref="F:FreeImageAPI.FREE_IMAGE_COLOR_DEPTH.FICD_01_BPP_DITHER"/>.</param>
            <returns>Handle to a FreeImage bitmap.</returns>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="dib"/> is null.</exception>
        </member>
        <member name="M:FreeImageAPI.FreeImage.ConvertColorDepth(FreeImageAPI.FIBITMAP,FreeImageAPI.FREE_IMAGE_COLOR_DEPTH,FreeImageAPI.FREE_IMAGE_QUANTIZE)">
            <summary>
            Converts a FreeImage bitmap from one color depth to another.
            If the conversion fails the original FreeImage bitmap is returned.
            </summary>
            <param name="dib">Handle to a FreeImage bitmap.</param>
            <param name="conversion">The desired output format.</param>
            <param name="quantizationMethod">The quantization algorithm for conversion to 8-bit color depth.</param>
            <returns>Handle to a FreeImage bitmap.</returns>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="dib"/> is null.</exception>
        </member>
        <member name="M:FreeImageAPI.FreeImage.ConvertColorDepth(FreeImageAPI.FIBITMAP,FreeImageAPI.FREE_IMAGE_COLOR_DEPTH,System.Byte,System.Boolean)">
            <summary>
            Converts a FreeImage bitmap from one color depth to another.
            If the conversion fails the original FreeImage bitmap is returned.
            </summary>
            <param name="dib">Handle to a FreeImage bitmap.</param>
            <param name="conversion">The desired output format.</param>
            <param name="threshold">Threshold value when converting with
            <see cref="F:FreeImageAPI.FREE_IMAGE_COLOR_DEPTH.FICD_01_BPP_THRESHOLD"/>.</param>
            <param name="unloadSource">When true the structure will be unloaded on success.</param>
            <returns>Handle to a FreeImage bitmap.</returns>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="dib"/> is null.</exception>
        </member>
        <member name="M:FreeImageAPI.FreeImage.ConvertColorDepth(FreeImageAPI.FIBITMAP,FreeImageAPI.FREE_IMAGE_COLOR_DEPTH,FreeImageAPI.FREE_IMAGE_DITHER,System.Boolean)">
            <summary>
            Converts a FreeImage bitmap from one color depth to another.
            If the conversion fails the original FreeImage bitmap is returned.
            </summary>
            <param name="dib">Handle to a FreeImage bitmap.</param>
            <param name="conversion">The desired output format.</param>
            <param name="ditherMethod">Dither algorithm when converting with
            <see cref="F:FreeImageAPI.FREE_IMAGE_COLOR_DEPTH.FICD_01_BPP_DITHER"/>.</param>
            <param name="unloadSource">When true the structure will be unloaded on success.</param>
            <returns>Handle to a FreeImage bitmap.</returns>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="dib"/> is null.</exception>
        </member>
        <member name="M:FreeImageAPI.FreeImage.ConvertColorDepth(FreeImageAPI.FIBITMAP,FreeImageAPI.FREE_IMAGE_COLOR_DEPTH,FreeImageAPI.FREE_IMAGE_QUANTIZE,System.Boolean)">
            <summary>
            Converts a FreeImage bitmap from one color depth to another.
            If the conversion fails the original FreeImage bitmap is returned.
            </summary>
            <param name="dib">Handle to a FreeImage bitmap.</param>
            <param name="conversion">The desired output format.</param>
            <param name="quantizationMethod">The quantization algorithm for conversion to 8-bit color depth.</param>
            <param name="unloadSource">When true the structure will be unloaded on success.</param>
            <returns>Handle to a FreeImage bitmap.</returns>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="dib"/> is null.</exception>
        </member>
        <member name="M:FreeImageAPI.FreeImage.ConvertColorDepth(FreeImageAPI.FIBITMAP,FreeImageAPI.FREE_IMAGE_COLOR_DEPTH,System.Byte,FreeImageAPI.FREE_IMAGE_DITHER,FreeImageAPI.FREE_IMAGE_QUANTIZE,System.Boolean)">
            <summary>
            Converts a FreeImage bitmap from one color depth to another.
            If the conversion fails the original FreeImage bitmap is returned.
            </summary>
            <param name="dib">Handle to a FreeImage bitmap.</param>
            <param name="conversion">The desired output format.</param>
            <param name="threshold">Threshold value when converting with
            <see cref="F:FreeImageAPI.FREE_IMAGE_COLOR_DEPTH.FICD_01_BPP_THRESHOLD"/>.</param>
            <param name="ditherMethod">Dither algorithm when converting with
            <see cref="F:FreeImageAPI.FREE_IMAGE_COLOR_DEPTH.FICD_01_BPP_DITHER"/>.</param>
            <param name="quantizationMethod">The quantization algorithm for conversion to 8-bit color depth.</param>
            <param name="unloadSource">When true the structure will be unloaded on success.</param>
            <returns>Handle to a FreeImage bitmap.</returns>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="dib"/> is null.</exception>
        </member>
        <member name="M:FreeImageAPI.FreeImage.ColorQuantizeEx(FreeImageAPI.FIBITMAP,FreeImageAPI.FREE_IMAGE_QUANTIZE,System.Int32,FreeImageAPI.RGBQUAD[],System.Boolean)">
            <summary>
            ColorQuantizeEx is an extension to the <see cref="M:FreeImageAPI.FreeImage.ColorQuantize(FreeImageAPI.FIBITMAP,FreeImageAPI.FREE_IMAGE_QUANTIZE)"/>
            method that provides additional options used to quantize a 24-bit image to any
            number of colors (up to 256), as well as quantize a 24-bit image using a
            provided palette.
            </summary>
            <param name="dib">Handle to a FreeImage bitmap.</param>
            <param name="quantize">Specifies the color reduction algorithm to be used.</param>
            <param name="PaletteSize">Size of the desired output palette.</param>
            <param name="ReservePalette">The provided palette.</param>
            <param name="minColorDepth"><b>true</b> to create a bitmap with the smallest possible
            color depth for the specified <paramref name="PaletteSize"/>.</param>
            <returns>Handle to a FreeImage bitmap.</returns>
        </member>
        <member name="M:FreeImageAPI.FreeImage.ColorQuantizeEx(FreeImageAPI.FIBITMAP,FreeImageAPI.FREE_IMAGE_QUANTIZE,System.Int32,FreeImageAPI.RGBQUAD[],System.Int32)">
            <summary>
            ColorQuantizeEx is an extension to the <see cref="M:FreeImageAPI.FreeImage.ColorQuantize(FreeImageAPI.FIBITMAP,FreeImageAPI.FREE_IMAGE_QUANTIZE)"/>
            method that provides additional options used to quantize a 24-bit image to any
            number of colors (up to 256), as well as quantize a 24-bit image using a
            partial or full provided palette.
            </summary>
            <param name="dib">Handle to a FreeImage bitmap.</param>
            <param name="quantize">Specifies the color reduction algorithm to be used.</param>
            <param name="PaletteSize">Size of the desired output palette.</param>
            <param name="ReservePalette">The provided palette.</param>
            <param name="bpp">The desired color depth of the created image.</param>
            <returns>Handle to a FreeImage bitmap.</returns>
        </member>
        <member name="M:FreeImageAPI.FreeImage.CloneMetadataEx(FreeImageAPI.FIBITMAP,FreeImageAPI.FIBITMAP,FreeImageAPI.FREE_IMAGE_METADATA_COPY)">
            <summary>
            Copies metadata from one FreeImage bitmap to another.
            </summary>
            <param name="src">Source FreeImage bitmap containing the metadata.</param>
            <param name="dst">FreeImage bitmap to copy the metadata to.</param>
            <param name="flags">Flags to switch different copy modes.</param>
            <returns>Returns -1 on failure else the number of copied tags.</returns>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="src"/> or <paramref name="dst"/> is null.</exception>
        </member>
        <member name="M:FreeImageAPI.FreeImage.GetImageComment(FreeImageAPI.FIBITMAP)">
            <summary>
            Returns the comment of a JPEG, PNG or GIF image.
            </summary>
            <param name="dib">Handle to a FreeImage bitmap.</param>
            <returns>Comment of the FreeImage bitmp, or null in case no comment exists.</returns>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="dib"/> is null.</exception>
        </member>
        <member name="M:FreeImageAPI.FreeImage.SetImageComment(FreeImageAPI.FIBITMAP,System.String)">
            <summary>
            Sets the comment of a JPEG, PNG or GIF image.
            </summary>
            <param name="dib">Handle to a FreeImage bitmap.</param>
            <param name="comment">New comment of the FreeImage bitmap.
            Use null to remove the comment.</param>
            <returns>Returns true on success, false on failure.</returns>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="dib"/> is null.</exception>
        </member>
        <member name="M:FreeImageAPI.FreeImage.GetMetadata(FreeImageAPI.FREE_IMAGE_MDMODEL,FreeImageAPI.FIBITMAP,System.String,FreeImageAPI.Metadata.MetadataTag@)">
            <summary>
            Retrieve a metadata attached to a FreeImage bitmap.
            </summary>
            <param name="model">The metadata model to look for.</param>
            <param name="dib">Handle to a FreeImage bitmap.</param>
            <param name="key">The metadata field name.</param>
            <param name="tag">A <see cref="T:FreeImageAPI.Metadata.MetadataTag"/> structure returned by the function.</param>
            <returns>Returns true on success, false on failure.</returns>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="dib"/> is null.</exception>
        </member>
        <member name="M:FreeImageAPI.FreeImage.SetMetadata(FreeImageAPI.FREE_IMAGE_MDMODEL,FreeImageAPI.FIBITMAP,System.String,FreeImageAPI.Metadata.MetadataTag)">
            <summary>
            Attach a new metadata tag to a FreeImage bitmap.
            </summary>
            <param name="model">The metadata model used to store the tag.</param>
            <param name="dib">Handle to a FreeImage bitmap.</param>
            <param name="key">The tag field name.</param>
            <param name="tag">The <see cref="T:FreeImageAPI.Metadata.MetadataTag"/> to be attached.</param>
            <returns>Returns true on success, false on failure.</returns>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="dib"/> is null.</exception>
        </member>
        <member name="M:FreeImageAPI.FreeImage.FindFirstMetadata(FreeImageAPI.FREE_IMAGE_MDMODEL,FreeImageAPI.FIBITMAP,FreeImageAPI.Metadata.MetadataTag@)">
            <summary>
            Provides information about the first instance of a tag that matches the metadata model.
            </summary>
            <param name="model">The model to match.</param>
            <param name="dib">Handle to a FreeImage bitmap.</param>
            <param name="tag">Tag that matches the metadata model.</param>
            <returns>Unique search handle that can be used to call FindNextMetadata or FindCloseMetadata.
            Null if the metadata model does not exist.</returns>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="dib"/> is null.</exception>
        </member>
        <member name="M:FreeImageAPI.FreeImage.FindNextMetadata(FreeImageAPI.FIMETADATA,FreeImageAPI.Metadata.MetadataTag@)">
            <summary>
            Find the next tag, if any, that matches the metadata model argument in a previous call
            to FindFirstMetadata, and then alters the tag object contents accordingly.
            </summary>
            <param name="mdhandle">Unique search handle provided by FindFirstMetadata.</param>
            <param name="tag">Tag that matches the metadata model.</param>
            <returns>Returns true on success, false on failure.</returns>
        </member>
        <member name="M:FreeImageAPI.FreeImage.FindCloseMetadata(FreeImageAPI.FIMETADATA)">
            <summary>
            Closes the specified metadata search handle and releases associated resources.
            </summary>
            <param name="mdhandle">The handle to close.</param>
        </member>
        <member name="F:FreeImageAPI.FreeImage.metaDataSearchHandler">
            <summary>
            This dictionary links FIMETADATA handles and FREE_IMAGE_MDMODEL models.
            </summary>
        </member>
        <member name="M:FreeImageAPI.FreeImage.Rotate(FreeImageAPI.FIBITMAP,System.Double)">
            <summary>
            This function rotates a 1-, 8-bit greyscale or a 24-, 32-bit color image by means of 3 shears.
            1-bit images rotation is limited to integer multiple of 90°.
            <c>null</c> is returned for other values.
            </summary>
            <param name="dib">Handle to a FreeImage bitmap.</param>
            <param name="angle">The angle of rotation.</param>
            <returns>Handle to a FreeImage bitmap.</returns>
        </member>
        <member name="M:FreeImageAPI.FreeImage.Rotate``1(FreeImageAPI.FIBITMAP,System.Double,System.Nullable{``0})">
            <summary>
            This function rotates a 1-, 8-bit greyscale or a 24-, 32-bit color image by means of 3 shears.
            1-bit images rotation is limited to integer multiple of 90°.
            <c>null</c> is returned for other values.
            </summary>
            <typeparam name="T">The type of the color to use as background.</typeparam>
            <param name="dib">Handle to a FreeImage bitmap.</param>
            <param name="angle">The angle of rotation.</param>
            <param name="backgroundColor">The color used used to fill the bitmap's background.</param>
            <returns>Handle to a FreeImage bitmap.</returns>
        </member>
        <member name="M:FreeImageAPI.FreeImage.Rotate4bit(FreeImageAPI.FIBITMAP,System.Double)">
            <summary>
            Rotates a 4-bit color FreeImage bitmap.
            Allowed values for <paramref name="angle"/> are 90, 180 and 270.
            In case <paramref name="angle"/> is 0 or 360 a clone is returned.
            0 is returned for other values or in case the rotation fails.
            </summary>
            <param name="dib">Handle to a FreeImage bitmap.</param>
            <param name="angle">The angle of rotation.</param>
            <returns>Handle to a FreeImage bitmap.</returns>
            <remarks>
            This function is kind of temporary due to FreeImage's lack of
            rotating 4-bit images. It's particularly used by <see cref="T:FreeImageAPI.FreeImageBitmap"/>'s
            method RotateFlip. This function will be removed as soon as FreeImage
            supports rotating 4-bit images.
            </remarks>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="dib"/> is null.</exception>
        </member>
        <member name="M:FreeImageAPI.FreeImage.EnlargeCanvas``1(FreeImageAPI.FIBITMAP,System.Int32,System.Int32,System.Int32,System.Int32,System.Nullable{``0},FreeImageAPI.FREE_IMAGE_COLOR_OPTIONS)">
            <summary>
            Enlarges or shrinks the FreeImage bitmap selectively per side and fills newly added areas
            with the specified background color. See remarks for further details.
            </summary>
            <typeparam name="T">The type of the specified color.</typeparam>
            <param name="dib">Handle to a FreeImage bitmap.</param>
            <param name="left">The number of pixels, the image should be enlarged on its left side.
            Negative values shrink the image on its left side.</param>
            <param name="top">The number of pixels, the image should be enlarged on its top side.
            Negative values shrink the image on its top side.</param>
            <param name="right">The number of pixels, the image should be enlarged on its right side.
            Negative values shrink the image on its right side.</param>
            <param name="bottom">The number of pixels, the image should be enlarged on its bottom side.
            Negative values shrink the image on its bottom side.</param>
            <param name="color">The color, the enlarged sides of the image should be filled with.</param>
            <param name="options">Options that affect the color search process for palletized images.</param>
            <returns>Handle to a FreeImage bitmap.</returns>
            <remarks>
            This function enlarges or shrinks an image selectively per side.
            The main purpose of this function is to add borders to an image.
            To add a border to any of the image's sides, a positive integer value must be passed in
            any of the parameters <paramref name="left"/>, <paramref name="top"/>, <paramref name="right"/>
            or <paramref name="bottom"/>. This value represents the border's
            width in pixels. Newly created parts of the image (the border areas) are filled with the
            specified <paramref name="color"/>.
            Specifying a negative integer value for a certain side, will shrink or crop the image on
            this side. Consequently, specifying zero for a certain side will not change the image's
            extension on that side.
            <para/>
            So, calling this function with all parameters <paramref name="left"/>, <paramref name="top"/>,
            <paramref name="right"/> and <paramref name="bottom"/> set to zero, is
            effectively the same as calling function <see cref="M:FreeImageAPI.FreeImage.Clone(FreeImageAPI.FIBITMAP)"/>; setting all parameters
            <paramref name="left"/>, <paramref name="top"/>, <paramref name="right"/> and
            <paramref name="bottom"/> to value equal to or smaller than zero, my easily be substituted
            by a call to function <see cref="M:FreeImageAPI.FreeImage.Copy(FreeImageAPI.FIBITMAP,System.Int32,System.Int32,System.Int32,System.Int32)"/>. Both these cases produce a new image, which is
            guaranteed not to be larger than the input image. Thus, since the specified
            <paramref name="color"/> is not needed in these cases, <paramref name="color"/>
            may be <c>null</c>.
            <para/>
            Both parameters <paramref name="color"/> and <paramref name="options"/> work according to
            function <see cref="M:FreeImageAPI.FreeImage.FillBackground``1(FreeImageAPI.FIBITMAP,``0,FreeImageAPI.FREE_IMAGE_COLOR_OPTIONS)"/>. So, please refer to the documentation of
            <see cref="M:FreeImageAPI.FreeImage.FillBackground``1(FreeImageAPI.FIBITMAP,``0,FreeImageAPI.FREE_IMAGE_COLOR_OPTIONS)"/> to learn more about parameters <paramref name="color"/>
            and <paramref name="options"/>. For palletized images, the palette of the input image is
            transparently copied to the newly created enlarged or shrunken image, so any color look-ups
            are performed on this palette.
            </remarks>
            <example>
            // create a white color<br/>
            RGBQUAD c;<br/>
            c.rgbRed = 0xFF;<br/>
            c.rgbGreen = 0xFF;<br/>
            c.rgbBlue = 0xFF;<br/>
            c.rgbReserved = 0x00;<br/>
            <br/>
            // add a white, symmetric 10 pixel wide border to the image<br/>
            dib2 = FreeImage_EnlargeCanvas(dib, 10, 10, 10, 10, c, FREE_IMAGE_COLOR_OPTIONS.FICO_RGB);<br/>
            <br/>
            // add white, 20 pixel wide stripes to the top and bottom side of the image<br/>
            dib3 = FreeImage_EnlargeCanvas(dib, 0, 20, 0, 20, c, FREE_IMAGE_COLOR_OPTIONS.FICO_RGB);<br/>
            <br/>
            // add white, 30 pixel wide stripes to the right side of the image and<br/>
            // cut off the 40 leftmost pixel columns<br/>
            dib3 = FreeImage_EnlargeCanvas(dib, -40, 0, 30, 0, c, FREE_IMAGE_COLOR_OPTIONS.FICO_RGB);<br/>
            </example>
        </member>
        <member name="M:FreeImageAPI.FreeImage.FillBackground``1(FreeImageAPI.FIBITMAP,``0,FreeImageAPI.FREE_IMAGE_COLOR_OPTIONS)">
            <summary>
            Sets all pixels of the specified image to the color provided through the
            <paramref name="color"/> parameter. See remarks for further details.
            </summary>
            <typeparam name="T">The type of the specified color.</typeparam>
            <param name="dib">Handle to a FreeImage bitmap.</param>
            <param name="color">The color to fill the bitmap with. See remarks for further details.</param>
            <param name="options">Options that affect the color search process for palletized images.</param>
            <returns><c>true</c> on success, <c>false</c> on failure.</returns>
            <remarks>
            This function sets all pixels of an image to the color provided through
            the <paramref name="color"/> parameter. <see cref="T:FreeImageAPI.RGBQUAD"/> is used for standard type images.
            For non standard type images the underlaying structure is used.
            <para/>
            So, <paramref name="color"/> must be of type <see cref="T:System.Double"/>, if the image to be filled is of type
            <see cref="F:FreeImageAPI.FREE_IMAGE_TYPE.FIT_DOUBLE"/> and must be a <see cref="T:FreeImageAPI.FIRGBF"/> structure if the
            image is of type <see cref="F:FreeImageAPI.FREE_IMAGE_TYPE.FIT_RGBF"/> and so on.
            <para/>
            However, the fill color is always specified through a <see cref="T:FreeImageAPI.RGBQUAD"/> structure
            for all images of type <see cref="F:FreeImageAPI.FREE_IMAGE_TYPE.FIT_BITMAP"/>.
            So, for 32- and 24-bit images, the red, green and blue members of the <see cref="T:FreeImageAPI.RGBQUAD"/>
            structure are directly used for the image's red, green and blue channel respectively.
            Although alpha transparent <see cref="T:FreeImageAPI.RGBQUAD"/> colors are
            supported, the alpha channel of a 32-bit image never gets modified by this function.
            A fill color with an alpha value smaller than 255 gets blended with the image's actual
            background color, which is determined from the image's bottom-left pixel.
            So, currently using alpha enabled colors, assumes the image to be unicolor before the
            fill operation. However, the <see cref="F:FreeImageAPI.RGBQUAD.rgbReserved"/> field is only taken into account,
            if option <see cref="F:FreeImageAPI.FREE_IMAGE_COLOR_OPTIONS.FICO_RGBA"/> has been specified.
            <para/>
            For 16-bit images, the red-, green- and blue components of the specified color are
            transparently translated into either the 16-bit 555 or 565 representation. This depends
            on the image's actual red- green- and blue masks.
            <para/>
            Special attention must be payed for palletized images. Generally, the RGB color specified
            is looked up in the image's palette. The found palette index is then used to fill the image.
            There are some option flags, that affect this lookup process:
            <list type="table">
            <listheader>
            <term>Value</term>
            <description>Meaning</description>
            </listheader>
            <item>
            <term><see cref="F:FreeImageAPI.FREE_IMAGE_COLOR_OPTIONS.FICO_DEFAULT"/></term>
            <description>
            Uses the color, that is nearest to the specified color.
            This is the default behavior and should always find a
            color in the palette. However, the visual result may
            far from what was expected and mainly depends on the
            image's palette.
            </description>
            </item>
            <item>
            <term><see cref="F:FreeImageAPI.FREE_IMAGE_COLOR_OPTIONS.FICO_EQUAL_COLOR"/></term>
            <description>
            Searches the image's palette for the specified color
            but only uses the returned palette index, if the specified
            color exactly matches the palette entry. Of course,
            depending on the image's actual palette entries, this
            operation may fail. In this case, the function falls back
            to option <see cref="F:FreeImageAPI.FREE_IMAGE_COLOR_OPTIONS.FICO_ALPHA_IS_INDEX"/>
            and uses the RGBQUAD's rgbReserved member (or its low nibble for 4-bit images
            or its least significant bit (LSB) for 1-bit images) as
            the palette index used for the fill operation.
            </description>
            </item>
            <item>
            <term><see cref="F:FreeImageAPI.FREE_IMAGE_COLOR_OPTIONS.FICO_ALPHA_IS_INDEX"/></term>
            <description>
            Does not perform any color lookup from the palette, but
            uses the RGBQUAD's alpha channel member rgbReserved as
            the palette index to be used for the fill operation.
            However, for 4-bit images, only the low nibble of the
            rgbReserved member are used and for 1-bit images, only
            the least significant bit (LSB) is used.
            </description>
            </item>
            </list>
            </remarks>
        </member>
        <member name="M:FreeImageAPI.FreeImage.GetNextColorDepth(System.Int32)">
            <summary>
            Returns the next higher possible color depth.
            </summary>
            <param name="bpp">Color depth to increase.</param>
            <returns>The next higher color depth or 0 if there is no valid color depth.</returns>
        </member>
        <member name="M:FreeImageAPI.FreeImage.GetPrevousColorDepth(System.Int32)">
            <summary>
            Returns the next lower possible color depth.
            </summary>
            <param name="bpp">Color depth to decrease.</param>
            <returns>The next lower color depth or 0 if there is no valid color depth.</returns>
        </member>
        <member name="M:FreeImageAPI.FreeImage.PtrToStr(System.Byte*)">
            <summary>
            Reads a null-terminated c-string.
            </summary>
            <param name="ptr">Pointer to the first char of the string.</param>
            <returns>The converted string.</returns>
        </member>
        <member name="M:FreeImageAPI.FreeImage.PrepareBitmapColorDepth(FreeImageAPI.FIBITMAP,FreeImageAPI.FREE_IMAGE_FORMAT,FreeImageAPI.FREE_IMAGE_COLOR_DEPTH)">
            <summary>
            Changes a bitmaps color depth.
            Used by SaveEx and SaveToStream.
            </summary>
        </member>
        <member name="M:FreeImageAPI.FreeImage.CompareMemory(System.Void*,System.Void*,System.UInt32)">
            <summary>
            Compares blocks of memory.
            </summary>
            <param name="buf1">A pointer to a block of memory to compare.</param>
            <param name="buf2">A pointer to a block of memory to compare.</param>
            <param name="length">Specifies the number of bytes to be compared.</param>
            <returns>true, if all bytes compare as equal, false otherwise.</returns>
        </member>
        <member name="M:FreeImageAPI.FreeImage.CompareMemory(System.Void*,System.Void*,System.Int64)">
            <summary>
            Compares blocks of memory.
            </summary>
            <param name="buf1">A pointer to a block of memory to compare.</param>
            <param name="buf2">A pointer to a block of memory to compare.</param>
            <param name="length">Specifies the number of bytes to be compared.</param>
            <returns>true, if all bytes compare as equal, false otherwise.</returns>
        </member>
        <member name="M:FreeImageAPI.FreeImage.CompareMemory(System.IntPtr,System.IntPtr,System.UInt32)">
            <summary>
            Compares blocks of memory.
            </summary>
            <param name="buf1">A pointer to a block of memory to compare.</param>
            <param name="buf2">A pointer to a block of memory to compare.</param>
            <param name="length">Specifies the number of bytes to be compared.</param>
            <returns>true, if all bytes compare as equal, false otherwise.</returns>
        </member>
        <member name="M:FreeImageAPI.FreeImage.CompareMemory(System.IntPtr,System.IntPtr,System.Int64)">
            <summary>
            Compares blocks of memory.
            </summary>
            <param name="buf1">A pointer to a block of memory to compare.</param>
            <param name="buf2">A pointer to a block of memory to compare.</param>
            <param name="length">Specifies the number of bytes to be compared.</param>
            <returns>true, if all bytes compare as equal, false otherwise.</returns>
        </member>
        <member name="M:FreeImageAPI.FreeImage.MoveMemory(System.Void*,System.Void*,System.Int64)">
            <summary>
            Moves a block of memory from one location to another.
            </summary>
            <param name="dst">A pointer to the starting address of the move destination.</param>
            <param name="src">A pointer to the starting address of the block of memory to be moved.</param>
            <param name="size">The size of the block of memory to move, in bytes.</param>
        </member>
        <member name="M:FreeImageAPI.FreeImage.MoveMemory(System.IntPtr,System.IntPtr,System.UInt32)">
            <summary>
            Moves a block of memory from one location to another.
            </summary>
            <param name="dst">A pointer to the starting address of the move destination.</param>
            <param name="src">A pointer to the starting address of the block of memory to be moved.</param>
            <param name="size">The size of the block of memory to move, in bytes.</param>
        </member>
        <member name="M:FreeImageAPI.FreeImage.MoveMemory(System.IntPtr,System.IntPtr,System.Int64)">
            <summary>
            Moves a block of memory from one location to another.
            </summary>
            <param name="dst">A pointer to the starting address of the move destination.</param>
            <param name="src">A pointer to the starting address of the block of memory to be moved.</param>
            <param name="size">The size of the block of memory to move, in bytes.</param>
        </member>
        <member name="M:FreeImageAPI.FreeImage.CopyMemory(System.Byte*,System.Byte*,System.Int32)">
            <summary>
            Copies a block of memory from one location to another.
            </summary>
            <param name="dest">A pointer to the starting address of the copied block's destination.</param>
            <param name="src">A pointer to the starting address of the block of memory to copy.</param>
            <param name="len">The size of the block of memory to copy, in bytes.</param>
            <remarks>
            <b>CopyMemory</b> runs faster than <see cref="M:FreeImageAPI.FreeImage.MoveMemory(System.Void*,System.Void*,System.UInt32)"/>.
            However, if both blocks overlap the result is undefined.
            </remarks>
        </member>
        <member name="M:FreeImageAPI.FreeImage.CopyMemory(System.Byte*,System.Byte*,System.Int64)">
            <summary>
            Copies a block of memory from one location to another.
            </summary>
            <param name="dest">A pointer to the starting address of the copied block's destination.</param>
            <param name="src">A pointer to the starting address of the block of memory to copy.</param>
            <param name="len">The size of the block of memory to copy, in bytes.</param>
            <remarks>
            <b>CopyMemory</b> runs faster than <see cref="M:FreeImageAPI.FreeImage.MoveMemory(System.Void*,System.Void*,System.Int64)"/>.
            However, if both blocks overlap the result is undefined.
            </remarks>
        </member>
        <member name="M:FreeImageAPI.FreeImage.CopyMemory(System.Void*,System.Void*,System.Int64)">
            <summary>
            Copies a block of memory from one location to another.
            </summary>
            <param name="dest">A pointer to the starting address of the copied block's destination.</param>
            <param name="src">A pointer to the starting address of the block of memory to copy.</param>
            <param name="len">The size of the block of memory to copy, in bytes.</param>
            <remarks>
            <b>CopyMemory</b> runs faster than <see cref="M:FreeImageAPI.FreeImage.MoveMemory(System.Void*,System.Void*,System.Int64)"/>.
            However, if both blocks overlap the result is undefined.
            </remarks>
        </member>
        <member name="M:FreeImageAPI.FreeImage.CopyMemory(System.Void*,System.Void*,System.Int32)">
            <summary>
            Copies a block of memory from one location to another.
            </summary>
            <param name="dest">A pointer to the starting address of the copied block's destination.</param>
            <param name="src">A pointer to the starting address of the block of memory to copy.</param>
            <param name="len">The size of the block of memory to copy, in bytes.</param>
            <remarks>
            <b>CopyMemory</b> runs faster than <see cref="M:FreeImageAPI.FreeImage.MoveMemory(System.Void*,System.Void*,System.UInt32)"/>.
            However, if both blocks overlap the result is undefined.
            </remarks>
        </member>
        <member name="M:FreeImageAPI.FreeImage.CopyMemory(System.IntPtr,System.IntPtr,System.Int32)">
            <summary>
            Copies a block of memory from one location to another.
            </summary>
            <param name="dest">A pointer to the starting address of the copied block's destination.</param>
            <param name="src">A pointer to the starting address of the block of memory to copy.</param>
            <param name="len">The size of the block of memory to copy, in bytes.</param>
            <remarks>
            <b>CopyMemory</b> runs faster than <see cref="M:FreeImageAPI.FreeImage.MoveMemory(System.IntPtr,System.IntPtr,System.UInt32)"/>.
            However, if both blocks overlap the result is undefined.
            </remarks>
        </member>
        <member name="M:FreeImageAPI.FreeImage.CopyMemory(System.IntPtr,System.IntPtr,System.Int64)">
            <summary>
            Copies a block of memory from one location to another.
            </summary>
            <param name="dest">A pointer to the starting address of the copied block's destination.</param>
            <param name="src">A pointer to the starting address of the block of memory to copy.</param>
            <param name="len">The size of the block of memory to copy, in bytes.</param>
            <remarks>
            <b>CopyMemory</b> runs faster than <see cref="M:FreeImageAPI.FreeImage.MoveMemory(System.IntPtr,System.IntPtr,System.Int64)"/>.
            However, if both blocks overlap the result is undefined.
            </remarks>
        </member>
        <member name="M:FreeImageAPI.FreeImage.CopyMemory(System.Array,System.Void*,System.Int32)">
            <summary>
            Copies a block of memory into an array.
            </summary>
            <param name="dest">An array used as the destination of the copy process.</param>
            <param name="src">A pointer to the starting address of the block of memory to copy.</param>
            <param name="len">The size of the block of memory to copy, in bytes.</param>
        </member>
        <member name="M:FreeImageAPI.FreeImage.CopyMemory(System.Array,System.Void*,System.Int64)">
            <summary>
            Copies a block of memory into an array.
            </summary>
            <param name="dest">An array used as the destination of the copy process.</param>
            <param name="src">A pointer to the starting address of the block of memory to copy.</param>
            <param name="len">The size of the block of memory to copy, in bytes.</param>
        </member>
        <member name="M:FreeImageAPI.FreeImage.CopyMemory(System.Array,System.IntPtr,System.Int32)">
            <summary>
            Copies a block of memory into an array.
            </summary>
            <param name="dest">An array used as the destination of the copy process.</param>
            <param name="src">A pointer to the starting address of the block of memory to copy.</param>
            <param name="len">The size of the block of memory to copy, in bytes.</param>
        </member>
        <member name="M:FreeImageAPI.FreeImage.CopyMemory(System.Array,System.IntPtr,System.Int64)">
            <summary>
            Copies a block of memory into an array.
            </summary>
            <param name="dest">An array used as the destination of the copy process.</param>
            <param name="src">A pointer to the starting address of the block of memory to copy.</param>
            <param name="len">The size of the block of memory to copy, in bytes.</param>
        </member>
        <member name="M:FreeImageAPI.FreeImage.CopyMemory(System.Void*,System.Array,System.Int32)">
            <summary>
            Copies the content of an array to a memory location.
            </summary>
            <param name="dest">A pointer to the starting address of the copied block's destination.</param>
            <param name="src">An array used as the source of the copy process.</param>
            <param name="len">The size of the block of memory to copy, in bytes.</param>
        </member>
        <member name="M:FreeImageAPI.FreeImage.CopyMemory(System.Void*,System.Array,System.Int64)">
            <summary>
            Copies the content of an array to a memory location.
            </summary>
            <param name="dest">A pointer to the starting address of the copied block's destination.</param>
            <param name="src">An array used as the source of the copy process.</param>
            <param name="len">The size of the block of memory to copy, in bytes.</param>
        </member>
        <member name="M:FreeImageAPI.FreeImage.CopyMemory(System.IntPtr,System.Array,System.Int32)">
            <summary>
            Copies the content of an array to a memory location.
            </summary>
            <param name="dest">A pointer to the starting address of the copied block's destination.</param>
            <param name="src">An array used as the source of the copy process.</param>
            <param name="len">The size of the block of memory to copy, in bytes.</param>
        </member>
        <member name="M:FreeImageAPI.FreeImage.CopyMemory(System.IntPtr,System.Array,System.Int64)">
            <summary>
            Copies the content of an array to a memory location.
            </summary>
            <param name="dest">A pointer to the starting address of the copied block's destination.</param>
            <param name="src">An array used as the source of the copy process.</param>
            <param name="len">The size of the block of memory to copy, in bytes.</param>
        </member>
        <member name="M:FreeImageAPI.FreeImage.CopyMemory(System.Array,System.Array,System.Int32)">
            <summary>
            Copies the content of one array into another array.
            </summary>
            <param name="dest">An array used as the destination of the copy process.</param>
            <param name="src">An array used as the source of the copy process.</param>
            <param name="len">The size of the content to copy, in bytes.</param>
        </member>
        <member name="M:FreeImageAPI.FreeImage.CopyMemory(System.Array,System.Array,System.Int64)">
            <summary>
            Copies the content of one array into another array.
            </summary>
            <param name="dest">An array used as the destination of the copy process.</param>
            <param name="src">An array used as the source of the copy process.</param>
            <param name="len">The size of the content to copy, in bytes.</param>
        </member>
        <member name="M:FreeImageAPI.FreeImage.GetDC(System.IntPtr)">
            <summary>
            Retrieves a handle to a display device context (DC) for the client area of a specified window
            or for the entire screen. You can use the returned handle in subsequent GDI functions to draw in the DC.
            </summary>
            <param name="hWnd">Handle to the window whose DC is to be retrieved.
            If this value is IntPtr.Zero, GetDC retrieves the DC for the entire screen. </param>
            <returns>If the function succeeds, the return value is a handle to the DC for the specified window's client area.
            If the function fails, the return value is NULL.</returns>
        </member>
        <member name="M:FreeImageAPI.FreeImage.ReleaseDC(System.IntPtr,System.IntPtr)">
            <summary>
            Releases a device context (DC), freeing it for use by other applications.
            The effect of the ReleaseDC function depends on the type of DC. It frees only common and window DCs.
            It has no effect on class or private DCs.
            </summary>
            <param name="hWnd">Handle to the window whose DC is to be released.</param>
            <param name="hDC">Handle to the DC to be released.</param>
            <returns>Returns true on success, false on failure.</returns>
        </member>
        <member name="M:FreeImageAPI.FreeImage.CreateDIBSection(System.IntPtr,System.IntPtr,System.UInt32,System.IntPtr@,System.IntPtr,System.UInt32)">
            <summary>
            Creates a DIB that applications can write to directly.
            The function gives you a pointer to the location of the bitmap bit values.
            You can supply a handle to a file-mapping object that the function will use to create the bitmap,
            or you can let the system allocate the memory for the bitmap.
            </summary>
            <param name="hdc">Handle to a device context.</param>
            <param name="pbmi">Pointer to a BITMAPINFO structure that specifies various attributes of the DIB,
            including the bitmap dimensions and colors.</param>
            <param name="iUsage">Specifies the type of data contained in the bmiColors array member of the BITMAPINFO structure
            pointed to by pbmi (either logical palette indexes or literal RGB values).</param>
            <param name="ppvBits">Pointer to a variable that receives a pointer to the location of the DIB bit values.</param>
            <param name="hSection">Handle to a file-mapping object that the function will use to create the DIB.
            This parameter can be NULL.</param>
            <param name="dwOffset">Specifies the offset from the beginning of the file-mapping object referenced by hSection
            where storage for the bitmap bit values is to begin. This value is ignored if hSection is NULL.</param>
            <returns>If the function succeeds, the return value is a handle to the newly created DIB,
            and *ppvBits points to the bitmap bit values. If the function fails, the return value is NULL, and *ppvBits is NULL.</returns>
        </member>
        <member name="M:FreeImageAPI.FreeImage.DeleteObject(System.IntPtr)">
            <summary>
            Deletes a logical pen, brush, font, bitmap, region, or palette, freeing all system resources associated with the object.
            After the object is deleted, the specified handle is no longer valid.
            </summary>
            <param name="hObject">Handle to a logical pen, brush, font, bitmap, region, or palette.</param>
            <returns>Returns true on success, false on failure.</returns>
        </member>
        <member name="M:FreeImageAPI.FreeImage.CreateDIBitmap(System.IntPtr,System.IntPtr,System.UInt32,System.IntPtr,System.IntPtr,System.UInt32)">
            <summary>
            Creates a compatible bitmap (DDB) from a DIB and, optionally, sets the bitmap bits.
            </summary>
            <param name="hdc">Handle to a device context.</param>
            <param name="lpbmih">Pointer to a bitmap information header structure.</param>
            <param name="fdwInit">Specifies how the system initializes the bitmap bits - (use 4).</param>
            <param name="lpbInit">Pointer to an array of bytes containing the initial bitmap data.</param>
            <param name="lpbmi">Pointer to a BITMAPINFO structure that describes the dimensions
            and color format of the array pointed to by the lpbInit parameter.</param>
            <param name="fuUsage">Specifies whether the bmiColors member of the BITMAPINFO structure
            was initialized - (use 0).</param>
            <returns>Handle to a DIB or null on failure.</returns>
        </member>
        <member name="M:FreeImageAPI.FreeImage.GetObject(System.IntPtr,System.Int32,System.IntPtr)">
            <summary>
            Retrieves information for the specified graphics object.
            </summary>
            <param name="hgdiobj">Handle to the graphics object of interest.</param>
            <param name="cbBuffer">Specifies the number of bytes of information to
            be written to the buffer.</param>
            <param name="lpvObject">Pointer to a buffer that receives the information
            about the specified graphics object.</param>
            <returns>0 on failure.</returns>
        </member>
        <member name="M:FreeImageAPI.FreeImage.GetDIBits(System.IntPtr,System.IntPtr,System.UInt32,System.UInt32,System.IntPtr,System.IntPtr,System.UInt32)">
            <summary>
            Retrieves the bits of the specified compatible bitmap and copies them into a buffer
            as a DIB using the specified format.
            </summary>
            <param name="hdc">Handle to the device context.</param>
            <param name="hbmp">Handle to the bitmap. This must be a compatible bitmap (DDB).</param>
            <param name="uStartScan">Specifies the first scan line to retrieve.</param>
            <param name="cScanLines">Specifies the number of scan lines to retrieve.</param>
            <param name="lpvBits">Pointer to a buffer to receive the bitmap data.</param>
            <param name="lpbmi">Pointer to a BITMAPINFO structure that specifies the desired
            format for the DIB data.</param>
            <param name="uUsage">Specifies the format of the bmiColors member of the
            BITMAPINFO structure - (use 0).</param>
            <returns>0 on failure.</returns>
        </member>
        <member name="M:FreeImageAPI.FreeImage.MoveMemory(System.Void*,System.Void*,System.UInt32)">
            <summary>
            Moves a block of memory from one location to another.
            </summary>
            <param name="dst">Pointer to the starting address of the move destination.</param>
            <param name="src">Pointer to the starting address of the block of memory to be moved.</param>
            <param name="size">Size of the block of memory to move, in bytes.</param>
        </member>
        <member name="M:FreeImageAPI.FreeImage.RtlCompareMemory(System.Void*,System.Void*,System.UInt32)">
            <summary>
            The RtlCompareMemory routine compares blocks of memory
            and returns the number of bytes that are equivalent.
            </summary>
            <param name="buf1">A pointer to a block of memory to compare.</param>
            <param name="buf2">A pointer to a block of memory to compare.</param>
            <param name="count">Specifies the number of bytes to be compared.</param>
            <returns>RtlCompareMemory returns the number of bytes that compare as equal.
            If all bytes compare as equal, the input Length is returned.</returns>
        </member>
    </members>
</doc>
