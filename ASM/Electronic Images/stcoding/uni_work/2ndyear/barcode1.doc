072010303050000144002006006010000
11
21
F0110000001
9[........................................................]0010
ÅâPsuedo-PascalBarcodeReaderAlgorithm
Äâ
Ä{Barcodereaderinhalfpascal/English}â

ÄProgrambarcode_reader;

port1address=&ff011b{AddressofPITport1}â
Äwhite  =   FALSE{assumedtobezero}
black  =  TRUE{assumedtobe-1}â
Äcorrectno_bars=17{no.ofbarsinacorrectcode}
maxno_bars=48{maximumno.ofbarsallowedtoread}

bar_buf:array[maxno_bars+1]ofinteger{transitiontimearray}â

Ävar
     curr_state:boolean;{currentlight/darkstate}
     error:integer;{errorflag}
     number1,number2:integer;{readbarcodedigits}

{FunctiontoReadbit4ofPITport1}

Functionread_port1state():boolean;
begin
   curr_state:=(("bit4of[port1address]"<>0)
   read_port1state:=curr_state
end;

{Proceduretowaitfor1/4ofasecondofwhite)

procedurewait_sync
var
   count:integer;
begin
   repeat
   count:=0;
   while(count<"1\4ofasecond")and(read_port1state=white)do
       count:=count+1;
untilcount="1\4ofasecond";
end;

{Functiontowaitforthenexttransition(statechange)ofbarcode
reader-thefunctionreturnsatimeoutflag,falseindicatingno.
timeoutoccuredwhilewaitingforatransition,ortrueotherwise.A
timeoutisdefinedasbeing"notransitioninonequarterofasecond".}

functionwait_trans(vartime:integer):boolean;
var
oldstate:boolean;
     justreadstate:boolean;
     count:integer;
begin
     count:=0;
     oldstate:=curr_state;
     repeat
          justreadstate:=read_port1state;
          count:=count+1;
     untilcount=("quarterofasecond")
or(oldstate<>justreadstate);
time:=count;
     wait_trans:=(oldstate=justreadstate){returntimedoutflag}
Äend;
{Proceduretowaitforthenexttransition(statechange)ofbarcode
readerandignoretimeouts-theprocedurecallsthelastfunction.}

procedurewait_transne(vartime:integer);
var
timeoutcheck:boolean;
begin
   repeat
     timeoutcheck:=wait_trans(time);
   until(timeoutcheck:=false)
end;

{Functiontoreadaseriesoftransitiontimesintothetransitiontime
array.Readingstopswhennotransitionhasoccuredfor1/4ofasecond,
orwhentheendofthearrayisreached.Thereturnflagindicates
whethertheendofthearraywasreached(errorflag)}

functionreadtrans(varnoread:integer;):boolean;
var
index:integer;
time:integer;
timeout:boolean;
begin
     index:=1;
     wait_transne;{waitforfirsttransition}
     repeat
  timeout:=wait_trans(time);{waitfornexttransition}
     if(timeout:=true) then
begin
          noread:=index-1;{no.oftransitionread}
 bar_buf[index]=0;{markendofreadtranstimes}
     readtrans:=false;{indicatenottoomanybars}
end;
bar_buf[index]:=time;
     index:=index+1;
     until(index>maxno_bars)
readtrans:=true;{indicatetoomanybarsread}
end;

{Filterglitches}
{inEnglishforclarity}

procedurefilter_glitches(noread);
begin
"whilethenumberoftransitiontimesinthearrayismorethan17,
findthesmallesttransitiontimeinthearrayandaddthetwo
transitiontimeseitherside,andplacethisvalueontheleftand
shuffletheremainingtransitiontimes(ontheright)inthebuffertwo
placesleft.Ifthesmallestvalue"
end;

{Converttransitiontimestobitcodenumbers,checkingstartstop
sequence.Returnsbooleanerrorflagofwhetherstart/stopsequencewas
validorinvalid.}
{againinEnglishforclarity}

functionconv_code(noread):boolean;
begin
"findtheaverage(mean)valueofthetransitiontimesinthearray.
Ä"alargebarisnowclassifiedashavingagreaterthanaveragetime,
andasmallbarisclassifiedashavingalessthanaveragetime."
"ifthebarcodestartswiththecode0000thenthebarcodehasbeen
scannedfromlefttoright,ifthestartcodeif001thenthebarcode
hasbeenscannedrighttoleft.(setareverseflagaccordingly),ifit
startswithneitherthenreturntheerrorflagTRUE."
"Foralternatearrayentries(transitiontimes),readthearrayvalueand
classifyasa0or1,shiftthisintotheappropriatenumber(number1
ornumber2).Repeatthisforthe10arrayentries."
"Ifthereverseflagistruethenreversethebitsinthetwonumbersand
swapthetwonumbers."
"Nowchecktheendsequence-noteifthereverseflagistruethe'end'
sequenceisthestartcodereversed!.Ifthe'end'sequenceisbadthe
returntheerrorflagTRUE,otherwise,returntheerrorflagFALSE
indicatingthestart/stopsequencewasok."

{Proceduretoreadbarcode,andfilterglitchesout,convertingbarcode
toasciinumbersifnoerrorshaveoccured.Returnanintegererrorcode
,zeroindicatingallwentwell,-veerrorcodeindicatinganerror.}

functionread_barcode(varnumber1,number2):integer;
var
error:boolean;
errorflag:integer;
noread:integer;
begin
 wait_sync;{waitforquarterofasecondofwhite}
errorflag:=readtrans(noread);   {readtransitiontimes}
ifnoread<correctno_barsthen
read_barcode:=-1;{errorindicatetoofewtransitionsread}

iferrorflag=truethen
read_barcode=-4;{errorindicatetoomanytransitionsread}

ifnoread>correctno_barsthen
filter_glitches(noread);

errorflag:=conv_code(noread);{converttransitiontimes}
iferrorflag=truethen
read_barcode=-3;{errorindicatebadstart/stopsequence}

"checkparityofnumber1andnumber2"

if"paritybad"then
read_barcode=-2;{errorindicateparityerror}
endif

"convertnumber1andnumber2toasciicode."

end;

{MainProgram}

begin
   error:=read_barcode(number1,number2);{readthebarcode}
   if(error=0)then
"printnumber1andnumber2"
   else
      "printdiagnosticerrormessagebasedonerrorcode"
end.
Ä

