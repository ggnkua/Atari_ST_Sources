' =====================================================
' SMOKE : Tobe 2004
' =====================================================
'
$m8192
'
DIM regs%(16)
INLINE old_pal%,32
'
res|=XBIOS(4)
xb%=XBIOS(2)
super%=0
old_vbl%=0
my_vbl%=0
'
INLINE zik%,4550
INLINE logo%,32066
INLINE sprites%,3874
INLINE border%,8034
INLINE rasters%,8000
INLINE spl%,15120
'
becr%=MALLOC(ADD(MUL(250,168),256))
ecr%=AND(ADD(becr%,255),&HFFFFFF00)
base%=MALLOC(221760)
tbl%=ADD(border%,34)
spline%=xb%
play%=ADD(zik%,8)
src_s%=OR(&H20000,MUL(32,198))
src%=MALLOC(MUL(128,198))
beg%=base%
end%=ADD(base%,221760)
upd%=base%
splita&=10
splitb&=SUB(166,splita&)
poss%=spline%
pos2%=ADD(spline%,280)
pos3%=ADD(spline%,560)
pose%=ADD(spline%,15120)
distort%=&H6FFFA
'
'------------------------------------------------
'              GAME TO LAUNCH
'------------------------------------------------
'
' if game$="" then no game will be executed :)
'
game$="A:\TEST.PRG"  ! full path
'
'------------------------------------------------
'              RESTORE PALETTE
'------------------------------------------------
'
' if rest_pal!=FALSE then intro set all colors to
'                    black before launching game
' if rest_pal!=TRUE  then intro restore system
'                    colors before launching game
'
rest_pal!=TRUE
'
'------------------------------------------------
'
psetup ! do not move or modifiy !!!
'
'------------------------------------------------
'                INTRO TEXT
'------------------------------------------------
'
LOCATE 10,5          ! LOCATE col,row
PRINT "ATARI LEGEND"
'
LOCATE 1,7
PRINT "Cracker  : xxxxx"
PRINT "Supplier : xxxxx"
'
LOCATE 1,15
PRINT "Intro by Tobe & C-rem of MJJ-Prod"
'
pvblwait             ! do not move
CARD{&HFF825E}=&HFFF ! change text color here
'
'------------------------------------------------
'               END OF CONFIG
'------------------------------------------------
'
pinit
'
CARD{ADD(border%,2)}=CARD{ADD(logo%,2)}
LONG{&H300}=ecr%
'
b0a|=BYTE{&HFF820A}
b60|=BYTE{&HFF8260}
BYTE{&HFF820A}=2
BYTE{&HFF8260}=0
'
BYTE{&HFF820F}=4
BYTE{&HFF8265}=0
'
'
int1%=LONG{&HFFFA06}
int2%=LONG{&HFFFA0A}
int3%=LONG{&HFFFA0E}
int4%=LONG{&HFFFA12}
LONG{&HFFFA06}=AND(LONG{&HFFFA06},&HFFDEFF8F)
LONG{&HFFFA0A}=AND(LONG{&HFFFA0A},&HFFDEFF8F)
LONG{&HFFFA0E}=AND(LONG{&HFFFA0E},&HFFDEFF8F)
LONG{&HFFFA12}=AND(LONG{&HFFFA12},&HFFDEFF8F)
'
pvblwait
DO
  pvblwait
  ppredraw
  pinidraw
  pvblsync
  pdraw
  ppostdraw
LOOP UNTIL BYTE{&HFFFFC02}=57
'
BYTE{&HFF820F}=0
BYTE{&HFF8265}=0
BYTE{&HFF820A}=b0a|
BYTE{&HFF8260}=b60|
'
LONG{&HFFFA06}=int1%
LONG{&HFFFA0A}=int2%
LONG{&HFFFA0E}=int3%
LONG{&HFFFA12}=int4%
'
prestore
'
VSYNC
~MFREE(src%)
~MFREE(base%)
~MFREE(becr%)
'
IF game$<>""
  EXEC 0,game$,"",""
ENDIF
QUIT
'
'
> PROCEDURE pinit
  '
  out%=ecr%
  FOR x&=0 TO 160 STEP 8
    LONG{out%}=0
    ADD out%,4
    LONG{out%}=0
    ADD out%,4
  NEXT x&
  inp%=ADD(logo%,194)
  FOR y&=1 TO 198
    BMOVE inp%,out%,160
    ADD out%,160
    LONG{out%}=LONG{inp%}
    ADD inp%, 4
    ADD out%, 4
    LONG{out%}=LONG{inp%}
    ADD out%, 4
    ADD inp%,156
  NEXT y&
  FOR x&=0 TO 160 STEP 8
    LONG{out%}=0
    ADD out%,4
    LONG{out%}=0
    ADD out%,4
  NEXT x&
  inp%=ADD(border%,34)
  FOR y&=0 TO 49
    BMOVE inp%,out%,160
    ADD out%,160
    LONG{out%}=LONG{inp%}
    ADD inp%, 4
    ADD out%, 4
    LONG{out%}=LONG{inp%}
    ADD out%, 4
    ADD inp%,156
  NEXT y&
  '
  out%=src%
  FOR y&=0 TO 197
    FOR x&=0 TO 30 STEP 2
      ADD out%, 2
      CARD{out%}=8
      ADD out%, 4
      CARD{out%}=8
      ADD out%,2
    NEXT x&
  NEXT y&
  '
  inp%=rasters%
  out%=src%
  FOR y&=0 TO 197
    ADD out%,32
    CARD{out%}=CARD{inp%}
    ADD out%,4
    FOR x&=4 TO 23
      CARD{out%}=CARD{inp%}
      ADD inp%,2
      ADD out%,4
    NEXT x&
    CARD{out%}=CARD{SUB(out%,4)}
    ADD out%,12
  NEXT y&
  '
  out%=tbl%
  FOR val&=0 TO 225
    bla=val&*PI/14
    CARD{out%}=SIN(bla)*256
    ADD out%, 2
    CARD{out%}=COS(bla)*256
    ADD out%, 2
  NEXT val&
  '
  scale=7*100/198
  '
  out%=base%
  FOR o&=0 TO 27
    FOR y&=0 TO 197
      ny&=SUB(197,y&)*scale
      DIV ny&, 100
      of%=tbl%
      ADD of%, SHL(ADD(o&,y&),2)
      va&=SHR(MUL(CARD{of%},ny&),8)
      ADD va&, 8
      vb&=SHR(MUL(CARD{ADD(of%,2)},ny&),8)
      ADD vb&, 8
      vc%=SHL(va&,16)
      ADD vc%, vb&
      LONG{out%}=vc%
      ADD out%, 4
      LONG{out%}=vc%
      ADD out%, 4
      LONG{out%}=vc%
      ADD out%, 4
      LONG{out%}=vc%
      ADD out%, 4
      LONG{out%}=vc%
      ADD out%, 4
      LONG{out%}=vc%
      ADD out%, 4
      LONG{out%}=vc%
      ADD out%, 4
      LONG{out%}=vc%
      ADD out%, 4
      LONG{out%}=vc%
      ADD out%, 4
      LONG{out%}=vc%
      ADD out%, 4
    NEXT y&
  NEXT o&
  '
  inp%=spl%
  out%=spline%
  bck%=ADD(logo%,34)
  FOR i&=0 TO 1079
    LONG{out%}=ADD(LONG{inp%},bck%)
    ADD inp%,4
    ADD out%,4
    LONG{out%}=ADD(LONG{inp%},ecr%)
    ADD inp%,4
    ADD out%,4
    LONG{out%}=LONG{inp%}
    ADD inp%,4
    ADD out%,4
    CARD{out%}=CARD{inp%}
    ADD inp%,2
    ADD out%,2
  NEXT i&
  '
  BMOVE spline%,ADD(spline%,15120),15120
RETURN
'
> PROCEDURE pinidraw
  LONG{&HFF8240}=LONG{ADD(logo%,2)}
  LONG{&HFF8244}=LONG{ADD(logo%,6)}
  LONG{&HFF8248}=LONG{ADD(logo%,10)}
  LONG{&HFF824C}=LONG{ADD(logo%,14)}
  LONG{&HFF8250}=LONG{ADD(logo%,18)}
  LONG{&HFF8254}=LONG{ADD(logo%,22)}
  LONG{&HFF8258}=LONG{ADD(logo%,26)}
  LONG{&HFF825C}=LONG{ADD(logo%,30)}
  '
  CARD{&HFF8A28}=&HFFFF
  CARD{&HFF8A2C}=&HFFFF
  ' src
  LONG{&HFF8A20}=&H20002            ! src incr
  LONG{&HFF8A2E}=distort%           ! &H6FFFA dst incr
  LONG{&HFF8A24}=src%               ! source
  LONG{&HFF8A32}=&HFF825E           ! destination
  LONG{&HFF8A36}=src_s%             ! size
  '
  BYTE{&HFF820F}=0
  BYTE{&HFF8265}=1
RETURN
'
> PROCEDURE pdraw
  ~0
  ~0
  ~0
  ~0
  ~0
  ~0
  ~0
  ~0
  ~0
  ~0
  ~0
  ~0
  ~0
  ~0
  ~0
  ~0
  ~0
  ~0
  ~0
  ~0
  ~0
  ~0
  ~0
  ~0
  ~0
  ~0
  ~0
  CARD{&HFF8A3C}=&HC000             ! go
  ~0
  '
  BYTE{&HFF820F}=4
  BYTE{&HFF8265}=0
  '
  LONG{&HFF8240}=LONG{ADD(border%,2)}
  LONG{&HFF8244}=LONG{ADD(border%,6)}
  LONG{&HFF8248}=LONG{ADD(border%,10)}
  LONG{&HFF824C}=LONG{ADD(border%,14)}
  LONG{&HFF8250}=LONG{ADD(border%,18)}
  LONG{&HFF8254}=LONG{ADD(border%,22)}
  LONG{&HFF8258}=LONG{ADD(border%,26)}
  LONG{&HFF825C}=LONG{ADD(border%,30)}
  '
  ~2
  BYTE{&HFF820A}=0
  ~2
  ~2
  ~2
  ~2
  ~2
  ~2
  ~2
  ~2
  BYTE{&HFF820A}=2
RETURN
'
> PROCEDURE ppredraw
  LONG{&HFF8A28}=&HFFFFFFFF
  CARD{&HFF8A2C}=&HFFFF
  CARD{&HFF8A3A}=&H203              ! mode
  LONG{&HFF8A20}=&H20002            ! src incr
  LONG{&HFF8A2E}=&H40034            ! dst incr
  '
  inp%=upd%
  out%=ADD(src%,38)
  LONG{&HFF8A24}=inp%               ! source
  LONG{&HFF8A32}=out%               ! destination
  CARD{&HFF8A36}=&H14
  CARD{&HFF8A38}=splita&
  BYTE{&HFF8A3C}=&HC0               ! go !!!!!!!
  ADD inp%,SHL(splita&,5)
  ADD inp%,SHL(splita&,3)
  ADD out%,SHL(splita&,7)
  '
  ' =================================================
  '
  LONG{&HFF8A20}=&H80090
  LONG{&HFF8A2E}=&H80098
  '
  bck%=LONG{poss%}
  ptr%=LONG{ADD(poss%,4)}
  '
  LONG{&HFF8A24}=bck%
  LONG{&HFF8A32}=ptr%
  LONG{&HFF8A36}=&H30018
  BYTE{&HFF8A3C}=&HC0
  LONG{&HFF8A24}=ADD(bck%,2)
  LONG{&HFF8A32}=ADD(ptr%,2)
  LONG{&HFF8A36}=&H30018
  BYTE{&HFF8A3C}=&HC0
  LONG{&HFF8A24}=ADD(bck%,4)
  LONG{&HFF8A32}=ADD(ptr%,4)
  LONG{&HFF8A36}=&H30018
  BYTE{&HFF8A3C}=&HC0
  LONG{&HFF8A24}=ADD(bck%,6)
  LONG{&HFF8A32}=ADD(ptr%,6)
  LONG{&HFF8A36}=&H30018
  BYTE{&HFF8A3C}=&HC0
  '
  bck%=LONG{pos2%}
  ptr%=LONG{ADD(pos2%,4)}
  '
  LONG{&HFF8A24}=bck%
  LONG{&HFF8A32}=ptr%
  LONG{&HFF8A36}=&H30018
  BYTE{&HFF8A3C}=&HC0
  LONG{&HFF8A24}=ADD(bck%,2)
  LONG{&HFF8A32}=ADD(ptr%,2)
  LONG{&HFF8A36}=&H30018
  BYTE{&HFF8A3C}=&HC0
  LONG{&HFF8A24}=ADD(bck%,4)
  LONG{&HFF8A32}=ADD(ptr%,4)
  LONG{&HFF8A36}=&H30018
  BYTE{&HFF8A3C}=&HC0
  LONG{&HFF8A24}=ADD(bck%,6)
  LONG{&HFF8A32}=ADD(ptr%,6)
  LONG{&HFF8A36}=&H30018
  BYTE{&HFF8A3C}=&HC0
  '
  bck%=LONG{pos3%}
  ptr%=LONG{ADD(pos3%,4)}
  '
  LONG{&HFF8A24}=bck%
  LONG{&HFF8A32}=ptr%
  LONG{&HFF8A36}=&H30018
  BYTE{&HFF8A3C}=&HC0
  LONG{&HFF8A24}=ADD(bck%,2)
  LONG{&HFF8A32}=ADD(ptr%,2)
  LONG{&HFF8A36}=&H30018
  BYTE{&HFF8A3C}=&HC0
  LONG{&HFF8A24}=ADD(bck%,4)
  LONG{&HFF8A32}=ADD(ptr%,4)
  LONG{&HFF8A36}=&H30018
  BYTE{&HFF8A3C}=&HC0
  LONG{&HFF8A24}=ADD(bck%,6)
  LONG{&HFF8A32}=ADD(ptr%,6)
  LONG{&HFF8A36}=&H30018
  BYTE{&HFF8A3C}=&HC0
  '
  ' =================================================
  '
  ADD poss%,28
  IF poss%>=pose%
    poss%=spline%
    pos2%=ADD(spline%,280)
    pos3%=ADD(spline%,560)
  ELSE
    ADD pos2%,28
    ADD pos3%,28
  ENDIF
  '
  ' =================================================
  '
  LONG{&HFF8A20}=&H80098
  '
  ptr%=LONG{ADD(poss%,4)}
  '
  BYTE{&HFF8A3D}=CARD{ADD(poss%,8)}
  CARD{&HFF8A28}=CARD{ADD(poss%,10)}
  CARD{&HFF8A2C}=CARD{ADD(poss%,12)}
  '
  LONG{&HFF8A24}=ADD(sprites%,50)
  LONG{&HFF8A32}=ptr%
  LONG{&HFF8A36}=&H30018
  BYTE{&HFF8A3C}=&HC0
  LONG{&HFF8A24}=ADD(sprites%,52)
  LONG{&HFF8A32}=ADD(ptr%,2)
  LONG{&HFF8A36}=&H30018
  BYTE{&HFF8A3C}=&HC0
  LONG{&HFF8A24}=ADD(sprites%,54)
  LONG{&HFF8A32}=ADD(ptr%,4)
  LONG{&HFF8A36}=&H30018
  BYTE{&HFF8A3C}=&HC0
  LONG{&HFF8A24}=ADD(sprites%,56)
  LONG{&HFF8A32}=ADD(ptr%,6)
  LONG{&HFF8A36}=&H30018
  BYTE{&HFF8A3C}=&HC0
  '
  ptr%=LONG{ADD(pos2%,4)}
  '
  BYTE{&HFF8A3D}=CARD{ADD(pos2%,8)}
  CARD{&HFF8A28}=CARD{ADD(pos2%,10)}
  CARD{&HFF8A2C}=CARD{ADD(pos2%,12)}
  '
  LONG{&HFF8A24}=ADD(sprites%,50)
  LONG{&HFF8A32}=ptr%
  LONG{&HFF8A36}=&H30018
  BYTE{&HFF8A3C}=&HC0
  LONG{&HFF8A24}=ADD(sprites%,52)
  LONG{&HFF8A32}=ADD(ptr%,2)
  LONG{&HFF8A36}=&H30018
  BYTE{&HFF8A3C}=&HC0
  LONG{&HFF8A24}=ADD(sprites%,54)
  LONG{&HFF8A32}=ADD(ptr%,4)
  LONG{&HFF8A36}=&H30018
  BYTE{&HFF8A3C}=&HC0
  LONG{&HFF8A24}=ADD(sprites%,56)
  LONG{&HFF8A32}=ADD(ptr%,6)
  LONG{&HFF8A36}=&H30018
  BYTE{&HFF8A3C}=&HC0
  '
  ptr%=LONG{ADD(pos3%,4)}
  '
  BYTE{&HFF8A3D}=CARD{ADD(pos3%,8)}
  CARD{&HFF8A28}=CARD{ADD(pos3%,10)}
  CARD{&HFF8A2C}=CARD{ADD(pos3%,12)}
  '
  LONG{&HFF8A24}=ADD(sprites%,34)
  LONG{&HFF8A32}=ptr%
  LONG{&HFF8A36}=&H30018
  BYTE{&HFF8A3C}=&HC0
  LONG{&HFF8A24}=ADD(sprites%,36)
  LONG{&HFF8A32}=ADD(ptr%,2)
  LONG{&HFF8A36}=&H30018
  BYTE{&HFF8A3C}=&HC0
  LONG{&HFF8A24}=ADD(sprites%,38)
  LONG{&HFF8A32}=ADD(ptr%,4)
  LONG{&HFF8A36}=&H30018
  BYTE{&HFF8A3C}=&HC0
  LONG{&HFF8A24}=ADD(sprites%,40)
  LONG{&HFF8A32}=ADD(ptr%,6)
  LONG{&HFF8A36}=&H30018
  BYTE{&HFF8A3C}=&HC0
  '
RETURN
'
> PROCEDURE ppostdraw
  LONG{&HFF8A28}=&HFFFFFFFF
  CARD{&HFF8A2C}=&HFFFF
  CARD{&HFF8A3A}=&H203              ! mode
  LONG{&HFF8A20}=&H20002            ! src incr
  LONG{&HFF8A2E}=&H40034            ! dst incr
  '
  LONG{&HFF8A24}=inp%               ! source
  LONG{&HFF8A32}=out%               ! destination
  CARD{&HFF8A36}=&H14
  CARD{&HFF8A38}=splitb&
  BYTE{&HFF8A3C}=&HC0               ! go !!!!!!!
  '
  ADD upd%,7920
  IF upd%=end%
    upd%=beg%
  ENDIF
RETURN
'
' =====================================================
'
> PROCEDURE pvbl
  ~8
  ~8
  BYTE{&H304}=1
  IF LONG{&H300}
    BYTE{&HFFFF8205}=BYTE{&H301}
    BYTE{&HFFFF8207}=BYTE{&H302}
    BYTE{&HFFFF8209}=BYTE{&H303}
  ENDIF
  ~9
  ~9
  ~9
  ~9
  ~9
RETURN
'
' =====================================================
'
> PROCEDURE psetup
  CLS
  HIDEM
  '
  VSYNC
  super%=GEMDOS(&H20,L:0)
  '
  hst_ste!=FALSE
  aid$ = "_MCH"
  iid% = LONG{VARPTR(aid$)}
  jar% = LONG{&H5A0}
  val% = 0
  IF jar%
    DO
      id% = LONG{jar%}
      IF id%=iid%
        val% = LONG{ADD(jar%,4)}
      ENDIF
      ADD jar%, 8
    LOOP UNTIL id%=0 OR id%=iid%
    IF id%=iid%
      IF val%=&H10000
        hst_ste! = TRUE
      ENDIF
    ENDIF
  ENDIF
  hst_ram% = LONG{&H42E}
  DIV hst_ram%, 1024
  IF hst_ste!=FALSE OR hst_ram% < 512
    ~MFREE(src%)
    ~MFREE(base%)
    ~MFREE(becr%)
    IF rest_pal!=FALSE
      ps%=&HFFFF8240
      FOR col%=0 TO 15
        CARD{ps%}=0
        ADD ps%,2
      NEXT col%
    ENDIF
    ~GEMDOS(&H20,L:super%)
    IF game$<>""
      EXEC 0,game$,"",""
    ENDIF
    QUIT
  ENDIF
  '
  tos_p%    = LONG{&H4F2}
  a&        = BYTE{ADD(tos_p%,2)}
  b&        = BYTE{ADD(tos_p%,3)}
  host_tos& = MUL(AND(a&,&HF),100)
  ADD host_tos&, MUL(SHR(b&,4),10)
  ADD host_tos&, AND(b&,&HF)
  IF host_tos&=162
    distort% = &H4FFFC
  ENDIF
  '
  dep%=LONG{BASEPAGE+8}
  REPEAT
    ADD dep%,2
  UNTIL CARD{dep%}=&H7008 AND CARD{ADD(dep%,2)}=&H7008
  my_vbl%=dep%
  LONG{dep%}=&H48E7FFFE
  REPEAT
    ADD dep%,2
  UNTIL CARD{dep%}=&H7009 AND CARD{ADD(dep%,2)}=&H7009
  CARD{dep%}=&H4EB9
  LONG{dep%+2}=play%
  LONG{dep%+6}=&H4CDF7FFF
  CARD{dep%+10}=&H4E73
  '
  VSYNC
  ps%=&HFFFF8240
  pd%=old_pal%
  FOR col%=0 TO 15
    CARD{pd%}=CARD{ps%}
    CARD{ps%}=0
    ADD pd%,2
    ADD ps%,2
  NEXT col%
  '
  IF res|<>0
    ~XBIOS(5,L:-1,L:-1,0)
  ENDIF
  '
  VSYNC
  '
  regs%(0)=1
  RCALL zik%, regs%()
  '
  LONG{&H300}=xb%
  BYTE{&H40C}=0
  old_vbl%=LONG{&H70}
  LONG{&H70}=my_vbl%
  pvblwait
RETURN
'
> PROCEDURE prestore
  ps%=&HFFFF8240
  FOR col%=0 TO 15
    CARD{ps%}=0
    ADD ps%,2
  NEXT col%
  '
  pvblwait
  LONG{&H70}=old_vbl%
  VSYNC
  '
  regs%(0)=0
  RCALL zik%, regs%()
  '
  LONG{&HFF8800}=&H707FFFF
  LONG{&HFF8800}=&H8080000
  LONG{&HFF8800}=&H9090000
  LONG{&HFF8800}=&HA0A0000
  '
  VSYNC
  ~XBIOS(5,L:-1,L:-1,res|)
  CLS
  '
  IF rest_pal!=TRUE
    VSYNC
    ps%=old_pal%
    pd%=&HFFFF8240
    FOR col%=0 TO 15
      CARD{pd%}=CARD{ps%}
      ADD pd%,2
      ADD ps%,2
    NEXT col%
  ENDIF
  '
  VSYNC
  ~GEMDOS(32,L:super%)
  SHOWM
RETURN
'
' =====================================================
'
> PROCEDURE pvblwait
  BYTE{&H304}=0
  REPEAT
  UNTIL BYTE{&H304}
RETURN
'
> PROCEDURE pvblsync
  REPEAT
    b|=BYTE{&HFF8209}
  UNTIL b|
  VOID SHL(13,-b|)
RETURN
'
