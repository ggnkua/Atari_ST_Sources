******************************
* Vektras Little header V1.0 *
******************************


***********
* EQUATES *
***********

* Trap calls *

gemdos	equ	1
bios	equ	13
xbios	equ	14

* Hardware *

mem_conf	equ	$ff8001		memory configuration	

s_addr_h	equ	$ff8201		called dbaseh in ShiT internals
s_addr_l	equ	$ff8203		   "   dbasel         "
syncmode	equ	$ff820a		sync mode and screen frequency
colour0	equ	$ff8240		base addr of colour hardware
vidmode	equ	$ff8260		0=lores,  1=medres, 2=hires

ay_regnum	equ	$ff8800		soundchip register write
ay_regdat	equ	$ff8802		soundchip data write

mfp_gpip	equ	$fffa01		mfp regs (see ShiT internals)
mfp_aer	equ	$fffa03
mfp_ddr	equ	$fffa05
mfp_iera	equ	$fffa07
mfp_ierb	equ	$fffa09
mfp_ipra	equ	$fffa0b
mfp_iprb	equ	$fffa0d
mfp_isra	equ	$fffa0f
mfp_isrb	equ	$fffa11
mfp_imra	equ	$fffa13
mfp_imrb	equ	$fffa15
mfp_vr	equ	$fffa19
mfp_tacr	equ	$fffa19
mfp_tbcr	equ	$fffa1b
mfp_tcdcr	equ	$fffa1d
mfp_tadr	equ	$fffa1f
mfp_tbdr	equ	$fffa21
mfp_tcdr	equ	$fffa23
mfp_tddr	equ	$fffa25
mfp_scr	equ	$fffa27
mfp_ucr	equ	$fffa29
mfp_rsr	equ	$fffa2b
mfp_tsr	equ	$fffa2d
mfp_udr	equ	$fffa2f

kb_acia_c	equ	$fffc00		keyboard acia control
kb_acia_d	equ	$fffc02		keyboard acia data

* Interrupts *

i_vblank	equ	$70
i_hblank	equ	$68
i_keybd	equ	$118
i_timera	equ	$134
i_timerb	equ	$120
i_timerc	equ	$114

**********
* MACROS *
**********

* Stack manipulation macros *

stackr	MACRO			stack registers
	movem.l	\1,-(a7)
	ENDM

stack	MACRO			stack a longword
	move.\0	\1,-(a7)
	ENDM

ustackr	MACRO			stack registers
	movem.l	(a7)+,\1
	ENDM

ustack	MACRO			stack a longword
	move.\0	(a7)+,\1
	ENDM

correct	MACRO			correct stack
	add.l	#\1,a7
	ENDM	

* Trap macro *

prat	MACRO			only prats use the o/s!
	trap	#\1	
	ENDM

* Data creation and manipulation macros *

set_str	MACRO
	bra	\@
\1	dc.b	\2,0	
	even
\@
	ENDM

set_val	MACRO
	bra	\@
\1	dc.\0	\2
	even
\@
	ENDM

def_str	MACRO
\1	dc.b	\2,0	
	ENDM

def_val	MACRO
\1	dc.\0	\2
	ENDM

set_block	MACRO
	jmp	\@
\1	ds.\0	\2
\@
	ENDM

def_block	MACRO
\1	ds.\0	\2
	ENDM

move_val	MACRO
	stack.l	a0
	move.\0	(\1),a0
	move.\0	a0,(\2)
	ustack.l	a0
	ENDM

* User I/O stuff *

getkey	MACRO			get a key
	stack.w	#8
	prat	gemdos
	correct	2	
	ENDM

str_print	MACRO
	stackr	<d0-d7/a0-a6>
	stack.l	\1		print srting
	stack.w	#9
	prat	gemdos
	correct	6
	ustackr	<d0-d7/a0-a6>
	ENDM

str_input	MACRO			get a string from the user
	stackr	<d0-d7/a0-a6>
	stack.l	\1
	stack.w	#$0a
	correct	6
	ustackr	<d0-d7/a0-a6>
	ENDM

mouseoff	MACRO			fuck off and die rodent
	stackr	<d0-d7/a0-a6>
	lea	\@X(pc),a0
	bra.s	\@
\@X	dc.w	$1212
\@	stack.l	a0
	stack.w	#1
	stack.w	#25
	prat	xbios	
	correct	8
	ustackr	<d0-d7/a0-a6>
	ENDM

mouseon	MACRO			come back mouse, all is forgiven
	stackr	<d0-d7/a0-a6>
	move.w	#2,d0
	lea	\@X(pc),a0
	bra.s	\@
\@X	dc.w	$0808
\@	stack.l	a0
	stack.w	#1
	stack.w	#25
	prat	xbios	
	correct	8
	ustackr	<d0-d7/a0-a6>
	ENDM

* Interrupts *

set_vbl	MACRO
	move.l	\1,i_vblank
	ENDM

set_hbl	MACRO
	move.l	\1,i_hblank
	ENDM

set_keybd	MACRO
	move.l	\1,i_keybd
	ENDM

set_timerb	MACRO			set timer b (relative)
	or.b	#1,mfp_iera
	or.b	#1,mfp_imra
	clr.b	mfp_tbcr
	move.b	#\1,mfp_tbdr	
	move.b	#8,mfp_tbcr
	bclr	#0,mfp_isra
	move.l	\2,$120
	ENDM

* Setting hardware registers *

set_mfp	MACRO			set mfp register (name,data)
	move.b	\2,\1
	ENDM

colour	MACRO			set colour (0-15)
	move.w	\2,(colour0+(\1*2))
	ENDM

* Video stuff *

set_screen	MACRO
	stackr	<d0/a0>
	move.l	\1,d0
	lsr.l	#8,d0
	lea	$ff8201,a0
	movep.w	d0,0(a0)
	ustackr	<d0/a0>
	ENDM
	
do_50hz	MACRO
	bset.b	#1,syncmode
	ENDM

do_60hz	MACRO
	bclr.b	#1,syncmode
	ENDM

intsync	MACRO
	bclr.b	#0,syncmode
	ENDM
	
extsync	MACRO
	bset.b	#0,syncmode
	ENDM

lowres	MACRO
	move.b	#0,vidmode
	ENDM
	
medres	MACRO
	move.b	#1,vidmode
	ENDM

hires	MACRO
	move.b	#2,vidmode
	ENDM

reset_ay	MACRO
	move.l	#$08000000,ay_regnum	; QUIET!
	move.l	#$09000000,ay_regnum
	move.l	#$0a000000,ay_regnum
	move.l	#$0700ff00,ay_regnum
	ENDM


******************
* Header program *
******************

_super	stack.l	_prgstk
	stack.w	#$20
	prat	gemdos
	correct	6
	move.l	d0,_oldssp
	
_doit	jsr	_preserve
	jsr	_program
	jsr	_restore
	
_exit	stack.l	_oldssp
	stack.w	#$20
	prat	gemdos
	correct	6
	stack.l	#0
	prat	gemdos


**********************
* Header subroutines *
**********************

_preserve	stackr	<d0-d7/a0-a6>
	lea	_xstore,a0
	move.l	i_vblank,(a0)+		interrupts
	move.l	i_hblank,(a0)+
	move.l	i_keybd,(a0)+
	move.l	i_timera,(a0)+
	move.l	i_timerb,(a0)+
	move.l	i_timerc,(a0)+
	move.b	s_addr_h,(a0)+		video
	move.b	s_addr_l,(a0)+
	move.b	vidmode,(a0)+
	movem.l	colour0,d0-d7		colours
	movem.l	d0-d7,_xstore+40
	move.b	mfp_iera,(a0)+		mfp
	move.b	mfp_ierb,(a0)+
	move.b	mfp_isra,(a0)+
	move.b	mfp_isrb,(a0)+
	move.b	mfp_imra,(a0)+
	move.b	mfp_imrb,(a0)+
	move.b	mfp_tacr,(a0)+
	move.b	mfp_tbcr,(a0)+
	move.b	mfp_tadr,(a0)+
	move.b	mfp_tbcr,(a0)+
	ustackr	<d0-d7/a0-a6>
	rts

_restore	stackr	<d0-d7/a0-a6>
	lea	_xstore,a0
	move.l	(a0)+,i_vblank		interrupts
	move.l	(a0)+,i_hblank
	move.l	(a0)+,i_keybd
	move.l	(a0)+,i_timera
	move.l	(a0)+,i_timerb
	move.l	(a0)+,i_timerc
	move.b	(a0)+,s_addr_h		video
	move.b	(a0)+,s_addr_l
	move.b	(a0)+,vidmode
	movem.l	_xstore+40,d0-d7		colours
	movem.l	d0-d7,colour0
	move.b	(a0)+,mfp_iera		mfp
	move.b	(a0)+,mfp_ierb
	move.b	(a0)+,mfp_isra
	move.b	(a0)+,mfp_isrb
	move.b	(a0)+,mfp_imra
	move.b	(a0)+,mfp_imrb
	move.b	(a0)+,mfp_tacr
	move.b	(a0)+,mfp_tbcr
	move.b	(a0)+,mfp_tadr
	move.b	(a0)+,mfp_tbcr
	reset_ay				quiet
	stack.l	<#_mseon>			enable mouse
	stack.w	#0
	stack.w	#25
	prat	xbios
	correct	8
	ustackr	<d0-d7/a0-a6>
	rts


***********************
* Header data storage *
***********************

	def_val.l	<_oldssp>,0
	def_block.l	<_xstore>,50
	def_val.w	<_mseon>,$0808
	def_block.l	<_prgstk>,512
	even

_program
