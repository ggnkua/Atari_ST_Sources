*-----------------------------------------------------------------------------*
*      Documentation for the Copylock(tm) ST and AMIGA Protection Systems     *
*                                                                             *
*         (c)1988-1990 Rob Northen Computing, U.K. All Rights Reserved.       *
*-----------------------------------------------------------------------------*

This document and the software described in it is copyrighted material. It
may not be copied, hired, lent, or backed up in any size, shape or form.

This document describes the following programs/source files:

KEYDISK.S
DISKIO.S
PROTECT
SERIALNO
DISKERR
MAKEBOOT
SAVEFILE
LOADFILE
COMPACT


KEYDISK.S
---------

Source file for the key disk checking code. This code is used to validate
the signature on a key disk and return its serial number. It should be
called whenever it is necessary to check for the presence of the key disk
in the floppy drive. The equivalent binary code of this file can be
created by using PROTECT with the /D option. Full documentation for the
correct use of the code can be found in the source file.


DISKIO.S
--------

Source file for read/write disk routines. This is fast and compact code to
allow sectors on a key disk to be read and written to without making any
calls to the computer's operating system. This makes it possible for a
program to take over the computer and still have full read/write access to
the disk. Full documentation for the correct use of this code can be found
in the source file.


PROTECT [options] <infile> <outfile>
------------------------------------

Loads the input file specified by <infile> into memory, encrypts it,
inserts protection code to the head of the program and then writes it out
to disk under the file name specified by the output file <outfile>.  A key
disk must be in any one of the floppy drives.  To list the options onto the
screen type in ? and press return.

The default options are:

a) The output file will only run when a key disk with the same serial
   number as the one used when the program was protected is in the internal
   floppy drive.

b) The input file is an executable dos file.

c) The system vectors are checked that they point to ROM (ST only). Memory
   will be cleared on reset (Amiga only).

d) The drive motor is turned off after checking for the key disk.

e) The internal drive only is checked for the key disk.

f) The length of the input file is increased by no more than 3K.

g) The whole of the input file is encrypted.

h) The output file will run on PAL and NTSC computers.


[options]

/E      The input file is encrypted only. The encrypted output file will
        run without checking for a key disk in a drive.

/B      The input file is a binary file, not an executable dos file having
        the standard file structure.  The execution address is assumed to
        be the first instruction of the program.  This can be overridden
        with the /X option.

/R      The input file is a subroutine requiring maximum protection.  This
        option is intended to be used on short pieces of code called as
        subroutines from a main program which require a greater level of
        protection.  The protected code never gets decrypted and remains
        encrypted even as it runs. There are restrictions on the type of
        code that may be used. These are:

        a) No time critical code - protected code runs at approx. 5% of its
           normal speed.

        b) Code must be straight binary containing only 68000 instructions
           - no dc.b, dc.w or dc.l etc.

        c) No TRAP's or external subroutine calls. Interrupts are allowed.
           References to external data are allowed.

        There is no restriction on the length of the input file providing
        it contains only 68000 instructions. The code will be called from
        supervisor mode and may be called as often as required.  Registers
        D0-D7 and A0-A6 are passed to the protected code from the calling
        program and any change to them preserved on exit from the code.

        Example
        -------

        Suppose a source file INIT.S contains the initialisation code for a
        main program, eg.

        INIT_TABLE EQU $400

        * main program initialisation code
        INIT
                  LEA     INIT_TABLE,A0
                  MOVE.L  #$4A472B78,(A0)+
                  MOVE.L  #$AB32D5B2,(A0)+
                  MOVE.L  #$29D8EB3D,(A0)+
                  RTS

                  END

        Assembling this produces the file INIT.OBJ. This file can then
        be protected using the /R option, eg.

        PROTECT /R INIT.OBJ INIT.BIN

        This produces a protected version of INIT.OBJ called INIT.BIN,
        which when called will check for the protected key disk and
        initialise the main program. INIT.BIN can now be assembled into the
        main program.  The source file might look something like this:

        * main program code
        MAIN
                  BSR     SUPER_MODE              get into supervisor mode
                  LEA     STACK,SP                init the stack pointer
                  BSR     INIT_MAIN               init the main program
                  BSR     RUN_MAIN                run the main program
                  BRA     QUIT                    quit the program

        * protected code
        INIT_MAIN
                  INCBIN  INIT.BIN
                  RTS

                  INCLUDE RUN_MAIN.S
                  INCLUDE QUIT.S

        STACK     DS.B    $400

                  END

        The reason for protecting the main program initialisation code is
        that if the subroutine call which checks for the protected key disk
        is removed, in an attempt to de-protect the program, then the main
        program would not be initialised and consequently not run properly,
        if at all.  Any part of the main program may be protected in this
        way.

        The extent of the effectiveness of the protection will largely
        depend upon how skillfully the programmer implements the
        protection.

/V      The system vectors are left alone (ST only), otherwise they are
        checked that they do point to the system ROM. Memory will not be
        cleared when the computer is reset (Amiga only).

/M      The drive motor is left on after checking for the key disk. Use
        this option if the same drive as the one containing the key disk is
        to be used soon after the protection code is called.  This option
        is ignored if the /E option is used.

/D      A binary file is created which can be used to read the serial
        number of a key disk. Only specify the output file in the command.
        An input file is not required.  This option creates a relocatable
        binary file which can be included into the source file of a program
        so that it may check the validity of the key disk and return its
        serial number. The code produced is directly equivalent to an
        assembled version of KEYDISK.S, although the exact contents and
        size may vary. The entry conditions and results are exactly the
        same. The advantage of using this option is to generate a new
        version of KEYDISK.S which may be customised for your program. The
        following options may be combined with it: /V, /K, /C, /J, /N, and
        /S.

        Example
        -------

        PROTECT /D /K 5 /J $10000 /N $100 /s $2700 keydisk.obj

        This will generate the binary file KEYDISK.OBJ which will be a
        maximum of 5K in length. When it is called a subroutine at address
        $10000 is called from inside the code. The serial number returned
        in D0.l is also written to address $100 and on exit from the code
        the status register is set to $2700.

/F      This will cause a protected program to examine all floppy drives
        for a key disk, starting with the internal drive. The protection
        reads the serial number from the first key disk it finds.

/K <n>  This specifies the maximum length of encryption code in K bytes
        that is to be added to the input file. The minimum length is 3K.
        The only limit to the length is that there is sufficient disk and
        memory space to contain the protected program. The effect of the
        execution time on encryption length is negligible. It is
        recommended to use as much encryption as will allow.

/L <n>  This specifies the length of the input file in K bytes that is to
        be encrypted. This option is provided for excessively large
        programs which take longer to decrypt. Decryption takes
        approximately one second for every 10K.  Encrypting the first 50K
        of a large program will normally be sufficient.

/A <n>  This specifies the address to which a binary file should be copied
        to before it is called. The protection will handle positive and
        negative relocation addresses relative to the files load address
        providing it does not cross the memory used by the supervisor
        stack. If no relocation address is specified the encrypted code
        will be copied down to the address the protected file was loaded
        into memory.

/X <n>  This specifies the execution address of the binary file relative to
        the relocation address. If no execution address is specified
        execution of the binary file starts at the first instruction of the
        program.

/C <n>  This specifies the length of code in K bytes from the end of the
        file that is to be set to zero. The area of free memory created
        when the program is copied down, which will contain a part of the
        unencrypted program, and will be equal in size to the decryption
        code, will also be set to zero. Use this option if you want to be
        sure that the memory above the program is clean before using it.
        Any unwanted monitor program would be erased by such action.

/J <n> This specifies the address of a subroutine which is resident in
       memory when the protected program is run. The subroutine is called
       from supervisor mode and must preserve all registers. Interrupts
       will be disabled.

/N <n> This specifies an address to write the serial number of the key disk
       to.  When the main program has been decrypted it could check that
       this address does contain the right number.

/S <n> This specifies a value the processor status register is to be
       initialised with on entry to the decrypted program.

/P <n> This protects the executable code in a key disks boot sector. <n>
       specifies the first unused sector on the key disk or the first
       unused sector of a block sufficient in size to contain the encrypted
       code. The operation of this option is as follows:

       a) the unprotected boot sector is read from the disk and encrypted
          to produce an encrypted file.

       b) the encrypted file is written to the disk starting at the sector
          specified by <n>.

       c) a new boot sector is created and is written over the old one.
          When the disk is autobooted the new boot code will load into
          memory the encrypted file and run the original boot code.

/G <n> This specifies the serial number of the key disk which is to be used
       when the input file is protected. The serial number would normally
       be found by reading it from the key disk in one of the floppy
       drives.  This option can be used if a protected file is to be
       generated without having a key disk available.

/H <n> This specifies the screen frequency at which a program must run at.
       <n> represents the screen frequency in Hertz. Specify 50 Hertz if a
       program should only run on PAL computers and likewise specify 60
       Hertz if a program should only run on NTSC computers.


SERIALNO
--------

This program validates the signature on a key disk and displays its serial
number.  The key disk may be inserted into any floppy drive.


DISKERR
-------

This program validates the sectors on a key disk. Any errors on the disk
will be reported. Use this program on the key disk after the very last
write operation has been made to the disk.


MAKEBOOT <start_sector> <no._of_sectors> <drive_no.>
----------------------------------------------------

This program creates an executable program in the disks boot sector. When
the disk is autobooted this program will load into memory the number of
sectors specified by <no._of_sectors> starting from the sector offset
specified by <start_sector>. The program will then jump to the address the
sectors were loaded to. It is the responsibility of the programmer to
ensure that the program does actually start at the specified sector and is
the correct number of sectors in length. The program loaded from disk must
be position independent and have its execution address as the first
instruction of the program. See SAVEFILE below in order to save a file to a
specified sector. <drive_no.> is the drive no. the boot sector is to be
created on.


SAVEFILE <filename> <start_sector> <drive_no.>
----------------------------------------------

This program saves the binary file specified by <filename> starting from
the sector number specified by <start_sector> onto a disk in the drive
specified by <drive_no.>. Before the file is written the number of sectors
to be written and the start sector number and last sector number to be
written to will be displayed on the screen, with the option to abort.


LOADFILE <filename> <start_sector> <no._of_sectors> <drive_no.>
---------------------------------------------------------------

This program loads the sectors specified in the command into memory and
saves them to the file specified as <filename>. <start_sector> is the first
sector to be loaded into memory and <no._of_sectors> is the number of
sectors to be read from disk. <drive_no.> is the drive number the sectors
are to be read from.


COMPACT [options] <infile> <outfile>
------------------------------------

This program can be used to compact an executable DOS file, a binary file
or a text/graphic file. The amount of compaction that can be achieved will
vary on the type of data being compacted but on average will be around 50%.
The method of compression used is run length encoding followed by Huffman
encoding. After the file has been compacted the length of the compacted
file in bytes and the amount of compaction that has been achieved is 
displayed followed by the option to save the output file. The default
compaction options are to compact an executable Dos file and to add
decompaction code to the start of the output file.

[options]

/b     .. the input file is binary, ie 68000 binary code, text or graphic
          data.

/c     .. output only the compacted data, do not add decompaction code to
          the output file.

/d     .. output decompaction code only. No input file is required. The
          output file created is executable binary. To decompact a file
          compacted with the /c option the decompaction code should be
          called with a0.l pointing to the address of the compacted data.


