* GLOBAL <name> - define a global label.

global: macro

	ifeq nargs-2
		\2
	endc
	xdef \1

\1:

	endm

* INC <param>	- increment paramater.

inc: macro

	addq.\0 #1,\1

	endm

* DEC <param>	- decrement parameter.

dec: macro

	subq.\0 #1,\1

	endm

* PUSH <reg>	- push register on stack.

push: macro

	move.\0 \1,-(sp)

	endm

* POP <reg> 	- pop register from stack

pop: macro

	move.\0 (sp)+,\1

	endm

* DZ <string>	- define zero terminated string

dz: macro

	dc.b '\1',0

	endm

* EVEN			- Force even address

even: macro

	ds 0

	endm

* LOOP			- Start of loop

loop: macro

	ifeq nargs-3
		iflt \3-128
			moveq #\3-1,\2
		endc
		ifge \3-128
			move #\3-1,\2
		endc
	endc
	ifeq nargs-2
		iflt \2-128
			moveq #\2-1,d7
		endc
		ifge \2-128
			move #\2-1,d7
		endc
	endc

loop_\1: set *

	endm

* NEXT			- End of loop

next: macro

	ifeq nargs-2
		dbra \2,loop_\1
	endc
	ifeq nargs-1
		dbra d7,loop_\1
	endc

	endm

* TRAP_CALL - Execute trap and unstack.

trap_call: macro

	move #\1,-(sp)
	trap \3
	ifeq \2
		exitm
	endc
	iflt \2-9
		addq.l #\2,sp
	endc
	ifge \2-9
		lea \2(sp),sp
	endc

	endm

* BDOS			- Execute BDOS function.

bdos: macro

	trap_call \1,\2,#1

	endm

* BIOS - Execute bios function.

bios: macro

	trap_call \1,\2,#13

	endm

* EXT_BIOS - Execute extended bios function.

ext_bios: macro

	trap_call \1,\2,#14

	endm

* FLASH - Flash border

flash: macro

	repeat
		inc palette
	endr

	endm

* LET			- Let a variable equal a constant.

let: macro

	move.\0 #\1,\2(a6)

	endm

* SUBR			- Define start of subroutine.

subr: macro

	ifnc '\2',''
		xdef \1
	endc

\1 proc

	endm

* SAVE_ALL		- Save all registers on stack

save_all: macro

	movem.l d0-d7/a0-a6,-(sp)

	endm

* RESTORE_ALL	- Restore all registers from stack

restore_all: macro

	movem.l (sp)+,d0-d7/a0-a6

	endm

* SEC - Set carry flag.

sec: macro

	or #1<<carry,ccr

	endm

* CLC - Clear carry flag.

clc: macro

	and #(1<<carry)^-1,ccr

	endm

* SFX - Trigger sound effect.

sfx: macro

	move #sfx_\1,d0
	jsr fx

	endm

* MODULE - Define module and RTS.

module: macro

	section 0

return: set *

	rts

	endm

* RET - Return on condition.

ret: macro

	ifeq nargs
		return: set *
		rts
		exitm
	endc
	ifc '\1','return'
		ret
		exitm
	endc
	b\1 return

	endm

* CALL - Jump to subroutine (with condition).

call: macro

	if <\1> then.s
		jsr \2
	endi

	endm

* HCLR - Clear high word of register.

hclr: macro

	swap \1
	clr \1
	swap \1

	endm

* JP <cond>,addr - Jump on condition.

jp: macro

	if <\1> then.s
		jmp \2
	endi

	endm

	list
	opt mex

* VARS - Declare start of variables.

vars: macro

	offset \1_vars

	endm

* END_VARS - Declare end of variables.

end_vars: macro

	xdef \1_used

\1_used: equ *-\1_vars

	endm

* ABS - Make parameter absolute.

abs: macro

	tst.\0 \1
	if <mi> then.s
		neg.\0 \1
	endi

	endm

* RS - Reserve space.

rs: macro

	ds.\0 \1
	ds 0

	endm

* ACTION - Mouse action entry

action: macro

	dc.w \1,\2,\3,\4,\5
	ifeq \6
		dc.l \7
		dc.l \7
	endc
	ifne \6
		dc.l s_\7
		dc.l d_\7
	endc

	endm
