* @@@@@@@	 @@ 	@@@@   @@  @@ @@   @@	 @@ 	@@@@
*  @@	@	@@@@   @@  @@  @@  @@ @@@ @@@	@@@@   @@  @@
*  @@ @    @@  @@  @@	   @@  @@ @@@@@@@  @@  @@ @@
*  @@@@    @@  @@	@@@@	@@@@  @@@@@@@  @@  @@ @@
*  @@ @    @@@@@@	   @@	 @@   @@ @ @@  @@@@@@ @@
*  @@	@  @@  @@  @@  @@	 @@   @@   @@  @@  @@  @@  @@
* @@@@@@@  @@  @@	@@@@	@@@@  @@   @@  @@  @@	@@@@

* Atari ST HiSoft Devpac EASYMAC implementation.
* Version 1.01 12th September 1988 Copyright (c) 1988 Mr. Micro Ltd.

* Converted to Atari ST by Rob Nicholson with help from John White.
* Originally written for Z80ASM under CP/M by Rob Nicholson.

* Modification history:

*		V1.0	01/06/88		Rob Nicholson

*		Original version of EASYMAC for the Atari ST.

*		V1.01	12/09/88		Rob Nicholson

*		BHS and BLO replaced by BCC and BCS respectively.

eq equ 0
ne equ 1
gt equ 2
le equ 3
ge equ 4
lt equ 5
hi equ 6
ls equ 7
hs equ 8
lo equ 9
vc equ 10
vs equ 11
pl equ 12
mi equ 13
cc equ hs
cs equ lo
ra equ 16

_sp set 0
_if set 0
_lp set 0
_bk set 0

; CREATE prefix,value,string,suffix

_cr macro

	ifeq \2
		\1\3\4
		mexit
	endc
	_dg: set \2&7
	_vl: set \2>>4
	ifeq _dg-0
		_cr <\1>,_vl,0\3,<\4>
		mexit
	endc
	ifeq _dg-1
		_cr <\1>,_vl,1\3,<\4>
		mexit
	endc
	ifeq _dg-2
		_cr <\1>,_vl,2\3,<\4>
		mexit
	endc
	ifeq _dg-3
		_cr <\1>,_vl,3\3,<\4>
		mexit
	endc
	ifeq _dg-4
		_cr <\1>,_vl,4\3,<\4>
		mexit
	endc
	ifeq _dg-5
		_cr <\1>,_vl,5\3,<\4>
		mexit
	endc
	ifeq _dg-6
		_cr <\1>,_vl,6\3,<\4>
		mexit
	endc
	ifeq _dg-7
		_cr <\1>,_vl,7\3,<\4>
		mexit
	endc

	endm

; BRANCH cond,label,type,range

_br macro

	ifeq \1-eq
		_cr <beq\4 \3>,\2
		mexit
	endc
	ifeq \1-ne
		_cr <bne\4 \3>,\2
		mexit
	endc
	ifeq \1-gt
		_cr <bgt\4 \3>,\2
		mexit
	endc
	ifeq \1-le
		_cr <ble\4 \3>,\2
		mexit
	endc
	ifeq \1-ge
		_cr <bge\4 \3>,\2
		mexit
	endc
	ifeq \1-lt
		_cr <blt\4 \3>,\2
		mexit
	endc
	ifeq \1-hi
		_cr <bhi\4 \3>,\2
		mexit
	endc
	ifeq \1-ls
		_cr <bls\4 \3>,\2
		mexit
	endc
	ifeq \1-hs
		_cr <bcc\4 \3>,\2
		mexit
	endc
	ifeq \1-lo
		_cr <bcs\4 \3>,\2
		mexit
	endc
	ifeq \1-vc
		_cr <bvc\4 \3>,\2
		mexit
	endc
	ifeq \1-vs
		_cr <bvs\4 \3>,\2
		mexit
	endc
	ifeq \1-pl
		_cr <bpl\4 \3>,\2
		mexit
	endc
	ifeq \1-mi
		_cr <bmi\4 \3>,\2
		mexit
	endc
	ifeq \1-cc
		_cr <bcc\4 \3>,\2
		mexit
	endc
	ifeq \1-cs
		_cr <bcs\4 \3>,\2
		mexit
	endc
	ifeq \1-ra
		_cr <bra\4 \3>,\2
		mexit
	endc

	endm

; LABEL prefix,number

_lb macro

	_cr \1,\2,,:

	endm

; PUSH value

_push macro

	_sp: set _sp+1
	_cr _stack,_sp,,<: set \1>

	endm

; POP symbol

_pop macro

	_cr <\1: set _stack>,_sp
	_sp: set _sp-1

	endm

; IF.s cond

if macro

	_if: set _if+1						; generate a label
	_push _if							; and stack it
	ifc '\0','s'						; generate branch
		_br \1^1,_if,IF,.s
		mexit
	endc
	_br \1^1,_if,IF

	endm

; ENDIF

endif macro

	_pop _nm							; fetch label
	_lb IF,_nm

	endm

; ELSE.s

else macro

	_pop _nm							; fetch IF label
	_if: set _if+1						; generate a branch to ENDIF
	ifc '\0','s'
		_cr <bra.s IF>,_if
	endc
	ifnc '\0','s'
		_cr <bra IF>,_if
	endc
	_lb IF,_nm
	_push _if							; stack label

	endm

; LOOP reg,value - start of loop.

loop macro

		ifc '\1',';'
				loop
				mexit
		endc
	ifeq narg-1
		loop d7,\1
		mexit
	endc
	ifeq narg-2
		iflt \2-128
			moveq #\2-1,\1
		endc
		ifge \2-128
			move #\2-1,\1
		endc
	endc
	_bk: set _bk+1						; create break label
	_push _bk
	_lp: set _lp+1						; create loop label
	_push _lp
	_lb LP,_lp							; generate loop label

	endm

; NEXT reg

next: macro

		ifc '\1',';'
				next
				mexit
		endc
	ifeq narg
		next d7
		mexit
	endc
	_pop _nm							; generate branch back
	_cr <dbra \1,LP>,_nm
	_pop _nm							; generate break label
	_lb BK,_nm

	endm

; REPEAT

repeat macro

	loop

	endm

; UNTIL cond

until macro

	_pop _nm							; generate branch back to start
	ifc '\0','s'
		_br \1^1,_nm,LP,.s
	endc
	ifnc '\0','s'
		_br \1^1,_nm,LP
	endc
	_pop _nm							; generate break label
	_lb BK,_nm

	endm

; AGAIN

again macro

	_pop _nm							; generate branch back to start
	ifc '\0','s'
		_cr <bra.s LP>,_nm
	endc
	ifnc '\0','s'
		_cr <bra LP>,_nm
	endc
	_pop _nm							; generate break label
	_lb BK,_nm

	endm

; BREAK cond

break macro

	ifeq narg
		break ra
		mexit
	endc
	_cr <_nm: set _stack>,(_sp-1)		; fetch break label
	ifc '\0','s'
		_br \1,_nm,BK,.s				; generate break
		mexit
	endc
	_br \1,_nm,BK

	endm

* GLOBAL name

global: macro

	ifeq narg-2
		\2
	endc
	xdef \1

\1:

	endm

* INC param

inc: macro

	addq.\0 #1,\1

	endm

* DEC param

dec: macro

	subq.\0 #1,\1

	endm

* PUSH reg

push: macro

	move.\0 \1,-(sp)

	endm

* POP reg

pop: macro

	move.\0 (sp)+,\1

	endm

* SUBR name

subr: macro

\1:

	endm

* SAVE_ALL		- Save all registers on stack

save_all: macro

	movem.l d0-d7/a0-a6,-(sp)

	endm

* RESTORE_ALL	- Restore all registers from stack

restore_all: macro

	movem.l (sp)+,d0-d7/a0-a6

	endm

* SEC - Set carry flag.

sec: macro

	or #1<<carry,ccr

	endm

* CLC - Clear carry flag.

clc: macro

	and #(1<<carry)^-1,ccr

	endm

* RET - Return on condition.

ret: macro

	ifeq narg
		return: set *
		rts
		mexit
	endc
	ifc '\1','return'
		ret
		mexit
	endc
	b\1 return

	endm

* CALL - Jump to subroutine (with condition).

call: macro

	if <\1> then.s
		bsr \2
	endi

	endm

; HCLR - Clear high word of register.

hclr: macro

	swap \1
	clr \1
	swap \1

	endm
