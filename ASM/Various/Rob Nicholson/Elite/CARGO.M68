*	@@@@	 @@   @@@@@@	@@@@	@@@
*  @@  @@	@@@@   @@  @@  @@  @@  @@ @@
* @@	   @@  @@  @@  @@ @@	  @@   @@
* @@	   @@  @@  @@@@@  @@	  @@   @@
* @@	   @@@@@@  @@ @@  @@  @@@ @@   @@
*  @@  @@  @@  @@  @@  @@  @@  @@  @@ @@
*	@@@@   @@  @@ @@@  @@	@@@@@	@@@

* Routines for the buying and selling of cargo. NOTE - includes the ICONS.M68
* file into the action table (bottom of file).

* Version 1.0 14th July 1988 Copyright (c) 1988 Mr. Micro Ltd.
* Designed and coded by Rob Nicholson.

	include macros
	include bitlist

	xref invert_icon,prepare_text,print_centre,text_colour,find_bitmap,locate
	xref put_bitmap,print_number,block,init_cursor,error_box,print_table,tab
	xref clear_input,hide_cursor,print_string,print_char,restore_cursor,line
	xref input_number,product_list,find_table,str_copy,str_cat,build_number
	xref str_len,set_colour,launch,divide_by_1e5,equip_ship,galactic_chart
	xref local_chart,data,status,disk,find_planet,home_cursor,options
	xref check_docked,build_name,disp_message

* ---- LOCAL CONSTANTS ----

cargo_x:		equ 16					coords of 1st cargo icon
cargo_y:		equ 20
info_y: 		equ 162 				y coord of info line
rip_off:		equ 19					sell rip-off factor
key_left_x: 	equ 48					coords of key pad
key_right_x:	equ 208
key_top_y:		equ 60

* ---- LOCAL VARIABLES ----

	vars cargo

this_cargo: 	ds.w 1					current cargo item #
xc1 			ds.w 1					coords of highlight box
yc1:			ds.w 1
xc2:			ds.w 1
yc2:			ds.w 1
selected:		ds.w 1					flag: cargo item selected
max_cargo:		ds.w 1					maximum cargo item to be sold

	end_vars cargo

* ---- LOCAL MACROS ----

* draw_line x1,y1,x2,y2 - draw line between coords

draw_line: macro

	move \1(a6),d0
	move \2(a6),d1
	move \3(a6),d2
	move \4(a6),d3
	jsr line

	endm

	module cargo


* *****************************************
* **									 **
* ** BUY_CARGO - SELECT BUG CARGO SCREEN **
* **									 **
* *****************************************

* Mouse entry routine for buy cargo screen.

* Entry: None
* Exit:  None

* Regs: ?
* Subr: ?

	subr buy_cargo,global

	jsr check_docked					check we're docked
	moveq #icon_buy,d0					invert icon
	jsr invert_icon
	jsr prepare_text					prepare text screen
	lea text9(pc),a0					print 'Buy Cargo'
	moveq #title_y,d1
	jsr print_centre
	bsr draw_icons						draw cargo items
	clr selected(a6)					nothing selected
	bsr print_buy_info					print buy info line
	lea buy_cargo_action(pc),a0 		initialise mouse cursor
	jsr init_cursor

	ret


* *******************************************
* **									   **
* ** MARKET_PRICES - DISPLAY MARKET PRICES **
* **									   **
* *******************************************

* Displays the market prices screen.

* Entry: None
* Exit:  None

* Regs: ?
* Subr: ?

	subr market_prices,global

	moveq #icon_prices,d0				invert icon
	jsr invert_icon
	jsr prepare_text					prepare text screen
	move current(a6),d0 				find name of current planet
	jsr build_name
	lea planet_name(a6),a0				build 'xxx Market Prices'
	lea pad(a6),a1
	jsr str_copy
	lea pad(a6),a0
	lea text19(pc),a1
	jsr str_cat
	lea pad(a6),a0						print heading
	moveq #title_y,d1
	jsr print_centre
	bsr draw_icons						draw cargo items
	clr selected(a6)					nothing selected
	lea prices_action_table(pc),a0		initialise mouse cursor
	jsr init_cursor

	ret


* ***********************************
* **							   **
* ** DRAW_ICONS - DRAW CARGO ICONS **
* **							   **
* ***********************************

* Draws all the cargo icons for the buy/market prices screen.

* Entry: None
* Exit:  None

* Regs: ?
* Subr: ?

	subr draw_icons

	moveq #orange,d0					set colour of price
	moveq #black,d1
	jsr text_colour
	clr this_cargo(a6)					start with item #0
	repeat
		move this_cargo(a6),d0			find bit map
		add #bit_cargo,d0
		jsr find_bitmap
		bsr icon_coords 				fetch icon coords
		bsr put_bitmap					put bit map on screen
		bsr icon_coords 				locate cursor for price
		lsr #3,d0
		add #4*8,d1
		jsr locate
		bsr find_buy					find product record
		move price(a5),d0				print price
		asl #2,d0
		ext.l d0
		move #$8085,d1
		jsr print_number
		move quantity(a5),d4			any available ?
		if <ne> then.s					yes
			mulu #31,d4 				calculate height of the bar
			divu #63,d4
			inc d4
			bsr icon_coords 			calculate position of the bar
			add #5*8,d0
			add #32,d1
			sub d4,d1
			clr d2						draw the bar
			moveq #3,d3
			moveq #pulse,d5
			jsr block
		 endi
		inc this_cargo(a6)				next item of cargo
		cmp #18,this_cargo(a6)
	until <eq>

	ret 								return


* *******************************************
* **									   **
* ** SELL_CARGO - SELECT SELL CARGO SCREEN **
* **									   **
* *******************************************

* Entry point for sell cargo screen.

* Entry: None
* Exit:  None

* Regs: ?
* Subr: ?

	subr sell_cargo,global

	jsr check_docked					only when docked
	moveq #icon_sell,d0 				invert icon
	jsr invert_icon
	lea hold(a6),a0 					any cargo to sell ?
	moveq #0,d0
	loop 1,max_products
		or.l (a0)+,d0
	next 1
	if <eq> then.s						no
		lea text14(pc),a0				print error message
		jsr error_box
		moveq #-1,d0					restore icon and exit
		jmp invert_icon
	endi
	jsr prepare_text					prepare text screen
	lea text13(pc),a0					print 'Sell Cargo'
	moveq #title_y,d1
	jsr print_centre
	bsr draw_cargo						draw cargo screen
	lea sell_cargo_action(pc),a0		initialise mouse cursor
	jsr init_cursor

	ret


* *******************************************
* **									   **
* ** INVENTORY - DISPLAY INVENTORY OF HOLD **
* **									   **
* *******************************************

* Display inventory of cargo hold.

* Entry: None
* Exit:  None

* Regs: ?
* Subr: ?

	subr inventory,global

	tst cockpit_on(a6)					cockpit displayed ?
	if <eq> then.s						no
		moveq #icon_inventory,d0		invert icon
		jsr invert_icon
	endi
	lea hold(a6),a0 					any cargo in hold ?
	moveq #0,d0
	loop 1,max_products
		or.l (a0)+,d0
	next 1
	if <eq> then.s						no
		tst cockpit_on(a6)				cockpit displayed ?
		if <eq> then.s					no
			lea text20(pc),a0			print error message
			jsr error_box
			moveq #-1,d0				restore icon
			jmp invert_icon
		endi
		lea text20(pc),a0				display message in cockpit
		jmp disp_message				(and return)
	endi
	jsr prepare_text					prepare text screen
	lea text21(pc),a0					print 'Inventory'
	moveq #title_y,d1
	jsr print_centre
	bsr draw_cargo						draw cargo screen
	lea inventory_action_table(pc),a0	initialise mouse cursor
	jsr init_cursor

	ret


* *******************************************
* **									   **
* ** DRAW_CARGO - DRAW ITEMS IN CARGO HOLD **
* **									   **
* *******************************************

* Draws all the items in the cargo hold.

* Entry: None
* Exit:  None

* Regs: ?
* Subr: ?

	subr draw_cargo

	bsr print_buy_info					print buy info line
	moveq #orange,d0					print in orange
	moveq #trans,d1
	jsr text_colour
	clr this_cargo(a6)					start at top left
	lea hold(a6),a5 					scan through cargo hold
	loop 1,max_products
		tst.l (a5)						carrying this item ?
		if <ne> then.s					yes
			push.w d7					draw cargo icon
			push.l a5
			moveq #max_products-1,d0
			sub d7,d0
			push d0
			add #bit_cargo,d0
			jsr find_bitmap
			bsr icon_coords
			jsr put_bitmap
			cmp #18,(sp)+				refugees or documents ?
			if <lo> then.s				no
				bsr icon_coords 		position cursor for quantity
				lsr #3,d0
				inc d0
				add #4*8,d1
				jsr locate
				move.l (sp),a5			fetch quantity
				move.l (a5),d0
				moveq #2,d1 			divide down to < 1000
				while.l d0 <hs> #1000 do
					divu #1000,d0
					hclr d0
					dec d1
				endw
				push d1 				print quantity
				clr d1
				jsr print_number
				pop d0					print units
				lea units_table(pc),a0
				jsr print_table
			endi
			pop.l a5					next item
			inc this_cargo(a6)
			pop d7
		endi
		addq.l #4,a5					next item of cargo
	next 1
	move this_cargo(a6),max_cargo(a6)	save maximum cargo #
	if <eq> then.s						no cargo
		lea text17(pc),a0				print "Cargo Hold Is Empty"
		moveq #10*8,d1
		jsr print_centre
	endi
	clr selected(a6)					nothing selected

	rts 								return


* *************************************************
* **											 **
* ** ICON_COORDS - RETURN COORDS OF CURRENT ICON **
* **											 **
* *************************************************

* Returns the x and y coords of the current cargo icon.

* Entry: THIS_CARGO = current cargo item #
* Exit:  (D0,D1)	= screen coords

* Regs: ?
* Subr: ?

	subr icon_coords

	move this_cargo(a6),d1				index into coords table
	asl #2,d1
	lea cargo_coords(pc),a1
	move 0(a1,d1),d0					fetch x coord
	move 2(a1,d1),d1					fetch y coord

	ret 								return


* *********************************
* **							 **
* ** CLICK_BUY - SELECT BUY ICON **
* **							 **
* *********************************

* This routine is called everytime the buy icon is clicked (single or double)

	subr buy_icon

	moveq #icon_buy,d0					invert icon
	jsr invert_icon
	tst selected(a6)					cargo selected ?
	if <ne> then.s						yes
		move this_cargo(a6),d0			buy it
		bsr d_buy
	endi

	ret


* ***********************************
* **							   **
* ** CLICK_SELL - SELECT SELL ICON **
* **							   **
* ***********************************

* This routine is called everytime the sell icon is clicked (single/double).
* buy cargo screen

	subr sell_icon

	moveq #icon_sell,d0 				invert icon
	jsr invert_icon
	tst selected(a6)					cargo selected ?
	if <ne> then.s						yes
		move this_cargo(a6),d0			buy it
		bsr d_sell
	endi

	ret


* **********************************************
* **										  **
* ** S_BUY - CLICK ON BUY CARGO ICON (SINGLE) **
* **										  **
* **********************************************

* Action routine for single click on cargo item on the buy screen. If the buy
* icon has been selected, then an attempt is made to buy the item using the
* double click routine. If the icon isn't selected, then information about
* the cargo item is displayed.

* Entry: D0 = cargo item #
* Exit:  None

* Regs:  ?
* Subr:  ?

	subr s_buy

	tst icon_inverted(a6)				buy item ?
	if <ne> then.s						yes
		bsr d_buy						attempt to buy it
	else.s
		bsr display_buy 				display information for buy
	endi

	ret 								return


* **********************************************
* **										  **
* ** D_BUY - CLICK ON BUY CARGO ITEM (DOUBLE) **
* **										  **
* **********************************************

* Action routine for double click on cargo item on buy screen. Attempts to
* buy the selected cargo item.

* Entry: THIS_CARGO = cargo item #
* Exit:  None

* Regs: ?
* Subr: ?

	subr d_buy

	bsr draw_highlight					draw highlight around cargo item

buy_again:

	bsr find_buy						find product record
	tst quantity(a5)					any available ?
	if <eq> then.s						no
		lea text4(pc),a0				print error message
		jsr error_box
		bra no_select					remove selection
	endi
	jsr clear_input 					clear input line
	jsr hide_cursor 					print prompt
	lea text5(pc),a0
	jsr print_string
	move quantity(a5),d0
	clr d1
	jsr print_number
	move units(a5),d0
	lea units_table(pc),a0
	jsr print_table
	move.b #')',d0
	jsr print_char
	jsr restore_cursor
	bsr icon_coords 					decide where to put the keypad
	if d0 <lo> #160 then.s
		move #key_right_x,d3
	else.s
		move #key_left_x,d3
	endi
	moveq #key_top_y,d4 				input amount to buy
	jsr input_number
	cmp #27,d0							ESC pressed ?
	beq no_select						yes, clear selection and exit
	tst d0								just return pressed ?
	beq no_select						yes, clear selection and exit
	tst d1								zero type ?
	beq no_select						yes, clear selection and exit
	if d1 <hi> quantity(a5) then.s		not enough goods
		lea text6(pc),a0				print message
		jsr error_box
		bra buy_again
	endi
	move price(a5),d0					fetch price and multiply by the
	asl #2,d0							number wanted
	mulu d1,d0
	move.l cash(a6),d2					subtract from cash
	sub.l d0,d2
	if <cs> then.s						not enough money
		lea text7(pc),a0				print message
		jsr error_box
		bra buy_again
	endi
	bsr cargo_spare 					calculate free cargo space
	move units(a5),d0					determine size of each unit
	bsr get_unit
	bsr reduce_hold 					enough room in cargo hold ?
	tst.l d3
	if <mi> then.s						no
		lea text8(pc),a0				No room in the inn
		jsr error_box
		bra buy_again
	endi
	move.l d2,cash(a6)					update cash left
	move this_cargo(a6),d0				add to cargo hold
	asl #2,d0
	lea hold(a6),a0
	move d1,d7
	dec d7
	loop 1
		add.l d4,(a0,d0)
	next 1
	sub d1,quantity(a5) 				remove from planet array
	bsr illegal 						check for illegal goods
	bsr icon_coords 					erase the bar
	add #5*8,d0
	clr d2
	moveq #3,d3
	moveq #32,d4
	moveq #black,d5
	jsr block
	move quantity(a5),d4				any available ?
	if <ne> then.s						yes
		mulu #31,d4 					calculate height of the bar
		divu #63,d4
		inc d4
		bsr icon_coords 				calculate position of the bar
		add #5*8,d0
		add #32,d1
		sub d4,d1
		clr d2							draw the bar
		move #3,d3
		move #pulse,d5
		jsr block
	endi
	bsr print_buy_info					print cash and cargo hold
	bra no_select						clear selection


* ************************************************
* **											**
* ** S_SELL - CLICK ON SELL CARGO ICON (SINGLE) **
* **											**
* ************************************************

* Action routine for single click on cargo item on the sell screen.

* Entry: D0 = position on screen
* Exit:  None

* Regs:  ?
* Subr:  ?

	subr s_sell

	cmp max_cargo(a6),d0				icon not used ?
	bhs no_select						yes, just de-select
	tst icon_inverted(a6)				buy item ?
	if <ne> then.s						yes
		bsr d_sell						sell it
	else.s
		bsr display_sell				display information for buy
	endi

	ret 								return


* ************************************************
* **											**
* ** D_SELL - CLICK ON SELL CARGO ITEM (DOUBLE) **
* **											**
* ************************************************

* Action routine for double click on cargo item on sell screen.

* Entry: D0 = position on screen
* Exit:  None

* Regs: ?
* Subr: ?

	subr d_sell

	cmp max_cargo(a6),d0				icon not used ?
	bhs no_select						yes, just de-select
	bsr draw_highlight					highlight icon
	bsr find_sell						find products and cargo records
	cmp #18,d1							refugees or documents ?
	if <hs> then.s						yes
		lea text18(pc),a0				print error message
		jsr error_box
		bra no_select
	endi
	move units(a5),d0					find size of each unit
	jsr get_unit
	move price(a5),d1					calculate how much it's worth
	asl #2,d1
	mulu #rip_off,d1
	divu #20,d1
	ext.l d1
	clr.l d0
	move.l (a4),d2
	repeat
		add.l d1,d0
		sub.l d4,d2
	until <ls>
	add.l d0,cash(a6)					add to cash
	clr.l (a4)							remove from hold
	jsr prepare_text					prepare text screen
	lea text13(pc),a0					print 'Sell Cargo'
	moveq #title_y,d1
	jsr print_centre
	bsr draw_cargo						draw cargo screen
	st csr_on(a6)						turn cursor back on

	rts


* *******************************************************
* **												   **
* ** DRAW_HIGHLIGHT - DRAW HIGHLIGHT AROUND CARGO ITEM **
* **												   **
* *******************************************************

* Draws outline around current cargo item.

* Entry: D0 = cargo item #
* Exit:  None

* Regs: ?
* Subr: ?

	subr draw_highlight

	push d0 							cargo item already selected ?
	tst selected(a6)
	if <ne> then.s						yes
		moveq #black,d0 				remove highlight
		bsr highlight
	endi
	move (sp)+,this_cargo(a6)			highlight selected item
	moveq #white,d0
	bsr highlight
	st selected(a6) 					item selected

	rts 								return


* ***********************************************
* **										   **
* ** DISPLAY_BUY - DISPLAY INFORMATION FOR BUY **
* **										   **
* ***********************************************

* Displays the description, and quantities for the selected cargo item.

* Entry: None
* Exit:  None

* Regs: ?
* Subr: ?

	subr display_buy

	bsr draw_highlight					draw highlight around cargo item
	jsr clear_input 					clear input line
	move this_cargo(a6),d0				find description of item
	lea product_list,a0
	jsr find_table
	lea pad(a6),a1						copy into pad buffer
	jsr str_copy
	lea pad(a6),a0						add " - "
	lea text1(pc),a1
	jsr str_cat
	bsr find_buy						find product record
	dec a0								any available ?
	move quantity(a5),d0
	if <ne> then.s						yes
		clr d1
		jsr build_number
		move units(a5),d0				add units (e.g. kg)
		lea units_table(pc),a0
		jsr find_table
		move.l a0,a1
	else.s
		lea text3(pc),a1				add "None"
	endi
	lea pad(a6),a0
	jsr str_cat
	lea pad(a6),a0						add " available"
	lea text2(pc),a1
	jsr str_cat
	lea pad(a6),a0						print message (centered)
	move #prompt_y,d1
	jmp print_centre


* *************************************************
* **											 **
* ** DISPLAY_SELL - DISPLAY INFORMATION FOR SELL **
* **											 **
* *************************************************

* Displays the description and worth of current item

* Entry: None
* Exit:  None

* Regs: ?
* Subr: ?

	subr display_sell

	cmp max_cargo(a6),d0				valid box ?
	bhs no_select						no
	bsr draw_highlight					draw highlight around cargo item
	jsr clear_input 					clear input line
	bsr find_sell						find description of item
	push d1
	move d1,d0
	lea product_list,a0
	jsr find_table
	lea pad(a6),a1						copy into pad buffer
	jsr str_copy
	cmp #18,(sp)+						special cargo ?
	if <lo> then.s						no
		lea pad(a6),a0					add " - worth "
		lea text15(pc),a1
		jsr str_cat
		move units(a5),d0				find size of each unit
		jsr get_unit
		move price(a5),d1				calculate how much it's worth
		asl #2,d1
		mulu #rip_off,d1
		divu #20,d1
		ext.l d1
		clr.l d0
		move.l (a4),d2
		repeat
			add.l d1,d0
			sub.l d4,d2
		until <ls>
		dec.l a0						add how much it's worth
		move #128,d1
		jsr build_number
		lea pad(a6),a0					add " credits"
		lea text16(pc),a1
		jsr str_cat
	endi
	lea pad(a6),a0						centre text in window
	jsr str_len
	sub #40,d0
	neg d0
	lsr #1,d0
	jsr tab
	lea pad(a6),a0						print message
	jmp print_string


* **************************************
* **								  **
* ** NO_SELECT - REMOVE ANY SELECTION **
* **								  **
* **************************************

* Routine called everytime an area outside other boundaries is selected.

* Entry: None
* Exit:  None

* Regs: ?
* Subr: ?

	subr no_select

	tst selected(a6)					cargo item selected ?
	if <ne> then.s						yes
		moveq #black,d0 				remove highlight
		bsr highlight
		clr selected(a6)				nothing selected
	endi
	jsr clear_input 					clear input window
	moveq #-1,d0						clear any inverted icon
	jmp invert_icon


* ***********************************************
* **										   **
* ** HIGHLIGHT - HIGHLIGHT SELECTED CARGO ITEM **
* **										   **
* ***********************************************

* Highlight (or remove) the selected cargo item.

* Entry: D0 = colour to draw lines
* Exit:  None

* Regs: ?
* Subr: ?

	subr highlight

	jsr set_colour						set line colour
	jsr hide_cursor 					remove cursor
	bsr icon_coords 					calculate coords of box
	move d0,d2
	move d1,d3
	subq #2,d0
	subq #2,d1
	add #44,d2
	add #42,d3
	movem d0-d3,xc1(a6)
	draw_line xc1,yc1,xc2,yc1			top edge
	draw_line xc2,yc1,xc2,yc2			right edge
	draw_line xc2,yc2,xc1,yc2			bottom edge
	draw_line xc1,yc2,xc1,yc1			left edge
	jmp restore_cursor


* *************************************
* **								 **
* ** FIND_BUY - FIND PRODUCTS RECORD **
* **								 **
* *************************************

* Returns a pointer to the relevant record in the products list.

* Entry: THIS_CARGO = current cargo item #
* Exit:  A5 		= ptr: cargo record

* Regs: ?
* Subr: ?

	subr find_buy

	move this_cargo(a6),d0				index into array
	mulu #product_len,d0
	lea products(a6),a5
	lea (a5,d0),a5

	ret 								return


* ************************************************
* **											**
* ** FIND_SELL - FIND CARGO AND PRODUCTS RECORD **
* **											**
* ************************************************

* Returns pointers to the relevant product and cargo hold records.

* Entry: THIS_CARGO = position of screen
* Exit:  A4 = ptr: cargo hold record
*		 A5 = ptr: products record
*		 D1 = index #

* Regs: D0-D2/A4/A5 corrupt.
* Subr: None

	subr find_sell

	lea hold(a6),a4 					search for cargo hold record
	moveq #-1,d0
	moveq #-1,d1
	repeat
		repeat
			inc d1
			tst.l (a4)+
		until <ne>
		inc d0
	until d0 <eq> this_cargo(a6)
	subq.l #4,a4
	move d1,d2							index into products array
	mulu #product_len,d2
	lea products(a6),a5
	lea (a5,d2),a5

	ret 								return


* ******************************************
* **									  **
* ** PRINT_BUY_INFO - PRINT BUY INFO LINE **
* **									  **
* ******************************************

* Prints the line of info on the buy screen (cash and cargo hold spare)

* Entry: None
* Exit:  None

* Regs: ?
* Subr: ?

	subr print_buy_info

	clr d0								clear info line
	move #info_y,d1
	clr d2
	move #320,d3
	move #8,d4
	move #black,d5
	jsr block
	lea text10(pc),a0					copy "Cash: " into buffer
	lea pad(a6),a1
	jsr str_copy
	exg a0,a1							add cash left
	dec.l a0
	move.l cash(a6),d0
	move #128,d1
	jsr build_number
	lea pad(a6),a0						add " credits, Cargo hold: "
	lea text11(pc),a1
	jsr str_cat
	push.l a0
	jsr cargo_spare 					add amount of cargo space left
	jsr divide_by_1e5
	pop.l a0
	dec.l a0
	move #128,d1
	jsr build_number
	lea pad(a6),a0						add "t spare"
	lea text12(pc),a1
	jsr str_cat
	lea pad(a6),a0						print line of text (centered)
	move #info_y,d1
	jmp print_centre


* *****************************************
* **									 **
* ** GET_UNIT - GET POINTER TO UNIT SIZE **
* **									 **
* *****************************************

* Action: Returns a pointer to the size of one unit.

* Entry: D0.W = Unit: 0 = tonnes, 1 = kg, 2 = grammes
* Exits: D4.L = unit size

* Regr: D0 and D4 corrupt.
* Subr: None

	subr get_unit,global

	move.l #1000000,d4					assume tonnes
	tst d0
	ret <eq>							correct
	move.l #1000,d4 					asumme kilogrammes
	dec d0
	ret <eq>							correct
	move.l #1,d4						must be grammes

	ret


* ****************************************
* **									**
* ** ILLEGAL - CHECK FOR ILLEGAL GOODS	**
* **									**
* ****************************************

* Increase police record if illegal goods have just been bought.

* Entry: D1 = Amount of goods purchased
*		 A5 = Pointer to relevant PRODUCTS entry
* Exits: None

* Regr:   ?
* Subr:   FX

	subr illegal,global

	move d1,d0							multiply amount by illegal factor
	mulu naughty(a5),d0
	add.b d0,police_record+1(a6)		Add to police record and clamp at 255
	if <cs> then.s
		move #255,police_record(a6)
	endi

	ret


* ***********************************************
* **										   **
* ** CARGO_SPARE - CALCULATE SPARE CARGO SPACE **
* **										   **
* ***********************************************

* Calculate how much cargo space is spare.

* Entry:  None
* Exits:  D3 = Amount of free cargo space (g)

* Regr:   D3/D7/A0 corrupt.
* Subr:   REDUCE_HOLD

	subr cargo_spare,global

	move.l #20000000,d3 				assume 20t cargo hold
	tst equip+cargo_bay(a6)
	if <ne> then.s
		move.l #35000000,d3 			wrong we have 35t
	endi
	lea hold(a6),a0 					subtract any cargo in the hold
	loop 1,max_products
		sub.l (a0)+,d3
	next 1

	ret


* ************************************************
* **											**
* ** REDUCE_HOLD - REDUCE AMOUNT OF CARGO SPACE **
* **											**
* ************************************************

* Remove space from cargo hold, and even goes minus if there isn't enough room

* Entry:  D1.W = amount wanted, e.g. 45 tonnes or 16 grammes
*		  D3.L = amount of free space in cargo hold (grammes)
*		  D4.L = size of on unit, e.g. 1000 for kilogrammes
* Exits:  D3.L = D3 - D1*D4

* Regr:   D3 and D7 corrupt.
* Subr:   None

	subr reduce_hold,global

	move d1,d7							loop for each item
	dec d7
	loop 1								loop for each item
		sub.l d4,d3 					subtract from cargo space
	next 1

	ret


* ---- LOCAL DATA ----

* Coords of each cargo icon.

cargo_coords:

	dc cargo_x+48*0,cargo_y
	dc cargo_x+48*1,cargo_y
	dc cargo_x+48*2,cargo_y
	dc cargo_x+48*3,cargo_y
	dc cargo_x+48*4,cargo_y
	dc cargo_x+48*5,cargo_y
	dc cargo_x+48*0,cargo_y+48
	dc cargo_x+48*1,cargo_y+48
	dc cargo_x+48*2,cargo_y+48
	dc cargo_x+48*3,cargo_y+48
	dc cargo_x+48*4,cargo_y+48
	dc cargo_x+48*5,cargo_y+48
	dc cargo_x+48*0,cargo_y+96
	dc cargo_x+48*1,cargo_y+96
	dc cargo_x+48*2,cargo_y+96
	dc cargo_x+48*3,cargo_y+96
	dc cargo_x+48*4,cargo_y+96
	dc cargo_x+48*5,cargo_y+96

* Buy cargo mouse action table.

buy_cargo_action:

	action 77,174,97,180,0,0,buy_icon
	action cargo_x,cargo_y,cargo_x+39,cargo_y+39,0,-1,buy
	action cargo_x+48,cargo_y,cargo_x+87,cargo_y+39,1,-1,buy
	action cargo_x+96,cargo_y,cargo_x+135,cargo_y+39,2,-1,buy
	action cargo_x+144,cargo_y,cargo_x+183,cargo_y+39,3,-1,buy
	action cargo_x+192,cargo_y,cargo_x+231,cargo_y+39,4,-1,buy
	action cargo_x+240,cargo_y,cargo_x+279,cargo_y+39,5,-1,buy
	action cargo_x,cargo_y+48,cargo_x+39,cargo_y+87,6,-1,buy
	action cargo_x+48,cargo_y+48,cargo_x+87,cargo_y+87,7,-1,buy
	action cargo_x+96,cargo_y+48,cargo_x+135,cargo_y+87,8,-1,buy
	action cargo_x+144,cargo_y+48,cargo_x+183,cargo_y+87,9,-1,buy
	action cargo_x+192,cargo_y+48,cargo_x+231,cargo_y+87,10,-1,buy
	action cargo_x+240,cargo_y+48,cargo_x+279,cargo_y+87,11,-1,buy
	action cargo_x,cargo_y+96,cargo_x+39,cargo_y+135,12,-1,buy
	action cargo_x+48,cargo_y+96,cargo_x+87,cargo_y+135,13,-1,buy
	action cargo_x+96,cargo_y+96,cargo_x+135,cargo_y+135,14,-1,buy
	action cargo_x+144,cargo_y+96,cargo_x+183,cargo_y+135,15,-1,buy
	action cargo_x+192,cargo_y+96,cargo_x+231,cargo_y+135,16,-1,buy
	action cargo_x+240,cargo_y+96,cargo_x+279,cargo_y+135,17,-1,buy
	include icons.m68
	dc.w -1
	dc.l no_select,no_select

* Sell cargo mouse action table.

sell_cargo_action:

	action 101,174,127,180,0,0,sell_icon
	action cargo_x,cargo_y,cargo_x+39,cargo_y+39,0,-1,sell
	action cargo_x+48,cargo_y,cargo_x+87,cargo_y+39,1,-1,sell
	action cargo_x+96,cargo_y,cargo_x+135,cargo_y+39,2,-1,sell
	action cargo_x+144,cargo_y,cargo_x+183,cargo_y+39,3,-1,sell
	action cargo_x+192,cargo_y,cargo_x+231,cargo_y+39,4,-1,sell
	action cargo_x+240,cargo_y,cargo_x+279,cargo_y+39,5,-1,sell
	action cargo_x,cargo_y+48,cargo_x+39,cargo_y+87,6,-1,sell
	action cargo_x+48,cargo_y+48,cargo_x+87,cargo_y+87,7,-1,sell
	action cargo_x+96,cargo_y+48,cargo_x+135,cargo_y+87,8,-1,sell
	action cargo_x+144,cargo_y+48,cargo_x+183,cargo_y+87,9,-1,sell
	action cargo_x+192,cargo_y+48,cargo_x+231,cargo_y+87,10,-1,sell
	action cargo_x+240,cargo_y+48,cargo_x+279,cargo_y+87,11,-1,sell
	action cargo_x,cargo_y+96,cargo_x+39,cargo_y+135,12,-1,sell
	action cargo_x+48,cargo_y+96,cargo_x+87,cargo_y+135,13,-1,sell
	action cargo_x+96,cargo_y+96,cargo_x+135,cargo_y+135,14,-1,sell
	action cargo_x+144,cargo_y+96,cargo_x+183,cargo_y+135,15,-1,sell
	action cargo_x+192,cargo_y+96,cargo_x+231,cargo_y+135,16,-1,sell
	action cargo_x+240,cargo_y+96,cargo_x+279,cargo_y+135,17,-1,sell
	include icons.m68
	dc.w -1
	dc.l no_select

* Market prices action table.

prices_action_table:

	action cargo_x,cargo_y,cargo_x+39,cargo_y+39,0,0,display_buy
	action cargo_x+48,cargo_y,cargo_x+87,cargo_y+39,1,0,display_buy
	action cargo_x+96,cargo_y,cargo_x+135,cargo_y+39,2,0,display_buy
	action cargo_x+144,cargo_y,cargo_x+183,cargo_y+39,3,0,display_buy
	action cargo_x+192,cargo_y,cargo_x+231,cargo_y+39,4,0,display_buy
	action cargo_x+240,cargo_y,cargo_x+279,cargo_y+39,5,0,display_buy
	action cargo_x,cargo_y+48,cargo_x+39,cargo_y+87,6,0,display_buy
	action cargo_x+48,cargo_y+48,cargo_x+87,cargo_y+87,7,0,display_buy
	action cargo_x+96,cargo_y+48,cargo_x+135,cargo_y+87,8,0,display_buy
	action cargo_x+144,cargo_y+48,cargo_x+183,cargo_y+87,9,0,display_buy
	action cargo_x+192,cargo_y+48,cargo_x+231,cargo_y+87,10,0,display_buy
	action cargo_x+240,cargo_y+48,cargo_x+279,cargo_y+87,11,0,display_buy
	action cargo_x,cargo_y+96,cargo_x+39,cargo_y+135,12,0,display_buy
	action cargo_x+48,cargo_y+96,cargo_x+87,cargo_y+135,13,0,display_buy
	action cargo_x+96,cargo_y+96,cargo_x+135,cargo_y+135,14,0,display_buy
	action cargo_x+144,cargo_y+96,cargo_x+183,cargo_y+135,15,0,display_buy
	action cargo_x+192,cargo_y+96,cargo_x+231,cargo_y+135,16,0,display_buy
	action cargo_x+240,cargo_y+96,cargo_x+279,cargo_y+135,17,0,display_buy
	include icons.m68
	dc.w -1
	dc.l no_select

* Inventory prices action table.

inventory_action_table:

	action cargo_x,cargo_y,cargo_x+39,cargo_y+39,0,0,display_sell
	action cargo_x+48,cargo_y,cargo_x+87,cargo_y+39,1,0,display_sell
	action cargo_x+96,cargo_y,cargo_x+135,cargo_y+39,2,0,display_sell
	action cargo_x+144,cargo_y,cargo_x+183,cargo_y+39,3,0,display_sell
	action cargo_x+192,cargo_y,cargo_x+231,cargo_y+39,4,0,display_sell
	action cargo_x+240,cargo_y,cargo_x+279,cargo_y+39,5,0,display_sell
	action cargo_x,cargo_y+48,cargo_x+39,cargo_y+87,6,0,display_sell
	action cargo_x+48,cargo_y+48,cargo_x+87,cargo_y+87,7,0,display_sell
	action cargo_x+96,cargo_y+48,cargo_x+135,cargo_y+87,8,0,display_sell
	action cargo_x+144,cargo_y+48,cargo_x+183,cargo_y+87,9,0,display_sell
	action cargo_x+192,cargo_y+48,cargo_x+231,cargo_y+87,10,0,display_sell
	action cargo_x+240,cargo_y+48,cargo_x+279,cargo_y+87,11,0,display_sell
	action cargo_x,cargo_y+96,cargo_x+39,cargo_y+135,12,0,display_sell
	action cargo_x+48,cargo_y+96,cargo_x+87,cargo_y+135,13,0,display_sell
	action cargo_x+96,cargo_y+96,cargo_x+135,cargo_y+135,14,0,display_sell
	action cargo_x+144,cargo_y+96,cargo_x+183,cargo_y+135,15,0,display_sell
	action cargo_x+192,cargo_y+96,cargo_x+231,cargo_y+135,16,0,display_sell
	action cargo_x+240,cargo_y+96,cargo_x+279,cargo_y+135,17,0,display_sell
	include icons.m68
	dc.w -1
	dc.l no_select

* Table of units.

units_table:

	db 't',0
	db 'kg',0
	db 'g',0

* Text messages.

text1:	db ' - ',0
text2:	db ' available',0
text3:	db 'None',0
text4:	db 'Sorry - that item is out of stock.',0
text5:	db 'Amount to buy (upto ',0
text6:	db 'Sorry - we don''t have that much in stock.',0
text7:	db 'Sorry - you don''t have enough credits.',0
text8:	db 'Sorry - you don''t have enough room in your hold.',0
text9:	db 'Buy Cargo',0
text10: db c_ink,magenta,'Cash: ',c_ink,lgt_green,0
text11: db c_ink,magenta,' Cr, Hold: ',c_ink,lgt_green,0
text12: db 't',c_ink,magenta,' spare',0
text13: db 'Sell Cargo',0
text14: db 'You don''t have any cargo to sell!',0
text15: db ' - worth ',0
text16: db ' credits',0
text17: db c_ink,orange,'CARGO HOLD IS EMPTY!',0
text18: db 'Sorry - you can''t sell those!',0
text19: db ' Market Prices',0
text20: db 'Cargo hold is empty!',0
text21: db 'Cargo Hold Inventory',0
