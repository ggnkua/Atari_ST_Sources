*	@@@   @@@@@@   @@@@@@  @@@@@@	@@@   @@   @@	@@@@
*  @@ @@   @@  @@  @ @@ @	 @@    @@ @@  @@@  @@  @@  @@
* @@   @@  @@  @@	 @@ 	 @@   @@   @@ @@@@ @@  @@
* @@   @@  @@@@@	 @@ 	 @@   @@   @@ @@ @@@@	@@@@
* @@   @@  @@		 @@ 	 @@   @@   @@ @@  @@@	   @@
*  @@ @@   @@		 @@ 	 @@    @@ @@  @@   @@  @@  @@
*	@@@   @@@@		@@@@   @@@@@@	@@@   @@   @@	@@@@

* Elite options screen.

	include macros
	include bitlist

	xref invert_icon,prepare_text,print_string,find_bitmap,put_bitmap,line
	xref init_cursor,set_colour,hide_cursor,restore_cursor,launch,buy_cargo
	xref sell_cargo,equip_ship,galactic_chart,local_chart,data,market_prices
	xref inventory,status,disk,find_planet,home_cursor,confirm

* ---- LOCAL CONSTANTS ----

icon_y: 		equ text_top+8			top coord of options
key_vect:		equ (64+6)*4			keyboard/midi exception vector

	offset 0

i_cursor_types: 	ds.b 3				icon numbers (options only)
i_damping:			ds.b 2
i_effects:			ds.b 2
i_centre:			ds.b 2
i_reverse:			ds.b 2
i_computer: 		ds.b 2
i_sequence: 		ds.b 2
i_reset:			ds.b 1
i_quit: 			ds.b 1

* ---- LOCAL VARIABLES ----

	vars options

xc1:		ds.w 1						highlight window coords
yc1:		ds.w 1
xc2:		ds.w 1
yc2:		ds.w 1

	end_vars options

* ---- LOCAL MACROS ----

* draw_line x1,y1,x2,y2 - draw line between coords

draw_line: macro

	move \1(a6),d0
	move \2(a6),d1
	move \3(a6),d2
	move \4(a6),d3
	jsr line

	endm

	module options


* **************************************
* **								  **
* ** OPTIONS - DISPLAY OPTIONS SCREEN **
* **								  **
* **************************************

* Main options routine.

* Entry: None
* Exit:  None

* Regs: ?
* Subr: ?

	subr options,global

	st game_frozen(a6)					game is frozen
	tst cockpit_on(a6)					cockpit displayed ?
	if <eq> then.s						no
		moveq #icon_options,d0			invert icon
		jsr invert_icon
	endi
	jsr prepare_text					prepare text screen
	lea text1(pc),a0					print text (title, headings etc)
	jsr print_string
	lea icon_draw_data(pc),a5			draw the icons
	repeat
		move (a5)+,d0					fetch bit map #
		break.s if <mi> 				end of list
		jsr find_bitmap
		move (a5)+,d0					draw bitmap
		move (a5)+,d1
		jsr put_bitmap
	endr
	move cursor_type(a6),d0 			highlight cursor type
	add #i_cursor_types,d0
	bsr highlight_icon
	lea highlight_list(pc),a0			highlight current options
	repeat
		move (a0)+,d1					fetch bit #
		break.s if <mi> 				end if list
		clr d0							assume on (bit set)
		btst d1,user(a6)				option off (bit clear)
		if <eq> then.s					yes
			moveq #1,d0 				use 2nd icon
		endi
		add (a0)+,d0					highlight icon
		push.l a0
		bsr highlight_icon
		pop.l a0						next option
	endr
	lea options_table(pc),a0			initialise cursor
	jsr init_cursor

	ret


* *****************************************************
* **												 **
* ** HIGHLIGHT_ICON - DRAW HIGHLIGHT BOX AROUND ICON **
* **												 **
* *****************************************************

* Draws a box around an option icon. The box is drawn in the flashing
* colour.

* Entry: D0 = icon # (index into highlight_coords table)
* Exit:  None

* Regs: ?
* Subr: ?

	subr highlight_icon

	move d0,d1							draw highlight in flashing colour
	moveq #pulse,d0
	bra highlight


* *****************************************************
* **												 **
* ** NO_HIGHLIGHT - REMOVE HIGHLIGHT BOX AROUND ICON **
* **												 **
* *****************************************************

* Removes a box around an option icon. Used when changing options.

* Entry: D0 = icon # (index into highlight_coords table)
* Exit:  None

* Regs: ?
* Subr: ?

	subr no_highlight

	move d0,d1							draw highlight in black
	moveq #black,d0
	bra highlight


* ***********************************
* **							   **
* ** HIGHLIGHT - HIGHLIGHT AN ICON **
* **							   **
* ***********************************

* Draws a highlight around an option icon. Used to draw and remove the
* highlight box.

* Entry: D0 = colour for box
*		 D1 = icon # (index into highlight_coords table)
* Exit:  None

* Regs: ?
* Subr: ?

	subr highlight

	push d1 							set colour
	jsr set_colour
	pop d0								index into coordinate table
	asl #3,d0
	lea highlight_coords(pc),a0
	lea (a0,d0),a0
	lea xc1(a6),a1						copy coords
	loop 1,4
		move (a0)+,(a1)+
	next 1
	jsr hide_cursor 					disable cursor
	draw_line xc1,yc1,xc2,yc1			top edge
	draw_line xc2,yc1,xc2,yc2			right edge
	draw_line xc2,yc2,xc1,yc2			bottom edge
	draw_line xc1,yc2,xc1,yc1			left edge
	jsr restore_cursor					restore the cursor

	ret 								return


* ****************************************
* **									**
* ** CHANGE_CURSOR - CHANGE CURSOR TYPE **
* **									**
* ****************************************

* Changes the bit map type of the mouse cursor.

* Entry: D0 = new type (0..2)
* Exit:  None

* Regs: ?
* Subr: ?

	subr change_cursor

	push d0 							save new type
	move cursor_type(a6),d0 			remove highlight from current type
	add #i_cursor_types,d0
	bsr no_highlight
	pop d0								set new type
	move d0,cursor_type(a6)
	add #i_cursor_types,d0				highlight new option
	bra highlight_icon


* **************************************
* **								  **
* ** CHANGE_FLAG - CHANGE A USER FLAG **
* **								  **
* **************************************

* Change one of the user flags.

* Entry: D0 = option to change:
*				ABS(D0) = index into the HIGHLIGHT_LIST table
*				IF D0 is positive THEN
*					Set the bit (1)
*				ELSE
*					Reset the bit (0)
*				ENDIF
* Exit:  None

* Regs: ?
* Subr: ?

	subr change_flag

	push d0 							save new state (set/reset)
	if <mi> then.s						index into highlight_list table
		neg d0
	endi
	dec d0
	asl #2,d0
	lea highlight_list(pc),a0
	lea (a0,d0),a0
	move 0(a0),d1						bit to change
	move 2(a0),d0						icon # (set state)
	movem d0/d1,-(sp)
	btst d1,user(a6)					option current reset (0) ?
	if <eq> then.s						yes
		inc d0
	endi
	bsr no_highlight					remove highlight of current option
	movem (sp)+,d0/d1					fetch bit and icon #
	tst (sp)+							set new bit (function # >= 0)
	if <pl> then.s						yes
		bset d1,user(a6)
	else.s
		bclr d1,user(a6)
		inc d0							(highlight off state)
	endi
	bra highlight_icon					highlight icon and return


* ***************************************
* **								   **
* ** RESET_GAME - RESET THE WHOLE GAME **
* **								   **
* ***************************************

* Reset the game from the start - i.e. quit.

* Entry: None
* Exit:  None

* Regs: ?
* Subr: ?

	subr reset_game

	moveq #white,d0 					highlight icon
	moveq #i_reset,d1
	bsr highlight
	jsr confirm 						sure ?
	tst d0
	if <ne> then.s						yes
		st game_over(a6)				flag game over
		move #player_quits,reason(a6)	player as quitted
	endi
	moveq #black,d0 					remove highlight
	moveq #i_reset,d1
	bra highlight


* *************************************
* **								 **
* ** QUIT - QUIT PROGRAM BACK TO GEM **
* **								 **
* *************************************

* Quits the program back to GEM.

* Entry: None
* Exit:  None

* Regs: ?
* Subr: ?

	subr quit

	moveq #white,d0 					highlight icon
	moveq #i_quit,d1
	bsr highlight
	jsr confirm 						sure ?
	tst d0
	if <eq> then.s						no
		moveq #black,d0 				remove highlight
		moveq #i_quit,d1
		bra highlight
	endi
	bra shut_down						bye bye


* **************************************
* **								  **
* ** SHUT_DOWN - SHUT DOWN THE SYSTEM **
* **								  **
* **************************************

* Restores the operating system to allow an exit back to the GEM desktop.

* Entry: None
* Exit:  None

* Regs: ?
* Subr: ?

	subr shut_down,global

	move.l 0,sp 						reset the computer!
	move.l 4,a0
	jmp (a0)


* ---- LOCAL DATA ----

* Draw icon data table.

icon_draw_data:

	dc bit_digits+0,100,icon_y-3		cursor type
	dc bit_digits+1,125,icon_y-3
	dc bit_digits+2,150,icon_y-3
	dc bit_on,68,icon_y+20-3			damping
	dc bit_off,101,icon_y+20-3
	dc bit_on,228,icon_y+20-3			sound effects
	dc bit_off,261,icon_y+20-3
	dc bit_on,100,icon_y+40-3			auto-centre
	dc bit_off,133,icon_y+40-3
	dc bit_on,156,icon_y+60-3			reverse y direction
	dc bit_off,189,icon_y+60-3
	dc bit_fast,140,icon_y+80-3 		docking computer fast/slow
	dc bit_slow,189,icon_y+80-3
	dc bit_on,140,icon_y+100-3			docking sequence on/off
	dc bit_off,173,icon_y+100-3
	dc bit_yes,92,icon_y+120-3			reset game
	dc bit_yes,268,icon_y+120-3 		quit program
	dc -1

* Highlight coordinate table.

highlight_coords:

	dc 100-2,icon_y-5,100+17,icon_y+13			1
	dc 125-2,icon_y-5,125+17,icon_y+13			2
	dc 150-2,icon_y-5,150+17,icon_y+13			3
	dc 68-2,icon_y-5+20,68+25,icon_y+20+13		ON
	dc 101-2,icon_y-5+20,101+33,icon_y+20+13	OFF
	dc 228-2,icon_y-5+20,228+25,icon_y+20+13	ON
	dc 261-2,icon_y-5+20,261+33,icon_y+20+13	OFF
	dc 100-2,icon_y-5+40,100+25,icon_y+40+13	ON
	dc 133-2,icon_y-5+40,133+33,icon_y+40+13	OFF
	dc 156-2,icon_y-5+60,156+25,icon_y+60+13	ON
	dc 189-2,icon_y-5+60,189+33,icon_y+60+13	OFF
	dc 140-2,icon_y-5+80,140+41,icon_y+80+13	FAST
	dc 189-2,icon_y-5+80,189+41,icon_y+80+13	SLOW
	dc 140-2,icon_y-5+100,140+25,icon_y+100+13	ON
	dc 173-2,icon_y-5+100,173+33,icon_y+100+13	OFF
	dc 92-2,icon_y-5+120,92+33,icon_y+120+13	YES
	dc 268-2,icon_y-5+120,268+33,icon_y+120+13	YES
	dc -1

* Option mouse action table.

options_table:

	action 100-2,icon_y-5,100+17,icon_y+13,0,0,change_cursor
	action 125-2,icon_y-5,125+17,icon_y+13,1,0,change_cursor
	action 150-2,icon_y-5,150+17,icon_y+13,2,0,change_cursor
	action 68-2,icon_y-5+20,68+25,icon_y+20+13,1,0,change_flag
	action 101-2,icon_y-5+20,101+33,icon_y+20+13,-1,0,change_flag
	action 228-2,icon_y-5+20,228+25,icon_y+20+13,2,0,change_flag
	action 261-2,icon_y-5+20,261+33,icon_y+20+13,-2,0,change_flag
	action 100-2,icon_y-5+40,100+25,icon_y+40+13,3,0,change_flag
	action 133-2,icon_y-5+40,133+33,icon_y+40+13,-3,0,change_flag
	action 156-2,icon_y-5+60,156+25,icon_y+60+13,4,0,change_flag
	action 189-2,icon_y-5+60,189+33,icon_y+60+13,-4,0,change_flag
	action 140-2,icon_y-5+80,140+41,icon_y+80+13,5,0,change_flag
	action 189-2,icon_y-5+80,189+41,icon_y+80+13,-5,0,change_flag
	action 140-2,icon_y-5+100,140+25,icon_y+100+13,6,0,change_flag
	action 173-2,icon_y-5+100,173+33,icon_y+100+13,-6,0,change_flag
	action 92-2,icon_y-5+120,92+33,icon_y+120+13,0,0,reset_game
	action 268-2,icon_y-5+120,268+33,icon_y+120+13,0,0,quit
	include icons
	dc.w -1
	dc.l 0

* Data table used to draw highlight around current options.

highlight_list:

	dc f_damping,i_damping
	dc f_fx,i_effects
	dc f_centre,i_centre
	dc f_reverse,i_reverse
	dc f_docking,i_computer
	dc f_sequence,i_sequence
	dc -1

* Misc. text messages.

text1:	db c_cursor,14,title_y,'Game Options'
		db c_ink,yellow,c_cursor,0,icon_y,'Cursor Type:'
		db c_ink,orange,c_cursor,0,icon_y+20,'Damping:'
		db c_ink,lgt_green,c_cursor,20,icon_y+20,'Effects:'
		db c_ink,magenta,c_cursor,0,icon_y+40,'Auto-centre:'
		db c_ink,lgt_blue,c_cursor,0,icon_y+60,'Reverse dive/climb:'
		db c_ink,mid_green,c_cursor,0,icon_y+80,'Docking Computer:'
		db c_ink,red,c_cursor,0,icon_y+100,'Docking sequence:'
		db c_ink,yellow,c_cursor,0,icon_y+120,'Reset Game:'
		db c_ink,red,c_cursor,20,icon_y+120,'Exit Program:'
		db 0
