*	 @@ 	@@@@   @@@@@@  @@@@@@	@@@   @@   @@
*	@@@@   @@  @@  @ @@ @	 @@    @@ @@  @@@  @@
*  @@  @@ @@		 @@ 	 @@   @@   @@ @@@@ @@
*  @@  @@ @@		 @@ 	 @@   @@   @@ @@ @@@@
*  @@@@@@ @@		 @@ 	 @@   @@   @@ @@  @@@
*  @@  @@  @@  @@	 @@ 	 @@    @@ @@  @@   @@
*  @@  @@	@@@@	@@@@   @@@@@@	@@@   @@   @@

* Checks the keyboard and takes appropriate action if a key is pressed.

* Atari Version 1.0 20th April 1988 Copyright (c) 1988 Mr. Micro Ltd.
* Designed and coded by Rob Nicholson. Adpated from the MSX version.

	include macros

	xref increase_speed,decrease_speed,torus,roll_left,roll_right,climb,dive
	xref fire,read_key,fx,launch,front_view,buy_cargo,rear_view,sell_cargo
	xref left_view,equip_ship,right_view,joystick,print_string
	xref clear_input,print_centre,wait_key,market_prices,disk,data,inventory
	xref status,galactic_chart,home_cursor,disp_distance,local_chart,options
	xref find_planet,target_missile,unarm_missile,fire_missile,computer,escape
	xref start_hyperspace,engage_ecm,launch_bomb,id_object,cloaking_toggle
	xref jammer_toggle,magnification,text_blatt,disp_message,hide_cursor
	xref restore_cursor,cancel_angles,hacker,start_galactic,fire_retros
	xref check_inflight,str_copy,str_cat,build_number,text_colour,str_len

* Mouse movement threshold limits.

threshold_x:	equ 20
threshold_y:	equ 25

* Key assignments.

key_f1: 		equ 128 			F1	- Launch/Front
key_f2: 		equ 129 			F2	- Buy/Rear
key_f3: 		equ 130 			F3	- Sell/Left
key_f4: 		equ 131 			F4	- Equip/Right
key_f5: 		equ 132 			F5	- Galactic chart
key_f6: 		equ 133 			F6	- Local chart
key_f7: 		equ 134 			F7	- Planet data
key_f8: 		equ 135 			F8	- Market prices
key_f9: 		equ 136 			F9	- Player status
key_f0: 		equ 137 			F10 - Inventory

key_fire:		equ 'A'>>8			Fire laser
key_target: 	equ 'T'>>8			Target missile
key_missile:	equ 'M'>>8			Fire missile
key_unarm:		equ 'U'>>8			Unarm missile
key_ecm:		equ 'E'>>8			Electronic counter measure
key_energy: 	equ 9				Energy bomb (TAB)
key_escape: 	equ 'Q'>>8			Escape capsule
key_docking:	equ 'C'>>8			Docking computer on/off

key_hyper:		equ 'H'>>8			Hyperspace jump
key_inter:		equ 'G'>>8			Intergalactic jump
key_distance:	equ 'D'>>8			Distance to planet
key_home:		equ 'B'>>8			Home cursor (HOME)
key_galactic:	equ '5'>>8			Galactic chart
key_local:		equ '6'>>8			Local cluster chart

key_1:			equ '1'>>8			Launch from space spation/front view
key_2:			equ '2'>>8			Buy items/rear view
key_3:			equ '3'>>8			Sell items/left view
key_4:			equ '4'>>8			Equip ship/right view
key_sysdata:	equ '7'>>8			System data
key_prices: 	equ '8'>>8			Market prices
key_pstatus:	equ '9'>>8			Current status
key_invent: 	equ '0'>>8			Inventory
key_find:		equ 'F'>>8			Find planet
key_disk:		equ '-'>>8			Disk i/o
key_options:	equ '='>>8			Game options
key_pause:		equ 'P'>>8			Pause game
key_info:		equ 'W'>>8			Game information
key_retro:		equ 'R'>>8			Retro-rockets

key_torus:		equ 'J'>>8			torus jump drive
key_id: 		equ 'I'>>8			Id of object
key_cloaking:	equ 'Y'>>8			Cloaking device on/off
key_jammer: 	equ 'L'>>8			ECM jammer
key_mag:		equ 'Z'>>8			toggle radar magnification

key_hacker: 	equ '*'>>8			game state hacker

* ---- LOCAL VARIABLES ----

	vars action

control:		ds.w 1					current state of joystick
scroll_text:	ds.b 384				buffer of text to scroll on
scroll_ptr: 	ds.l 1					ptr: next character to scroll
scroll_pos: 	ds.w 1					position of scroll
spaces_left:	ds.w 1					# spaces left on the end
buffer: 		ds.b (no_cols+2)*4*8	screen scroll buffer
scrolling:		ds.w 1					flag: message scrolling

	end_vars action

	module action

* *****************************************
* **									 **
* ** CHECK_KEYS - MAIN KEY CHECK ROUTINE **
* **									 **
* *****************************************

* Main key check routine. Checks for the movement keys and takes the
* required action. Checks for any other key and executes the associated
* routine, e.g. FRONT_VIEW.

* Entry: None
* Exit:  None

* Regs:  All corrupt.
* Subr:  Lots

	subr check_keys,global

	tst controls_locked(a6) 			controls locked ?
	if <eq> then						no
		tst cockpit_on(a6)				cockpit displayed ?
		if <ne> then					yes
			tst.b key_states+$39(a6)	increase speed (space) ?
			call <ne>,increase_speed	yes
			tst.b key_states+$35(a6)	decrease speed (/) ?
			call <ne>,decrease_speed	yes
			clr from_mouse(a6)			movement from keyboard
			bsr get_joystick			get joystick state
			move.b d0,control(a6)
			btst #left,control(a6)		roll left?
			call <ne>,roll_left 		yes
			btst #right,control(a6) 	roll right ?
			call <ne>,roll_right		yes
			btst #down,control(a6)		climb ?
			call <ne>,climb 			yes
			btst #up,control(a6)		dive ?
			call <ne>,dive				yes
			btst #trigger,control(a6)	fire ?
			call <ne>,fire				yes
			bsr check_mouse 			check for mouse movement
		endi
	endi
	tst button_pressed(a6)				mouse button pressed ?
	if <ne> then.s						yes
		move.l action_ptr(a6),a0		fetch action routine address
		move.w function(a6),d0			fetch function # (if any)
		clr button_pressed(a6)			allow more key presses
		jsr (a0)						execute routine
	endi
	jsr read_key						key pressed ?
	tst d0
	ret <eq>							no, return
	tst controls_locked(a6) 			controls locked ?
	beq check							no
	cmp.b #key_torus,d0 				release jump drive ?
	beq check							yes
	cmp.b #key_docking,d0				docking computer ?
	ret <ne>							no, ignore key

check:

	tst check_key(a6)					check for G..H sequence ?
	if <ne> then.s						yes
		clr check_key(a6)				clear flag
		cmp.b #key_hyper,d0 			'H' pressed ?
		if <ne> then.s					no
			sfx keyclick				print abort message
			lea text5(pc),a0
			jmp disp_message
		endi
		sfx keyclick					start galactic hyperdrive
		jmp start_galactic
	endi
	lea key_list(pc),a0 				scan for key
	moveq #no_keys-1,d7
	loop 1
		cmp (a0)+,d0
		if <eq> then.s					found
			sfx keyclick
			move.l (a0),a0				fetch address of routine
			jmp (a0)					execute and return
		endi
		addq.l #4,a0					next key
	next 1

	ret


* ********************************************
* **										**
* ** CHECK_MOUSE - CHECK FOR MOUSE MOVEMENT **
* **										**
* ********************************************

* Processes any movement of the mouse while playing the game.

* Entry: None
* Exit:  None

* Regs: ?
* Subr: ?

	subr check_mouse

	st from_mouse(a6)					movement from mouse
	move move_x(a6),d0					large x movement ?
	if <mi> then.s
		neg d0
	endi
	cmp #threshold_x,d0
	if <hs> then.s						yes
		tst.b key_states+$78(a6)		right button pressed ?
		if <eq> then.s					no
			tst move_x(a6)				roll
			if <pl> then.s
				jsr roll_right
			else.s
				jsr roll_left
			endi
		endi
	endi
	clr move_x(a6)						clear any x movement
	move move_y(a6),d0					large y movement ?
	if <mi> then.s
		neg d0
	endi
	cmp #threshold_y,d0
	if <hs> then.s						yes
		tst.b key_states+$78(a6)		right button pressed ?
		if <eq> then.s					no
			move move_y(a6),d0			reverse y direction if required
			btst #f_reverse,user(a6)
			if <ne> then.s
				neg d0
			endi
			tst d0						dive/climb
			if <pl> then.s
				jsr dive
			else.s
				jsr climb
			endi
		else.s
			tst move_y(a6)				increase/decrease speed
			if <pl> then.s
				jsr decrease_speed
			else.s
				jsr increase_speed
			endi
		endi
	endi
	clr move_y(a6)						clear any y movement
	tst device(a6)						cancel movement (mouse only)
	if <eq> then.s
		tst.b key_states+$78(a6)
		call <ne>,cancel_angles
	endi

	ret


* ***********************************
* **							   **
* ** DUAL_KEYS - PROCESS DUAL KEYS **
* **							   **
* ***********************************

* The functions of the keys 1..4 depends whether the player is docked or
* in flight.

	subr dual_1

	tst docked(a6)
	if <ne> then.s
		jmp launch
	endi
	jmp front_view

	subr dual_2

	tst docked(a6)
	if <ne> then.s
		jmp buy_cargo
	endi
	jmp rear_view

	subr dual_3

	tst docked(a6)
	if <ne> then.s
		jmp sell_cargo
	endi
	jmp left_view

	subr dual_4

	tst docked(a6)
	if <ne> then.s
		jmp equip_ship
	endi
	jmp right_view


* ***************************************
* **								   **
* ** GET_JOYSTICK - GET JOYSTICK STATE **
* **								   **
* ***************************************

* Gets the current joystick state taking the reverse flags into account.

* Entry: None
* Exit:  D0 = state of joystick (active high):

*		Bit 0 : Up
*		Bit 1 : Down
*		Bit 2 : Left
*		Bit 3 : Right
*		Bit 4 : Fire

* Regs:  ?
* Subr:  ?

	subr get_joystick

	tst device(a6)						using mouse ?
	if <eq> then.s
		lea mouse_steer(pc),a0
	else.s
		lea joystick_steer(pc),a0
	endi
	jsr joystick
	btst #f_reverse,user(a6)			reverse y direction ?
	if <ne> then.s						yes
		move d0,d1						swap bits 0 and 1
		and #%11100,d1
		move d0,d2
		and #%01,d0
		asl #1,d0
		and #%10,d2
		lsr #1,d2
		or d1,d0
		or d2,d0
	endi

	ret


* ************************
* **					**
* ** PAUSE - PAUSE GAME **
* **					**
* ************************

* Pause the game and wait for a key press.

* Entry: None
* Exit:  None

* Regs: ?
* Subr: ?

	subr pause

	st game_frozen(a6)					freeze game
	tst cockpit_on(a6)					cockpit displayed ?
	if <ne> then.s						yes
		move.l scr_base(a6),d0			save current screen base (invisible)
		push.l d0
		move.l flip_screen(a6),d1		flip to visible screen
		eor.l d1,d0
		move.l d0,scr_base(a6)
		lea text1(pc),a0				print '** PAUSED **'
		jsr disp_message
		moveq #pulse,d0
		jsr text_blatt
		clr text_frames(a6) 			clear immediately on resumation
		pop.l scr_base(a6)				restore screen base
		repeat							wait for key press
			jsr read_key
			tst d0
		until <ne>
	else.s
		jsr clear_input 				clear input line
		lea text2(pc),a0				print '** PAUSED **'
		move #prompt_y,d1
		jsr print_centre
		jsr wait_key					wait for key press
		jsr clear_input 				clear window
	endi
	sfx keyclick
	clr game_frozen(a6) 				game not frozen

	ret 								return


* ************************************************
* **											**
* ** INTER_GALACTIC - INTER-GALACTIC HYPERDRIVE **
* **											**
* ************************************************

* This routine is called when the player presses the 'G' key to initiate
* the intergalactic hyperdrive sequence. To confirm this, the player then
* has to press the 'H' key.

* Entry: None
* Exit:  None

* Regs: ?
* Subr: ?

	subr inter_galactic

	st check_key(a6)					force key check next key press
	lea text4(pc),a0					print message
	jmp disp_message


*****************************************
**									   **
** GAME_INFO - CYCLE THROUGH GAME INFO **
**									   **
*****************************************

* Cycle throught various pieces of game information.

* Entry:  None
* Exit:   None

* Regs:   ?
* Subr:   ?

	subr game_info,global

	jsr check_inflight					check we're flying
	st game_frozen(a6)					pause timers
	lea text6(pc),a0					build the scroll string
	lea scroll_text(a6),a1
	jsr str_copy
	move.l score(a6),d0 				(score)
	bsr add_number
	lea scroll_text(a6),a0
	lea text7(pc),a1
	jsr str_cat
	move game_time+6(a6),d0 			(days)
	ext.l d0
	bsr add_number
	lea scroll_text(a6),a0
	lea text8(pc),a1
	jsr str_cat
	move game_time+4(a6),d0 			(hours)
	ext.l d0
	bsr add_number
	lea scroll_text(a6),a0
	lea text9(pc),a1
	jsr str_cat
	move game_time+2(a6),d0 			(minutes)
	ext.l d0
	bsr add_number
	lea scroll_text(a6),a0
	lea text10(pc),a1
	jsr str_cat
	lea buffer(a6),a0					clear buffer
	loop 1,(no_cols+2)*4*8/4
		clr.l (a0)+
	next 1
	lea scroll_text(a6),a0				set next character pointer
	move.l a0,scroll_ptr(a6)
	clr scroll_pos(a6)					force new character
	clr spaces_left(a6)
	st scrolling(a6)					scroll text message
	repeat
		bsr scroll
		jsr read_key					key pressed ?
		tst d0
		break.s if <ne> 				yes
		tst scrolling(a6)
	until <eq>
	clr game_frozen(a6) 				release timers

	ret


* ********************************************
* **										**
* ** ADD_NUMBER - ADD NUMBER TO SCROLL TEXT **
* **										**
* ********************************************

* Adds a number to the end of the scroll text.

* Entry: D0.L = number to add
* Exit:  None

* Regs: ?
* Subr: ?

	subr add_number

	clr d1								integer free format
	lea pad(a6),a0						build number
	jsr build_number
	lea scroll_text(a6),a0				add to scroll text
	lea pad(a6),a1
	jmp str_cat


* *********************************
* **							 **
* ** SCROLL - SCROLL ANY CREDITS **
* **							 **
* *********************************

* Scroll the credit sequence across the screen.

* Entry: None
* Exit:  None

* Regs: ?
* Subr: ?

	subr scroll

	tst scroll_pos(a6)					need a new character ?
	if <eq> then.s						yes
		bsr get_next_char				get the next character
	endi
	lea buffer+no_cols*4(a6),a0 		point to last character
	loop 1,8							loop for each pixel line
		loop 2,d6,2 					scroll x 2
			push.l a0
			loop 3,d5,4 				scroll four planes
				push.l a0
				loop 4,d4,(no_cols/2+1) loop for each word
					roxl (a0)
					subq.l #8,a0
				next 4,d4
				pop.l a0				next plane
				addq.l #2,a0
			next 3,d5
			pop.l a0					scroll again
		next 2,d6
		lea (no_cols+2)*4(a0),a0		next line
	next 1
	dec scroll_pos(a6)					on scroll position used
	clr flyback(a6) 					wait for flyback
	repeat
		tst flyback(a6)
	until <ne>
	move.l scr_base(a6),d0				calculate screen address
	move.l flip_screen(a6),d7
	eor.l d7,d0
	add #(y_top+y_size-10)*160+x_left/2,d0
	move.l d0,a1
	lea buffer(a6),a0					blatt scroll line to window
	loop 1,8							loop for each pixel line
		push.l a0
		push.l a1
		loop 2,d6,no_cols/2 			loop for each word
			move (a0),d0				build mask
			or 2(a0),d0
			or 4(a0),d0
			or 6(a0),d0
			not d0
			loop 3,d5,4 				loop for each plane
				move (a1),d1			clear current setting
				and d0,d1
				or (a0)+,d1 			plot pixels
				move d1,(a1)+
			next 3,d5					next plane
		next 2,d6						next word across
		pop.l a1						next pixel line
		pop.l a0
		lea (no_cols+2)*4(a0),a0
		lea 160(a1),a1
	next 1

	ret 								return


* ************************************************
* **											**
* ** GET_NEXT_CHAR - GET NEXT SCROLL CHARACTER	 **
* **											**
* ************************************************

* Draws the next character from the scroll text (or the trailing spaces)
* into the scroll buffer.

* Entry: None
* Exit:  None

* Regs: ?
* Subr: ?

	subr get_next_char

	moveq #orange,d0					set text colour
	moveq #black,d1
	jsr text_colour
	tst spaces_left(a6) 				scrolling trailing spaces ?
	if <eq> then.s						no
		move.l scroll_ptr(a6),a0		get next character from text
		move.b (a0)+,d0
		move.l a0,scroll_ptr(a6)
		tst.b (a0)						end of text ?
		if <eq> then.s					yes
			move #no_cols,spaces_left(a6)
		endi
	else.s
		dec spaces_left(a6) 			draw a space
		if <eq> then.s
			clr scrolling(a6)
		endi
		move.b #' ',d0
	endi
	and #255,d0 						index into character set
	asl #3,d0
	move.l charset_ptr(a6),a0
	lea 0(a0,d0),a0
	move.l ink_ptr(a6),a1				get ink and paper pointers
	move.l paper_ptr(a6),a2
	lea buffer+no_cols*4(a6),a3 		fetch text screen address
	loop 1,d7,8 						8 pixel lines deep
		move.b (a0)+,d0 				get next data byte
		move d0,d1						build paper mask
		not d1
		loop 2,d6,4 					loop for each plane
			move.b d0,d2				build ink byte
			and.b (a1)+,d2
			move.b d1,d3				build paper byte
			and.b (a2)+,d3
			or.b d2,d3					combine ink and paper
			move.b d3,(a3)				store in buffer
			addq #2,a3					next plane
		next 2,d6
		lea (no_cols+2)*4-8(a3),a3		next pixel line
		subq.l #4,a1
		subq.l #4,a2
	next 1,d7
	move #4,scroll_pos(a6)				scroll in two pixel jumps

	ret


* ---- LOCAL DATA ----

* List of keys recognised by the game.

key: macro

	dc.w key_\1
	dc.l \2

	endm

key_list:

	key 1,dual_1					Launch/front view
	key f1,dual_1
	key 2,dual_2					Buy goods/rear view
	key f2,dual_2
	key 3,dual_3					Sell goods/left view
	key f3,dual_3
	key 4,dual_4					Equip ship/right view
	key f4,dual_4
	key prices,market_prices		Display market prices of current system
	key f8,market_prices
	key disk,disk					Enter disk menu
	key sysdata,data				Display system data
	key f7,data
	key invent,inventory			Display inventory of Cobra's hold
	key f0,inventory
	key pstatus,status				Display status of player
	key f9,status
	key galactic,galactic_chart 	Display galactic chart
	key f5,galactic_chart
	key home,home_cursor			Home cursor
	key distance,disp_distance		Display distance to planet
	key local,local_chart			Display local chart
	key f6,local_chart
	key find,find_planet			Find planet on Galactic chart
	key options,options 			Game options
	key target,target_missile		Target a missile
	key unarm,unarm_missile 		Unarm a missile
	key missile,fire_missile		Fire a missile
	key hyper,start_hyperspace		Hyperspace jump
	key docking,computer			Engage docking computer
	key ecm,engage_ecm				Engage ECM
	key energy,launch_bomb			Launch energy bomb
	key inter,inter_galactic		Inter-galactic jump
	key escape,escape				Launch escape capsule
	key info,game_info				Show game info
	key id,id_object				Id of object
	key cloaking,cloaking_toggle	Cloaking device on/off
	key jammer,jammer_toggle		ECM jammer on/off
	key mag,magnification			change radar magnification
	key pause,pause 				pause game
	key hacker,hacker				saved game state hacker
	key torus,torus 				engage jump drive
	key retro,fire_retros			engage retro-rockets

no_keys: equ (*-key_list)/6

* Keyboard scan codes for steering the Cobra.

joystick_steer:

	dc.w up,$1f,$48,$73,-1				up	  - S,up arrow,joy_up
	dc.w down,$2d,$50,$74,-1			down  - X,down arrow,joy_down
	dc.w left,$33,$4b,$75,-1			left  - <,left arrow,joy_left
	dc.w right,$34,$4d,$76,-1			right - >,right arrow,joy_right
	dc.w trigger,$1e,$78,-1 			fire  - A,right button
	dc.w -1

mouse_steer:

	dc.w up,$1f,$48,$73,-1				up	  - S,up arrow,joy_up
	dc.w down,$2d,$50,$74,-1			down  - X,down arrow,joy_down
	dc.w left,$33,$4b,$75,-1			left  - <,left arrow,joy_left
	dc.w right,$34,$4d,$76,-1			right - >,right arrow,joy_right
	dc.w trigger,$1e,$77,-1 			fire  - A,left button
	dc.w -1

* Text messages.

text1:	db '** PAUSED **',0
text2:	db c_ink,pulse,'** PAUSED **',0
text3:	db $00,$00
text4:	db 'Press ''H'' to confirm',0
text5:	db 'Inter-Galaxy Jump Aborted',0
text6:	db 'Atari ST Elite Version 1.3        '
		db 'You have scored ',0
text7:	db ' points and have been playing for ',0
text8:	db ' days, ',0
text9:	db ' hours and ',0
text10: db ' minutes.        '
		db 'Atari ST Conversion by Rob Nicholson of Mr. Micro Ltd.        '
		db 'With Assistance From Gary Patchen.        '
		db 'All Graphix by James McDermott.        ',0
