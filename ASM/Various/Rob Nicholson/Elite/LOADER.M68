* @@@@		@@@ 	 @@   @@@@@   @@@@@@@ @@@@@@
*  @@	   @@ @@	@@@@   @@ @@   @@	@  @@  @@
*  @@	  @@   @@  @@  @@  @@  @@  @@ @    @@  @@
*  @@	  @@   @@  @@  @@  @@  @@  @@@@    @@@@@
*  @@	@ @@   @@  @@@@@@  @@  @@  @@ @    @@ @@
*  @@  @@  @@ @@   @@  @@  @@ @@   @@	@  @@  @@
* @@@@@@@	@@@    @@  @@ @@@@@   @@@@@@@ @@@  @@

* Atari ST Elite loader program.
* Version 1.0 27th June 1988 Copyright (c) 1988 Mr. Micro Ltd.
* Designed and coded by Rob Nicholson.

	include macros

* ---- CONSTANTS ----

main_load:		equ $12000				main program load address
main_run:		equ main_load			main program run address

	section 0

* *************************
* **					 **
* ** MAIN - MAIN PROGRAM **
* **					 **
* *************************

	subr main

	push.l #1							in user mode ?
	bdos s_mode,6
	tst.l d0
	if <eq> then.s						yes
		clr.l -(sp) 					switch to supervisor mode
		bdos s_mode,6
	endi
	bclr #0,conterm 					disable keyclick
	clr.l -(sp) 						disable cursor
	ext_bios cursconf,6
	lea title_screen(pc),a0 			load title screen
	lea free(pc),a1
	bsr read_file
	pea blank(pc)						blank out the screen
	ext_bios setpalette,6
	ext_bios physbase,2 				fetch screen address
	move.l d0,d1						on 32k boundary ?
	and.l #$7fff,d1
	if <ne> then.s						no
		move.l a7,d0					move screen to 64k under stack
		sub.l #$10000,d0
		and.l #$ffff8000,d0 			clamp on 32k boundary
	endi
	clr -(sp)							set low res and screen address
	push.l d0
	push.l d0
	ext_bios setscreen,12
	ext_bios physbase,2 				draw the screen
	move.l d0,a1
	lea free(pc),a0
	bsr draw_screen
	lea main_program(pc),a0 			load main program
	move.l #main_load,a1
	bsr read_file
	jmp main_run						run main program


* ***************************************
* **								   **
* ** READ_FILE - READ FILE INTO MEMORY **
* **								   **
* ***************************************

* Reads a file into memory from the disk.

* Entry: A0 = ptr: file name
*		 A1 = address to load file
* Exit:  IF D0.L negative THEN
*			Error during load D0.L = -error
*		 ELSE
*			D0.L = no. bytes read from file
*		 ENDIF

* Regs:  ?
* Subr:  ?

	subr read_file

	push.l a1					save load address
	clr -(sp)					attempt to open file
	push.l a0
	bdos f_open,8
	tst.l d0					error ?
	if <mi> then.s				yes
		addq.l #4,sp			clean up stack
	else
		move d0,d7				D7 = file handle
		push.l #$7fffffff		attempt to read all of file
		push d7
		bdos f_read,12
		push.l d0				save error/no. bytes read
		push d7 				close file
		bdos f_close,4
		pop.l d0				fetch error/no. bytes read
	endi

	ret


* *************************************
* **								 **
* ** DRAW_SCREEN - DRAW DEGAS SCREEN **
* **								 **
* *************************************

* Draws a compacted Degas Elite screen.

* Entry: A0 = ptr: Degas Elite screen
*		 A1 = ptr: screen address
* Exit:  None

* Regs: ?
* Subr: ?

	subr draw_screen,global

	cmp.b #$80,(a0) 					make sure it's a Degas screen
	ret <ne>							no, ignore draw
	push.l a0							save pointer to data
	lea 34(a0),a0						start of compacted data
	clr d0								pixel line = 0
	clr d1								plane = 0
	clr d2								byte = 0
	moveq #1,d3 						step = 1
	repeat
		move.b (a0)+,d4 				fetch next byte
		if <pl> then.s					positive, copy bytes
			ext d4
			add d4,d2
			loop 1
				move.b (a0)+,(a1)
				lea (a1,d3),a1
				eor #6,d3
			next 1,d4
		else.s
			neg.b d4				 copy duplicated bytes
			ext d4
			add d4,d2
			move.b (a0)+,d5
			loop 1
				move.b d5,(a1)
				lea (a1,d3),a1
				eor #6,d3
			next 1,d4
		endi
		inc d2
		cmp #40,d2						reached end of line ?
		if <eq> then.s					yes
			clr d2						move to next plane
			lea -160+2(a1),a1
			inc d1
			cmp #4,d1					next pixel line ?
			if <eq> then.s				yes
				clr d1					move to next pixel line
				lea 160-8(a1),a1
				inc d0
			endi
		endi
	until d0 <eq> #200					until end of data
	pop.l a0							set palette
	addq.l #2,a0
	push.l a0
	ext_bios setpalette,6

	ret 								return

* ---- DATA ----

blank:

	dc 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0

main_program:

	dc.b 'elite.img',0

title_screen:

	dc.b 'title.pc1',0

	even

free:

