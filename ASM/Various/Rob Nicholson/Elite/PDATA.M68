* @@@@@@  @@@@@ 	 @@    @@@@@@	 @@
*  @@  @@  @@ @@	@@@@   @ @@ @	@@@@
*  @@  @@  @@  @@  @@  @@	 @@    @@  @@
*  @@@@@   @@  @@  @@  @@	 @@    @@  @@
*  @@	   @@  @@  @@@@@@	 @@    @@@@@@
*  @@	   @@ @@   @@  @@	 @@    @@  @@
* @@@@	  @@@@@    @@  @@	@@@@   @@  @@

* Planet data screen. Also contains (possibly confusingly) several
* general purpose trading based routines.

* Atari ST Version 1.0 19th April 1988 Copyright (c) 1988 Mr. Micro Ltd
* Designed and coded by Rob Nicholson. Adapted from the MSX version.

	include macros
	include bitlist

	xref get_planet_info,sqrt,fx,invert_icon,g_lock_on,l_lock_on
	xref build_name,str_copy,str_cat,print_centre,prepare_text,buy_cargo
	xref sell_cargo,equip_ship,galactic_chart,local_chart,status,init_cursor
	xref print_string,wait,clear_input,print_number,text_colour,locate
	xref print_table,funny_str,texture,draw_screen,set_colour,plotxy
	xref launch,disk,find_planet,home_cursor,market_prices
	xref inventory,line,getrandx,dot_to_addr,monst,bit_masks,wait_key
	xref find_bitmap,put_bitmap,find_table,str_len,build_number,options

* ---- LOCAL CONSTANTS ----

planet_x:		equ 272 				screen coords of planet
planet_y:		equ 74
planet_rad: 	equ 40					radius of planet
head_x: 		equ 8					coords of head
head_y: 		equ text_top+8
body_x: 		equ head_x				coords of body
body_y: 		equ head_y+32
max_desc:		equ 8					max. description length (humanoid)
text_x: 		equ 80					text x coordinate

* ---- LOCAL VARIABLES ----

	vars pdata

circle_x:		ds.w 1					centre of grabbed circle
circle_y:		ds.w 1
xl: 			ds.w 1					x left coord
xr: 			ds.w 1					x right coord
yc: 			ds.w 1					y coord

	end_vars pdata

* ---- LOCAL MACROS ----

* DRAW - Draw horizontal line of circle (8 way symmetry)

draw: macro

	ifc '\2','x'						build up end coords
		move d0,d4
	endc
	ifc '\2','y'
		move d1,d4
	endc
	ifc '\1','-'
		neg d4
	endc
	ifc '\4','x'
		move d0,d5
	endc
	ifc '\4','y'
		move d1,d5
	endc
	ifc '\3','-'
		neg d5
	endc
	ifc '\6','x'
		move d0,d6
	endc
	ifc '\6','y'
		move d1,d6
	endc
	ifc '\5','-'
		neg d6
	endc
	bsr planet_line 					draw line of planet

	endm

	module pdata


* **********************************
* **							  **
* ** DATA - DATA ON PLANET SCREEN **
* **							  **
* **********************************

* Display the data on the current hyperspace plane.

* Entry: REQ_PLANET = planet # to display
* Exit:  None

* Regs: ?
* Subr: ?

	subr data,global

	tst cockpit_on(a6)					cockpit displayed ?
	if <eq> then.s						no
		moveq #icon_data,d0
		jsr invert_icon
	endi
	jsr prepare_text					prepare display
	lea text1(pc),a0					build title (data on xxx)
	lea pad(a6),a1
	jsr str_copy
	move req_planet(a6),d0
	jsr build_name
	lea pad(a6),a0
	lea planet_name(a6),a1
	jsr str_cat
	lea pad(a6),a0						print title
	moveq #title_y,d1
	jsr print_centre
	lea text2(pc),a0					print headings
	jsr print_string
	moveq #text_x/8+9,d0				print economy
	moveq #text_top,d1
	jsr locate
	moveq #lgt_blue,d0
	moveq #trans,d1
	jsr text_colour
	move cplanet+econ(a6),d0
	eor #7,d0
	lea economy(pc),a0
	jsr print_table
	cmp #4,cplanet+econ(a6)
	if <hs> then.s
		lea text3(pc),a0
	else.s
		lea text4(pc),a0
	endi
	jsr print_string
	moveq #text_x/8+12,d0				print government
	moveq #text_top+8,d1
	jsr locate
	moveq #orange,d0
	moveq #trans,d1
	jsr text_colour
	move cplanet+govern(a6),d0
	lea government(pc),a0
	jsr print_table
	moveq #text_x/8+12,d0				print tech. level
	moveq #text_top+16,d1
	jsr locate
	moveq #white,d0
	moveq #trans,d1
	jsr text_colour
	move cplanet+tech(a6),d0
	clr d1
	jsr print_number
	moveq #text_x/8+5,d0				print population
	moveq #text_top+24,d1
	jsr locate
	moveq #yellow,d0
	moveq #trans,d1
	jsr text_colour
	move cplanet+seed(a6),d0
	and #63,d0
	inc d0
	ext.l d0
	move #$80,d1
	jsr print_number
	lea text5(pc),a0
	jsr print_string
	moveq #text_x/8+5,d0				print producivity
	moveq #14*8,d1
	jsr locate
	moveq #white,d0
	moveq #trans,d1
	jsr text_colour
	move cplanet+seed(a6),d0
	and #63,d0
	inc d0
	mulu #27,d0
	divu #5,d0
	ext.l d0
	move #$80,d1
	jsr print_number
	lea text6(pc),a0
	jsr print_string
	jsr funny_str						print funny description
	bsr draw_planet 					draw the planet
	moveq #bit_small_cobra,d0			draw the Cobra
	jsr find_bitmap
	moveq #text_x,d0
	moveq #planet_y-21,d1
	jsr put_bitmap
	moveq #lgt_grey,d0					draw the distance line and arrow
	jsr set_colour
	move #text_x+26,d0
	move #planet_y,d1
	move #planet_x-planet_rad-7,d2
	move d1,d3
	movem d0/d2,-(sp)					save x coords of line
	jsr line
	moveq #bit_arrow_right,d0
	jsr find_bitmap
	move #planet_x-planet_rad-6,d0
	move #planet_y-2,d1
	jsr put_bitmap
	moveq #orange,d0					print in orange
	moveq #trans,d1
	jsr text_colour
	bsr fuel_distance					calculate fuel distance
	hclr d0 							build into a number
	move #$80,d1
	lea pad(a6),a0
	jsr build_number
	movem (sp)+,d0/d2					calculate width of the line
	sub d0,d2
	move d2,d6
	lea pad(a6),a0						centre distance along the line
	jsr str_len
	asl #3,d0
	sub d6,d0
	neg d0
	lsr #1,d0
	add #text_x+32,d0
	lsr #3,d0
	moveq #planet_y-9,d1
	jsr locate
	jsr print_string					print distance
	lea text10(pc),a0					centre 'Light Years' along the line
	jsr str_len
	asl #3,d0
	sub d6,d0
	neg d0
	lsr #1,d0
	add #text_x+32,d0
	lsr #3,d0
	moveq #planet_y+2,d1
	jsr locate
	jsr print_string					print 'Light Years'
	move #132,row(a6)					set print row
	moveq #orange,d0					print in orange
	moveq #trans,d1
	jsr text_colour
	tst.b cplanet+seed+5(a6)			human colonial ?
	if <pl> then.s						yes
		move cplanet+seed+0(a6),d0		choose a head (two choices)
		and #1,d0
		add #bit_h_human,d0
		jsr find_bitmap
		moveq #head_x,d0				draw the head
		moveq #head_y,d1
		jsr put_bitmap
		move cplanet+seed+2(a6),d0		choose a body (three choices)
		mulu #3,d0
		swap d0
		add #bit_b_humanoid,d0
		jsr find_bitmap
		moveq #body_x,d0				draw the body
		moveq #body_y,d1
		jsr put_bitmap
		lea human(pc),a0				print 'human colonial'
		clr d0
		jsr print_word
		lea human(pc),a0
		moveq #1,d0
		bsr print_word
	else
		move.b cplanet+seed+4(a6),d0	determine colour # (0..7)
		lsr.b #5,d0
		and #7,d0
		lea inhab_palette(pc),a0		set palette
		lea palette,a1
		inc d0
		mulu #6,d0
		move 0(a0),d1
		move 0(a0,d0),(a1,d1)
		move 2(a0),d1
		move 2(a0,d0),(a1,d1)
		move 4(a0),d1
		move 4(a0,d0),(a1,d1)
		move.b cplanet+seed+2(a6),d0	choose a type of head (e.g. slimey)
		move.b cplanet+seed+0(a6),d1
		eor.b d1,d0
		and #7,d0
		push d0 						index into table of choices
		asl #2,d0
		lea heads(pc),a0
		lea (a0,d0),a0
		move 0(a0),d0					choose head within type
		mulu cplanet+seed+0(a6),d0
		swap d0
		add 2(a0),d0
		jsr find_bitmap
		moveq #head_x,d0				draw the head
		moveq #head_y,d1
		jsr put_bitmap
		move.b cplanet+seed+4(a6),d0	choose a type of body (e.g. bird)
		and #3,d0
		add (sp)+,d0
		and #7,d0
		asl #2,d0						index into table of choices
		lea bodies(pc),a0
		lea (a0,d0),a0
		move 0(a0),d0					choose a body within type
		mulu cplanet+seed+2(a6),d0
		swap d0
		add 2(a0),d0
		jsr find_bitmap
		moveq #body_x,d0				draw the body
		moveq #body_y,d1
		jsr put_bitmap
		move.b cplanet+seed+4(a6),d0	print size (e.g. small)
		lsr.b #2,d0
		push d0
		and #7,d0
		lea inhab_size,a0
		bsr print_word
		pop d0							print colour (e.g. blue)
		lsr.b #3,d0
		and #7,d0
		lea inhab_colour,a0
		bsr print_word
		move.b cplanet+seed+2(a6),d0	print looks (e.g. slimy)
		move.b cplanet+seed+0(a6),d1
		eor.b d1,d0
		and #7,d0
		push d0
		lea inhab_looks,a0
		bsr print_word
		move.b cplanet+seed+4(a6),d0	print type string (e.g. rodent)
		and #3,d0
		add (sp)+,d0
		and #7,d0
		lea inhab_type,a0
		bsr print_word
	endi
	lea data_action_table(pc),a0		initialise cursor
	jsr init_cursor

	ret


* ********************************************
* **										**
* ** PRINT_WORD - PRINT WORD OF DESCRIPTION **
* **										**
* ********************************************

* Prints a word of the inhabitants description, e.g. 'rodent'

* Entry: D0  = index into description table (0..7)
*		 A0  = ptr: description table
*		 ROW = current print row
* Exit:  ROW = ROW+8 (if anything printed)

* Regs: ?
* Subr: ?

	subr print_word

	jsr find_table						find string
	tst.b (a0)							null string ?
	ret <eq>							yes, return
	jsr str_len 						centre string
	sub #max_desc,d0
	neg d0
	lsr #1,d0
	move row(a6),d1
	jsr locate
	jsr print_string					print word
	add #8,row(a6)						next row

	ret 								return


* ***************************************
* **								   **
* ** CHECK_DOCKED - CHECK FOR DOCKING  **
* **								   **
* ***************************************

* Action: Check if currently docked. if not, the computer beeps. clears the
*		  top address on the stack an returns.

* Entry:  None
* Exits:  None

* Regr:   ?
* Subr:   BEEP

	subr check_docked,global

	tst docked(a6)						docked ?
	ret <ne>							yes, return
	addq.l #4,sp						clear stack
	sfx error							beep error

	ret 								return




* **************************************************
* **											  **
* ** FUEL_DISTANCE - CALCULATE DISTANCE TO PLANET **
* **											  **
* **************************************************

* Computes distance from current planet system to required planet system.

* Entry: None
* Exits: D0 = distance

* Regr:   ?
* Subr:   Get_planet_info, Calc_distance

	subr fuel_distance,global

	tst witch_space(a6) 				Special which space check
	if <eq> then.s
		move current(a6),d0 			stack coordinates of current planet
		bsr get_planet_info
		push cplanet+xcoord(a6)
		push cplanet+ycoord(a6)
	else
		push witch_x(a6)				stack witch space coords
		push witch_y(a6)
	endi
	move req_planet(a6),d0				get coords of required planet
	bsr get_planet_info
	move cplanet+xcoord(a6),d0
	move cplanet+ycoord(a6),d1
	pop d3								fetch other planets coords
	pop d2
	sub d2,d0							calculate squared distance
	sub d3,d1
	muls d0,d0
	muls d1,d1
	add.l d1,d0
	jsr sqrt							take square root
	move d2,d0							multiply result by 4
	asl #2,d0

	ret


* ****************************************
* **									**
* ** DRAW_PLANET - DRAW TEXTURED PLANET **
* **									**
* ****************************************

* Draws the textured planet on the planet data screen.

* Entry: None
* Exit:  None

* Regs: ?
* Subr: ?

	subr draw_planet

	move.l scr_base(a6),d0				expand texture screen into the
	move.l flip_screen(a6),d1			invisible screen
	eor.l d1,d0
	move.l d0,a1
	lea texture,a0
	jsr draw_screen
	jsr getrandx						generate grab centre coords
	mulu #320-2*planet_rad,d0
	swap d0
	add #planet_rad,d0
	move d0,circle_x(a6)
	mulu #200-2*planet_rad,d1
	swap d1
	add #planet_rad,d1
	move d1,circle_y(a6)
	clr d0								x = 0
	moveq #planet_rad,d1				y = planet radius
	moveq #3-2*planet_rad,d2			d = 3-2*radius
	repeat
		draw -,x,+,x,+,y				draw horizontal lines
		draw -,y,+,y,+,x
		draw -,y,+,y,-,x
		draw -,x,+,x,-,y
		tst d2							d < 0 ?
		if <mi> then.s					yes
			move d0,d3					d = d + 4*x + 6
			asl #2,d3
			add d3,d2
			addq #6,d2
		else.s
			move d0,d3					d = d + 4*(x - y) + 10
			sub d1,d3
			asl #2,d3
			add d3,d2
			add #10,d2
			dec d1						--y
		endi
		inc d0							++x
	until d0 <gt> d1					until x>y
	moveq #planet_x/8-4,d0				print radius
	moveq #planet_y+43,d1
	jsr locate
	moveq #orange,d0
	moveq #trans,d1
	jsr text_colour
	move cplanet+seed(a6),d0
	and #32767,d0
	add #15000,d0
	hclr d0
	clr d1
	jsr print_number
	lea text9(pc),a0					print 'km'
	jsr print_string
	moveq #bit_arrow_left,d0			print left arrow
	jsr find_bitmap
	move #planet_x-planet_rad,d0
	move #planet_y+43+1,d1
	jsr put_bitmap
	moveq #lgt_grey,d0
	jsr set_colour
	move #planet_x-planet_rad+3,d0
	move #planet_y+43+3,d1
	move #planet_x-planet_rad+7,d2
	move d1,d3
	jsr line
	moveq #bit_arrow_right,d0			print right arrow
	jsr find_bitmap
	move #planet_x+planet_rad-2,d0
	move #planet_y+43+1,d1
	jsr put_bitmap
	move #planet_x+planet_rad-3,d0
	move #planet_y+43+3,d1
	move #planet_x+planet_rad-7,d2
	move d1,d3
	jsr line

	ret


* *********************************************
* **										 **
* ** PLANET_LINE - DRAW A LINE OF THE PLANET **
* **										 **
* *********************************************

* Draws a horizontal line of the planet. NOTE - all coords passed to the
* routine are signed offsets from the centre of the grabbed circle.

* Entry: D4 = x coord of left edge
*		 D5 = x coord of right edge
*		 D6 = y coord of line
* Exit:  None

* Regs: ?
* Subr: ?

	subr planet_line

	movem d0-d2,-(sp)					save registers
	movem d4-d6,xl(a6)					store coordinates
	move xl(a6),d0						calculate screen address (real)
	move yc(a6),d1
	add #planet_x,d0
	add #planet_y,d1
	jsr dot_to_addr
	move.l a0,a1
	and #15,d0							calculate output bit #
	eor #15,d0
	move d0,d2
	move xl(a6),d0						calculate texture screen address
	move yc(a6),d1
	add circle_x(a6),d0
	add circle_y(a6),d1
	jsr dot_to_addr
	move.l a0,d1
	move.l flip_screen(a6),d7
	eor.l d7,d1
	move.l d1,a0
	and #15,d0							calculate input bit #
	eor #15,d0
	move xr(a6),d7						calculate width
	sub xl(a6),d7
	loop 1								loop for each pixel
		moveq #6,d6 					repeat for each plane
		repeat
			move (a0,d6),d1 			fetch input data word
			move (a1,d6),d3 			fetch output data word
			bclr d2,d3					clear current bit
			btst d0,d1					bit set ?
			if <ne> then.s				yes
				bset d2,d3				set output data bit
			endi
			move d3,(a1,d6) 			store new bit
			subq #2,d6					next plane
		until <mi>
		dec d0							next pixel
		if <mi> then.s
			and #15,d0
			addq.l #8,a0
		endi
		dec d2
		if <mi> then.s
			and #15,d2
			addq.l #8,a1
		endi
	next 1								next pixel
	movem (sp)+,d0-d2					restore registers

	ret 								return


* ***********************************************
* **										   **
* ** MESSAGE - PRINT MESSAGE IN COMMAND WINDOW **
* **										   **
* ***********************************************

* Prints a string, waits a while and clears the command window.

* Entry: A0 = address of the string
* Exits: None

* Regr: ?
* Subr: ?

	subr message,global

	jsr print_string					Print string
	move #2*50,d0						Wait a while
	jsr wait
	jmp clear_input 					clear command window

* ---- LOCAL DATA ----

* Planet data mouse action table.

data_action_table:

	include icons.m68
	dc.w -1
	dc.l 0

* Options for the different creatures.

heads:

	dc 1,bit_h_slimy
	dc 1,bit_h_bug_eyed
	dc 1,bit_h_horned
	dc 1,bit_h_boney
	dc 1,bit_h_fat
	dc 1,bit_h_furry
	dc 1,bit_h_mutant
	dc 1,bit_h_weird

bodies:

	dc 1,bit_b_rodent
	dc 1,bit_b_frog
	dc 1,bit_b_lizard
	dc 1,bit_b_lobster
	dc 1,bit_b_bird
	dc 3,bit_b_humanoid
	dc 1,bit_b_feline
	dc 1,bit_b_insect

* Inhabitant colour palettes.

inhab_palette:

	dc lgt_green*2						colours to change
	dc mid_green*2
	dc drk_green*2
	dc $350,$470,$230					green
	dc $510,$621,$210					red
	dc $660,$440,$220					yellow
	dc $146,$356,$016					blue
	dc $666,$444,$222					white
	dc $524,$534,$505					pyscho #1
	dc $211,$431,$221					pyscho #2
	dc $350,$470,$230					another green

* Misc. text messages.

text1:	db 'Data on ',0
text2:	db c_ink,magenta
		db c_cursor,text_x/8,text_top
		db 'Economy:'
		db c_cursor,text_x/8,text_top+8
		db 'Government:'
		db c_cursor,text_x/8,text_top+16
		db 'Tech Level:'
		db c_cursor,text_x/8,text_top+24
		db 'Pop:'
		db c_cursor,text_x/8,14*8
		db 'GNP:',0
text3:	db ' Agricultural',0
text4:	db ' Industrial',0
text5:	db 'bn',0
text6:	db 'MCr',0
text7:	db 'Human'
text8:	db 'Colonial'
text9:	db ' km',0
text10: db 'Light Years',0

* Table of string for governent type 0..7

government:

	dz <Anarchy>
	dz <Feudal>
	dz <Multi-government>
	dz <Dictatorship>
	dz <Communist>
	dz <Confederacy>
	dz <Democracy>
	dz <Corporate state>

* Table of strings for economy rating 0..7

economy:

	dz <Poor>
	dz <Average>
	dz <Rich>
	dz <Mainly>
	dz <Mainly>
	dz <Poor>
	dz <Average>
	dz <Rich>

* Strings for descriptions of the inhabitants of a planet.

human:

	dz <Human>
	dz <Colonial>

inhab_size:

	dz <Large>
	dz <Fierce>
	dz <Small>
	db 0,0,0,0,0

inhab_colour:

	dz <Green>
	dz <Red>
	dz <Yellow>
	dz <Blue>
	dz <White>
	dz <Harmless>
	db 0,0

inhab_looks:

	dz <Slimy>
	dz <Bug-eyed>
	dz <Horned>
	dz <Bony>
	dz <Fat>
	dz <Furry>
	dz <Mutant>
	dz <Weird>

inhab_type:

	dz <Rodent>
	dz <Frog>
	dz <Lizard>
	dz <Lobster>
	dz <Bird>
	dz <Humanoid>
	dz <Feline>
	dz <Insect>
