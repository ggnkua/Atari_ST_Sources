*	@@@@  @@@@@@  @@@@@@@	@@@@   @@@@@@	 @@   @@@@
*  @@  @@  @@  @@  @@	@  @@  @@	 @@ 	@@@@   @@
*  @@	   @@  @@  @@ @   @@		 @@    @@  @@  @@
*	@@@@   @@@@@   @@@@   @@		 @@    @@  @@  @@
*	   @@  @@	   @@ @   @@		 @@    @@@@@@  @@	@
*  @@  @@  @@	   @@	@  @@  @@	 @@    @@  @@  @@  @@
*	@@@@  @@@@	  @@@@@@@	@@@@   @@@@@@  @@  @@ @@@@@@@

* Routines to draw special objects in the 3D world. These basically covers
* all non-3D objects, i.e. planets, suns, lasers, explosions.

* Version 1.0 25th June 1988 Copyright (c) 1988 Mr. Micro Ltd.
* Designed and coded by Rob Nicholson.

	include macros

	xref set_colour,polygon,circle,c_line,c_plotxy,explode_vectors

	module special

* ---- LOCAL CONSTANTS ----

pulse_size: 		equ 150 			length of laser beam pulse
pulse_speed:		equ 550 			speed of the laser

* ---- LOCAL VARIABLES ----

	vars special

exp_colour: 		ds.w 1				colour of explosion points

	end_vars special

	module special

* *****************************************
* **									 **
* ** DRAW_POINT - DRAW POINT TYPE OBJECT **
* **									 **
* *****************************************

* Draws a point type object, i.e. sun, planet or small object.

* Entry: D0 = object type
* Exit:  None

* Regs:  ?
* Subr:  ?

	subr draw_point,global

	cmp #hyp_circle,d0					hyperspace circle ?
	if <eq> then.s						yes
		move obj_colour(a5),d0
	else.s
		cmp #planet,d0					planet ?
		if <eq> then.s					yes
			moveq #drk_green,d0 		draw in green
		else.s
			cmp #sun,d0 				sun ?
			if <eq> then.s				yes
				st sun_flare(a6)		start flare
				moveq #yellow,d0		draw in yellow
			else.s
				cmp #photon,d0			photon ?
				if <eq> then.s			yes, draw in red
					moveq #red,d0
				else.s
					moveq #lgt_grey,d0	draw blob in grey
				endi
			endi
		endi
	endi
	jsr set_colour
	movem centre_x(a5),d5/d6			draw a solid circle
	move scr_radius(a5),d7
	dec d7
	jsr circle
	clr sun_flare(a6)					clear flare flag

	ret 								return


* ********************************************
* **										**
* ** DRAW_EXPLOSION - DRAW OBJECT EXPLOSION **
* **										**
* ********************************************

* Draws the explosion of an object.

* Entry: A5 = ptr: object record
* Exit:  None

* Regs: ?
* Subr: ?

	subr draw_explosion,global

	move exp_timer(a5),d7				determine no. pixels to draw
	cmp #75,d7
	if <hs> then.s
		moveq #75-1,d7
	endi
	lea explode_vectors,a2				point to explosion vectors
	loop 1								loop for each point
		move exp_colour(a6),d0			set pixel colour
		inc d0
		and #15,d0
		move d0,exp_colour(a6)
		jsr set_colour
		move (a2)+,d0					x = i * exp_radius
		muls exp_rad(a5),d0
		asl.l #2,d0
		swap d0
		move (a2)+,d1					y = i * exp_radius
		muls exp_rad(a5),d1
		asl.l #2,d1
		swap d1
		add this_xpos+2(a5),d0			add coords of object
		add this_ypos+2(a5),d1
		move this_zpos+2(a5),d2 		(z = 0)
		ext.l d0						xs = x*512/z
		moveq #9,d3
		asl.l d3,d0
		divs d2,d0
		if <vs> then.s
			tst.l d0
			if <pl> then.s
				move #maxint,d0
			else.s
				move #-maxint,d0
			endi
		endi
		ext.l d1						ys = y*512/z
		asl.l d3,d1
		divs d2,d1
		if <vs> then.s
			tst.l d1
			if <pl> then.s
				move #maxint,d1
			else.s
				move #-maxint,d1
			endi
		endi
		jsr c_plotxy					plot pixel (with clipping)
	next 1								next point

	ret


* ****************************************
* **									**
* ** DRAW_LASERS - DRAW OUT LASER BEAMS **
* **									**
* ****************************************

* Draws out aser beams in the 3D world.

* Entry: None
* Exit:  None

* Regs: ?
* Subr: ?

	subr draw_lasers,global

	tst firing(a6)						laser fire timer
	if <ne> then.s
		dec firing(a6)
	endi
	moveq #lgt_blue,d0					draw lasers lines in light blue
	jsr set_colour
	lea lasers(a6),a5					point to 1st laser
	loop 1,max_lasers					loop for each laser
		tst active(a5)					laser in use ?
		if <ne> then.s					yes
			bsr draw_laser				draw the laser
		endi
		add.l #laser_len,a5 			next record
	next 1

	ret


* ************************************
* **								**
* ** DRAW_LASER - DRAW A LASER BEAM **
* **								**
* ************************************

* Draws the current laser beam.

* Entry: A5 = ptr: laser beam record
* Exit:  None

* Regs: ?
* Subr: C_LINE

	subr draw_laser

	push d7 							save D7
	movem pulse_x(a5),d0-d2 			fetch laser coords
	move vector+i(a5),d3				calculate coords of end point
	muls #pulse_size,d3
	asl.l #2,d3
	swap d3
	add d0,d3
	move vector+j(a5),d4
	muls #pulse_size,d4
	asl.l #2,d4
	swap d4
	add d1,d4
	move vector+k(a5),d5
	muls #pulse_size,d5
	asl.l #2,d5
	swap d5
	add d2,d5
	moveq #9,d6 						xs1 = x1 * 512 / z1
	asl.l d6,d0
	divs d2,d0
	if <vs> then.s
		move #-maxint,d0
	endi
	asl.l d6,d1 						ys1 = y1 * 512 / z1
	divs d2,d1
	if <vs> then.s
		move #-maxint,d1
	endi
	ext.l d3							xs2 = x2 * 512 / z2
	asl.l d6,d3
	divs d5,d3
	if <vs> then.s
		move #-maxint,d3
	endi
	ext.l d4							ys2 = y2 * 512 / z2
	asl.l d6,d4
	divs d5,d4
	if <vs> then.s
		move #-maxint,d3
	endi
	move d3,d2							draw the lines
	move d4,d3
	movem d0-d3,-(sp)
	jsr c_line
	movem (sp)+,d0-d3
	neg d0
	neg d2
	jsr c_line
	lea pulse_x(a5),a0					move laser through space
	lea vector(a5),a1
	loop 1,3
		move (a1)+,d0					fetch vector component
		muls #pulse_speed,d0			multiply by laser speed
		asl.l #2,d0
		swap d0
		add d0,(a0)+					add to coordinate
	next 1
	dec life(a5)						laser reached target ?
	if <eq> then.s						yes
		st at_target(a6)				set reached target flag
		clr active(a5)					record is free
	endi
	pop d7								restore D7

	ret

