*	@@@@	@@@   @@   @@ @@   @@	@@@   @@   @@
*  @@  @@  @@ @@  @@@ @@@ @@@ @@@  @@ @@  @@@  @@
* @@	  @@   @@ @@@@@@@ @@@@@@@ @@   @@ @@@@ @@
* @@	  @@   @@ @@@@@@@ @@@@@@@ @@   @@ @@ @@@@
* @@	  @@   @@ @@ @ @@ @@ @ @@ @@   @@ @@  @@@
*  @@  @@  @@ @@  @@   @@ @@   @@  @@ @@  @@   @@
*	@@@@	@@@   @@   @@ @@   @@	@@@   @@   @@

* Definition of constants and variables used by the program.

* Atari St Version 1.0 13th March 1988 Copyright (c) 1988 Mr. Micro Ltd.
* Designed and coded by Rob Nicholson. Developed from the MSX version.

* Development flags.

com_link:		equ -0					flag: using com-link
use_novella:	equ -1					flag: use novella protection
calc_checksum:	equ -0					flag: calculate and display checksum
valid:			equ $6ba6				current valid checksum
debug:			equ -0					include debug code

* Reasons for game over.

hit_planet: 	equ 0
no_energy:		equ 1
overheated: 	equ 2
player_quits:	equ 3
missiled:		equ 4

* Size of variable areas (words).

vector_vsize:	equ 600
init_vsize: 	equ 600
rotate_vsize:	equ 8
attract_vsize:	equ 16
sounds_vsize:	equ 72
except_vsize:	equ 16
bios_vsize: 	equ 64
sprites_vsize:	equ 48
disk_vsize: 	equ 32
funny_vsize:	equ 272
galaxy_vsize:	equ 32
cockpit_vsize:	equ 16
dust_vsize: 	equ 600
graphics_vsize: equ 300
flight_vsize:	equ 16
action_vsize:	equ 764
orbit_vsize:	equ 16
radar_vsize:	equ 16
combat_vsize:	equ 16
special_vsize:	equ 16
cargo_vsize:	equ 16
equip_vsize:	equ 16
pdata_vsize:	equ 16
options_vsize:	equ 16
effects_vsize:	equ 32
auto_vsize: 	equ 16

* Print control codes.

c_null: 		equ 0					do nothing
c_ink:			equ 1					change ink pen
c_paper:		equ 2					change paper pen
c_colour:		equ 3					change ink and paper pen
c_cursor:		equ 4					move cursor position
c_repeat:		equ 5					repeated bytes
c_backspace:	equ 8					move cursor back
c_tab:			equ 9					move to tab position

* Bios functions.

setexec:		equ $05 				set exception vector

* Extended Bios Functions.

physbase:		equ $02 				get base address of screen
setscreen:		equ $05 				set screen attributes (resolution)
setpalette: 	equ $06 				set colour palette
setcolor:		equ $07 				set colour of pen
mfpint: 		equ $0d 				set MFP interrupt vector
random24:		equ $11 				generate random number
cursconf:		equ $15 				set cursor configuration
vsync:			equ $25 				wait for VSYNC (flyback)

* BDOS Functions.

p_term: 		equ $00 				terminate program
c_conout:		equ $02 				console output
c_rawcin:		equ $07 				raw character input
c_conws:		equ $09 				write string to console
f_setdta:		equ $1a 				set DTA address
s_mode: 		equ $20 				switch mode (super-user)
f_create:		equ $3c 				create a file
f_open: 		equ $3d 				open a file
f_close:		equ $3e 				close a file
f_read: 		equ $3f 				read bytes from file
f_write:		equ $40 				write bytes to file
f_sfirst:		equ $4e 				search for first file
f_snext:		equ $4f 				search for next file

* Atari ports.

psg_select: 	equ $ff8800 			PSG register select
psg_read:		equ $ff8800 			PSG read register
psg_write:		equ $ff8802 			PSG write register
mfp_io: 		equ $fffa01 			MFP 	input/output
mfp_edge:		equ $fffa03 					active edges
mfp_direction:	equ $fffa05 					direction of I/O
mfp_enable_a:	equ $fffa07 					interrupt enable A
mfp_enable_b:	equ $fffa09 					interrupt enable B
mfp_pending_a:	equ $fffa0b 					interrupt pending A
mfp_pending_b:	equ $fffa0d 					interrupt pending B
mfp_service_a:	equ $fffa0f 					in service A
mfp_service_b:	equ $fffa11 					in service B
mfp_mask_a: 	equ $fffa13 					mask register A
mfp_mask_b: 	equ $fffa15 					mask register B
vram_base:		equ $ff8201 			video ram base address
palette:		equ $ff8240 			palette registers (0..15)
key_status: 	equ $fffc00 			keyboard ACIA status port
key_rx: 		equ $fffc02 			keyboard ACIA data rx port
midi_status:	equ $fffc04 			midi ACIA status port
midi_rx:		equ $fffc06 			midi ACIA data rx port

* 68000 flag bits.

carry:			equ 0
overflow:		equ 1
zero:			equ 2
sign:			equ 3
extend: 		equ 4

* Colour palette.

trans:			equ 0
lgt_grey:		equ 1
drk_grey:		equ 2
orange: 		equ 3
magenta:		equ 4
yellow: 		equ 5
red:			equ 6
lgt_green:		equ 7
mid_green:		equ 8
drk_green:		equ 9
lgt_blue:		equ 10
mid_blue:		equ 11
drk_blue:		equ 12
black:			equ 13
pulse:			equ 14
white:			equ 15

* Misc. constants.

bar_width:		equ 48					width of the bar (max)
unit:			equ $4000				unit vector
reduce_rate:	equ 4					rate to reduce energy
exp_dur:		equ 120 				duration of explosion
rate:			equ 4					explosion rate
radar_range:	equ $6000				range of radar
torus_planet:	equ $26000				min orbit for torus drive (planet)
torus_sun:		equ $20000				min orbit for torus drive (sun)
title_y:		equ 2					y coord of title line
prompt_y:		equ 192 				y coord of prompt window
text_left:		equ 0					text window dimensions
text_right: 	equ 319
text_top:		equ 16
text_bottom:	equ 169
text_width: 	equ text_right-text_left
text_depth: 	equ text_bottom-text_top
off_left:		equ 0					clipping flags
off_right:		equ 1
off_bottom: 	equ 2
off_top:		equ 3
stack_size: 	equ 256 				program stack size (words)
io_size:		equ 256 				size of io buffer
neo_size:		equ 32128				size of NEOCHROME file
key_size:		equ 8					size of keyboard buffer
maxint: 		equ 32767				max integer
witch_prob: 	equ 12					probability of which space
missile_prob:	equ 15					probability of missile launch
destroy_prob:	equ 20					probability of cargo being destroyed
escape_prob:	equ 20					probability of enemy escaping
peel_prob:		equ 50					probability of peel off of attack
mission_rate:	equ 64					rate at which missions occur
tharg_kill: 	equ 8					no. thargoids to kill
csr_rate:		equ 30					cursor flash rate
max_roll:		equ 40					max roll (degrees x 10)
max_climb:		equ 40					max climb (degrees x 10)
logic_rate: 	equ 3					rate to execute logic
max_rot:		equ 200 				rate to execute ORTHOGONAL
max_shield: 	equ 24					max front shield value
max_fuel:		equ 70					max fuel carried
max_ltemp:		equ 48					max laser temperature
max_energy: 	equ 96					max energy
min_frame:		equ 5					min frame rate
pause_time: 	equ 3					pause time to read messages
flash_rate: 	equ 25					flash rate x 1/50th second
csr_acc:		equ 7					cursor acceleration rate
max_csr:		equ 8					max cursor speed
no_dust:		equ 15					no. dust particles
max_objects:	equ 30					max no. of objects
max_lasers: 	equ 5					max no. of laser beams
max_speed:		equ 22					max speed of player
max_nodes:		equ 50					max. no. of nodes
node_len:		equ 16					bytes per node record
node_mult:		equ 4					log2(node_len)
retro_life: 	equ 500 				life of retro-rockets
clock_x:		equ 26					coords of time clock
clock_y:		equ 148

* Joystick movements.

up: 			equ 0
down:			equ 1
left:			equ 2
right:			equ 3
trigger:		equ 4

* Limits of the local chart.

x_range:		equ 100/4
y_range:		equ 80/4

* Icon numbers (bottom of screen).

	offset 0

icon_launch:		ds.b 1
icon_buy:			ds.b 1
icon_sell:			ds.b 1
icon_equip: 		ds.b 1
icon_galactic:		ds.b 1
icon_local: 		ds.b 1
icon_data:			ds.b 1
icon_prices:		ds.b 1
icon_inventory: 	ds.b 1
icon_status:		ds.b 1
icon_disk:			ds.b 1
icon_find:			ds.b 1
icon_home:			ds.b 1
icon_options:		ds.b 1

* System variables.

vblqueue:		equ $456				VBLANK queue list
screenptr:		equ $45e				new screen pointer
frclock:		equ $466				frame flyback clock
conterm:		equ $484				console terminal flags

* Dimensions of cockpit.

no_cols:		equ 32					no. columns across (8x8)
no_rows:		equ 14					no. rows down (8x8)
x_size: 		equ no_cols<<3			width in pixels
y_size: 		equ no_rows<<3			depth in pixels
x_min:			equ -(x_size>>1)+1
x_max:			equ (x_size>>1)-1
y_min:			equ -(y_size>>1)
y_max:			equ (y_size>>1)-1
x_left: 		equ (320-x_size)>>1 	x coordinate of left edge
y_top:			equ 8					y coordinate of top edge

* Object types.

	offset 0

spacestn:		ds.b 1
missile:		ds.b 1
barrel: 		ds.b 1
asteroid:		ds.b 1
worm:			ds.b 1
thargon:		ds.b 1
platlet:		ds.b 1
letter_e:		ds.b 1
letter_l:		ds.b 1
letter_i:		ds.b 1
letter_t:		ds.b 1
viper:			ds.b 1
dodec:			ds.b 1

traders:

cobra:			ds.b 1					traders
python: 		ds.b 1
ferdelance: 	ds.b 1
anaconda:		ds.b 1
cobra_mk1:		ds.b 1

no_traders: 	equ *-traders

pirates:

krait:			ds.b 1					pirates
thargoid:		ds.b 1
boa:			ds.b 1
gecko:			ds.b 1
moray:			ds.b 1
adder:			ds.b 1
mamba:			ds.b 1
asp:			ds.b 1
sidewinder: 	ds.b 1
wolf:			ds.b 1

no_pirates: 	equ *-pirates

shuttle:		ds.b 1					shuttles
transporter:	ds.b 1

cougar: 		ds.b 1					mission ships
constr: 		ds.b 1

panels: 		ds.b 11 				launch bay panels

max_obj_num:	equ *					max no. of objects in data base

	offset 100

planet: 		ds.b 1					Planet and sun
sun:			ds.b 1
photon: 		ds.b 1					photon bolt
hyp_circle: 	ds.b 1					hyperspace circle

* Sound effects.

	offset 0

sfx_keyclick:		ds.b 1				key pressed
sfx_locked: 		ds.b 1				missile locked on target
sfx_explosion:		ds.b 1				explosion when hit
sfx_laser:			ds.b 1				cobra laser fire
sfx_shields:		ds.b 1				shields hit
sfx_alert:			ds.b 1				general alert
sfx_error:			ds.b 1				key entry error
sfx_hexagon:		ds.b 1				enter/Leaving spacestation
sfx_ecm:			ds.b 1				ecm activated
sfx_hit:			ds.b 1				we've been hit
sfx_spacejump:		ds.b 1				space skip towards planet
sfx_missile:		ds.b 1				missile player
sfx_hyperspace: 	ds.b 1				flying through hyperspace
sfx_cargo:			ds.b 1				captured some cargo
sfx_bomb:			ds.b 1				energy bomb
sfx_doors:			ds.b 1				opening doors
sfx_teletype:		ds.b 1				teletype print effect

* Logic bytes.

	offset 0

log_none:			ds.b 1				no logic
log_exploding:		ds.b 1				object is exploding
log_rotating:		ds.b 1				gental rotation (space station)
log_locked: 		ds.b 1				locked onto object (missile)
log_launch: 		ds.b 1				trader launching from space station
log_police: 		ds.b 1				police attack launch
log_attack: 		ds.b 1				on attack run
log_peel_off:		ds.b 1				peeling off
log_run_off:		ds.b 1				running away
log_twisting:		ds.b 1				random twisting (canister)
log_fly_planet: 	ds.b 1				flying towards the planet
log_avoid:			ds.b 1				avoiding collision
log_cruise: 		ds.b 1				crusing in space (asteroids)
log_missile:		ds.b 1				track towards player
log_escape: 		ds.b 1				leg it
log_timer:			ds.b 1				time then disappear
log_photon: 		ds.b 1				photon bolt logic
log_endgame1:		ds.b 1				move Cobra closer
log_takeoff:		ds.b 8				launch takeoff logics
log_circle: 		ds.b 1				hyperspace circle logic
log_docking:		ds.b 12 			docking sequence logics

* Possible displays.

disp_galactic:		equ 1				galactic chart
disp_local: 		equ 2				local chart

* Planet record definition.

	offset 0

seed:				ds.w 3				random seed
xcoord: 			ds.w 1				x coordinate
ycoord: 			ds.w 1				y coordinate
govern: 			ds.w 1				type of government
econ:				ds.w 1				type of economy
tech:				ds.w 1				tech level
pname:				ds.w 4				name tokens

planet_len: equ *

* List of different cargo types.

	offset 0

food:				ds.b 1
textiles:			ds.b 1
radioactives:		ds.b 1
slaves: 			ds.b 1
liquor_wines:		ds.b 1
luxuries:			ds.b 1
narcotics:			ds.b 1
computers:			ds.b 1
machinery:			ds.b 1
alloys: 			ds.b 1
firearms:			ds.b 1
furs:				ds.b 1
minerals:			ds.b 1
gold:				ds.b 1
platinum:			ds.b 1
gem_stones: 		ds.b 1
alien_items:		ds.b 1
medical_supplies:	ds.b 1
refugees:			ds.b 1
documents:			ds.b 1

max_products:	equ *					no. types of cargo

* Products record definition.

	offset 0

price:				ds.w 1				price of product
quantity:			ds.w 1				quantity available
units:				ds.w 1				units used
naughty:			ds.w 1				illegal factor

product_len:	equ *
products_size:	equ product_len*max_products

* Sprite record definition.

	offset 0

sp_flags:			ds.w 1				sprite flags
sp_xpos:			ds.w 1				x position
sp_ypos:			ds.w 1				y position
data_ptr:			ds.l 1				ptr: sprite data
buffer_ptr: 		ds.l 1				ptr: buffer for saved data
video_ptr:			ds.l 1				ptr: video ram saved
sp_width:			ds.w 1				width of sprite
sp_depth:			ds.w 1				depth of sprite
clip_left:			ds.w 1				clip window coords
clip_right: 		ds.w 1
clip_top:			ds.w 1
clip_bottom:		ds.w 1

sprite_len: 	equ *

* Sprite flag usage.

	offset 0

clip_me:			ds.b 1
back_saved: 		ds.b 1
dual_screen:		ds.b 1
dont_save:			ds.b 1

* Object record definition.

	offset 0

flags:				ds.w 1				misc. flags
xpos:				ds.l 1				x,y,z world coords
ypos:				ds.l 1
zpos:				ds.l 1
x_vector:			ds.w 3				x,y,z direction vectors
y_vector:			ds.w 3
z_vector:			ds.w 3
velocity:			ds.w 1				current velocity
this_xpos:			ds.l 1				x,y,z coords of object (view swapped)
this_ypos:			ds.l 1
this_zpos:			ds.l 1
centre_x:			ds.w 1				object view centre coords
centre_y:			ds.w 1
scr_radius: 		ds.w 1				screen radius
type:				ds.w 1				type of object (obj_xx)
rot_count:			ds.w 1				rotation counter (ORTHOGONAL)
health: 			ds.w 1				health of object (decrease when hit)
mother: 			ds.w 1				object number of mother ship
mother_z:			ds.w 1				z coord of mother ship (high word)
obj_range:			ds.l 1				range to object from player
obj_colour: 		ds.w 1				object colour over-ride (if !0)
logic:				ds.w 1				current logic type
exp_rad:			ds.w 1				explosion radius
exp_timer:			ds.w 1				explosion duration timer
force_timer:		ds.w 1				counter to expand
force:				ds.w 1				force of explosion/laser hit
target: 			ds.l 1				ptr: target object's record
on_course:			ds.w 1				flag: on course to target
counter:			ds.w 1				general purpose counter
peel_x_count:		ds.w 1				no. times to rotate in x direction
peel_x: 			ds.w 1				angle to rotate each time
peel_z_count:		ds.w 1				no. times to rotate in z direction
peel_z: 			ds.w 1				angle to rotate each time
pre_attack: 		ds.w 1				pre-attack health
next_logic: 		ds.w 1				next logic to perform
nodes:				ds.l 1				ptr: node data
surfaces:			ds.l 1				ptr: surface data
text:				ds.l 1				ptr: text data
no_surfaces:		ds.w 1				number of surfaces
no_nodes:			ds.w 1				number of nodes
hits_rad:			ds.w 1				laser/missile hits radius
energy_max: 		ds.w 1				max energy of object
vel_max:			ds.w 1				max energy of object
gun_node:			ds.w 1				node for gun fire
hidden: 			ds.w 1				flag: hidden lines used
obj_rad:			ds.w 1				max object radius
turn_rate:			ds.w 1				max rate of turn
ship_type:			ds.w 1				ship type (pirate, trader etc.)
attack_type:		ds.w 1				logic when attacked
no_missiles:		ds.w 1				max no. of missiles carried
ecm_fitted: 		ds.w 1				flag: ecm fitted
cargo_type: 		ds.w 1				cargo type carried
no_canisters:		ds.w 1				no. canisters being carried
mood:				ds.w 1				mood of ship
bounty: 			ds.w 1				bounty when detroyed
kill_rating:		ds.w 1				kill rating when detroyed

obj_len:			equ *
obj_data_len:		equ *-nodes
obj_size:			equ obj_len*max_objects

* Flag usage in object flags.

in_use: 			equ 0				object in use
invincible: 		equ 1				can't be destroyed
point:				equ 2				point object, e.g sun
remove: 			equ 3				remove object from world
angry:				equ 4				angry with player
no_bounty:			equ 5				no bounty when hit
yvector_ok: 		equ 6				y vector is ok
no_radar:			equ 7				don't display on radar


* General object types (stored in SHIP_TYPE field).

typ_trader: 		equ 0
typ_pirate: 		equ 1
typ_shuttle:		equ 2
typ_debris: 		equ 3
typ_police: 		equ 4
typ_bounty: 		equ 5
typ_missile:		equ 6
typ_alien:			equ 7

* Action types when attacked (stored in ATTACK_TYPE).

act_nothing:		equ 0
act_runaway:		equ 1
act_attack: 		equ 2

* Offsets for vector components.

i:					equ 0
j:					equ 2
k:					equ 4

* Laser record definition.

	offset 0

active: 			ds.w 1				flag: record in use
pulse_x:			ds.w 1				world coords of laser
pulse_y:			ds.w 1
pulse_z:			ds.w 1
vector: 			ds.w 3				direction vector
life:				ds.w 1				life counter

laser_len:		equ *
laser_size: 	equ max_lasers*laser_len


* Node record definition.

	offset 0

nflags: 			ds.w 1				various flags
scr_x:				ds.w 1				screen coords
scr_y:				ds.w 1
prev:				ds.l 1				previous node
next:				ds.l 1				next node

node_size:	equ max_nodes*node_len

* Flag usage in NFLAGS.

world:				equ 4				world coords calculated
screen: 			equ 5				screen coords calculated
clipped:			equ 6				coord requires clipping
last:				equ 7				flag: last node

* Flag usage in USER.

	offset 0

f_fx:			ds.b 1					sound effects enabled
f_damping:		ds.b 1					damping on and off
f_centre:		ds.b 1					centre joystick flag
f_reverse:		ds.b 1					reverse joystick flag
f_docking:		ds.b 1					docking computer fast/slow
f_sequence: 	ds.b 1					docking sequence on/off

* Equipment record.

	offset 0

fuel:				ds.w 1				amount of fuel left
missiles:			ds.w 1				no. of missiles
cargo_bay:			ds.w 1				cargo bay fitted
ecm_system: 		ds.w 1				ecm system fitted
pulse_lasers:		ds.w 1				position of pulse lasers
beam_lasers:		ds.w 1				position of beam lasers
fuel_scoop: 		ds.w 1				fuel scoop fitted
escape_capsule: 	ds.w 1				escape capsule fitted
energy_bomb:		ds.w 1				energy bomb fitted
energy_unit:		ds.w 1				energy unit fitted
docking_comp:		ds.w 1				docking computer fitted
hyperdrive: 		ds.w 1				galactic hyperdrive fitted
mining_lasers:		ds.w 1				position of mining lasers
military_lasers:	ds.w 1				position of military lasers
retro_rockets:		ds.w 1				cobra retro rockets
ecm_jammer: 		ds.w 1				ECM jammer fitted
cloaking_device:	ds.w 1				cloaking device fitted

equip_len:		equ *
equip_range:	equ (ecm_jammer-ecm_system)/2
first_equip:	equ ecm_system
last_equip: 	equ retro_rockets

* Global variables. If the description of a variable is followed by !!, the
* order they are defined in is important and should not be changed (probably
* MOVEM is used to access them).

	offset 0

game_state: 		ds.w 128			current game state buffer
game_time:			ds.w 4				game time (secs,mins,hours,days)
loop_ctr:			ds.w 1				main loop counter
frame_count:		ds.w 1				frame rate counter
game_over:			ds.w 1				flag: game is over
reason: 			ds.w 1				reason for game over
cplanet:			ds.b planet_len 	current planet record
splanet:			ds.b planet_len 	system planet record
x1: 				ds.w 1				x,y,z world coords of a line
y1: 				ds.w 1
z1: 				ds.w 1
x2: 				ds.w 1
y2: 				ds.w 1
z2: 				ds.w 1
equip:				ds.b equip_len		equipment record
products:			ds.b products_size	list of products on planet
front_shield:		ds.w 1				energy in front shields
aft_shield: 		ds.w 1				energy in aft shields
cabin_temp: 		ds.w 1				cabin temperature
altitude:			ds.w 1				altitude above planet
laser_temp: 		ds.w 1				laser temperature
speed:				ds.w 1				current speed
roll_angle: 		ds.w 1				roll angle (+/-)
climb_angle:		ds.w 1				climb angle (+/-)
energy: 			ds.w 1				energy in energy banks
laser_type: 		ds.w 1				laser type on view (0..3 or -1)
laser_rate: 		ds.w 1				rate at which lasers can fire
laser_power:		ds.w 1				hitting power of laser
firing: 			ds.w 1				flag: lasers firing
csr_speed:			ds.w 1				speed of cursor
csr_on: 			ds.w 1				flag: cursor is on
csr_clk:			ds.w 1				interrupt clock for cursor
text_addr:			ds.l 1				text print address
column: 			ds.w 1				current print column
row:				ds.w 1				current print row
text_ink:			ds.w 1				text ink colour
text_paper: 		ds.w 1				text paper colour
gal_seed:			ds.b 6				seed for galaxy generation
planet_name:		ds.b 12 			planet name buffer
dust_type:			ds.w 1				type of dust, 0=normal,1=hyper,2=skip
dust_size:			ds.w 1				length of dust streak
price_fuel: 		ds.w 1				price of fuel on planet
sun_range:			ds.l 1				range to sun
planet_range:		ds.l 1				range to planet
station_range:		ds.l 1				range to station
req_planet: 		ds.w 1				required planet (info etc)
joy_state:			ds.w 1				state of joystick
launching:			ds.w 1				flag: launching from station
input:				ds.b 12 			input from keyboard
disp_type:			ds.w 1				current display type
cockpit_on: 		ds.w 1				flag: cockpit displayed
rseed1: 			ds.w 1				random number seed
rseed2: 			ds.w 1
rseed3: 			ds.w 1
docked: 			ds.w 1				flag: docked with space station
jiffy_clock:		ds.w 1				interrupt jiffy clock
condition:			ds.w 1				condition, 0=green !0=red
flash_clock:		ds.w 1				interrupt clock for flashing speed
alert_col:			ds.w 1				condition red colour (??)
missile_state:		ds.w 1				state of missile system
this_obj:			ds.w 1				object no. of current object
ecm_on: 			ds.w 1				flag: ECM activated
speed_col:			ds.w 1				speed instrument colour
user:				ds.w 1				misc. user related flags
shields_fx: 		ds.w 1				flag: shields FX is running
alert_fx:			ds.w 1				flag: alert FX is running
just_docked:		ds.w 1				flag: just docked with space station
torus_on:			ds.w 1				ctr: torus jump drive active
text_frames:		ds.w 1				text frame persistance counter
last_screen:		ds.w 1				last chart displayed
count_down: 		ds.w 1				countdown timer (seconds)
count_jiffy:		ds.w 1				countdown jiffy counter (1/50th)
last_value: 		ds.w 1				last value of count_down
computer_on:		ds.w 1				flag: docking computer on
jump_trigger:		ds.w 1				flag: trigger hyperspace jump
hex_tone:			ds.w 1				tone of hexagon
kill_hexagon:		ds.w 1				flag: kill hexagon tone
force_load: 		ds.w 1				flag: force load command
jump_type:			ds.w 1				type of jump, 0=planet,!0=galaxy
missile_ptr:		ds.l 1				ptr: missile record (??)
target_ptr: 		ds.l 1				target object's record
launch_spin:		ds.w 1				launch spin counter
tempo:				ds.w 1				tempo of music
update_speed:		ds.w 1				flag: update speed display
text_row:			ds.w 1				text blatt row
laser_active:		ds.w 1				flag: objects laser is active
kill_count: 		ds.w 1				kill counter (right on commander)
stop_skip:			ds.w 1				flag: stop space skipping
launch_count:		ds.w 1				no. vipers next to launch
who_fired:			ds.w 1				flag: who first first
random_seed:		ds.b 4				random number seed (general?)
pirate_count:		ds.w 1				no. pirates flying round
trader_count:		ds.w 1				no. traders flying round
jump_count: 		ds.w 1				hyperspace jump counter
next_mission:		ds.w 1				next mission to perform
mission:			ds.w 1				current mission
snova:				ds.l 1				size of supernova
under_attack:		ds.w 1				flag: under attack
recharge_count: 	ds.w 1				recharge energy banks counter
first_time: 		ds.w 1				flag: first time thro' routine
player_name:		ds.b 12 			name of player
rating: 			ds.w 1				players rating
score:				ds.l 1				players score
cash:				ds.l 1				cash in bank
hold:				ds.l max_products	amount of in cargo hold
police_record:		ds.w 1				police record (0=harmless)
galaxy_no:			ds.w 1				current galaxy no.
current:			ds.w 1				current planet system
range:				ds.l 1				range to point
roll_sin:			ds.l 1				sine and cosine of roll !!
roll_cos:			ds.l 1
climb_sin:			ds.l 1				sine and cosine of climb !!
climb_cos:			ds.l 1
view:				ds.w 1				current view
radius: 			ds.w 1				misc. radius values
objects:			ds.b obj_size		array of object records
who_ecm:			ds.w 1				flag: who started ECM
witch_space:		ds.w 1				flag: in witch space
tharg_count:		ds.w 1				thargoid kill counter
witch_x:			ds.w 1				galactic coords of witchspace
witch_y:			ds.w 1
tharg_max:			ds.w 1				no. thargoids to kill
controls_locked:	ds.w 1				flag: controls are locked
shuttle_ctr:		ds.w 1				counter to next shuttle launch
asteroid_ctr:		ds.w 1				counter to next asteroid launch
trader_ctr: 		ds.w 1				counter to next trader launch
pirate_ctr: 		ds.w 1				counter to next pirate launch
fast_ticker:		ds.w 1				interrupt fast ticker
pad_char:			ds.w 1				pad character for BUILD_NUMBER
no_entry:			ds.w 1				flag: prevent entry to space station
visible:			ds.w 1				flag: object is visible
in_sights:			ds.w 1				flag: object is in sights
checkpoint: 		ds.w 1				flag: set at space station checkpoint
id_trigger: 		ds.w 1				flag: trigger ID message
cloaking_on:		ds.w 1				flag: cloaking device active
max_laser:			ds.w 1				max. energy laser fitted (0..3)
collided:			ds.w 1				flag: collided with object
mission_planet: 	ds.w 1				current mission planet
mission_count:		ds.w 1				no. planets left to visit on mission
ecm_jammed: 		ds.w 1				flag: ECM jammed
station_destroyed:	ds.w 1				flag: space station destroyed
fluctuation:		ds.w 1				random price fluctutation
scr_base:			ds.l 1				base address of current screen
charset_ptr:		ds.l 1				ptr: character set
ink_ptr:			ds.l 1				ptr: ink data table
paper_ptr:			ds.l 1				ptr: paper data table
stack:				ds.l stack_size 	program stack
stack_top:			ds.l 0				top of stack
number_buffer:		ds.b 16 			buffer for PRINT_NUMBER
l_view_ptr: 		ds.l 1				ptr: view swap routine (32 bit)
w_view_ptr: 		ds.l 1				ptr: view swap routine (16 bit)
debug_data: 		ds.b 16 			debug data area
save_ssp:			ds.l 1				saved value of system stack
file_source:		ds.w 1				flag: file load source (disk/com-link)
flyback:			ds.w 1				flag: flyback has occured
obj_ctr:			ds.b max_obj_num	count of each object
					ds 0
key_states: 		ds.b 128			keyboard key states
pad:				ds.b 128			pad buffer
text_buffer:		ds.b 128			text blatt buffer
player_record:		ds.b obj_len		player's object record
print_ptr:			ds.l 1				ptr: print character
sys_key:			ds.l 1				ptr: system keyboard/midi exception
range_spr:			ds.b sprite_len 	range circle sprite
cursor_spr: 		ds.b sprite_len 	cross-hair cursor sprite
missile_spr:		ds.b sprite_len 	missile sprite
view_spr:			ds.b sprite_len 	cockpit view sprite
radar1_spr: 		ds.b sprite_len 	mini-radar sprites (dual screen)
radar2_spr: 		ds.b sprite_len
io_buffer:			ds.b io_size		disk i/o buffer
display_clock:		ds.w 1				flag: display clock on vblank
vblank_ptr: 		ds.l 1				ptr: entry used in VBLANK list
pulse_dir:			ds.w 1				direction of pulse (0=none)
pulse_ctr:			ds.w 1				pulse counter
game_frozen:		ds.w 1				flag: game is frozen
planet_list:		ds.w 64 			list of planets on local chart
rotate_vars:		ds.w rotate_vsize	local variables
attract_vars:		ds.w attract_vsize
sounds_vars:		ds.w sounds_vsize
disk_vars:			ds.w disk_vsize
galaxy_vars:		ds.w galaxy_vsize
cockpit_vars:		ds.w cockpit_vsize
dust_vars:			ds.w dust_vsize
graphics_vars:		ds.w graphics_vsize
flight_vars:		ds.w flight_vsize
orbit_vars: 		ds.w orbit_vsize
init_vars:			ds.w init_vsize
radar_vars: 		ds.w radar_vsize
combat_vars:		ds.w combat_vsize
special_vars:		ds.w special_vsize
vector_vars:		ds.w vector_vsize
except_vars:		ds.w except_vsize
cargo_vars: 		ds.w cargo_vsize
sprites_vars:		ds.w sprites_vsize
bios_vars:			ds.w bios_vsize
equip_vars: 		ds.w equip_vsize
pdata_vars: 		ds.b pdata_vsize
options_vars:		ds.b options_vsize
funny_vars: 		ds.w funny_vsize
effects_vars:		ds.w effects_vsize
auto_vars:			ds.w auto_vsize
action_vars:		ds.w action_vsize
reduce_ctr: 		ds.w 1				energy reduction counter
dust_ctr:			ds.w 1				ctr: increase length of dust
end_hyperspace: 	ds.w 1				flag: end of hyperspace effect
latch:				ds.w 1				rate of dust length increase
radar_obj:			ds.w 1				object # on mini-radar
last1_ptr:			ds.l 1				ptr: last record in buffers
last2_ptr:			ds.l 1
last_ptr:			ds.l 1				ptr: last record stored
approach:			ds.w 1				object approach speed
hit_check:			ds.w 1				flag: check for laser hit
at_target:			ds.w 1				flag: laser reached target
lasers: 			ds.b laser_size 	laser records
judder_ctr: 		ds.w 1				screen judder counter
radar_scale:		ds.l 1				current radar scale range
old_speed:			ds.w 1				speed of cobra before jump
max_len:			ds.w 1				maximum length of dust
colour_ptr: 		ds.l 1				ptr: graphics colour masks
sun_flare:			ds.w 1				flag: add sun flare to circle
flare_count:		ds.w 1				flare bits counter
clip_panel: 		ds.w 1				panel clip flags
poly_min_y: 		ds.w 1				min y coord of polygon
poly_max_y: 		ds.w 1				max y coord of polygon
top_ptr:			ds.l 1				ptr: node on top of polygon
top_memory: 		ds.l 1				ptr: top of memory
next_record:		ds.l 1				ptr: next record in draw list
sys_hblank: 		ds.l 1				ptr: system hblank exception
f_front:			ds.w 1				instrument change flags
f_aft:				ds.w 1
f_fuel: 			ds.w 1
f_temp: 			ds.w 1
f_laser:			ds.w 1
f_altitude: 		ds.w 1
f_missiles: 		ds.w 1
f_speed:			ds.w 1
f_roll: 			ds.w 1
f_climb:			ds.w 1
f_energy:			ds.w 1
f_magnify:			ds.w 1
f_echar:			ds.w 1
f_schar:			ds.w 1
action_table:		ds.l 1				ptr: mouse action table
button_pressed: 	ds.w 1				flag: mouse button pressed
action_ptr: 		ds.l 1				ptr: routine to execute
function:			ds.w 1				function # (as in action table)
cursor_type:		ds.w 1				type of cursor (0,1 or 2)
icon_inverted:		ds.w 1				flag: icon is inverted
temp_spr:			ds.b sprite_len 	temporary sprite
click_rate: 		ds.w 1				double click rate (usually 10)
hyper_spr:			ds.b sprite_len 	hyperspace destination sprite
saved_palette:		ds.b 32 			saved system palette
move_x: 			ds.w 1				mouse cursor movement counters
move_y: 			ds.w 1
exp_distance:		ds.w 1				distance of explosion from centre
prog_checksum:		ds.w 1				checksum of program
ok_checksum:		ds.w 1				correct checkum
device: 			ds.w 1				input device, 0=mouse,!0=joystick
from_mouse: 		ds.w 1				flag: control from mouse
stop_cycle: 		ds.w 1				flag: stop colour cyling
check_key:			ds.w 1				flag: check next key press
fx_off: 			ds.w 1				flag: kill doors sound effect
slow_print: 		ds.w 1				flag: print text string slowly
invisible:			ds.w 1				flag: object invisible
retro_used: 		ds.w 1				no. times retro's have been used
retro_count:		ds.w 1				retro-rocket duration counter
reverse_draw:		ds.w 1				flag: draw objects backwards
torus_ctr:			ds.w 1				jump drive counter
allow_hack: 		ds.w 1				flag: allow hacking
logo_shown: 		ds.w 1				flag: Elite logo already shown
cycle_type: 		ds.w 1				colour cycle type
screen1_ptr:		ds.l 1				ptr: screen #1
screen2_ptr:		ds.l 1				ptr: screen #2
flip_screen:		ds.l 1				eor mask for flipping screens

var_size:			equ *				size of variables

* Pointers to common objects.

planet_rec: 		equ objects+obj_len*0
station_rec:		equ objects+obj_len*1
sun_rec:			equ objects+obj_len*2
