*	@@@@   @@  @@ @@@@@@@	@@@@  @@@  @@	@@@@   @@  @@ @@   @@
*  @@  @@  @@  @@  @@	@  @@  @@  @@  @@  @@  @@  @@  @@ @@@ @@@
* @@	   @@  @@  @@ @   @@	   @@ @@   @@	   @@  @@ @@@@@@@
* @@	   @@@@@@  @@@@   @@	   @@@@ 	@@@@   @@  @@ @@@@@@@
* @@	   @@  @@  @@ @   @@	   @@ @@	   @@  @@  @@ @@ @ @@
*  @@  @@  @@  @@  @@	@  @@  @@  @@  @@  @@  @@  @@  @@ @@   @@
*	@@@@   @@  @@ @@@@@@@	@@@@  @@@  @@	@@@@	@@@@  @@   @@

* Calculate and check for hacking routines.

	include macros

	xref checksum_start,checksum_end,disp_debug,shut_down,cockpit

	module checksum

start:

* Jump table to checksum routines (so that the JSR's never change).

	subr checksum,global

	bra _checksum

	subr check_hack,global

	bra _check_hack


* ***********************************
* **							   **
* ** CHECKSUM - CALCULATE CHECKSUM **
* **							   **
* ***********************************

* Calculates the checksum and stores in down in memory.

* Entry: None
* Exit:  None

* Regs: ?
* Subr: ?

	subr _checksum,global

	lea checksum_start,a0				start of memory to check
	clr d0								checksum = 0
	clr d1								high byte = 0 (always)
	repeat
		move.b (a0)+,d1 				add byte to checksum
		add d1,d0
	until.l a0 <eq> #checksum_end		until end of area to check
	move d0,prog_checksum(a6)			store checksum
	ifne use_novella
		move #valid,ok_checksum(a6) 	set correct checksum
	endc
	ifeq use_novella
		move d0,ok_checksum(a6) 		fudge checksum
	endc
	ifne calc_checksum
		pea cockpit+2					setup palette
		ext_bios setpalette,6
		jsr disp_debug					display checksum
		repeat
		endr
	endc

	ret 								return


* ***************************************************
* **											   **
* ** CHECK_HACK - CHECK IF PROGRAM HAS BEEN HACKED **
* **											   **
* ***************************************************

* Checks if the program has been hacked and bombing out if required.

* Entry: None
* Exit:  None

* Regs: ?
* Subr: ?

	subr _check_hack

	lea prog_checksum-1234(a6),a0		checksum ok ?
	lea ok_checksum-4321(a6),a1
	move 1234(a0),d0
	cmp 4321(a1),d0
	ret <eq>							yes, return
	jmp shut_down						shut down the program

end:

	ds.b 512-(end-start)				pad out to 1k
