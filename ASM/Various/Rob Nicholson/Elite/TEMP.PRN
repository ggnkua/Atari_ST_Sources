Quelo   ...A68K D5.0Pa 5/26/85   ...Run on Mar 30, 1990  11:41:06    ...Page  1
E:TEMP.LTX , E:TEMP.PRN ,  = E:TEMP.A68
   ...

                            1.  ;  @@@@   @@@@@@                 @@@@@@@ @@@@     @@@@@@  @@@@@@ @@@@@@@
                            2.  ; @@  @@  @ @@ @                  @@   @  @@            @@        @ @@ @  @@   @
                            3.  ; @@            @@                        @@ @    @@            @@              @@        @@ @
                            4.  ;  @@@@         @@                        @@@@    @@            @@              @@        @@@@
                            5.  ;         @@    @@                        @@ @    @@   @        @@              @@        @@ @
                            6.  ; @@  @@        @@                        @@   @  @@  @@        @@              @@        @@   @
                            7.  ;  @@@@    @@@@                  @@@@@@@ @@@@@@@  @@@@@@   @@@@  @@@@@@@
                            8.  
                            9.  ; Welcome aboard this Cobra Mk III trading and combat craft. The ship  has
                           10.  ; been supplied to you by Faulcon deLacy Spaceways, by arrangements with the
                           11.  ; Galactic Co-operative of Worlds whose Space and Interstellar Pilot Exams you
                           12.  ; have just successfully completed. The small flight  manual supplied with the
                           13.  ; craft is designed to  familiarise you  with all the aspects of space flight,
                           14.  ; combat and trading, and we hope that it will be of use to you.
                           15.  
                           16.  ; All routines in Elite are commented and the following conventions are used:
                           17.  
                           18.  ;       1. When an address register is specified as an entry or exit parameter,
                           19.  ;          it is assumed to be 32 bits unless otherwise specified.
                           20.  ;       2. When a data register is specified as an entry or exit parmameter, it
                           21.  ;          is assumed to be 16 bits unless otherwise specified.
                           22.  ;       3. A6 always points to the base of the variables (VARS) and is always
                           23.  ;          preserved.
                           24.  ;       4. Additionally to the registers listed, all subroutines corrupts the
                           25.  ;          status flags unless specified otherwise.
                           26.  
                           27.  ; Atari ST Version 1.0 15th March 1988
                           28.  
                           29.  ; Copyright (c) 1988 Mr. Micro and Firebird Software.
                           30.  ; Converted from the MSX version by Rob Nicholson.
                           31.  
                           32.  ; Modifcation history:
                           33.  
                           34.  ; V1.02 ??/??/?? 1st production version.
                           35.  ; V1.03 04/10/88 Mission #5 space station bug fixed (took one shot to blow
                           36.  ;                                it up. 2nd production version.
                           37.  ; V1.1  26/03/90 Police record reset to clean after using escape capsule.
                           38.  ;                                Password changed to SUZANNE and encoded in the program.
                           39.  ;                                Spelling mistake in mission text changed.
                           40.  ;                                Rating clamped at Elite.
                           41.  ;                                Reduce_Shields routine debugged to prevent you lossing
                           42.  ;                                equipment you didn't have.
                           43.  ;                            'Cursor reset to xxxx' prompt changed to 'Current system: '
                           44.  ;                                'E-L-I-T-E' message flashes on status screen.
                           45.  ;                                Correct icon highlighted when 'Load Commander' option
                           46.  ;                                selected from attract screen.
                           47.  ;                                Unable to engage docking computer while hyperspace
                           48.  ;                                countdown is active.
                           49.  ;                Mining lasers now release random # of platlets.
                           50.  ;                                Cash value of Thargoids and Alien items increased.
                           51.  
                           52.i         include macros
                           53.  * GLOBAL <name> - define a global label.
                           54.  
                           55.m global: macro
                           56.m 
Quelo   ...A68K D5.0Pa 5/26/85   ...Run on Mar 30, 1990  11:41:06    ...Page  2
E:TEMP.LTX , E:TEMP.PRN ,  = E:TEMP.A68
   ...

                           57.m         ifeq nargs-2
                           58.m                 \2
                           59.m         endc
                           60.m         xdef \1
                           61.m 
                           62.m \1:
                           63.m 
                           64.m         endm
                           65.  
                           66.  * INC <param>   - increment paramater.
                           67.  
                           68.m inc: macro
                           69.m 
                           70.m         addq.\0 #1,\1
                           71.m 
                           72.m         endm
                           73.  
                           74.  * DEC <param>   - decrement parameter.
                           75.  
                           76.m dec: macro
                           77.m 
                           78.m         subq.\0 #1,\1
                           79.m 
                           80.m         endm
                           81.  
                           82.  * PUSH <reg>    - push register on stack.
                           83.  
                           84.m push: macro
                           85.m 
                           86.m         move.\0 \1,-(sp)
                           87.m 
                           88.m         endm
                           89.  
                           90.  * POP <reg>     - pop register from stack
                           91.  
                           92.m pop: macro
                           93.m 
                           94.m         move.\0 (sp)+,\1
                           95.m 
                           96.m         endm
                           97.  
                           98.  * DZ <string>   - define zero terminated string
                           99.  
                          100.m dz: macro
                          101.m 
                          102.m         dc.b '\1',0
                          103.m 
                          104.m         endm
                          105.  
                          106.  * EVEN                  - Force even address
                          107.  
                          108.m even: macro
                          109.m 
                          110.m         ds 0
                          111.m 
                          112.m         endm
Quelo   ...A68K D5.0Pa 5/26/85   ...Run on Mar 30, 1990  11:41:06    ...Page  3
E:TEMP.LTX , E:TEMP.PRN ,  = E:TEMP.A68
   ...

                          113.  
                          114.  * LOOP                  - Start of loop
                          115.  
                          116.m loop: macro
                          117.m 
                          118.m         ifeq nargs-3
                          119.m                 iflt \3-128
                          120.m                         moveq #\3-1,\2
                          121.m                 endc
                          122.m                 ifge \3-128
                          123.m                         move #\3-1,\2
                          124.m                 endc
                          125.m         endc
                          126.m         ifeq nargs-2
                          127.m                 iflt \2-128
                          128.m                         moveq #\2-1,d7
                          129.m                 endc
                          130.m                 ifge \2-128
                          131.m                         move #\2-1,d7
                          132.m                 endc
                          133.m         endc
                          134.m 
                          135.m loop_\1: set *
                          136.m 
                          137.m         endm
                          138.  
                          139.  * NEXT                  - End of loop
                          140.  
                          141.m next: macro
                          142.m 
                          143.m         ifeq nargs-2
                          144.m                 dbra \2,loop_\1
                          145.m         endc
                          146.m         ifeq nargs-1
                          147.m                 dbra d7,loop_\1
                          148.m         endc
                          149.m 
                          150.m         endm
                          151.  
                          152.  * TRAP_CALL - Execute trap and unstack.
                          153.  
                          154.m trap_call: macro
                          155.m 
                          156.m         move #\1,-(sp)
                          157.m         trap \3
                          158.m         ifeq \2
                          159.m                 exitm
                          160.m         endc
                          161.m         iflt \2-9
                          162.m                 addq.l #\2,sp
                          163.m         endc
                          164.m         ifge \2-9
                          165.m                 lea \2(sp),sp
                          166.m         endc
                          167.m 
                          168.m         endm
Quelo   ...A68K D5.0Pa 5/26/85   ...Run on Mar 30, 1990  11:41:06    ...Page  4
E:TEMP.LTX , E:TEMP.PRN ,  = E:TEMP.A68
   ...

                          169.  
                          170.  * BDOS                  - Execute BDOS function.
                          171.  
                          172.m bdos: macro
                          173.m 
                          174.m         trap_call \1,\2,#1
                          175.m 
                          176.m         endm
                          177.  
                          178.  * BIOS - Execute bios function.
                          179.  
                          180.m bios: macro
                          181.m 
                          182.m         trap_call \1,\2,#13
                          183.m 
                          184.m         endm
                          185.  
                          186.  * EXT_BIOS - Execute extended bios function.
                          187.  
                          188.m ext_bios: macro
                          189.m 
                          190.m         trap_call \1,\2,#14
                          191.m 
                          192.m         endm
                          193.  
                          194.  * FLASH - Flash border
                          195.  
                          196.m flash: macro
                          197.m 
                          198.m         repeat
                          199.m                 inc palette
                          200.m         endr
                          201.m 
                          202.m         endm
                          203.  
                          204.  * LET                   - Let a variable equal a constant.
                          205.  
                          206.m let: macro
                          207.m 
                          208.m         move.\0 #\1,\2(a6)
                          209.m 
                          210.m         endm
                          211.  
                          212.  * SUBR                  - Define start of subroutine.
                          213.  
                          214.m subr: macro
                          215.m 
                          216.m         ifnc '\2',''
                          217.m                 xdef \1
                          218.m         endc
                          219.m 
                          220.m \1 proc
                          221.m 
                          222.m         endm
                          223.  
                          224.  * SAVE_ALL              - Save all registers on stack
Quelo   ...A68K D5.0Pa 5/26/85   ...Run on Mar 30, 1990  11:41:06    ...Page  5
E:TEMP.LTX , E:TEMP.PRN ,  = E:TEMP.A68
   ...

                          225.  
                          226.m save_all: macro
                          227.m 
                          228.m         movem.l d0-d7/a0-a6,-(sp)
                          229.m 
                          230.m         endm
                          231.  
                          232.  * RESTORE_ALL   - Restore all registers from stack
                          233.  
                          234.m restore_all: macro
                          235.m 
                          236.m         movem.l (sp)+,d0-d7/a0-a6
                          237.m 
                          238.m         endm
                          239.  
                          240.  * SEC - Set carry flag.
                          241.  
                          242.m sec: macro
                          243.m 
                          244.m         or #1<<carry,ccr
                          245.m 
                          246.m         endm
                          247.  
                          248.  * CLC - Clear carry flag.
                          249.  
                          250.m clc: macro
                          251.m 
                          252.m         and #(1<<carry)^-1,ccr
                          253.m 
                          254.m         endm
                          255.  
                          256.  * SFX - Trigger sound effect.
                          257.  
                          258.m sfx: macro
                          259.m 
                          260.m         move #sfx_\1,d0
                          261.m         jsr fx
                          262.m 
                          263.m         endm
                          264.  
                          265.  * MODULE - Define module and RTS.
                          266.  
                          267.m module: macro
                          268.m 
                          269.m         section 0
                          270.m 
                          271.m return: set *
                          272.m 
                          273.m         rts
                          274.m 
                          275.m         endm
                          276.  
                          277.  * RET - Return on condition.
                          278.  
                          279.m ret: macro
                          280.m 
Quelo   ...A68K D5.0Pa 5/26/85   ...Run on Mar 30, 1990  11:41:06    ...Page  6
E:TEMP.LTX , E:TEMP.PRN ,  = E:TEMP.A68
   ...

                          281.m         ifeq nargs
                          282.m                 return: set *
                          283.m                 rts
                          284.m                 exitm
                          285.m         endc
                          286.m         ifc '\1','return'
                          287.m                 ret
                          288.m                 exitm
                          289.m         endc
                          290.m         b\1 return
                          291.m 
                          292.m         endm
                          293.  
                          294.  * CALL - Jump to subroutine (with condition).
                          295.  
                          296.m call: macro
                          297.m 
                          298.m         if <\1> then.s
                          299.m                 jsr \2
                          300.m         endi
                          301.m 
                          302.m         endm
                          303.  
                          304.  * HCLR - Clear high word of register.
                          305.  
                          306.m hclr: macro
                          307.m 
                          308.m         swap \1
                          309.m         clr \1
                          310.m         swap \1
                          311.m 
                          312.m         endm
                          313.  
                          314.  * JP <cond>,addr - Jump on condition.
                          315.  
                          316.m jp: macro
                          317.m 
                          318.m         if <\1> then.s
                          319.m                 jmp \2
                          320.m         endi
                          321.m 
                          322.m         endm
                          323.  
                          324.          list
                          325.          opt mex
                          326.  
                          327.  * VARS - Declare start of variables.
                          328.  
                          329.m vars: macro
                          330.m 
                          331.m         offset \1_vars
                          332.m 
                          333.m         endm
                          334.  
                          335.  * END_VARS - Declare end of variables.
                          336.  
Quelo   ...A68K D5.0Pa 5/26/85   ...Run on Mar 30, 1990  11:41:06    ...Page  7
E:TEMP.LTX , E:TEMP.PRN ,  = E:TEMP.A68
   ...

                          337.m end_vars: macro
                          338.m 
                          339.m         xdef \1_used
                          340.m 
                          341.m \1_used: equ *-\1_vars
                          342.m 
                          343.m         endm
                          344.  
                          345.  * ABS - Make parameter absolute.
                          346.  
                          347.m abs: macro
                          348.m 
                          349.m         tst.\0 \1
                          350.m         if <mi> then.s
                          351.m                 neg.\0 \1
                          352.m         endi
                          353.m 
                          354.m         endm
                          355.  
                          356.  * RS - Reserve space.
                          357.  
                          358.m rs: macro
                          359.m 
                          360.m         ds.\0 \1
                          361.m         ds 0
                          362.m 
                          363.m         endm
                          364.  
                          365.  * ACTION - Mouse action entry
                          366.  
                          367.m action: macro
                          368.m 
                          369.m         dc.w \1,\2,\3,\4,\5
                          370.m         ifeq \6
                          371.m                 dc.l \7
                          372.m                 dc.l \7
                          373.m         endc
                          374.m         ifne \6
                          375.m                 dc.l s_\7
                          376.m                 dc.l d_\7
                          377.m         endc
                          378.m 
                          379.m         endm
                          380.i         include bitlist
                          381.  * List of bit maps index numbers.
                          382.  
     # 00000000           383.          offset 0
                          384.  
     # 00000000 <14>      385.  bit_cargo:                      ds.b 20                         cargo icons
     # 00000014 <1>       386.  bit_error_box:          ds.b 1                          blank error box
     # 00000015 <1>       387.  bit_input_panel:        ds.b 1                          blank input panel
     # 00000016 <4>       388.  bit_cursors:            ds.b 4                          three cursors
     # 0000001A <1>       389.  bit_block_cursor:       ds.b 1                          text block cursor
     # 0000001B <1>       390.  bit_rubout:             ds.b 1                          rubout character bit map
     # 0000001C <4>       391.  bit_sights:             ds.b 4                          laser sights
     # 00000020 <10>      392.  bit_equipment:          ds.b 16                         equipment icons
Quelo   ...A68K D5.0Pa 5/26/85   ...Run on Mar 30, 1990  11:41:06    ...Page  8
E:TEMP.LTX , E:TEMP.PRN ,  = E:TEMP.A68
   ...

     # 00000030 <1>       393.  bit_keypad:             ds.b 1                          numeric keypad
     # 00000031 <1>       394.  bit_lasers:             ds.b 1                          mount lasers (cobra)
     # 00000032 <4>       395.  bit_positions:          ds.b 4                          different laser positions
     # 00000036 <1>       396.  bit_cobra:                      ds.b 1                          equipment cobra
     # 00000037 <1>       397.  bit_arrow_right:        ds.b 1                          arrow pointing right
     # 00000038 <1>       398.  bit_arrow_left:         ds.b 1                          arrow pointing left
     # 00000039 <1>       399.  bit_arrow_up:           ds.b 1                          arrow pointing up
     # 0000003A <11>      400.  bit_equip_text:         ds.b 17                         equipment text strings
                          401.  
     # 0000004B <2>       402.  bit_h_human:            ds.b 2                          head bit maps
     # 0000004D <1>       403.  bit_h_slimy:            ds.b 1
     # 0000004E <1>       404.  bit_h_bug_eyed:         ds.b 1
     # 0000004F <1>       405.  bit_h_horned:           ds.b 1
     # 00000050 <1>       406.  bit_h_boney:            ds.b 1
     # 00000051 <1>       407.  bit_h_fat:                      ds.b 1
     # 00000052 <1>       408.  bit_h_furry:            ds.b 1
     # 00000053 <1>       409.  bit_h_weird:            ds.b 1
     # 00000054 <1>       410.  bit_h_mutant:           ds.b 1
                          411.  
     # 00000055 <1>       412.  bit_b_rodent:           ds.b 1                          body bit maps
     # 00000056 <1>       413.  bit_b_frog:             ds.b 1
     # 00000057 <1>       414.  bit_b_lizard:           ds.b 1
     # 00000058 <1>       415.  bit_b_lobster:          ds.b 1
     # 00000059 <1>       416.  bit_b_bird:             ds.b 1
     # 0000005A <3>       417.  bit_b_humanoid:         ds.b 3
     # 0000005D <1>       418.  bit_b_feline:           ds.b 1
     # 0000005E <1>       419.  bit_b_insect:           ds.b 1
                          420.  
     # 0000005F <1>       421.  bit_small_cobra:        ds.b 1                          small Cobra for planet screen
                          422.  
     # 00000060 <4>       423.  bit_numbers:            ds.b 4                          # missiles installed
                          424.  
     # 00000064 <1>       425.  bit_save:                       ds.b 1
     # 00000065 <1>       426.  bit_load:                       ds.b 1
     # 00000066 <1>       427.  bit_catalog:            ds.b 1
     # 00000067 <1>       428.  bit_ram_save:           ds.b 1
     # 00000068 <1>       429.  bit_default:            ds.b 1
                          430.  
     # 00000069 <3>       431.  bit_digits:             ds.b 3
     # 0000006C <1>       432.  bit_yes:                        ds.b 1
     # 0000006D <1>       433.  bit_on:                         ds.b 1
     # 0000006E <1>       434.  bit_off:                        ds.b 1
     # 0000006F <1>       435.  bit_fast:                       ds.b 1
     # 00000070 <1>       436.  bit_slow:                       ds.b 1
     # 00000071 <1>       437.  bit_confirm:            ds.b 1
     # 00000072 <1>       438.  bit_echar:                      ds.b 1
     # 00000073 <1>       439.  bit_schar:                      ds.b 1
     # 00000074 <1>       440.  bit_infront:            ds.b 1
     # 00000075 <1>       441.  bit_behind:             ds.b 1
     # 00000076 <4>       442.  bit_views:                      ds.b 4
     # 0000007A <2>       443.  bit_magnify:            ds.b 2
     # 0000007C <1>       444.  bit_icon_front:         ds.b 1
                          445.  * bit_aliens:             ds.b 4
                          446.  
     # 0000007D <1>       447.  bit_last:                       ds.b 1
                          448.  
Quelo   ...A68K D5.0Pa 5/26/85   ...Run on Mar 30, 1990  11:41:06    ...Page  9
E:TEMP.LTX , E:TEMP.PRN ,  = E:TEMP.A68
   ...

                          449.          xref initialise,attract,check_keys,quiet,game_logic,prepare_text
                          450.          xref print_string,end_game,cockpit,read_key,put_bitmap,find_bitmap
                          451.  
0'000000                  452.          section 0
                          453.  
                          454.c         global elite
                          455.1 
                          456.f         ifeq nargs-2
                          457.n         endc
                          458.1         xdef elite
                          459.1 
0'000000                  460.1 elite:
                          461.1 
                          462.  
                          463.c         push.l #1                                                               in user mode ?
                          464.1 
0'000000  2F3C 00000001   465.1         move.l #1,-(sp)
                          466.1 
                          467.c         bdos s_mode,6
                          468.1 
                          469.c         trap_call s_mode,6,#1
                          470.2 
>>  ERROR  line[471] Undefined symbol   [471] E:TEMP.A68
            line[471] S_MODE   [471] E:TEMP.A68
0'000006  3F3C 0000       471.2         move #s_mode,-(sp)
0'00000A  4E41            472.2         trap #1
                          473.f         ifeq 6
                          474.n         endc
                          475.t         iflt 6-9
0'00000C  5C8F            476.2                 addq.l #6,sp
                          477.n         endc
                          478.f         ifge 6-9
                          479.n         endc
                          480.2 
                          481.1 
0'00000E  4A80            482.          tst.l d0
0'000010  660A            483.          if <eq> then.s                                                  yes
0'000012  42A7            484.                    clr.l -(sp)                                             switch to supervisor mode
                          485.c                   bdos s_mode,6
                          486.1   
                          487.c           trap_call s_mode,6,#1
                          488.2   
>>  ERROR  line[489] Undefined symbol   [489] E:TEMP.A68
            line[489] S_MODE   [489] E:TEMP.A68
0'000014  3F3C 0000       489.2           move #s_mode,-(sp)
0'000018  4E41            490.2           trap #1
                          491.f           ifeq 6
                          492.n           endc
                          493.t           iflt 6-9
0'00001A  5C8F            494.2                   addq.l #6,sp
                          495.n           endc
                          496.f           ifge 6-9
                          497.n           endc
                          498.2   
                          499.1   
                          500.          endi
Quelo   ...A68K D5.0Pa 5/26/85   ...Run on Mar 30, 1990  11:41:06    ...Page 10
E:TEMP.LTX , E:TEMP.PRN ,  = E:TEMP.A68
   ...

0'00001C  4EB9'00000000   501.          jsr initialise                                                  initialise program
                          502.          repeat
0'000022  4EB9'00000000   503.                    jsr attract                                             display attract screen
                          504.                    repeat
                          505.c                             inc.b loop_ctr(a6)                              increment loop counter
                          506.1     
>>  ERROR  line[507] Undefined symbol   [507] E:TEMP.A68
            line[507] LOOP_CTR   [507] E:TEMP.A68
0'000028  522E 0000       507.1             addq.b #1,loop_ctr(a6)
                          508.1     
>>  ERROR  line[509] Undefined symbol   [509] E:TEMP.A68
            line[509] FRAME_COUNT   [509] E:TEMP.A68
0'00002C  426E 0000       509.                              clr frame_count(a6)                     clear the frame counter
0'000030  4EB9'00000000   510.                              jsr check_keys                                  scan keys and take actio
>>  ERROR  line[511] Undefined symbol   [511] E:TEMP.A68
            line[511] GAME_FROZEN   [511] E:TEMP.A68
0'000036  4A6E 0000       511.                              tst game_frozen(a6)                     game frozen ?
0'00003A  660C            512.                              if <eq> then.s                                  no
>>  ERROR  line[513] Undefined symbol   [513] E:TEMP.A68
            line[513] DOCKED   [513] E:TEMP.A68
0'00003C  4A6E 0000       513.                                        tst docked(a6)                          docked ?
                          514.c                                       call <eq>,game_logic            no, perform game logic
                          515.1       
0'000040  6606            516.1               if <eq> then.s
0'000042  4EB9'00000000   517.1                         jsr game_logic
                          518.1               endi
                          519.1       
                          520.                              endi
>>  ERROR  line[521] Undefined symbol   [521] E:TEMP.A68
            line[521] GAME_OVER   [521] E:TEMP.A68
0'000048  4A6E 0000       521.                              tst game_over(a6)                               until game over
0'00004C  67DA            522.                    until <ne>
>>  ERROR  line[523] Undefined symbol   [523] E:TEMP.A68
            line[523] CONDITION   [523] E:TEMP.A68
0'00004E  426E 0000       523.                    clr condition(a6)                                       clear up after game end
>>  ERROR  line[524] Undefined symbol   [524] E:TEMP.A68
            line[524] MISSION   [524] E:TEMP.A68
0'000052  426E 0000       524.                    clr mission(a6)
0'000056  4EB9'00000000   525.                    jsr quiet                                                       shutdown sounds
>>  ERROR  line[526] Undefined symbol   [526] E:TEMP.A68
            line[526] PLAYER_QUITS   [526] E:TEMP.A68
>>  ERROR  line[526] Undefined symbol   [526] E:TEMP.A68
            line[526] REASON   [526] E:TEMP.A68
0'00005C  0C6E 0000 0000  526.                    cmp #player_quits,reason(a6)            did player quit ?
0'000062  6700 0008       527.                    if <ne> then                                            no
0'000066  4EB9'00000000   528.                              jsr end_game                                    display end game explosi
                          529.                    endi
>>  ERROR  line[530] Undefined symbol   [530] E:TEMP.A68
            line[530] GAME_OVER   [530] E:TEMP.A68
0'00006C  426E 0000       530.                    clr game_over(a6)
0'000070  60B0            531.          endr
                          532.~  ...M68K D2.0C  3/12/85   ...Run on Mar 30, 1990  11:41:03
   12 Errors
