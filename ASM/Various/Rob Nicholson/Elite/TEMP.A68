*	@@@@   @@  @@ @@@@@@@	@@@@  @@@  @@	@@@@   @@  @@ @@   @@
*  @@  @@  @@  @@  @@	@  @@  @@  @@  @@  @@  @@  @@  @@ @@@ @@@
* @@	   @@  @@  @@ @   @@	   @@ @@   @@	   @@  @@ @@@@@@@
* @@	   @@@@@@  @@@@   @@	   @@@@ 	@@@@   @@  @@ @@@@@@@
* @@	   @@  @@  @@ @   @@	   @@ @@	   @@  @@  @@ @@ @ @@
*  @@  @@  @@  @@  @@	@  @@  @@  @@  @@  @@  @@  @@  @@ @@   @@
*	@@@@   @@  @@ @@@@@@@	@@@@  @@@  @@	@@@@	@@@@  @@   @@

* Calculate and check for hacking routines.

~i	include macros
* GLOBAL <name> - define a global label.

~mglobal: macro
~m
~m	ifeq nargs-2
~m		\2
~m	endc
~m	xdef \1
~m
~m\1:
~m
~m	endm

* INC <param>	- increment paramater.

~minc: macro
~m
~m	addq.\0 #1,\1
~m
~m	endm

* DEC <param>	- decrement parameter.

~mdec: macro
~m
~m	subq.\0 #1,\1
~m
~m	endm

* PUSH <reg>	- push register on stack.

~mpush: macro
~m
~m	move.\0 \1,-(sp)
~m
~m	endm

* POP <reg> 	- pop register from stack

~mpop: macro
~m
~m	move.\0 (sp)+,\1
~m
~m	endm

* DZ <string>	- define zero terminated string

~mdz: macro
~m
~m	dc.b '\1',0
~m
~m	endm

* EVEN			- Force even address

~meven: macro
~m
~m	ds 0
~m
~m	endm

* LOOP			- Start of loop

~mloop: macro
~m
~m	ifeq nargs-3
~m		iflt \3-128
~m			moveq #\3-1,\2
~m		endc
~m		ifge \3-128
~m			move #\3-1,\2
~m		endc
~m	endc
~m	ifeq nargs-2
~m		iflt \2-128
~m			moveq #\2-1,d7
~m		endc
~m		ifge \2-128
~m			move #\2-1,d7
~m		endc
~m	endc
~m
~mloop_\1: set *
~m
~m	endm

* NEXT			- End of loop

~mnext: macro
~m
~m	ifeq nargs-2
~m		dbra \2,loop_\1
~m	endc
~m	ifeq nargs-1
~m		dbra d7,loop_\1
~m	endc
~m
~m	endm

* TRAP_CALL - Execute trap and unstack.

~mtrap_call: macro
~m
~m	move #\1,-(sp)
~m	trap \3
~m	ifeq \2
~m		exitm
~m	endc
~m	iflt \2-9
~m		addq.l #\2,sp
~m	endc
~m	ifge \2-9
~m		lea \2(sp),sp
~m	endc
~m
~m	endm

* BDOS			- Execute BDOS function.

~mbdos: macro
~m
~m	trap_call \1,\2,#1
~m
~m	endm

* BIOS - Execute bios function.

~mbios: macro
~m
~m	trap_call \1,\2,#13
~m
~m	endm

* EXT_BIOS - Execute extended bios function.

~mext_bios: macro
~m
~m	trap_call \1,\2,#14
~m
~m	endm

* FLASH - Flash border

~mflash: macro
~m
~m	repeat
~m		inc palette
~m	endr
~m
~m	endm

* LET			- Let a variable equal a constant.

~mlet: macro
~m
~m	move.\0 #\1,\2(a6)
~m
~m	endm

* SUBR			- Define start of subroutine.

~msubr: macro
~m
~m	ifnc '\2',''
~m		xdef \1
~m	endc
~m
~m\1 proc
~m
~m	endm

* SAVE_ALL		- Save all registers on stack

~msave_all: macro
~m
~m	movem.l d0-d7/a0-a6,-(sp)
~m
~m	endm

* RESTORE_ALL	- Restore all registers from stack

~mrestore_all: macro
~m
~m	movem.l (sp)+,d0-d7/a0-a6
~m
~m	endm

* SEC - Set carry flag.

~msec: macro
~m
~m	or #1<<carry,ccr
~m
~m	endm

* CLC - Clear carry flag.

~mclc: macro
~m
~m	and #(1<<carry)^-1,ccr
~m
~m	endm

* SFX - Trigger sound effect.

~msfx: macro
~m
~m	move #sfx_\1,d0
~m	jsr fx
~m
~m	endm

* MODULE - Define module and RTS.

~mmodule: macro
~m
~m	section 0
~m
~mreturn: set *
~m
~m	rts
~m
~m	endm

* RET - Return on condition.

~mret: macro
~m
~m	ifeq nargs
~m		return: set *
~m		rts
~m		exitm
~m	endc
~m	ifc '\1','return'
~m		ret
~m		exitm
~m	endc
~m	b\1 return
~m
~m	endm

* CALL - Jump to subroutine (with condition).

~mcall: macro
~m
~m	if <\1> then.s
~m		jsr \2
~m	endi
~m
~m	endm

* HCLR - Clear high word of register.

~mhclr: macro
~m
~m	swap \1
~m	clr \1
~m	swap \1
~m
~m	endm

* JP <cond>,addr - Jump on condition.

~mjp: macro
~m
~m	if <\1> then.s
~m		jmp \2
~m	endi
~m
~m	endm

	list
	opt mex

* VARS - Declare start of variables.

~mvars: macro
~m
~m	offset \1_vars
~m
~m	endm

* END_VARS - Declare end of variables.

~mend_vars: macro
~m
~m	xdef \1_used
~m
~m\1_used: equ *-\1_vars
~m
~m	endm

* ABS - Make parameter absolute.

~mabs: macro
~m
~m	tst.\0 \1
~m	if <mi> then.s
~m		neg.\0 \1
~m	endi
~m
~m	endm

* RS - Reserve space.

~mrs: macro
~m
~m	ds.\0 \1
~m	ds 0
~m
~m	endm

* ACTION - Mouse action entry

~maction: macro
~m
~m	dc.w \1,\2,\3,\4,\5
~m	ifeq \6
~m		dc.l \7
~m		dc.l \7
~m	endc
~m	ifne \6
~m		dc.l s_\7
~m		dc.l d_\7
~m	endc
~m
~m	endm

	xref checksum_start,checksum_end,disp_debug,shut_down,cockpit

~c	module checksum

	section 0

return: set *

	rts

~e

start:

* Jump table to checksum routines (so that the JSR's never change).

~c	subr checksum,global

~t	ifnc 'global',''
		xdef checksum
~n	endc

checksum proc

~e

	bra _checksum

~c	subr check_hack,global

~t	ifnc 'global',''
		xdef check_hack
~n	endc

check_hack proc

~e

	bra _check_hack


* ***********************************
* **							   **
* ** CHECKSUM - CALCULATE CHECKSUM **
* **							   **
* ***********************************

* Calculates the checksum and stores in down in memory.

* Entry: None
* Exit:  None

* Regs: ?
* Subr: ?

~c	subr _checksum,global

~t	ifnc 'global',''
		xdef _checksum
~n	endc

_checksum proc

~e

	lea checksum_start,a0				start of memory to check
	clr d0								checksum = 0
	clr d1								high byte = 0 (always)
	repeat
		move.b (a0)+,d1 				add byte to checksum
		add d1,d0
	until.l a0 <eq> #checksum_end		until end of area to check
	move d0,prog_checksum(a6)			store checksum
	ifne use_novella
		move #valid,ok_checksum(a6) 	set correct checksum
	endc
	ifeq use_novella
		move d0,ok_checksum(a6) 		fudge checksum
	endc
	ifne calc_checksum
		pea cockpit+2					setup palette
~c		ext_bios setpalette,6

~c	trap_call setpalette,6,#14

	move #setpalette,-(sp)
	trap #14
~f	ifeq 6
~n	endc
~t	iflt 6-9
		addq.l #6,sp
~n	endc
~f	ifge 6-9
~n	endc

~e

~e
		jsr disp_debug					display checksum
		repeat
		endr
	endc

~c	ret 								return

~f	ifeq nargs
~n	endc
~t	ifc 'return','return'
~c		ret

~t	ifeq nargs
		return: set *
		rts
~n#!
~e
~n#!
~e


* ***************************************************
* **											   **
* ** CHECK_HACK - CHECK IF PROGRAM HAS BEEN HACKED **
* **											   **
* ***************************************************

* Checks if the program has been hacked and bombing out if required.

* Entry: None
* Exit:  None

* Regs: ?
* Subr: ?

~c	subr _check_hack

~f	ifnc '',''
~n	endc

_check_hack proc

~e

	lea prog_checksum-1234(a6),a0		checksum ok ?
	lea ok_checksum-4321(a6),a1
	move 1234(a0),d0
	cmp 4321(a1),d0
~c	ret <eq>							yes, return

~f	ifeq nargs
~n	endc
~f	ifc 'eq','return'
~n	endc
	beq return

~e
	jmp shut_down						shut down the program

end:

	ds.b 512-(end-start)				pad out to 1k
~~ ...M68K D2.0C  3/12/85   ...Run on Mar 30, 1990  14:17:01
