                           Chip Music


Chip music sounds pretty awful, no matter how good it is.  But it 
has one major advantage - it takes very little processor time.

A  quick breakdown of the music commands now.   There  are  three 
"voices" of sound,  each of which can play a different note at  a 
different   volume.    These  voices  are  controlled  using   14 
registers.  These are:

Registers 0 and 1: Period length and pitch of channel A
Registers 2 and 3: Period length and pitch of channel B
Registers 4 and 5: Period length and pitch of channel C

Register 6: Noise generator pitch

Register 7
     bit 0:    Channel A tone on/off
     bit 1:    Channel B tone on/off
     bit 2:    Channel C tone on/off
     bit 3:    Channel A noise on/off
     bit 4:    Channel B noise on/off
     bit 5:    Channel C noise on/off

Register 8: bits 0-3  Channel A volume
Register 9: bits 0-3  Channel B volume
Register 10: bits 0-3  Channel C volume

Registers 11 and 12: sustain

Register 13: bits 0-3 envelope generator

Most of these have been included merely for completeness.  If you 
want to use them, then you'll have to investigate them further by 
yourself.   It  might help you to know that the instructions  are 
VERY similar to those on the old Spectrum 128,  if memory serves.  
So an old Spectrum 128 manual should give you some ideas of  what 
values do what.

The  registers we are interested in are the ones  containing  the 
volume.  The only reason we're interested, is that these are what 
are  used  to draw those pretty VU bars which go up and  down  in 
time to the music.  But more on that later.

How do we actually change a register's contents?   For  instance, 
if we wish to give Channel A a volume of 0, how can we do that?
Well, we put the register we want to alter at address $ffff8800:

     move.b    #8,$ffff8800

and the data value at $ffff8802:

     move.b    #0,$ffff8802


This has to be done for all registers which need to be altered.


A REAL LIFE EXAMPLE
Included  with these docs is AWE.MUS,  which is a Mad  Max  music 
file.   It  can be played using PLAY1.S - and you can see  a  red 
band  showing how much processor time is used.   Too  much.   The 
code to play the music wastes a lot of time.   We can cut down on 
this waste by writing our own routine to play the  music.   AWE.S 
is the disassembled Mad Max file.  By looking around, we can find 
out how it plays the sound.

We are looking for the address $ffff8800,  as this is the  sound-
chip  address.  It  occurs twice.   By placing  breakpoints  when 
playing the music,  we find that the second occurence is the only 
one which is used.   It is worth noting here that the sound  chip 
data is placed using a MOVEM.   This seems to be an  undocumented 
feature  of  the ST.   ST INTERNALS says that you  can  only  use 
addresses $ffff8800 and $ffff8802!

It has a list of all the register numbers in memory like so:

     dc.b      0,0,0,0
     dc.b      1,1,0,0
     dc.b      2,2,0,0
     dc.b      3,3,0,0
     ...

Actually,  it  has no need (as far as I can see,  in  theory)  to 
repeat the register numbers, but it does.  It only uses registers 
0 - 10.

It puts the data values at the third byte on each line.  Then, it 
MOVEMs all the registers and their data out of memory,  and  back 
in at address $ffff8800.   So it would seem that valid  addresses 
for register numbers are:

     $ffff8800
     $ffff8804
     $ffff8808
     ....

and valid addresses for data are:

     $ffff8802
     $ffff8806
     $ffff880a
     ....

strange,  huh?  but immensley quicker than changing each register 
individually.


Anyway,  it updates whichever data needs to be changed, and slaps 
it all back in again.  This is why the routine is so slow; it has 
to keep track of loops and counters and such like.  It would be a 
heck  of a lot quicker just to have a long list of data which  we 
can just read off.  It would have a lot of repeating stuff in it, 
but that doesn't really matter.

That  is  what  AWE.S actually does.   After the  music  data  is 
slapped  into $ffff8800,  my code records the data that has  been 
used in the music registers in a long list... over 40k of data!

This is saved out as AWE.BIN.

Now,  this list is very long.  If you look at it, you will see no 
particular pattern.  That is because the data is in this order:

     Register 0
     Register 1
     Register 2
     ...
     Register 10

for each 1/50th of a second of sound.  If we re-organise the data 
so that it is grouped together by register, will we see patterns?  
Probably.    CHANNEL.S   will  read  in  AWE.BIN  and  save   out 
CHANNEL.BIN,  with  the  data re-organised so that it is  in  the 
order:

     All register 0
     All register 1
     All register 2
     ...

If you look at CHANNEL.BIN,  you will see vast areas of 1s and 0s 
and other numbers.   This would be much better compressed down  a 
bit.   This is what I have done with the source codes  COMPRES1.S 
and COMPRES2.S

COMPRES1 uses a very simple algorithm - reads in CHANNEL.BIN  and 
outputs MUS.CMP; a compressed version.  This is still over 37k in 
length, though!  Here is the format for MUS.CMP:

byte:     number of times byte repeated
byte:     byte value

So those large blocks of 0s and 1s have now vanished.  Hence some 
registers have reduced dramatically in size,  because instead  of 
50 0s in the file, they have been replaced by:

     50,0

The limitation with this is;  what if there are more than 255  0s 
in a row?   Well,  256 is represented as 0,  and numbers  greater 
than 256 are split into more than one group.

For example, 256 1s would be represented as:

     0,1

and 257 3s would be:
     0,3
     1,3

That is the compression algorithm.  Some registers have INCREASED 
in length!   Why?  Well, those which have a lot of different data 
will take up more space;  the list of numbers:

     1,2,3,4,5,6,7

will become:

     1,1
     1,2
     1,3
     1,4
     1,5
     1,6
     1,7

and thus take up twice as much space!

This  is why I have NOT used COMPRES1 to produce  the  compressed 
music;  it is just there as a demonstration.


COMPRES2 is used to produce the compressed music.   The new  file 
is  about  26k in length.   It uses a very similar  algorithm  to 
COMPRES1.   But  the  problem  with COMPRES1 was  that  lists  of 
numbers  doubled the space they took.   Therefore,  in  this  new 
version,  there  are two types of data:   blocks (as before)  and 
lists.

The new format is:

byte:     bit 7 = 0 for list or 1 for block
          bits 0-6 = counter x

then... for a block:

byte:     byte value

for a list:

bytes:    x number of bytes in a list

You  will  notice that bit 7 of the 1st byte is used as  a  flag.  
This reduces the number that can be stored here.   It can only be 
0 - 127.

The  algorithm  for  un-packing the  packed  data,  then,  is  as 
follows:

for each register's data list
{
     repeat "element"
     {
          Get flag & counter byte
          IF flag is BLOCK then
          {
               Get next byte in file (fill value)
               FOR x bytes
               {
                    put fill byte into decompressed file
               }
          }
          ELSE
          {
               FOR x bytes
               {
                    get next byte from compressed data
                    put into uncompressed data
               }
          }
     } UNTIL register list done
} UNTIL all register lists done

An example of a list is now:

     7,1,2,3,4,5,6,7

with the 7 at the start indicating that the list is 7 bytes long.

A block now looks like this:

     $87,0

indicating 7 bytes, all of 0.

A count value of 0 now indicates a value of 128.

You can find the source code for de-compressing the file, and re-
organising  it  into the original  order  in  \includes\DE_MUS.S, 
which I have INCLUDED in several source codes.


I did not HAVE to compress the music, but I thought it would be a 
nice  touch.   The algorithm is not as complex (or as  effective) 
as,  say LZW or LZH, but it'll serve.  When MUS.CMP is compressed 
using  the  SPEED  packer it becomes  VERY  small,  so  when  you 
compress  your final program,  it will be negligable in length  - 
shorter than the original Mad Max file - 1156 bytes long.   Using 
LZW, it becomes 3981, and LZH gives 1647.


Anyway, after all that, this is my point:

You  can get lots of chip music in the Public  Domain.   But  the 
routines will be SLOWWWW!   You will have to hack in, like I did, 
extract the raw data, and write your own routines for playing it.  
Sounds tough?  It is.  Hard graft is the only answer here.


PLAY2.S  will  play the compressed music,  and the red  band  has 
decreased significantly in size.


You now know all that you have to know about chip music.   But it 
will take you many hard nights to learn how to extract the  music 
from  the original files,  and you may decide just  to  sacrifice 
processor time.   But remember that when you're doing things like 
getting rid of all the borders,  processor time is at a  premium, 
and  your  timings  have to be exact,  so you  can't  go  calling 
routines  which  don't  always take the same amount  of  time  to 
execute.

James Ingram, April 30th 1994

     I do not mind you using any parts of my code,  or any  ideas 
     of  mine.   All  I ask is that you give me a credit  for  my 
     ideas or code.  Cheers.

