                             VU bars

Anyone know what VU stands for?   No,  me neither.   Anyway, they 
are  those funky bars that move up and down according to how  the 
music is playing.

The ST has three "channels" for sound, as described in MUSIC.DOC, 
and each one has a volume at any given time.   It is this  volume 
which we use to draw the bars.  It is a very simple algorithm:

FOR each channel
{
     draw a full bar
     get volume of channel
     erase a number of bars from top down
}

and  this  will produce a shortened  bar,  which  represents  the 
volume of the music.


So, now we've seen the algorith, let's explore the source code in 
VU.S

The initialisation is all standard stuff you've seen before.  The 
colour palette I have selected starts at pale green,  and gets up 
to bright green.   Then it starts halfway through the red for the 
top bars, and finishes with bright red for the very top bar.

The  code  at $70 is basically identical to the music  player  in 
PLAYFADE, except that it also alters the screen address and swaps 
the screen addresses around for next time.

After the music playing bit, this is what happens:

get current screen address
move to bottom of screen
put in VU bars

now,  putting  in the bars will take a little  explaining.   Each 
line of the bars is a different colour - from red down to  green.  
Therefore,  I cannot just slap in the same numbers over and  over 
again.   I  have  to  put in the correct colour  for  each  line.  
Handily enough,  I have a list of all the colour data I will need 
at the label "bars".

So for each line,  I read in the colour data and put it onto  the 
screen.

The colour data itself,  at "bars",  may look a little  odd.  The 
numbers appear to be going backwards.  First I have:

     o,o,o,o
which is $ffff,$ffff,$ffff,$ffff

and then I have colur 14, which is:
     $0000,$ffff,$ffff,$ffff

but the binary for 14 is 1110!

The  numbers are in fact reversed.   This is because,  on the  ST 
screen,  bit  0 of the colour data goes into plane 0  on  screen.  
Bit 1 goes in plane 1, etc.


Back to the bars.   Now I have three full bars on screen.  I must 
take away some lines from the tops of each bar.

First of all,  I clear 2 registers so that I can MOVEM them  into 
memory to clear it quickly.

Then, a sub-routine is called for each of the 3 channels.


WIPE_LINES
The  sub-routine  first inverts the volume,  and keeps  only  the 
lower nybble.   This gives us the number of lines to erase.  Why?  
Because  if we pass 0 then it becomes $ff and then $f - erase  15 
lines.   If  we pass 15,  it becomes $f0,  and then 0 - erase  no 
lines, to keep a full bar.

I  then  multiply the number of lines to erase by the  length  of 
code to erase 1 line.   Subtract this from the end address of the 
code to erase the lines, and jump to wherever we're going!

So  if  we  pass volume 15,  this becomes 0,  as  we  have  seen.  
Subtract  0 from the end of the erasing code,  and jump  there  - 
straight to the end.   Do nothing.   If 14 is passed,  this  will 
become $f1, and then 1.  Multiply by 6, and subtract from the end 
of  the code,  and we jump neatly in at the instruction to  erase 
the top line.


And that is how it is done.



You  can  do more fancy type VU bars,  and VU2 is an  example  of 
bigger bars.   They work on exactly the same principle,  and  you 
shouldn't  need  any help understanding what changes  were  made.  
Just scan through the source code (after running the program,  so 
you know what changes were made!),  and it will be apparent where 
the changes are, and what they do.

One  change to be wary of when you alter a routine like  this  is 
the number you multiply by to jump into the erase code.   Get  it 
wrong, and you'll jump in halfway through an instruction, and you 
could CRASH!   Always check the length of the code when you alter 
it.  I don't always.  And I crash.


James Ingram, April 30th 1994

     I do not mind you using any parts of my code,  or any  ideas 
     of  mine.   All  I ask is that you give me a credit  for  my 
     ideas or code.  Cheers.


