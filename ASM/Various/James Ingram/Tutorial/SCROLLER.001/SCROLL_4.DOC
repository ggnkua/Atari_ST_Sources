             The Scroll Text Part IV - MY Revenge!

I  was writing a simple screen,  but I was pushed  for  processor 
time.  The only place I could cut down was the scrolling text.  I 
tried a 2 plane font, and used MOVEP.W, but it wasn't enough of a 
saving for me!   So I developed a completely new way of scrolling 
the message.

When I say "completely new", I'm sure other people have got there 
before me;  there are probably other source codes floating around 
as I write this.   But I developed it - it was my conception, and 
original to my coding;  I'm not saying I was first, but I thought 
of it for myself. Yeah yeah, boast, boast, boast...

My thinking went something like this...

I am taking BYTES from 1 screen ago.   But if I go 2 screens back 
instead,  then  the  scrolling message is exactly 1 word  to  the 
right of where it should be.   So therefore,  all I have to do is 
to go 2 screens back, and I can lift entire words at a time.

Doesn't sound like much of a saving on time?  Well, consider that 
you can then use a MOVEM.L to get a whole lot at once...

By the way,  when you are getting lots of longwords,  1 MOVEM  is 
much quicker than lots of MOVE.Ls...  Let me just dig out my list 
of processor times.   Ah,  here we are.   Let's compare processor 
times.

     MOVE.L    (a0)+,d0       = 12 cycles


     MOVEM.L   (a0)+,d1-7/a2-6 = 12 + (4*12) = 60 cycles

So  that  1  MOVEM  of  60 cycles  is  equivalent  to  12  MOVE.L 
instructions of 12 * 12 = 144 cycles... quite a saving, wot?

The same amount of data using MOVEPs...

     MOVEP.l   (a0),d0        = 24 cycles

so 12 longwords are 12 * 24 = 264 cycles!!!!!


Just let me illustrate exactly WHY this technique works.  Imagine 
that  the first letter in my scroll-text is an  "A".   The  first 
screen looks like this:


                                   A
                                   A
                                   A
                                   A

The second screen is:
                                   A
                                  A
                                  AA
                                  A
                                  A

Third screen:
                                  AA
                                 A
                                 AAA
                                 A
                                 A

Fourth screen:
                                 AA
                                A  A
                                AAAA
                                A  A
                                A  A

If  you  compare the 1st and 3rd screens,  and the  2nd  and  4th 
screens,  you can see that instead of moving bytes,  you can copy 
whole words from the old screen to the new screen.

This means,  of course,  that you have a blank WORD at the  right 
hand side,  instead of a blank byte.   This is not a problem,  we 
simply have to put in a word of data.

The first time a letter appears on the screen, we do the 4th byte 
of the previous letter, and the 1st byte of the new letter.

The  second time around,  we do the 1st and 2nd bytes of the  new 
letter.

The third time, we put in the 2nd and the 3rd bytes.

On our fourth time around, we put in the 3rd and 4th bytes of the 
letter.


Using  this technique,  there is visually no difference from  the 
byte  moving  scroller.   But  the  processor  time  savings  are 
tremendous,  as  can be seen when all the source codes have  been 
compiled and run.   The only "drawback" is that you need at least 
2  screens  - but since this is standard anyway,  this is  not  a 
problem, is it?


So,  let's  have  a look at what changes need to be made  to  the 
source text of SCROLL_3.S



You   will   notice   I   have   included   a   constant   called 
"no_of_screens".   By changing this,  you can alter the number of 
screens.   NEVER change it to 1,  or you'll get bombs and a  cold 
reset (probably), as I assume there are at least 2 screens at all 
times.  It is good programming practice to have as many constants 
as you can.   This way, if you have to change something, you just 
change it once, at the top.


I have put in a loop to calculate the screen addresses this time, 
in case there are more than 2.
You  can also see that last 2 screen addresses are stored  twice.  
Why?

Well,  I need to go 2 screens back each time.   But when I am  on 
screen 1, how do I know what the addresses were;  2 choices:

     i)   Go to the end of the list.  This means identifying that 
          I  am  on  screen 1 (or  screen  2),  and  writing  the 
          appropriate code to check the last 2 screens.

     ii)  Just keep the addresses before the start of the list so 
          that  they  are 8 bytes back from the position  in  the 
          list; the same as all the other screen addresses.




Also,  instead  of using "old_screen" and  "new_screen",  I  have 
"screen_no",  to  keep track of which screen is to be used  next.  
This  is a necessity,  because the "old_screen" and  "new_screen" 
will  obviously only work with 2 screens.   I am leaving the  way 
open  here for you to use more screens if you require (in  source 
codes  to  come you will see why you sometimes use  more  than  2 
screens).


Another  addition to this new source-code is the fact that I  put 
in  the  address  of the space  character  to  "font_bit".   What 
"font_bit" does is to keep track of the address of the  character 
that I am printing.

The first time I enter my routine, I want to print the first byte 
of the first character.   This means my routine will be expecting 
to  print the last byte of the previous character as  well.   But 
there isn't a previous character!  So I tell it that the previous 
character  was  the  space.   It prints up the 4th  byte  of  the 
space... which is just blank, and everyone is happy.



The New Scroller Code

There are a few changes here.   Firstly,  in how I get the screen 
address to put into the register.   I go to the start of the list 
with a6.  Then I get the screen number I am on.  Multiply by 4 to 
use it as a LONGWORD INDEX.   Add it to a6, and then a6 points to 
the screen address to use.


I can then get the address of 2 screens ago by simply taking  the 
address which is 8 bytes BACK from a6.
     move.l    -8(a6),...

I  add 8 to the address of the old screen,  to take me 1 word  (4 
planes * 2 bytes) to the right.

Then  I  copy everything from the old screen to  my  new  screen, 
using MOVEM.Ls


Now the time has come to put in the 2 last bytes.   It will  make 
the  most sense if you look first at the part of the  code  which 
does  the 4th byte of the old character and the 1st byte  of  the 
new character.


Before  entering  it,  a1  is  set to the  address  of  the  last 
character we were printing.

Quite  simply,  I use a MOVEP.L to move the last byte out of  the 
font and onto the screen in the right place.

Now I get the next character from the message.
The address is calculated as before,  and kept for later use.   I 
have  done away with the buffer,  and my routine now  just  reads 
directly from the font data.

A MOVEP.L in a loop puts in the 1st byte of the new character.


Next time around,  we'll put in the 1st and 2nd bytes of the  new 
character.   We have the address of the character,  and  MOVEP.Ls 
will whip the bytes into the screen at the right hand side...

The code for doing the 2nd and 3rd and the 3rd and 4th bytes  are 
virtually identical,  except that they use different parts of the 
character (obviously).


That is that.  Simple.



James Ingram, February 27th 1994

     I do not mind you using any parts of my code,  or any  ideas 
     of  mine.   All  I ask is that you give me a credit  for  my 
     ideas or code.  Cheers.

