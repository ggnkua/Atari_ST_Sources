                         The Scroll Text


Welcome.

Scroll texts.   Love them or hate them,  you'd be mad not to hate 
them.   But they are here to stay (for a while) and some valuable 
programming  techniques can be gleaned from knowing how  to  code 
fast scroll texts.


I have to start,  however,  at the beginning.   With the  SLOWWWW 
scrollers.   These  can be seen on some ancient demos and  menus, 
and they only scroll by 1 pixel at a time.   This is so slow that 
you cannot read the text, because you'd be there all day.

But how do they work??  Well, with this document is a source text 
for a slow scroller, called SCROLL_1.S  This is a complete ready-
to-assemble piece of code.   You should also have a Degas picture 
file called FONT.PI1.   This is a font which is 32 x 32 pixels in 
size.   Lastly,  there  should  be a file  called  INIT.S.   This 
handles  the  initialising;  turning off the  mouse,  saving  the 
palette and res mode,  and going into low res.   It also restores 
the screen when I'm done.  It is INCLUDED by SCROLLER_1.S


Principles

There are 2 prinipals involved here:
     screen swapping
     rotating graphics


Screen Swapping
---------------

You  really  should know this if you are trying to code  at  this 
level.   However,  for  those  of  you who are  unaware  of  this 
technique, here is a brief summary.

If  you  try  to  work  with just  1  screen,  you  tend  to  get 
distortions.   This  is because you probably won't be able to  do 
your  stuff quickly enough.   The screen display catches up  with 
you,  and you display half of the old screen and half of the new.  
To prevent this,  we use at least 2 screens;  one to display, and 
the other to work on.


Rotating graphics
-----------------

Rotating graphics on screen by 1 pixel at a time can be  achieved 
by  using the "roxl" command.   This shifts a word to  the  left.  
The  X  flag  is shifted into the rightmost  bit,  and  then  the 
leftmost bit is shifted into the X flag.

E.G.

X flag = 1

word to shift = 0101010101010101

roxl result =   1010101010101011
new X flag = 0

But  we must remember that we are dealing with a screen  display.  
We cannot simply barge in there and rotate 80 words from right to 
left, because then the different planes will be shifted into each 
other.  We have to do it a plane at a time.

So the algorithm is:

FOR all lines to rotate
{
     FOR each plane
     {
          rotate each word to the left
          go to next plane
     }

     goto next line
}


The Source Code

Here is a breakdown of the source code.

Firstly,  I clear the area in the BSS which is designated for the 
screen.  This ensures my screens are blank.

Then I have to work out what address the screens are going to  be 
at.  I make 2 copies of the screen addresses; one into addr_1 and 
addr_2,  which are to keep note of where they are,  and also into 
last_screen and next_screen,  which I use to keep track of  which 
screen was used last, and which I am to use next.

The  main_rout  routine just installs the  interrupt  routine  to 
execute every 50th of a second,  and then waits for your keypress 
before de-stalling the routine.

The Routine Itself

We must keep all the registers intact!   Otherwise,  when the  ST 
returns  from  the  interrupt,  strange  things  happen  (usually 
involving bombs).  Just a simple MOVEM will keep everything safe.

Next,  my palette is moved in,  with 2 instructions.   It is  not 
necessary to do this on EVERY interrupt,  but when you code later 
on,  and  you get rid of the lower border,  you will find  it  is 
neccessary.   You change the colours in the lower part,  and must 
then change them back.

Then  I  get the 2 screen addresses.   I swap them  over  in  the 
stores, so that next time I will be using the other one.

The next few lines put the screen address into the screen address 
register.   The  actual display will not change until  next  time 
around, so I put in the address of the screen I am changing.


Then  I  have a bit of code that does nothing except wait  for  a 
bit.   Why?  Well, I want to show exactly how much processor time 
my  routine uses.   I do this by changing colour 0 to red when  I 
start,  and  back to black when I am done.   This produces a  red 
band,  the height of which indicates the amount of processor time 
being used.   But if I do it straight away,  then the top part of 
the red band is obscured from view.  With a slight pause, you can 
see the whole red band.


Then the actual scroller itself.


The Scroller

First I subtract 1 from "font_counter".   This value keeps  track 
of when I need to get a new character from the message.  Since it 
starts at 0, I have to get a new character straight away.


Getting a new character
I take the address at "message_addr" (which tells me where in the 
scroll-text  I am),  and fetch the next byte of the  scroll-text.  
If it is 0,  then I am at the end of the message,  so I return to 
the start and get the character again.

Now  I  need to determine the address of the font data  for  this 
particular character.   My font starts with a space,  so that  is 
character  number 0.   I therefore subtract the value of a  space 
(32 or $20) from the number held in d0.

There  are 6 lines of 10 characters in my font.   By dividing  by 
10,  I  can  determine  the line number (which  will  be  in  the 
remainder)  and  the  number of characters along I  have  to  go.  
Don't understand?   Just work it out on paper,  whilst looking at 
the FONT.PI1 picture.  But remember that I start on column 0 line 
0.

OK.  Now I have both the line number and character number, I have 
to do some multiplication.   Each character is 32 lines high,  so 
the address of the correct line is 160 * 32 * line_number.   Each 
character is 32 pixels wide.  That's 2 words - but also 4 planes, 
so  8  words or 16 bytes wide.   So the starting  offset  of  the 
character on the line is 16 * character_number.

Add the two offsets to the address of the font,  and we have  the 
address of the top-left of the character we are after.

I cannot rotate the character from in the font picture  (well,  I 
can,  but it is easier to do it this way).  I copy the character to 
a buffer, in which it can be rotated to my heart's content.

The routine to copy it goes like this:

FOR 32 lines of character
{
     copy 16 bytes to buffer
     goto next line on font picture
     goto next 16 bytes of buffer
}


Finally,  I  put  31 into "font_counter",  so that  I  won't  get 
another character from the font until I have scrolled 32 times.
 


Scrolling
Before we can scroll the next bit of a character on to the  right 
hand  side  of the screen,  we must first copy what the  user  is 
seeing (the old screen) onto the new screen.   Because we have to 
scroll what they are seeing 1 pixel to the left.

The copy routine is easy to understand - just look at it!   We're 
copying  32 lines of 160 bytes.   OK,  so my code  isn't  exactly 
optimised, but it's written for ease of reading, not speed.


The algorithm for the scroll is as follows:

goto the right hand side of the screen
get buffer address

FOR 32 lines
{
     FOR 4 planes
     {
          rotate the "right" hand word in the buffer
          rotate the "left" hand word in the buffer

          rotate all the words for this plane on screen

          goto the next plane on screen
          goto the next plane in the buffer
     }

     goto the next line on screen
     goto the next line of buffer
}


And that's all folks!
It's been scrolled by 1 pixel to the left.


James Ingram, February 27th 1994

     I do not mind you using any parts of my code,  or any  ideas 
     of  mine.   All  I ask is that you give me a credit  for  my 
     ideas or code.  Cheers.

