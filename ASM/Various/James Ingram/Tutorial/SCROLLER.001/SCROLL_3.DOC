              The Scroller Part III - More Revenge!

The  byte scroller is fast.   It moves the data far quicker  than 
you  could hope to using roxl or addx in  any  combination!   But 
there is a quicker way...


MOVEP  is  a nifty little command.   It is meant to be  used  for 
writing to peripherals (hence MOVEPeripheral).   But it can  also 
be used to speed up screen operations immensely.   To  understand 
it fully, here is a run-down and an example.

MOVEP  uses ONLY a data register and an  address  register.   You 
CANNOT use numbers.  But we don't want to, so that's OK.  What it 
does  is  put the data register into memory on  ALTERNATE  bytes.  
Whereas  a MOVE.L would put 4 bytes in a row in  memory,  MOVEP.L 
will slap them in in alternate memory locations.

For example, look at this piece of code:

     move.l    #buffer,a0

     move.l    #$00000000,d0
     movep.l   d0,(a0)

     move.l    #$ffffffff,d0
     movep.l   d0,1(a0)
     rts

buffer    ds.l      2

The contents of "buffer" after execution will be:

$00ff00ff
$00ff00ff

What  is  more,  MOVEP  is  not restricted  to  writing  to  even 
addresses.   You  can  see  that "movep.l d0,1(a0)"  is  a  legal 
instruction, even though it is on an odd address!

Using  a  MOVEP.L is not quicker than using  a  MOVE.B.   It  is, 
however,  far  quicker than using 4 MOVE.B instructions,  and  it 
does the same job!

Since  it takes and writes to alternate bytes,  we can  read  and 
write  and entire plane of 4 bytes in one go.   So,  here is  the 
modified algorithm:


FOR 32 lines
{
     move all bytes on 1 line from "old screen" to "new  screen", 
     1 byte to left

     move byte from buffer into right byte on "new screen"
     move all bytes in buffer 1 byte to left

     goto next new screen line
     goto next old screen line
     goto next buffer line
}



If the source code looks complex in the way it looks:

     movep.l   1(a0),d0
     movep.l   d0,(a1)

     movep.l   8(a0),d0
     movep.l   d0,1(a1)

     movep.l   9(a0),d0
     movep.l   d0,8(a1)

     .....

then this is how it works...

First,  I  take the whole plane from the second byte of  the  old 
screen:

     movep.l   1(a0),d0

then, I put it into the 1st byte on the new screen:
     movep.l   d0,(a1)

Now,  I have to get the next byte along... But it is NOT at 2(a0) 
or 3(a0).  Think about it... the screen looks like this:

01        23        45        67        89        ...
Plane1    Plane2    Plane3    Plane4    Plane1    ...

The first MOVEP takes bytes 1357.
The second MOVEP puts them into bytes 0246.

So now I have to take bytes starting from byte 8,  for the  third 
screen byte on the first plane.

Complicated?  You ain't seen nothing yet!


James Ingram, February 27th 1994

     I do not mind you using any parts of my code,  or any  ideas 
     of  mine.   All  I ask is that you give me a credit  for  my 
     ideas or code.  Cheers.

