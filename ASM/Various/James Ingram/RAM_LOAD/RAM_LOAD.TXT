RAM_LOAD V1.0
-------------

By James Ingram, 1994

I have the game CIVILISATION.  I also have POPULOUS II.
I have got 2 Meg.

Why don't the programmers cater for me?  On both these games,
most of the needed files can be got from RAM instead of
re-loaded every time.

RAM_LOAD is born.

RAM_LOAD is a RAMDISK program.  But it is also much more.

You can set up a RAMDISK of any size using RAMLOAD.
You can make that RAMDISK reset-proof.
You can boot from the RAMDISK (not the bootsector, though)
You can also make the Atari load files directly from
the RAMDISK, no matter where the program asks for them from.

For example, if the program asks for:
        A:\PICS\JAMES.PI1
and the RAMDISK has a directory called PICS and a file in that
directory called JAMES.PI1, then the file will be loaded from the
RAMDISK automatically.

You can now load the files from the game disk onto the RAMDISK,
and play the game from RAM!

This is true, even for those games which frequently come in the
PD, which you spend 5 minutes copying to a RAMDISK, and run.
They then immeadiately access drive A, because they have been
written to only ever look on drive A.  With RAM_LOAD, they are
fooled into taking them from the RAMDISK!


Even if you have only 1 meg or so, you can create a small RAMDISK
and copy the most-often used files (if memory permits).

So that you don't have to do everything every time, RAM_LOAD contains 
a (fairly) powerful command language, details of which are below.

To whet your appetite, however, here are small programs written
in RAM_LOAD BASIC:

' This is a comment
' Program to load POPULOUS II to RAMDISK
' and then run it...

print "POPULOUS II Loader"
if mem<1800
   print "Too little memory!"
   print "upgrade!"
else
   ' set up large, reset-proof RAMDISK
   ramdisk 850 g /reset
   print "now loading all POPULOUS II files..."
   
   ' exclude RAM_LOAD and the command file
   exclude ram_load.prg
   exclude AUTO.RAM

   ' now load all files from disk
   cd a:\
   load *.* /full

   ' all files on drive A are now on drive G

   ' reset the machine, booting from drive G, so program loads...
   boot_from g
   reset
end-if

' I only ever reach here if there was too little memory.
quit

********************************************************************

' routine to wait for a disk change
REPEAT
   print "please enter GAME disk"
   pause
   search_for GAME.PRG
UNTIL exists



********************************************************************
STRANGE HAPPENINGS?

When you have RAM_LOAD resident, you may notice one or two odd
things:

1.      files / directories on your floppy that were never there
2.      when you save a file to floppy, it remains unchanged...

These two "strange" occurences are not THAT strange!

The first one happens because GEM does SEARCHES which are intercepted
by RAM_LOAD, which tells GEM all the files on the RAMDISK!

When files are saved to the floppy, they REALLY are saved.
But if a file of the same name exists on the RAMDISK, and it
is unchanged, then when the file is accessed again, the old
file will be taken from the RAMDISK!

********************************************************************
SLOWW ?


The system may be slowed down fairly remarkably if you have a lot
of files in the RAMDISK (especially in the root directory).
Sorry.  Nothing I can do about this; it is slowed down by RAM_LOAD
doing its job!

********************************************************************

RUNNING
-------

RAM_LOAD can be run from either the AUTO folder, or from the
DESKTOP.

When run from the AUTO folder, it will always look for a file called
AUTO.RAM, and use it as a batch file.  If it can't find, it, it will
ask for a batch file name.  Just pressing RETURN will allow you to enter
ASK MODE, and input commands manually.

If you hold down CONTROL while booting, RAM_LOAD will fall straight into
ASK MODE without trying to load AUTO.RAM

When you run from the DESKTOP, a file selector will appear,
asking for the batch file.
If you click on CANCEL, then you will enter ASK MODE.

********************************************************************

ASK MODE
--------

ASK MODE does not support WHILE, IF, or REPEAT loops; these can only be
used in batch files.

You can enter ASK MODE from a batch file!  Either for just one command
or until the user quits.

E.G.
print "Do you wish to enter some commands?"
inpchar yn
if inpchar = "y"
  ask_mode
end-if

If the ask_mode is replaced with "ask", then only one command
will be asked for before control is returned automatically to
the batch file.

To leave ASK MODE, you type "stop".

ASK MODE has an on-line HELP mode!
You can access this by typing "help".

********************************************************************

USING HELP
----------

The HELP mode gives brief help on a topic, and then might list
several other relevant topics.  To see help on one of the listed
topics, enter it's number and press RETURN.

To go back to the previous page, just press RETURN

To leave HELP mode, type "q" then RETURN.

********************************************************************

TYPES OF LINE
-------------


There are 3 different types of line:
' comment
:label
command

Any line starting with a ' will be ignored like a REM statement in
BASIC.  If by some wierd fluke you have to load a file called
'weird.dat, then use:

load 'weird.dat

LABELS are used for the GOTO and GOSUB commands (see below).

Commands offer you a powerful (well, fairly powerful) interface
with the program.  LOAD and RAMDISK are the essential ones, here.

LOAD is the r‚ason d'ˆtre of RAM_LOAD.  Quite simply,
it will copy files from the current drive to the RAMDISK.

If you want all the .PI1 files, for example, you type:
load *.PI1

The WILDCARDS can also be made to scan all the sub-directories

load *.PI1 /full
will get ALL the .PI1 files from the current directory, and
any sub-directories!

You can use "/f" instead of "/full" if you want.

But say, for example, you want ALL the .PI1 files, but
you don't want CAT.PI1.  What do you do?  Use the "exclude"
command:

exclude cat.pi1
load *.pi1

Now, on another disk, is another picture called CAT.PI1.
I cannot load this at all!  Because if I do:

load cat.pi1

I will be told that it is excluded.  So I simply tell the system
that a new disk has come along:

newdisk
print "enter new disk"
pause
load cat.pi1

The "newdisk" command wipes all the EXCLUDED files.

But say that I don't want the DOG picture from any disk.
I could do this:

exclude cat.pi1
exclude dog.pi1

load *.pi1

...

newdisk
exclude dog.pi1
load *.pi1


but I have catered for this problem.  If you don't want DOG.PI1 on
ANY disk EVER, simply type:

exclude dog.pi1 /all

and the "newdisk" command won't affect the exclusion.
If you change your mind later about the DOG.PI1 file, you can use:

all off
load dog.pi1
all on

The "all" command switches the exclusions off and then back on again.
Note that it only affects those exclusions which have the "/all" switch.

Have I thought of everything?  Or what?  I don't need half the features
I put in, but I thought "well, someone might..." hence the
on-line help (which I do actually use)!


You can exclude wildcards.  So if want everything but the DOC files
on a disk, use:

exclude *.doc
load *.*

and ANY .DOC file will be excluded.

********************************************************************


THE COMMANDS
------------

There now follows a run-down on each of the commands.
The commands available are:

        all
        ask
        ask_mode
        boot_from
        cd
        clear_keys
        cls
        copy_to
        dir
        else
        end-if
        end-while
        exclude
        gosub
        goto
        help
        if
        inpchar
        inpclr
        input
        load
        mem
        newdisk
        print
        pause
        quit
        ram
        ramdisk
        repeat
        reset
        return
        run
        search
        search_next
        stop
        until
        while
        x


*************************************************************


ALL

all takes one of two parameters:
all on
all off

It is used when an EXCLUDE has been specified with
the /all option.  The excludes can be disabled by using all off
and re-enabled using all on

exclude *.DOG /all
load *.*
newdisk
print "enter disk 2"
pause
load *.*
'now I want to load all the *.DOG files!
all off
newdisk
print "enter disk 3"
pause
load *.*


See also:
exclude
newdisk

*************************************************************

ASK
When included in a command file, "ask" will allow
the user to enter ONE command during run-time.

*************************************************************

ASK_MODE

When included in a command file, "ask_mode" will allow
the user to enter the command mode until
stop is entered as a command, when control will
revert to the command file.

*************************************************************

BOOT_FROM

This command changes the boot drive.

Example:

boot_from C             (boots from drive C next time)

The machine will continue to boot from the specified drive
until a cold reset or until another program alters the
boot drive.

************************************************************

CD

cd is used to change directories, in the same manner
that the MSDOS comamnd is used on PCs.

Examples

cd \             (go to root directory)
cd dir_name      (go to directory dir_name)
cd ..            (go back 1 directory)
cd a:\           (go to drive A:, and root directory)
cd b:\test       ( go to drive B: and directory \TEST)

************************************************************

CLEAR_KEYS

Clears the keyboard buffer.
Can be used before, for example, pausing between
disk swaps.

print "enter disk 2"
clear_keys
pause

************************************************************

CLS

Clears the screen.

************************************************************

COPY_TO

copy_to sets the destination drive for wildcard operations
It is initialy set to A:.  When you install a RAMDISK
the copy_to drive is automaticaly set to the RAMDISK drive.

Example:

copy_to c        (sets destination drive to C:)

************************************************************

DIR

Allows you to see the directory of the current disk.
You can specify wildcards.

dir *.prg
dir

You can also specify other paths (you MUST incude a wildcard)
but the title of the directory looks odd.
I really could not be bothered to fix this bug
as it is NOT a major bug!

dir a:\auto\*.*

************************************************************

ELSE

Allows an alternative action after an IF command.

See also:
        if

************************************************************

END-IF

The end of an IF command.

See also:
        if

************************************************************

END-WHILE

The end of a WHILE loop.
Can also be written as WEND

See also:
        while
        EXPRESSIONS SECTION

************************************************************

EXCLUDE

"x" can be used as a shortcut for this command.
This command allows you to exclude files from being loaded.
Say, for example, you wanted to load all the *.PI1 files
_except_ those called CAT01.PI1, CAT02.PI1 etc...

The commands would be:

exclude CAT*.PI1
load *.PI1

The "excluded" wildcards will be left out after the exclude
instruction has been executed.  To wipe the exclude list, use the
newdisk command.  To ensure that a wildcard is "excluded" from ALL disks
add "/all" after the wildcard:

exclude CAT*.PI1 /all

This will exclude CAT*.PI1 from ALL disks used to load in from.
So you can have:

'do not load CAT files...
exclude CAT*.PI1 /all
'or DOG files...
exclude DOG*.PI1
load *.PI1
print "please enter DOG disk"
pause
newdisk
'loading DOG files now, but still not CAT files...
load *.PI1

This will exclude CAT*.PI1 from BOTH disks, but DOG*.PI1 from the first only.
Use the ALL command to switch the excludes with the /all switch off and on.

See also:
        all
        newdisk

************************************************************

GOSUB

As in BASIC; it will call a subroutine.
The subroutine ends with the command return
and control will then return to the line after the GOSUB

gosub :my_rout
print "I have control back here!"
pause
quit

:my_rout
print "Subroutine called now..."
return

************************************************************

GOTO

As in BASIC; jumps to a label.

goto :here
'do not execute this line
:here

************************************************************

HELP

The ON-LINE HELP can be accessed by this command.
For details on how to use it, see top of document.

************************************************************

IF

Allows a selection.  This uses the same expressions
as the REPEAT and WHILE loops.


Example:

if mem < 850
   print "memory too small!"
   quit
else
   print "memory ok for RAMDISK."
   ramdisk 800 g
   quit /resident
end-if



print "enter your name:"
input
if input = "james"
   print "you are a top man!"
else
   print "You are not James!  Leave now!"
end-if
print "byeee!"

See also:
        repeat
        while
        EXPRESSIONS SECTION

************************************************************

INPCHAR

Waits for a single keypress.
Can be used with a mask of characters, which
will allow only those characters to be pressed.
Upper and lower case are not distingusihed between.
The result is stored in INPCHAR, and can be used in WHILE,
REPEAT and IF statements

inpchar

print "use RAM LOADER (Y/N)?"
'wait for a Y or a N
inpchar yn
IF inpchar = "n"
quit
end-if

************************************************************

INPCLR

As INPCHAR, but the keyboard buffer is cleared
before any input is accepted.

See also:
        inpchar

************************************************************

INPUT

Allows the user to input a string.
The string is stored in INPUT
and can be referenced by WHILE, REPEAT and IF commands,
as well as the LOAD command.

No difference is made between upper and lower case.

print "please enter file to load:"
input
load INPUT

print "please enter your name"
input
WHILE input <> "James"

See also:
        load
        EXPRESSIONS SECTION

************************************************************

LOAD

The LOAD option allows files to be LOADED to the RAMDISK
(or the drive specified by "copy_to").
You can use the parameter /full to load all matching files
from sub-directories as well:

cd a:\
load *.* /full

The above example will copy all the files on drive A:


Load can also be used to load file(s) specified by the user using INPUT

print "enter wildcard:"
input
load input

LOAD can load files which have been FOUND:

search *.pi1
load found

N.B. search_next will NOT work after a load!

Just for completeness, you may be wandering how you load files
called "found" or "input".
To load files which happen to have these names, type:
load @input
load @found

See also:
        input
        search

************************************************************

MEM

Displays the size of the largest free block of memory
mem

See also:
        mem (expression)

************************************************************

NEWDISK

Informs the system that a new logical disk has been entered.
This will wipe all exclude files without the /all option.
It does not cause the system to pause, so you must ask for
a new disk and then pause manually, if it is required.

See also:
        all
        exclude

************************************************************

PRINT

Allows you to print messages on the screen.
Your message should be enclosed by quotes:

print "hello mum!"

You can use ? as a shortcut:
? "the same as print!"

************************************************************

PAUSE

Simply waits for a keypress.  No record is made
of which key is pressed.  To do this, you should use:

inpchar or inpclr

************************************************************

QUIT

Quits RAM_LOAD.  If no parameters are specified,
then any ramdisk is switched off, and all memory freed.
There are two parameters you can specify:
/resident
/reset

/resident allows RAM_LOAD to remain in memory.  Any RAMDISK
will also remain, and can be accessed from the desktop
or the file selector.

/reset does the same job as /resident, but also makes the RAMDISK
reset proof. You can boot from the ramdisk by using the boot_from
command.

See also:
        boot_from


************************************************************

RAM

Turns RAM searching ON and OFF
RAM searching is why RAM_LOAD was written!

Files are copied to RAMDISK, and are then automatically
loaded from there when needed.  If you need to run a program
which is alergic to this function and crashes, you can turn the
searching OFF using:

ram off
run strange.prg
ram on

Note, though, that when you quit RAM_LOAD, you CANNOT then
alter the RAM searching; it is ALWAYS either on or off.

************************************************************

RAMDISK

Allows a RAMDISK to be created.  You don't HAVE to have
a RAMDISK to use RAM_LOAD, but if you have a hard
disk then what are you doing using this?

The command takes 2 parameters; the size and the letter
of the new drive.

ramdisk 200 g
'set up a 200k ramdisk as drive g


You can also make the ramdisk reset proof by adding /reset
ramdisk 200 g /reset


************************************************************

REPEAT

You can set up loops using the REPEAT/UNTIL combination.
A REPEAT loop will ALWAYS execute at least once.
The expression is tested at the UNTIL command.
A WHILE loop is tested BEFORE it is executed, so may not run at all.

repeat
print "please enter GAME disk"
pause
search_for game.prg
until exists

You can use any of the expressions in the expressions section.

See also:
        until
        while
        if
        EXPRESSIONS SECTION

************************************************************

RESET

Simply forces a soft reset of the machine.
Equivalent to pressing the reset button at the back.
Reset proof RAMDISKs will survive!

************************************************************

RETURN

Returns from a subroutine called by GOSUB

See also:
        gosub

************************************************************

RUN

Runs a program.  You can specify NOT to use the RAMDISK
automatically using the RAM command.
You can also pass a command line!

run me.prg
run devpac.prg mycode.s

You can loop a program by adding the /loop parameter.
run me.prg command_line_here /loop

which will ask whether to run the program again or not
each time the program finishes.

See also:
        ram

************************************************************

SEARCH

Allows you to search for a file.
The result is stored in several variables:
   EXISTS
   FOUND

They can all be used in WHILE, REPEAT and IF commands.
FOUND is for loading files as well:

'search for file to tell when correct disk is in
REPEAT
search_for disk1.inf
UNTIL exists

'search for and load a file
search_for file1.dat
load found

N.B. The SEARCH_NEXT command WILL NOT WORK after a LOAD
instruction, as LOAD performs searches of it's own!


See also:
        search_next
        EXPRESSIONS SECTION

************************************************************

SEARCH_NEXT

Searches for the next file which matches the wildcard
passed to SEARCH_FOR.

For a full breakdown, see:
        search_for

************************************************************

STOP

Allows the user to leave the ask mode.
Control is passed back to the command file.

See also:
        ask_mode

************************************************************

SWITCH

You  can specify the ability to turn RAM searching on and off  in 
one of several ways:

     SHIFT
     HELP
     RUN

SHIFT  will toggle the searching on and off when both SHIFT  keys 
are pressed (although the interrupt does not occur very often, so 
you  may have to hold down the shift keys while you do  something 
else - eg click on a file, then do SHOW from the desktop).

HELP will toggle when ALT and HELP are pressed, but you will lose 
any other functions on the ALT-HELP keys (printing the screen, or 
any other accessory).

RUN only switches searching ON,  not OFF.   It will switch it  on 
every time a program is RUN.

Note that the RUN switch will be activated by AUTO programs.

E.G.
ram off
switch run
switch help
quit /resident

the  above example will switch RAM searching off until a  program 
is run, or ALT-HELP is pressed.


See also:
       ram

************************************************************

UNTIL

The end of a REPEAT loop.

See also:
        REPEAT
        EXPRESSIONS SECTION

************************************************************

WHILE

You can set up a loop using a WHILE loop.
The expression is tested right away, so the loop may not
run at all.  If you want to ensure the loop runs at least once, see
the REPEAT command.


print "enter filename to load:"
input

while input <> ""
   load input
   print "enter filename to load:"
   input
end-while

See also:
        end-while
        repeat
        if
        EXPRESSIONS SECTION

************************************************************

X

See:
        exclude

************************************************************
************************************************************

EXPRESSIONS SECTION


The REPEAT, WHILE and IF statements are fairly powerful.
They all use the same expressions:
        INPCHAR
        INPUT
        EXISTS
        FOUND
        MEM

INPCHAR

The commands inpchar and inpclr leave 1 character
in a buffer called INPCHAR.
This can be evaluated like this:

IF inpchar = "y"
 ...
END-IF


WHILE inpchar <> "n"
 ...
END-WHILE

REPEAT
 ...
UNTIL inpchar = "y"



INPUT

Allows you to examine what the user inputed
When the input command was used:

IF input = "James"

WHILE input = ""



EXISTS

When you do a search_for or a search_next command,
the EXISTS flag is changed.

search_for disk1.inf
IF exists
goto :special
end-if


FOUND

When you do a search_for or a search_next command,
the FOUND text is changed to the name of the file found.

search_for *.dat
if found = "first.dat"
   load found
end-if



MEM

You can base decisions on how much memory you have free.
Note that a 1 meg machine will always have LESS than
1000k free. So test for about 950 or so.
But always take into account any resident programs
 - including RAM_LOAD!

if mem < 950
print "not enough memory!"
quit
end-if


COMBINING EXPRESSIONS

You can combine several expressions in one command:

IF (((exists) and (found <> "last.dat")) or inpchar = "y")

As you can see, you can also use brackets.


************************************************************
TECHNICAL NOTE

When  I  test  to see if a file exists on the  RAMDISK  during  a 
search,  I do NOT execute a search on the ramdisk, as this led to 
long delays when there were a lot of files.   What I do is keep a 
list  of files found on the ramdisk and search  that  list.   The 
list  is rest by a SFIRST command,  and files which are found  on 
the RAMDISK are added to the list with every SNEXT.  This has not 
caused  me  any  problems  so  far,  and  has  speeded  up  tests 
greatly...


************************************************************
************************************************************
************************************************************
************************************************************

DISCLAIMER

You use this program at your own risk.  I have tried it and
found it works (most of the time).  But REMEMBER...


NEVER NEVER NEVER NEVER NEVER NEVER NEVER NEVER NEVER NEVER
modify an original game disk.  ALWAYS use a backup (if,
of course, the copyrighht holder has given permission,
otherwise backing up an original game is ILLEGAL, and you
should not tamper with it at all).

It is obvious, of course, that RAM_LOAD should only be used
with games which are in FILES.  Bootsector loaders and some
games which bypass GEMDOS will not work.


You have been warned....


James Ingram, July 1994


PLUGS PLUGS PLUGS PLUGS PLUGS PLUGS PLUGS PLUGS PLUGS PLUGS PLUGS 

Also available from James Ingram:

Ever wanted to code 68000 demos?  Got Devpac Version 2 or 3?
Know assembly fairly well?

Get my Demo tutorial!  It covers:
     Scrolling messages
     Sine-wave wobblers
     Getting rid of borders (top, bottom, left and right!)
     Timers
     Playing samples (STFM and STe)
     Chip music
     Those bars that go up and down to chip music like a stereo
     Moving sprites around
     Sprites which leave an infinite "trail"

And climaxes with the full source code and explaining docs for 2
small "demos" I knocked up.  One shows how you can scroll the _entire_
screen (32000 bytes) by 8 pixels in under 1/50th of a second!  It
does NOT use any registers like the screen address or 50/60 Hz (like
the "hardware" scrollers I have heard about).   It is ALL pure
assembly!  Now you can have a full digitised screen scrolling left
or right (or diagonally) on a humble STFM!

The other "demo" is a full-screen which comprises of:
     a large sine-wobbler at the top (160 x 75 in height)
     a ball sprite (32 x 32) leaving a trail in the middle
     a scrolling message (32 x 32 font) in the bottom border

and _everything_ is in 4 planes!  And I had time left over!

