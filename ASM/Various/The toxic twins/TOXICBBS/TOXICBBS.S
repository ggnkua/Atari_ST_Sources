;	The Toxic Twins TOXICBBS.PRG source!
;	Sourcen och medfîljande filer Ñr public domain.
;	Inga Ñndringar av koden eller medfîljande filer
;	fÜr ske fîrutom fîr privat bruk! Koden fÜr spridas
;	vidare men inget fÜr Ñndras och alla tillhîrande
;	filer mÜste finnas med.

NRB	EQU	19

	MOVE.L	4(SP),A5
	MOVE.L	$C(A5),D0
	ADD.L	$14(A5),D0
	ADD.L	$1C(A5),D0
	ADD.L	#$1000,D0	stack utrymme
	ADD.L	#$100,D0	base page
	MOVE.L	A5,D1
	ADD.L	D0,D1
	AND.L	#-2,D1
	MOVE.L	D1,SP
	MOVE.L	D0,-(SP)
	MOVE.L	A5,-(SP)
	MOVE.W	D0,-(SP)
	MOVE.W	#$4A,-(SP)
	TRAP	#1
	LEA	12(SP),SP
	TST.L	D0		gick det bra?
	BEQ.B	OK		-> Ja
DONE	CLR.W	-(SP)		Nej, hoppa ur!
	TRAP	#1

OK	MOVE.W	#4,-(SP)	SPARA UPPLôSNING
	TRAP	#14
	ADDQ.L	#2,SP

	MOVE.W	D0,OLD_RES

	MOVE.W	#3,-(SP)
	TRAP	#14
	ADDQ.L	#2,SP
	MOVE.L	D0,OLD_SCR

	CLR.L	-(SP)
	MOVE.W	#$20,-(SP)
	TRAP	#1
	ADDQ.L	#6,SP
	MOVE.L	D0,SAVESP

	* sÑtt nytt tangentbord utan mus *
	MOVE.L	$118.W,OLD_KEY
	MOVE.L	#K_BOARD,$118.W

	MOVEM.L	$FFFF8240.W,D0-D7
	MOVEM.L	D0-D7,OLD_COL

	LEA	$FFFF8240.W,A0
	MOVEQ	#15,D0
CLR_BIT	AND.W	#%0000011101110111,(A0)+	SLéCK STE FéRGBITAR
	DBRA	D0,CLR_BIT
	SUB.L	#32,A0
	MOVEQ	#15,D1
NEXTCOL	MOVEQ	#15,D0
FAIDCOL	MOVE.W	(A0),D3
	AND.W	#%0000111100000000,D3
	TST.W	D3
	BEQ.B	NO_RED
	SUB.W	#$100,(A0)
NO_RED	MOVE.W	(A0),D3
	AND.W	#%0000000011110000,D3
	TST.W	D3
	BEQ.B	NO_GRN
	SUB.W	#$010,(A0)
NO_GRN	MOVE.W	(A0),D3
	AND.W	#%0000000000001111,D3
	TST.W	D3
 	BEQ.B	NO_BLU
	SUB.W	#$001,(A0)
NO_BLU	ADDQ.L	#2,A0
	DBRA	D0,FAIDCOL
	SUB.L	#32,A0
	MOVE.L	$466.W,D2
WAITVBL	CMP.L	$466.W,D2
	BEQ.B	WAITVBL 
	DBRA	D1,NEXTCOL

	MOVE.W	#0,-(SP)
	MOVE.L	#-1,-(SP)
	MOVE.L	#-1,-(SP)
	MOVE.W	#5,-(SP)
	TRAP	#14
	ADD.L	#12,SP
	
	MOVE.L	#SCR,D0
	ADD.L	#256,D0
	AND.L	#$FFFFF00,D0
	MOVE.L	D0,SCREEN	
	LSR.W	#8,D0
	MOVE.L	D0,$FFFF8200.W

	MOVE.W	#1399,D0
	MOVE.L	SCREEN(PC),A0
	ADD.L	#32000,A0
	LEA	FONT+34,A1
	ADD.L	#19520,A1
EX_SCR	MOVE.L	(A1)+,(A0)+
	DBRA	D0,EX_SCR

	MOVE.W	#599,D0
	MOVE.L	SCREEN(PC),A0
	LEA	FONT+34,A1
	ADD.L	#29600,A1
EX_SCR2	MOVE.L	(A1)+,(A0)+
	DBRA	D0,EX_SCR2

	JSR	MUS	INIT MUZAX

	LEA	CIR_POS(PC),A0
	MOVE.L	#ROL_BUF,D0
ADJUST	CMP.L	#$FFFFFFFF,(A0)
	BEQ.B	COL
	ADD.L	D0,(A0)+
	ADDQ.L	#2,A0
	BRA.B	ADJUST

COL	LEA	FONT+2,A0
	MOVEM.L	(A0),D0-D7
	MOVEM.L	D0-D7,$FFFF8240.W
	
	* SPRITE BLOCKENS STORLEK OCH POSITION FôR KULA
	LEA	KUL_SPR+64,A0	
	MOVEQ	#15,D1
KSPR	MOVE.W	D1,D0
	MULU	#248,D0
	MOVE.L	D0,-(A0)
	DBRA	D1,KSPR

	* MASK BLOCKENS STORLEK OCH POSITION FôR KULA
	LEA	KUL_MSK+64,A0
	MOVEQ	#15,D1
MSPR	MOVE.W	D1,D0
	MULU	#120,D0
	MOVE.L	D0,-(A0)
	DBRA	D1,MSPR

	* SPRITE BLOCKENS STORLEK OCH POSITION FôR BOLL
	LEA	BOL_SPR+64,A0	
	MOVEQ	#15,D1
BSPR	MOVE.W	D1,D0
	MULU	#1128,D0
	MOVE.L	D0,-(A0)
	DBRA	D1,BSPR

	* MASK BLOCKENS STORLEK OCH POSITION FôR BOLL
	LEA	BOL_MSK+64,A0
	MOVEQ	#15,D1
BMSK	MOVE.W	D1,D0
	MULU	#560,D0
	MOVE.L	D0,-(A0)
	DBRA	D1,BMSK

	* ETT TOMT 16PIXELS BLOCK SKA ALLTID LéGGAS TILL PÜ D6 *
	* EX. SPRITEN éR 32 BYTES BRED (=64 PIXELS BRED, 4*16) *
	* ALLTSÜ, D6=40 (32+8). 8 BYTES=16PIXLAR MED 4 BITPLAN *
	* BOLLEN *
MOVE	MOVEQ	#32,D6		SPRITE BREDD
	MOVEQ	#35,D7		SPRITE HôJD
	LEA	SP_0,A6 	SPRITE MINNE (16 ST) DIT DE 16 KOPIERNA HAMNAR
	LEA	FONT+34(PC),A5	DEGAS BILD
	LEA	SPM_0,A4	MASK MINNE FôR DE 16 OLIKA SPRITARNA
	MOVE.W	#0,POS_X	X POSITION PÜ DEGAS BILD
	MOVE.W	#85,POS_Y	Y POSITION PÜ DEGAS BILD
	BSR	DO_INIT

	* KULAN *
	MOVEQ	#16,D6		SPRITE BREDD
	MOVEQ	#15,D7		SPRITE HôJD
	LEA	SP_1,A6 	SPRITE MINNE (16 ST) DIT DE 16 KOPIERNA HAMNAR
	LEA	FONT+34(PC),A5	DEGAS BILD
	LEA	SPM_1,A4	MASK MINNE FôR DE 16 OLIKA SPRITARNA
	MOVE.W	#0,POS_X	X POSITION PÜ DEGAS BILD
	MOVE.W	#68,POS_Y	Y POSITION PÜ DEGAS BILD
	BSR	DO_INIT

	BRA	START

DO_INIT	MOVEQ	#15,D5		ANTAL SPRITAR
	MOVEQ	#0,D0
	MOVEQ	#0,D1

	* POSITION PÜ DEGAS BILD *
NéSTA	MOVE.W	POS_X,D0		X_POS
	MOVE.W	POS_Y,D1		Y_POS
	AND.W	#$FFF0,D0
	LSR.W	#1,D0
	MULU	#160,D1
	ADD.L	D1,D0		D0=SPRITE POSITION I DEGAS BILD

	* KOPIERA SPRITE *
	MOVE.L	A6,A0
	MOVE.W	D0,A1
	ADD.L	A5,A1
	MOVE.W	D7,D0	  	RADER
	SUBQ.L	#1,D0
LINJER	MOVE.W	D6,D1		BREDD
	SUBQ.L	#1,D1
BITPLAN	MOVE.B	(A1)+,(A0)+
	DBRA	D1,BITPLAN
	SUB.L	D6,A1
	ADD.L	#160,A1
	DBRA	D0,LINJER	A0 PEKAR PÜ NéSTA SPRITE

	* ROLLA SPRITE *
	MOVE.L	D6,D0		X
	MOVE.L	D7,D1		Y
	MULU	D0,D1		D1=ANTAL BYTES
	MOVE.L	A6,A0		SPRITE1->A6
	ADD.L	D1,A0		+ 
	MOVE.L	ROL,D3		ANTAL BITAR ATT SCROLLA
	ADDQ.L	#1,ROL
	LSR.W	#3,D1	FÜ FRAM ANTAL BITPLAN
	MOVE.L	A0,D4		SAVE A0
ROLLA	SUBQ.L	#2,A0
	MOVE.L	(A0),D0
	MOVE.W	8(A0),D0
	ROR.L	D3,D0
	MOVE.W	D0,8(A0)

	SUBQ.L	#2,A0
	MOVE.L	(A0),D0
	MOVE.W	8(A0),D0
	ROR.L	D3,D0
	MOVE.W	D0,8(A0)

	SUBQ.L	#2,A0
	MOVE.L	(A0),D0
	MOVE.W	8(A0),D0
	ROR.L	D3,D0
	MOVE.W	D0,8(A0)

	SUBQ.L	#2,A0
	MOVE.L	(A0),D0
	MOVE.W	8(A0),D0
	ROR.L	D3,D0
	MOVE.W	D0,8(A0)

	DBRA	D1,ROLLA
	MOVE.L	D4,A0		ÜTERSTÜLL A0

	* GôR MASKEN *
	MOVE.W	D6,D0		BREDD
	MOVE.W	D7,D1		HôJD
	MULU	D1,D0		D0=ANTAL BYTES
	LSR.W	#3,D0		DELA MED 8 = BITBLOCK (2*4)
	SUBQ.L	#1,D0
	MOVE.L	A6,A1
	MOVE.L	A4,A2
DO_MASK	MOVE.W	(A1)+,D1
	OR.W	(A1)+,D1
	OR.W	(A1)+,D1
	OR.W	(A1)+,D1
	NOT.W	D1
	MOVE.W	D1,(A2)+	
	MOVE.W	D1,(A2)+	
	DBRA	D0,DO_MASK	A2 PEKAR PÜ NéSTA MASK

	ADDQ.L	#8,A0		LéGG TILL 8 BYTES PÜ SLUTET AV VARJE SPRITE
	MOVE.L	A0,A6
	MOVE.L	A2,A4
	DBRA	D5,NéSTA 
	CLR.L	ROL
	RTS

START	* RéKNA FRAM KORDINATERNA FôR TECKEN *
	MOVEQ	#0,D1		FôRSTA RADEN I FONT
	LEA	KORDIN,A0
	MOVEQ	#3,D2		4 rader tecken
GO_ON	MOVEQ	#19,D0		20 tecken pÜ varje rad
KOR1	MOVE.W	D1,(A0)+	spara kordinat (80 st)
	ADDQ.L	#8,D1
	DBRA	D0,KOR1
	ADD.L	#2560,D1	17 rader ner (2720-160)
	DBRA	D2,GO_ON

	BRA	HOPP

	* SéTT UT SPRITE *
SPRT	LEA	KULOR,A0
	LEA	KUL_CLR,A2

	REPT	NRB+1
	MOVE.L	(A0)+,A6
	MOVE.L	(A0)+,A4
	MOVE.L	(A0)+,A1		+ PLACERING
	MOVE.L	A1,(A2)+

	* BLOCK 1 *	
	MOVE.L	(A1),D4
	AND.L	(A4)+,D4
	OR.L	(A6),D4
	MOVE.L	D4,(A1)	
	* BLOCK 2 *
	MOVE.L	8(A1),D4
	AND.L	(A4)+,D4
	OR.L	8(A6),D4
	MOVE.L	D4,8(A1)	

	* BLOCK 1 *	
	MOVE.L	160(A1),D4
	AND.L	(A4)+,D4
	OR.L	16(A6),D4
	MOVE.L	D4,160(A1)	
	* BLOCK 2 *
	MOVE.L	168(A1),D4
	AND.L	(A4)+,D4
	OR.L	24(A6),D4
	MOVE.L	D4,168(A1)	

	* BLOCK 1 *	
	MOVE.L	320(A1),D4
	AND.L	(A4)+,D4
	OR.L	32(A6),D4
	MOVE.L	D4,320(A1)	
	* BLOCK 2 *
	MOVE.L	328(A1),D4
	AND.L	(A4)+,D4
	OR.L	40(A6),D4
	MOVE.L	D4,328(A1)	

	* BLOCK 1 *	
	MOVE.L	480(A1),D4
	AND.L	(A4)+,D4
	OR.L	48(A6),D4
	MOVE.L	D4,480(A1)	
	* BLOCK 2 *
	MOVE.L	488(A1),D4
	AND.L	(A4)+,D4
	OR.L	56(A6),D4
	MOVE.L	D4,488(A1)	

	* BLOCK 1 *	
	MOVE.L	640(A1),D4
	AND.L	(A4)+,D4
	OR.L	64(A6),D4
	MOVE.L	D4,640(A1)	
	* BLOCK 2 *
	MOVE.L	648(A1),D4
	AND.L	(A4)+,D4
	OR.L	72(A6),D4
	MOVE.L	D4,648(A1)	

	* BLOCK 1 *	
	MOVE.L	800(A1),D4
	AND.L	(A4)+,D4
	OR.L	80(A6),D4
	MOVE.L	D4,800(A1)	
	* BLOCK 2 *
	MOVE.L	808(A1),D4
	AND.L	(A4)+,D4
	OR.L	88(A6),D4
	MOVE.L	D4,808(A1)	

	* BLOCK 1 *	
	MOVE.L	960(A1),D4
	AND.L	(A4)+,D4
	OR.L	96(A6),D4
	MOVE.L	D4,960(A1)	
	* BLOCK 2 *
	MOVE.L	968(A1),D4
	AND.L	(A4)+,D4
	OR.L	104(A6),D4
	MOVE.L	D4,968(A1)	

	* BLOCK 1 *	
	MOVE.L	1120(A1),D4
	AND.L	(A4)+,D4
	OR.L	112(A6),D4
	MOVE.L	D4,1120(A1)	
	* BLOCK 2 *
	MOVE.L	1128(A1),D4
	AND.L	(A4)+,D4
	OR.L	120(A6),D4
	MOVE.L	D4,1128(A1)	

	* BLOCK 1 *	
	MOVE.L	1280(A1),D4
	AND.L	(A4)+,D4
	OR.L	128(A6),D4
	MOVE.L	D4,1280(A1)	
	* BLOCK 2 *
	MOVE.L	1288(A1),D4
	AND.L	(A4)+,D4
	OR.L	136(A6),D4
	MOVE.L	D4,1288(A1)	

	* BLOCK 1 *	
	MOVE.L	1440(A1),D4
	AND.L	(A4)+,D4
	OR.L	144(A6),D4
	MOVE.L	D4,1440(A1)	
	* BLOCK 2 *
	MOVE.L	1448(A1),D4
	AND.L	(A4)+,D4
	OR.L	152(A6),D4
	MOVE.L	D4,1448(A1)	

	* BLOCK 1 *	
	MOVE.L	1600(A1),D4
	AND.L	(A4)+,D4
	OR.L	160(A6),D4
	MOVE.L	D4,1600(A1)	
	* BLOCK 2 *
	MOVE.L	1608(A1),D4
	AND.L	(A4)+,D4
	OR.L	168(A6),D4
	MOVE.L	D4,1608(A1)	

	* BLOCK 1 *	
	MOVE.L	1760(A1),D4
	AND.L	(A4)+,D4
	OR.L	176(A6),D4
	MOVE.L	D4,1760(A1)	
	* BLOCK 2 *
	MOVE.L	1768(A1),D4
	AND.L	(A4)+,D4
	OR.L	184(A6),D4
	MOVE.L	D4,1768(A1)	

	* BLOCK 1 *	
	MOVE.L	1920(A1),D4
	AND.L	(A4)+,D4
	OR.L	192(A6),D4
	MOVE.L	D4,1920(A1)	
	* BLOCK 2 *
	MOVE.L	1928(A1),D4
	AND.L	(A4)+,D4
	OR.L	200(A6),D4
	MOVE.L	D4,1928(A1)	

	* BLOCK 1 *	
	MOVE.L	2080(A1),D4
	AND.L	(A4)+,D4
	OR.L	208(A6),D4
	MOVE.L	D4,2080(A1)	
	* BLOCK 2 *
	MOVE.L	2088(A1),D4
	AND.L	(A4)+,D4
	OR.L	216(A6),D4
	MOVE.L	D4,2088(A1)	

	* BLOCK 1 *	
	MOVE.L	2240(A1),D4
	AND.L	(A4)+,D4
	OR.L	224(A6),D4
	MOVE.L	D4,2240(A1)	
	* BLOCK 2 *
	MOVE.L	2248(A1),D4
	AND.L	(A4)+,D4
	OR.L	232(A6),D4
	MOVE.L	D4,2248(A1)	
	ENDR

	* SéTT UT SPRITE *
	LEA	BOL_KOO,A0
	MOVE.L	(A0),A6
	MOVE.L	4(A0),A4
	MOVE.L	8(A0),D6
	MOVE.L	D6,BOL_CLR
	MOVEQ	#256-160,D3
	NEG.B	D3
	MOVE.L	D6,A1		+ PLACERING
	MOVEQ	#8,D0

	REPT	35
	* BLOCK 1 *	
	MOVEM.L	(A1),D4-D5	SéTT UT 4 BITPLAN
	AND.L	(A4)+,D5
	OR.L	(A6)+,D4
	OR.L	(A6)+,D5
	MOVEM.L	D4-D5,(A1)
		
	* BLOCK 2 *	
	MOVEM.L	8(A1),D4-D5
	AND.L	(A4)+,D5
	OR.L	(A6)+,D4
	OR.L	(A6)+,D5
	MOVEM.L	D4-D5,8(A1)
		
	* BLOCK 3 *	
	MOVEM.L	16(A1),D4-D5
	AND.L	(A4)+,D5
	OR.L	(A6)+,D4
	OR.L	(A6)+,D5
	MOVEM.L	D4-D5,16(A1)
		
	* BLOCK 4 *	
	MOVEM.L	24(A1),D4-D5
	AND.L	(A4)+,D5
	OR.L	(A6)+,D4
	OR.L	(A6)+,D5
	MOVEM.L	D4-D5,24(A1)
	ADD.L	D3,A1
	ENDR

	* KOPI ROL_BUF TILL SKéRM *
	LEA	ROL_BUF+1600,A0
	ADD.L	#1606,D6
	MOVE.L	D6,A1
	REPT	14
	MOVE.W	(A0),D0
	OR.W	D0,(A1)
	MOVE.W	8(A0),D0
	OR.W	D0,8(A1)
	MOVE.W	16(A0),D0
	OR.W	D0,16(A1)
	MOVE.W	24(A0),D0
	OR.W	D0,24(A1)
	ADD.L	D3,A0
	ADD.L	D3,A1
	ENDR

	* CLEARA ROL_BUF TILL NéSTA GèNG *
	LEA	ROL_BUF+1600,A0
	MOVEQ	#0,D0
	REPT	14
	MOVE.W	D0,(A0)
	MOVE.W	D0,8(A0)
	MOVE.W	D0,16(A0)
	MOVE.W	D0,24(A0)
	ADD.L	D3,A0
	ENDR
	RTS

HOPP	MOVE.W	#$005,$FFFF8242.W	HôGER KLOT
	MOVE.W	#$444,$FFFF8252.W	HôGER TEXT

	MOVE.W	#$006,$FFFF8244.W	VéNSTER KLOT
	MOVE.W	#$777,$FFFF8254.W	VéNSTER TEXT
	
	MOVE.B	$FFFFFA09.W,OLD_IEB
	MOVE.B	$FFFFFA07.W,OLD_IEA
	MOVE.B	$FFFFFA13.W,OLD_IMA
	MOVE.B	$FFFFFA1B.W,OLD_MSK	

	MOVE.L	$70.W,OLD_VC2	VBL VECTOR
	MOVE.L	$120.W,OLD_VC3	HBL VECTOR

	MOVE.W	SR,-(SP)		stÑng av MPF
	MOVE.W	#$2700,SR
	MOVE.B	#0,$FFFFFA1B.W		stÑng av vbl
	AND.B	#$DF,$FFFFFA09.W	stÑng av 200 Hz interrupt
	AND.B	#$FE,$FFFFFA07.W	stÑng av Hbl interrupt
	MOVE.L	#VBL,$70.W
	MOVE.L	#ST_LINE,$120.W
	OR.B	#1,$FFFFFA07.W	ÜterstÑll Hbl interrupt
	OR.B	#1,$FFFFFA13.W
	MOVE.W	(SP)+,SR

	SF	HOLD_IT
	SF	BOK_FL
	CLR.L	BOK_NR

DONT_LEAVE_THIS_NICE_DEMO
	CMP.B	#$39,$FFFFFC02.W
	BNE.B	DONT_LEAVE_THIS_NICE_DEMO

	* OK, LEAVE IT! *
	MOVE.W	SR,-(SP)
	MOVE.W	#$2700,SR
	MOVE.B	OLD_MSK,$FFFFFA1B.W
	MOVE.L	OLD_VC2,$70.W
	MOVE.L	OLD_VC3,$120.W
	MOVE.B	OLD_IEB,$FFFFFA09.W
	MOVE.B	OLD_IEA,$FFFFFA07.W
	MOVE.B	OLD_IMA,$FFFFFA13.W
	MOVE.L	OLD_KEY,$118.W

	MOVE.W	(SP)+,SR

	MOVEM.L	OLD_COL,D0-D7
	MOVEM.L	D0-D7,$FFFF8240.W
 
	MOVE.W	OLD_RES,-(SP)
	MOVE.L	OLD_SCR,-(SP)
	MOVE.L	OLD_SCR,-(SP)
	MOVE.W	#5,-(SP)
	TRAP	#14
	ADD.L	#12,SP

	MOVE.L #$8080000,$FFFF8800.W
	MOVE.L #$9090000,$FFFF8800.W
	MOVE.L #$A0A0000,$FFFF8800.W

	MOVE.L	SAVESP,-(SP)
	MOVE.W	#$20,-(SP)
	TRAP	#1
	ADDQ.L	#6,SP

	CLR.W	-(SP)
	TRAP	#1

ST_LINE	CLR.B	$FFFFFA1B.W		STOP TIMER
	MOVEM.L	D0/A0,-(A7)	
	LEA	$FFFFFA21.W,A0
	MOVE.B	#200,(A0)
	MOVE.B	#8,$FFFFFA1B.W		START TIMER
	MOVE.B	(A0),D0
WAIT2	CMP.B	(A0),D0			YES, WE LOSE A WHOLE LINE HERE...
	BEQ.B	WAIT2
	BCLR	#1,$FFFF820A.W		INTO 60 HZ
	MOVE.W	#2,D0
LOOP2 	NOP
	DBRA	D0,LOOP2
	BSET	#1,$FFFF820A.W		INTO 50 HZ
	ST	NOW		TIDSKONTROLL! $FF=GRôNT ATT TA BORT SPRAJAR
	MOVEM.L	(A7)+,D0/A0
	BCLR	#0,$FFFFFA0F.W		ACKNOWLEDGE
	RTE

VBL	CLR.B	$FFFFFA1B.W
	MOVE.B	#199,$FFFFFA21.W
	MOVE.B	#8,$FFFFFA1B.W
	MOVEM.L	D0-D7/A0-A6,-(SP)

	ADDQ.B	#1,T_WAIT
	MOVEQ	#0,D7
	LEA	$FFFFFC02.W,A0
	MOVE.B	(A0),D7			aktuell tangent
	LEA	PARA_NR,A1
	LEA	XA_OFF,A2
	CMP.B	#$70,D7
	BPL	NO_KEY_IS_PRESSED
	
	CMP.B	#1,T_WAIT
	BNE.B	MINUS_IS_STILL_PRESSED
	BSR	DO_INSTRUCTION
	BRA	WAIT_A_WHILE
MINUS_IS_STILL_PRESSED
	CMP.B	(A0),D7
	BNE	NO_KEY_IS_PRESSED
	CMP.B	#10,T_WAIT
	BLE	WAIT_A_WHILE
	BSR.B	DO_INSTRUCTION
	SUBQ.B	#1,T_WAIT
	BRA	WAIT_A_WHILE
DO_INSTRUCTION
	CMP.B	#$52,D7
	BNE.B	CHECK_IF_PLUS
	ADD.L	(A1),A2
	SUBQ.W	#2,(A2)
	BPL.B	INST_IS_READY
	MOVE.W	#2048,(A2)
INST_IS_READY
	RTS
CHECK_IF_PLUS
	CMP.B	#$47,D7
	BNE.B	CHECK_IF_P_UP
	ADD.L	(A1),A2
	ADDQ.W	#2,(A2)
	CMP.W	#2050,(A2)
	BNE.B	INST_IS_READY
	CLR.W	(A2)
	RTS
CHECK_IF_P_UP
	CMP.B	#$48,D7
	BNE.B	CHECK_IF_P_DOWN
	SUBQ.L	#8,(A1)
	BPL.B	INST_IS_READY
	ADD.L	#16,(A1)
	RTS
CHECK_IF_P_DOWN
	CMP.B	#$50,D7
	BNE.B	CHECK_IF_P_LEFT
	ADDQ.L	#8,(A1)
	CMP.L 	#14,(A1)
	BLE.B	INST_IS_READY
	SUB.L	#16,(A1)
	RTS
CHECK_IF_P_LEFT
	CMP.B	#$4B,D7
	BNE.B	CHECK_IF_P_RIGHT
	SUBQ.L	#2,(A1)
	BPL.B	INST_IS_READY
	ADD.L	#16,(A1)
	RTS
CHECK_IF_P_RIGHT
	CMP.B	#$4D,D7
	BNE.B	CHECK_F1_F10
	ADDQ.L	#2,(A1)
	CMP.L	#14,(A1)
	BLE.B	INST_IS_READY
	SUB.L	#16,(A1)
	RTS
CHECK_F1_F10
	SUB.B	#$3B,D7
	BMI.B	INST_IS_READY
	CMP.B	#9,D7
	BGT.B	INST_IS_READY
	LEA	PRE_VAL,A0
	LSL.W	#4,D7
	MOVEM.L	(A0,D7.W),D0-D3
	MOVEM.L	D0-D3,(A2)
	RTS
NO_KEY_IS_PRESSED
	SF	T_WAIT
WAIT_A_WHILE

	TST.B	FLAG_1
	BEQ.B	SET_SPR	
	SF	FLAG_1	
	BRA.B	NO_SPRT

SET_SPR	BSR	SPRT

	* skriv ut parameter vÑrden pÜ skÑrmen *
NO_SPRT	LEA	PAR_POS,A0
	LEA	XA_OFF,A1	
	LEA	FONT+34,A2
	LEA	24960+2(A2),A2	tal i fontskÑrm 1-F
	MOVE.L	A2,D7
	MOVE.L	SCREEN(PC),A3
	MOVE.L	A3,D6
	ADD.L	(A0)+,A3	pos pÜ skÑrm fîr xa off
	MOVEQ	#0,D0
	BSR	PRINT_HEX_ON_SCREEN

	MOVE.L	D7,A2
	MOVE.L	D6,A3
	ADD.L	(A0)+,A3		pos pÜ skÑrm fîr xa off
	BSR.B	PRINT_HEX_ON_SCREEN

	MOVE.L	D7,A2
	MOVE.L	D6,A3
	ADD.L	(A0)+,A3	pos pÜ skÑrm fîr xa off
	BSR.B	PRINT_HEX_ON_SCREEN

	MOVE.L	D7,A2
	MOVE.L	D6,A3
	ADD.L	(A0)+,A3	pos pÜ skÑrm fîr xa off
	BSR.B	PRINT_HEX_ON_SCREEN

	MOVE.L	D7,A2
	MOVE.L	D6,A3
	ADD.L	(A0)+,A3	pos pÜ skÑrm fîr xa off
	BSR.B	PRINT_HEX_ON_SCREEN

	MOVE.L	D7,A2
	MOVE.L	D6,A3
	ADD.L	(A0)+,A3	pos pÜ skÑrm fîr xa off
	BSR.B	PRINT_HEX_ON_SCREEN

	MOVE.L	D7,A2
	MOVE.L	D6,A3
	ADD.L	(A0)+,A3	pos pÜ skÑrm fîr xa off
	BSR.B	PRINT_HEX_ON_SCREEN

	MOVE.L	D7,A2
	MOVE.L	D6,A3
	ADD.L	(A0),A3	pos pÜ skÑrm fîr xa off
	BSR.B	PRINT_HEX_ON_SCREEN
	BRA	HEX_PRINTING_READY

PRINT_HEX_ON_SCREEN
	MOVE.B	(A1)+,D0
	AND.B	#%00001111,D0

	LSL.B	#3,D0		mulu 8*
	ADD.L	D0,A2
	MOVE.W	(A2),(A3)
	MOVE.W	160(A2),160(A3)
	MOVE.W	320(A2),320(A3)
	MOVE.W	480(A2),480(A3)
	MOVE.W	640(A2),640(A3)
	MOVE.W	800(A2),800(A3)
	MOVE.W	960(A2),960(A3)
	MOVE.W	1120(A2),1120(A3)

	MOVE.B	(A1)+,D0
	MOVE.B	D0,D1
	AND.B	#%11110000,D0
	LSR.B	#1,D0

	MOVE.L	D7,A2
	ADD.L	D0,A2
	MOVE.W	(A2),D2
	LSR.W	#8,D2
	ADD.W	D2,(A3)
	MOVE.W	160(A2),D2
	LSR.W	#8,D2
	ADD.W	D2,160(A3)
	MOVE.W	320(A2),D2
	LSR.W	#8,D2
	ADD.W	D2,320(A3)
	MOVE.W	480(A2),D2
	LSR.W	#8,D2
	ADD.W	D2,480(A3)
	MOVE.W	640(A2),D2
	LSR.W	#8,D2
	ADD.W	D2,640(A3)
	MOVE.W	800(A2),D2
	LSR.W	#8,D2
	ADD.W	D2,800(A3)
	MOVE.W	960(A2),D2
	LSR.W	#8,D2
	ADD.W	D2,960(A3)
	MOVE.W	1120(A2),D2
	LSR.W	#8,D2
	ADD.W	D2,1120(A3)
	
	MOVE.B	D1,D0
	AND.B	#%00001111,D0

	LSL.B	#3,D0		mulu 8*
	MOVE.L	D7,A2
	ADD.L	D0,A2
	ADDQ.L	#8,A3
	MOVE.W	(A2),(A3)
	MOVE.W	160(A2),160(A3)
	MOVE.W	320(A2),320(A3)
	MOVE.W	480(A2),480(A3)
	MOVE.W	640(A2),640(A3)
	MOVE.W	800(A2),800(A3)
	MOVE.W	960(A2),960(A3)
	MOVE.W	1120(A2),1120(A3)
	RTS
HEX_PRINTING_READY
	LEA	PARA_NR,A1
	LEA	PAR_POS,A2
	MOVE.W	2(A1),D6
	LSL.W	#1,D6
	MOVE.L	(A2,D6.W),A2
	ADD.L	SCREEN(PC),A2
	NOT.W	(A2)
	NOT.B	8(A2)
	NOT.W	160(A2)
	NOT.B 	168(A2)
	NOT.W	320(A2)
	NOT.B	328(A2)
	NOT.W	480(A2)
	NOT.B	488(A2)
	NOT.W	640(A2)
	NOT.B	648(A2)
	NOT.W	800(A2)
	NOT.B	808(A2)
	NOT.W	960(A2)
	NOT.B	968(A2)
	NOT.W	1120(A2)
	NOT.B	1128(A2)

	LEA	CIR_POS(PC),A1
	LEA	TXT_BUF+32,A2

	MOVEQ	#256-192,D5
	NEG.B	D5
	MOVEQ	#96,D6

	MOVEQ	#13,D3
NEXT_RD	MOVEQ	#3,D2		ANTAL BYTES I SIDLED

LINJE	MOVE.W	(A2),D4
	TST.W	D4		FONT RUTA
	BEQ	NOLL
	
BIT_0	LSR.W	D4
	BCC.B	BIT_1
	MOVE.L	(A1),A0
	MOVE.W	4(A1),D1
	OR.W	D1,(A0)

BIT_1	LSR.W	D4
	BCC.B	BIT_2
	MOVE.L	6(A1),A0
	MOVE.W	10(A1),D1
	OR.W	D1,(A0)

BIT_2	LSR.W	D4
	BCC.B	BIT_3
	MOVE.L	12(A1),A0
	MOVE.W	16(A1),D1
	OR.W	D1,(A0)

BIT_3	LSR.W	D4
	BCC.B	BIT_4
	MOVE.L	18(A1),A0
	MOVE.W	22(A1),D1
	OR.W	D1,(A0)

BIT_4	LSR.W	D4
	BCC.B	BIT_5
	MOVE.L	24(A1),A0
	MOVE.W	28(A1),D1
	OR.W	D1,(A0)

BIT_5	LSR.W	D4
	BCC.B	BIT_6
	MOVE.L	30(A1),A0
	MOVE.W	34(A1),D1
	OR.W	D1,(A0)

BIT_6	LSR.W	D4
	BCC.B	BIT_7
	MOVE.L	36(A1),A0
	MOVE.W	40(A1),D1
	OR.W	D1,(A0)

BIT_7	LSR.W	D4
	BCC.B	BIT_8
	MOVE.L	42(A1),A0
	MOVE.W	46(A1),D1
	OR.W	D1,(A0)

BIT_8	LSR.W	D4
	BCC.B	BIT_9
	MOVE.L	48(A1),A0
	MOVE.W	52(A1),D1
	OR.W	D1,(A0)

BIT_9	LSR.W	D4
	BCC.B	BIT_10
	MOVE.L	54(A1),A0
	MOVE.W	58(A1),D1
	OR.W	D1,(A0)

BIT_10	LSR.W	D4
	BCC.B	BIT_11
	MOVE.L	60(A1),A0
	MOVE.W	64(A1),D1
	OR.W	D1,(A0)


BIT_11	LSR.W	D4
	BCC.B	BIT_12
	MOVE.L	66(A1),A0
	MOVE.W	70(A1),D1
	OR.W	D1,(A0)

BIT_12	LSR.W	D4
	BCC.B	BIT_13
	MOVE.L	72(A1),A0
	MOVE.W	76(A1),D1
	OR.W	D1,(A0)

BIT_13	LSR.W	D4
	BCC.B	BIT_14
	MOVE.L	78(A1),A0
	MOVE.W	82(A1),D1
	OR.W	D1,(A0)

BIT_14	LSR.W	D4
	BCC.B	BIT_15
	MOVE.L	84(A1),A0
	MOVE.W	88(A1),D1
	OR.W	D1,(A0)

BIT_15	LSR.W	D4
	BCC.B	NOLL
	MOVE.L	90(A1),A0
	MOVE.W	94(A1),D1
	OR.W	D1,(A0)

NOLL	ADD.L	D6,A1
	SUBQ.L	#8,A2
	DBRA	D2,LINJE
	ADD.L	D5,A2
	DBRA	D3,NEXT_RD

SCROLL	TST.B	HOLD_IT		SKA VI PAUSA TEXTEN?
	BEQ.B	NO_HOLD		-> NEJ
	SUBQ.B	#1,HOLD_IT	RéKNA NER PAUS FLAGGAN
	BRA	SYNC		OCH AVSLUTA SKROLLRUTINEN
NO_HOLD	MOVEQ	#0,D0
	TST.B	BOK_FL	0=ny bokstav
	BNE	DO_IT	->ej noll
HéMTA_B	LEA	TEXT(PC),A0
	ADD.L	BOK_NR,A0
	TST.B	(A0)	
	BNE.B	EJ_NOLL
	CLR.L	BOK_NR
	BRA.B	HéMTA_B
EJ_NOLL	CMP.B	#"^",(A0)	^ = PAUSE
	BNE.B	NO_WAIT
	MOVE.B	1(A0),HOLD_IT	VéNTA 50 VBL
	ADDQ.L	#2,BOK_NR	HOPPA ôVER '^' TECKNET OCH ANTAL VBL-WAIT
	BRA	EXITVBL		OCH AVSLUTA RUTINEN
NO_WAIT	MOVE.B	(A0),D0
	SUB.B	#32,D0		tecken
	LSL.W	#1,D0
	LEA	KORDIN,A0
	MOVE.W	(A0,D0.W),D0
	LEA	FONT+34,A1
	ADD.L	D0,A1		a1 = koordinat fîr bokstav		
	ADDQ.L	#1,BOK_NR
	LEA	BOK_BUF,A2
	MOVE.W	(A1),(A2)+	
	MOVE.W	160(A1),(A2)+	
	MOVE.W	320(A1),(A2)+	
	MOVE.W	480(A1),(A2)+	
	MOVE.W	640(A1),(A2)+	
	MOVE.W	800(A1),(A2)+	
	MOVE.W	960(A1),(A2)+	
	MOVE.W	1120(A1),(A2)+	
	MOVE.W	1280(A1),(A2)+	
	MOVE.W	1440(A1),(A2)+	
	MOVE.W	1600(A1),(A2)+	
	MOVE.W	1760(A1),(A2)+	
	MOVE.W	1920(A1),(A2)+	
	MOVE.W	2080(A1),(A2)
	MOVE.B	#16,BOK_FL

DO_IT	LEA	TXT_BUF,A0
	LEA	BOK_BUF,A2

	MOVEQ	#2,D2		antal rol
	MOVEQ	#8,D3		antal bytes till nÑsta bitplan
	SUB.B	D2,BOK_FL
	MOVE.L	#128,D4

	REPT	14
	MOVE.L	8(A0),D0
	MOVE.W	(A0),D0
	ROL.L	D2,D0
	MOVE.W	D0,(A0)
	ADD.L	D3,A0

	MOVE.L	8(A0),D0
	MOVE.W	(A0),D0
	ROL.L	D2,D0
	MOVE.W	D0,(A0)
	ADD.L	D3,A0

	MOVE.L	8(A0),D0
	MOVE.W	(A0),D0
	ROL.L	D2,D0
	MOVE.W	D0,(A0)
	ADD.L	D3,A0

	MOVE.L	8(A0),D0
	MOVE.W	(A0),D0
	ROL.L	D2,D0
	MOVE.W	D0,(A0)
	ADD.L	D3,A0

	MOVE.W	(A2),D0
	SWAP	D0
	MOVE.W	(A0),D0	
	ROL.L	D2,D0
	MOVE.W	D0,(A0)
	SWAP	D0
	MOVE.W	D0,(A2)+
	ADD.L	D4,A0
	ENDR

	* TA FRAM KOORDINATER FôR KULOR *
	LEA	XB_YB_C,A0	RéKNARE AV VILKEN X,Y I SINUSKURVA
	LEA	KUL_SPR,A1	16 POS FôR KULAN
	LEA	KULOR,A2	RAD AV SPRITPOSSAR
	LEA	XA_YA_C,A5	RéKNARE AV VILKEN X,Y I SINUSKURVA
	LEA	KUL_MSK,A6	16 POS FôR MASKEN
	MOVEM.W	EMPTY(PC),D0-D3
	MOVEM.W	D0-D3,XA_LIST	
	MOVE.L	#SP_1+4,D3
	MOVE.L	#SPM_1,D4
	MOVEQ	#NRB,D7		ANTAL KULOR

	* XA OCH YA SINUS *
GET_KXY	LEA	XA_SIN,A3
	LEA	YA_SIN,A4
	MOVE.W	XA_LIST(PC),D5
	ADD.W	D5,(A5)
TST_XA	TST.W	(A5)
	BPL.B	XAPLUS
	ADD.W	#2048,(A5)
	BRA.B	TST_XA
XAPLUS	CMP.W	#2048,(A5)
	BLT.B	X_MIN
	SUB.W	#2048,(A5)	
	BRA.B	XAPLUS
X_MIN	MOVE.W	(A5),D0		RéKNARE FôR X (ôKAS MED JéMT TAL.2)
	SUB.W	D5,(A5)
	ADD.W	XA_OFF(PC),D5
	MOVE.W	D5,XA_LIST
XA_OK	MOVE.W	(A3,D0.W),-(SP)	X-KOORDINAT I XA_KORD
	MOVE.W	YA_LIST(PC),D5
	ADD.W	D5,2(A5)
TST_YA	TST.W	2(A5)
	BPL.B	YAPLUS
	ADD.W	#2048,2(A5)
	BRA.B	TST_YA
YAPLUS	CMP.W	#2048,2(A5)
	BLT.B	Y_MIN
	SUB.W	#2048,2(A5)
	BRA.B	YAPLUS
Y_MIN	MOVE.W	2(A5),D1
	SUB.W	D5,2(A5)
	ADD.W	YA_OFF(PC),D5
	MOVE.W	D5,YA_LIST
YA_OK	MOVE.W	(A4,D1.W),-(SP)	Y-KOORDINAT I YA_KORD
	MOVE.W	XA_SPD(PC),D5
	ADD.W	D5,(A5)+
	MOVE.W	YA_SPD(PC),D5
	ADD.W	D5,(A5)+

	* XB OCH YB SINUS *
	LEA	XB_SIN,A3
	LEA	YB_SIN,A4
	MOVE.W	XB_LIST(PC),D5
	ADD.W	D5,(A0)
TST_XB	TST.W	(A0)
	BPL.B	XBPLUS
	ADD.W	#2048,(A0)
	BRA.B	TST_XB
XBPLUS	CMP.W	#2048,(A0)
	BLT.B	XB_MIN
	SUB.W	#2048,(A0)	
	BRA.B	XBPLUS
XB_MIN	MOVE.W	(A0),D0		RéKNARE FôR X (ôKAS MED JéMT TAL.2)
	SUB.W	D5,(A0)
	ADD.W	XB_OFF(PC),D5
	MOVE.W	D5,XB_LIST
XB_OK	MOVE.W	(A3,D0.W),D0	X-KOORDINAT I D0
	MOVE.W	YB_LIST(PC),D5
	ADD.W	D5,2(A0)
TST_YB	TST.W	2(A0)
	BPL.B	YBPLUS
	ADD.W	#2048,2(A0)
	BRA.B	TST_YB
YBPLUS	CMP.W	#2048,2(A0)
	BLT.B	YB_MIN
	SUB.W	#2048,2(A0)
	BRA.B	YBPLUS
YB_MIN	MOVE.W	2(A0),D1
	SUB.W	D5,2(A0)
	ADD.W	YB_OFF(PC),D5
	MOVE.W	D5,YB_LIST
YB_OK	MOVE.W	(A4,D1.W),D1	Y-KOORDINAT I D1
	ADD.W	(SP)+,D1	ADDERA YA_KORD TILL D1
	ADD.W	(SP)+,D0	ADDERA XA_KORD TILL D0
	MOVE.W	XB_SPD(PC),D5
	ADD.W	D5,(A0)+
	MOVE.W	YB_SPD(PC),D5
	ADD.W	D5,(A0)+

	MOVE.W	D0,D2
	AND.W	#$F,D2		shift
	AND.W	#$FFF0,D0	position
	LSR.W	#1,D0	dela positionen med 2 fîr att fÜ fram antal byte
	ADD.W	D1,D0		PLUS Y POSITION
	MOVE.L	D3,D5
	MOVE.L	D4,D6
	LSL.W	#2,D2		MULTIPLISERA MED 4
	ADD.L	(A1,D2.W),D5
	ADD.L	(A6,D2.W),D6
	MOVE.L	D5,(A2)+
	MOVE.L	D6,(A2)+
	MOVE.L	SCREEN(PC),(A2)
	ADDQ.L	#4,D0
	ADD.L	D0,(A2)+	POSITION
	DBRA	D7,GET_KXY

	* TA FRAM KOORDINTATER FôR BOLLEN *
_X	LEA	SINUS_X,A0
	MOVE.W	X_RéK(PC),D0
	TST.W	(A0,D0.W)
	BNE	X_OK
	CLR.W	X_RéK
	BRA.B	_X
X_OK	LEA	SINUS_Y,A1
	MOVE.W	Y_RéK(PC),D1
	TST.W	(A1,D1.W)
	BNE.B	GET_XY
	CLR.W	Y_RéK
	BRA.B	X_OK
GET_XY	MOVE.W	(A0,D0.W),D0 		X_POS
	MOVE.W	(A1,D1.W),D1		Y_POS
	ADDQ.W	#2,X_RéK
	ADDQ.W	#2,Y_RéK

	MOVE.W	D0,D2
	AND.W	#$F,D2		shift
	AND.W	#$FFF0,D0	position
	LSR.W	#1,D0	dela positionen med 2 fîr att fÜ fram antal byte
	MOVE.B	D2,D6
	ADD.W	D1,D0
	LEA	SP_0,A6
	LEA	SPM_0,A4
	LEA	BOL_SPR,A0
	LSL.W	#2,D2		MULTIPLISERA MED 4
	ADD.L	(A0,D2.W),A6
	LEA	BOL_MSK,A0
	ADD.L	(A0,D2.W),A4
	LEA	BOL_KOO,A0
	MOVE.L	A6,(A0)+
	MOVE.L	A4,(A0)+
	ADD.L	SCREEN,D0
	MOVE.L	D0,(A0)

	* ROLLA ROL_BUF HôGER *
	LEA	ROL_BUF+1624,A0
	MOVEQ	#256-192,D3
	NEG.B	D3
	MOVEQ	#8,D2

	REPT	14
	SUB.L	D2,A0
	MOVE.L	(A0),D0
	MOVE.W	8(A0),D0
	LSR.L	D6,D0
	MOVE.W	D0,8(A0)

	SUB.L	D2,A0
	MOVE.L	(A0),D0
	MOVE.W	8(A0),D0
	LSR.L	D6,D0
	MOVE.W	D0,8(A0)

	SUB.L	D2,A0
	MOVE.L	(A0),D0
	MOVE.W	8(A0),D0
	LSR.L	D6,D0
	MOVE.W	D0,8(A0)

	SUB.L	D2,A0
	MOVE.L	(A0),D0
	MOVE.W	8(A0),D0
	LSR.L	D6,D0
	MOVE.W	D0,8(A0)
	ADD.L	D3,A0
	ENDR

	JSR	MUS+$64

	MOVEQ	#0,D1

	MOVE.B	#10,$FFFF8800.W		KANAL 8-10
	MOVE.B	$FFFF8800.W,D1

	AND.W	#15,D1

	CMP.B	#13,D1		
	BLE.B	NEXT		
	MOVE.B	#$E,$FFFF8800.W	
	BCLR	#1,$FFFF8802.W	
	BRA.B	SYNC
NEXT	MOVE.B	#$E,$FFFF8800.W	
	BSET	#1,$FFFF8802.W	

SYNC	TST.B	NOW
	BEQ.B	SYNC
	SF	NOW

	* TA BORT BOLL *
	LEA	BOL_CLR,A0
	TST.L	(A0)
	BEQ	EXITVBL
	MOVE.L	(A0),A1
	MOVEM.L	EMPTY(PC),D0-D7

	MOVEM.L	D0-D7,(A1)
	MOVEM.L	D0-D7,160(A1)
	MOVEM.L	D0-D7,320(A1)
	MOVEM.L	D0-D7,480(A1)
	MOVEM.L	D0-D7,640(A1)
	MOVEM.L	D0-D7,800(A1)
	MOVEM.L	D0-D7,960(A1)
	MOVEM.L	D0-D7,1120(A1)
	MOVEM.L	D0-D7,1280(A1)
	MOVEM.L	D0-D7,1440(A1)
	MOVEM.L	D0-D7,1600(A1)
	MOVEM.L	D0-D7,1760(A1)
	MOVEM.L	D0-D7,1920(A1)
	MOVEM.L	D0-D7,2080(A1)
	MOVEM.L	D0-D7,2240(A1)
	MOVEM.L	D0-D7,2400(A1)
	MOVEM.L	D0-D7,2560(A1)
	MOVEM.L	D0-D7,2720(A1)
	MOVEM.L	D0-D7,2880(A1)
	MOVEM.L	D0-D7,3040(A1)
	MOVEM.L	D0-D7,3200(A1)
	MOVEM.L	D0-D7,3360(A1)
	MOVEM.L	D0-D7,3520(A1)
	MOVEM.L	D0-D7,3680(A1)
	MOVEM.L	D0-D7,3840(A1)
	MOVEM.L	D0-D7,4000(A1)
	MOVEM.L	D0-D7,4160(A1)
	MOVEM.L	D0-D7,4320(A1)
	MOVEM.L	D0-D7,4480(A1)
	MOVEM.L	D0-D7,4640(A1)
	MOVEM.L	D0-D7,4800(A1)
	MOVEM.L	D0-D7,4960(A1)
	MOVEM.L	D0-D7,5120(A1)
	MOVEM.L	D0-D7,5280(A1)
	MOVEM.L	D0-D7,5440(A1)

	* TA BORT KULA *
	LEA	KUL_CLR,A0

	REPT	NRB+1
	MOVE.L	(A0)+,A1
	MOVEM.L	D0-D3,(A1)
	MOVEM.L	D0-D3,160(A1)
	MOVEM.L	D0-D3,320(A1)
	MOVEM.L	D0-D3,480(A1)
	MOVEM.L	D0-D3,640(A1)
	MOVEM.L	D0-D3,800(A1)
	MOVEM.L	D0-D3,960(A1)
	MOVEM.L	D0-D3,1120(A1)
	MOVEM.L	D0-D3,1280(A1)
	MOVEM.L	D0-D3,1440(A1)
	MOVEM.L	D0-D3,1600(A1)
	MOVEM.L	D0-D3,1760(A1)
	MOVEM.L	D0-D3,1920(A1)
	MOVEM.L	D0-D3,2080(A1)
	MOVEM.L	D0-D3,2240(A1)
	ENDR

EXITVBL	MOVEM.L	(SP)+,D0-D7/A0-A6
	RTE
K_BOARD	MOVE.W	#$2500,SR
	BCLR	#6,$FFFFFA11.W
	RTE

	SECTION	DATA
TEXT	DC.B	"YEAH!   THE TOXIC TWINS IS BACK...   "
	DC.B	"THIS TIME WITH A VERY NICE BALLSCROLL!!   "
	DC.B	"I'M REALLY PROUD OF IT.   MAYBE IT'S A BIT SMALL "
	DC.B	"BUT YOU HAVE TO THINK ABOUT THE POOR CPU-SHIP.   "
	DC.B	"YES, THATS RIGHT!!   THERE IS A NEW BBS IN LINK\PING!!   "
	DC.B	"IT'S A PURE ATARI BBS AND IT'S CALLED 'THE TOXIC BBS!'.   "
	DC.B	"MY NAME (THE SYSOP) IS H]KAN BRATT AND THE CO-SYSOP "
	DC.B	"IS PEDER STENSGAARD.   THE BBS IS RUNNING ON A PC-286 WITH 32MB "
	DC.B	"HD.   SOON I PROBABLY WILL BUY A BIGGER ONE...   "
	DC.B	"THE BBS IS RUNNING 24 HOURS A DAY SO YOU CAN CALL IT "
	DC.B	"WHENEVER YOU WANT!   UNLESS IT'S BUSY...   THERE IS ONLY "
	DC.B	"ONE LINE IN.   I CAN'T AFFORD MORE THAN ONE RIGHT NOW!   "
	DC.B	"CALL THE BBS NOW AND ENJOY YOURSELF!!!   "
	DC.B	"AT THE MOMENT THE MAX BAUD-RATE IS 2400 BPS.   BUT SOON IT "
	DC.B	"WILL BE POSSIBLE TO LOGIN WITH 9600 BPS!   "
	DC.B	"                          "
	DC.B	"PRESS F1-F10 FOR DIFFERENT BALL PARAMETERS!    "
	DC.B	"PRESS  THE ARROWS, 'INSERT' AND 'CLR HOME' TO CHANGE THE PARAMETERS!   " 
	DC.B	"PRESS SPACE TO EXIT THIS NICE DEMO!   "
	DC.B	"                          "
	DC.B	"GREETINGS TO NISSE IN THE NORTH AND AHT IN THE MIDDLE..... "
	DC.B	"OCH ALLA ANDRA VI K[NNER!!!                 "
	DC.B	"       LET'S WRAP !!      ",0
	EVEN
PARA_NR	DC.L	0	VILKEN PARAMETER SOM SKA éNDRAS
XA_OFF	DC.W	102
XB_OFF	DC.W	102
YA_OFF	DC.W	102
YB_OFF	DC.W	102
XA_SPD	DC.W	$12
XB_SPD	DC.W	$0
YA_SPD	DC.W	$18
YB_SPD	DC.W	$7F4
XA_LIST	DC.W	0
YA_LIST	DC.W	0
XB_LIST	DC.W	0
YB_LIST	DC.W	0
PAR_POS	DC.L	32504+6
	DC.L	32544+6
	DC.L	32584+6
	DC.L	32624+6	
	DC.L	35384+6
	DC.L	35424+6
	DC.L	35464+6
	DC.L	35504+6
PRE_VAL	DC.W	$026,$7D2,$024,$7A0	fÑrdiga parametervÑrden
	DC.W	$026,$7D2,$024,$798
	DC.W	$066,$000,$066,$734
	DC.W	$7E4,$00E,$7EE,$018
	DC.W	$066,$000,$000,$734
	DC.W	$000,$7F4,$7EE,$7EC
	DC.W	$066,$000,$000,$066
	DC.W	$01C,$006,$00C,$008
	DC.W	$066,$000,$000,$734
	DC.W	$404,$3FC,$3F4,$3FC
	DC.W	$3EE,$41A,$420,$416
	DC.W	$00C,$7EC,$7DA,$7FA
	DC.W	$066,$066,$066,$732
	DC.W	$008,$006,$020,$7EC
	DC.W	$066,$066,$066,$066
	DC.W	$01A,$020,$020,$014
	DC.W	$000,$066,$732,$000
	DC.W	$002,$026,$7B8,$008
	DC.W	$000,$000,$000,$000
	DC.W	$000,$000,$000,$000
X_RéK	DC.W	0	FôR BOLLEN
Y_RéK	DC.W	0	FôR BOLLEN
EMPTY	DC.L	0,0,0,0,0,0,0,0
SCREEN	DC.L	0
CIR_POS	INCBIN	CIRKEL.DAT
	DC.L	$FFFFFFFF
	DC.L	$FFFFFFFF
FONT	INCBIN	SCR002.PI1
MUS	INCBIN 	THUN.RH
SINUS_X	INCBIN	SINUS_X.BIN
	DC.W	0
	DC.W	0
SINUS_Y	INCBIN	SINUS_Y.BIN
	DC.W	0
	DC.W	0
XA_SIN	INCBIN	XA_SIN.BIN
YA_SIN	INCBIN	YA_SIN.BIN
XB_SIN	INCBIN	XB_SIN.BIN
YB_SIN	INCBIN	YB_SIN.BIN
ROL	DC.L	0
FLAG_1	DC.B	1	Sè ATT SPRITEPOSITION GôRS FôRSTA GèNGEN
	SECTION	BSS
	EVEN
BAR_CON	DS.W	1	RéKNARE TILL ANTAL RASTERLINJER KLARA
SAVESP	DS.L	1
OLD_RES	DS.L	1
OLD_KEY	DS.L	1
OLD_SCR	DS.L	1
OLD_VBL	DS.L	1
OLD_VC1	DS.L	1
OLD_VC2	DS.L	1
OLD_VC3	DS.L	1
KUL_SPR	DS.W	32
KUL_MSK	DS.W	32
BOL_SPR	DS.W	32
BOL_MSK	DS.W	32
OLD_COL	DS.W	16
KULOR	DS.L	(NRB+1)*3
XA_YA_C	DS.L	NRB+1		XA_YA_COUNTER I SINUSKURVORNA
KUL_CLR	DS.L	NRB+1
XB_YB_C	DS.L	NRB+1		XB_YB_COUNTER I SINUSKURVORNA
BOL_CLR	DS.L	1
BOL_KOO	DS.L	3
KORDIN	DS.W	80
BOK_BUF	DS.W	14	ANTAL RADER I TECKEN
BOK_NR	DS.L	1
HOLD_IT	DS.B	1

T_WAIT	DS.B	1
T_SUB	DS.B	1
OLD_IEA	DS.B	1
OLD_IEB	DS.B	1
OLD_IMA	DS.B	1
OLD_MSK	DS.B	1

SKIFT	DS.B	1
BOK_FL	DS.B	1	
NOW	DS.B	1
	EVEN
TXT_BUF	DS.B	3600	BUFFER DéR TEXTEN SKROLLAS!
ROL_BUF	DS.B	4000	BUFFER DéR TEXTEN ROLLAS EFTER SPRITEPLACERING
POS_X	DS.W	1
POS_Y	DS.W	1
	DS.B	8
SP_0	DS.B	17920+128	32*35*16
SPM_0	DS.B	8960	MASKEN	BLOCK*2*LINJER*16*2
	DS.B	8
SP_1	DS.B	3840+128
SPM_1	DS.B	1920
SCR	DS.B	32000+256
	DS.B	5600	parameterskÑrm
	