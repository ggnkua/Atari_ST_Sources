' Programm zum Codieren/ Decodieren von Dateien
' nach dem RSA-Verfahren die SchlÅsselzahlen
' werden in den DATA-Statements abgelegt. Es sind
' immer die drei Zahlen 'N', 'S' und 'T' erfor-
' derlich. Man kann fÅr 'S' oder 'T' auch 0 ein-
' geben, sofern mit diesem Programm nur das
' Ent- oder VerschlÅsseln mîglich sein soll.
' Damit man bei den groûen Zahlen die öbersicht
' behÑlt, sind (Tausender-)Punkte innerhalb der
' Zahl erlaubt
'
' Autor: Georg Scheibler, Lemgo
' (c) 1992 MAXON Computer GmbH
'
DIM schluessel%(3,2,20),h%(8)
DIM quelle%(25000),ziel%(25000)
'
INLINE asm%,1000
asm%=VARPTR(asm%(0))
'
@hole_asm
@lese_schluessel
IF PEEK(BASEPAGE+128)<>0   !comandline auswerten
  @comand
ELSE
  @dialog
ENDIF
'
PROCEDURE dialog
  CLS
  PRINT "Programm zum Codieren/ Decodieren nach"
  PRINT "dem RSA-Verfahren"
  PRINT "von Georg Scheibler, Lemgo"
  PRINT "(c) 1992 MAXON Computer GmbH"
  quelle$=CHR$(&H41+GEMDOS(25))+":"+DIR$(0)+"\"
  ziel$=quelle$
  DO
    PRINT
    fehler!=FALSE
    PRINT "Quelldatei wÑhlen"
    @select(quelle$)
    quelle$=n$
    PRINT "Zieldatei wÑhlen"
    @select(ziel$)
    ziel$=n$
    IF anzahl_schluessel%>1
      PRINT "Es sind ";anzahl_schluessel%;
      PRINT " SchlÅssel vorhanden"
      PRINT "Welcher soll verwendet werden ?"
      REPEAT
        INPUT "Bitte Nr. eingeben ",s%
      UNTIL s%>0 AND s%<=anzahl_schluessel%
    ELSE
      s%=1
    ENDIF
    al$="Ver- oder EntschlÅsseln ?"
    ALERT 2,al$,1,"code|decode|abbruch|",code%
    IF code%=3
      END
    ENDIF
    IF code%=1
      PRINT "verschlÅsseln"
    ELSE
      PRINT "entschlÅsseln"
    ENDIF
    code%=2-code% !0=decode, 1=code
    @crypt(s%)
  LOOP
RETURN
PROCEDURE select(a$)
  p%=INSTR(a$,"\")
  IF p%>0
    WHILE INSTR(a$,"\",p%+1)
      p%=INSTR(a$,"\",p%+1)
    WEND
    a$=LEFT$(a$,p%-1)
  ELSE
    a$=CHR$(&H41+GEMDOS(25))+":"+DIR$(0)+"\"
  ENDIF
  FILESELECT a$+"\*.*","",n$
  IF n$="" OR RIGHT$(n$)="\"
    END
  ENDIF
  PRINT n$
RETURN
PROCEDURE comand
  CLS
  fehler!=FALSE
  a$=SPACE$(128)
  BMOVE BASEPAGE+128,VARPTR(a$),128
  a$=UPPER$(LEFT$(a$,INSTR(a$,CHR$(0))-1))+"   "
  IF INSTR(a$,CHR$(13),2)
    a$=LEFT$(a$,INSTR(a$,CHR$(13),2)-1)+"   "
  ENDIF
  ' zweites Zeichen 'C' oder 'D', dann mit lÑnge
  IF MID$(a$,2,1)="C" OR MID$(a$,2,1)="D"
    a$=MID$(a$,2)
  ENDIF
  IF LEFT$(a$,1)="C"
    PRINT "Codierung von"
    code%=1
  ELSE
    IF LEFT$(a$,1)="D"
      PRINT "Decoodierung von"
      code%=0
    ELSE
      PRINT "Befehl nicht erkannt"
      PAUSE 100
      END
    ENDIF
  ENDIF
  s%=VAL(MID$(a$,2))
  IF s%=0 AND anzahlschluessel%=1
    s%=1
  ENDIF
  p%=INSTR(a$," ")+1
  quelle$=MID$(a$,p%,INSTR(a$," ",p%+1)-p%)
  p%=INSTR(a$," ",p%+1)+1
  ziel$=MID$(a$,p%,INSTR(a$," ",p%+1)-p%)
  PRINT quelle$
  PRINT "in die Datei"
  PRINT ziel$
  @crypt(s%)
  IF fehler!=TRUE
    PAUSE 100
  ENDIF
RETURN
PROCEDURE crypt(nr%)
  DEC nr% !da im array ab 0 gezÑhlt
  IF nr%<0 OR nr%=>anzahl_schluessel%
    PRINT "Nur ";anzahl_schluessel%;
    PRINT " SchlÅssel vorhanden"
    fehler!=TRUE
  ELSE
    IF schluessel%(3,2-code%,nr%)=0
      PRINT "SchlÅsselzahl '";CHR$(&H54-code%);
      PRINT "' nicht vorhanden"
      fehler!=TRUE
    ENDIF
  ENDIF
  IF quelle$<"0" OR ziel$<"0"
    PRINT "Dateinamen fehlen"
    fehler!=TRUE
  ENDIF
  IF fehler!=FALSE
    @crypt1
  ENDIF
RETURN
PROCEDURE crypt1
  ARRAYFILL quelle%(),0
  q%=VARPTR(quelle%(0))
  z%=VARPTR(ziel%(0))
  n%=VARPTR(schluessel%(0,0,nr%))
  st%=VARPTR(schluessel%(0,2-code%,nr%))
  OPEN "i",#1,quelle$
  laenge%=LOF(#1)
  BGET #1,q%,laenge%
  CLOSE #1
  IF code%=1
    POKE q%+laenge%,255 !endekennung
    INC laenge%
  ENDIF
  r%=C:asm%(L:q%,L:laenge%,L:z%,L:n%,L:st%,code%)
  IF r%>0
    IF code%=0    !ende suchen
      cnt%=0
      WHILE PEEK(z%+r%)<>255 AND cnt%<16
        DEC r%
        INC cnt%
      WEND
      IF cnt%=16
        PRINT "Fehler beim decodieren"
        PRINT "eventuell falscher SchlÅssel"
        fehler!=TRUE
      ENDIF
    ENDIF
    IF fehler!=FALSE
      OPEN "o",#2,ziel$
      BPUT #2,z%,r%
      CLOSE #2
    ENDIF
  ELSE
    fehler!=TRUE
    PRINT "Fehlermeldung: ";r%
    IF r%=-1
      PRINT "SchlÅssel 'N' falsch"
    ELSE
      IF code%=1
        PRINT "SchlÅssel 'S' falsch"
      ELSE
        PRINT "SchlÅssel 'T' falsch"
      ENDIF
    ENDIF
    PAUSE 100
  ENDIF
RETURN
PROCEDURE hole_asm
  OPEN "i",#1,"cryptrsa.asm"
  SEEK #1,28    !hinter dateiheader
  BGET #1,asm%,LOF(#1)-28
  CLOSE #1
RETURN
PROCEDURE lese_schluessel
  anzahl_schluessel%=0
  DO
    READ a$
    EXIT IF a$=""
    @s_to_i(0,anzahl_schluessel%,a$)
    READ a$
    @s_to_i(1,anzahl_schluessel%,a$)
    READ a$
    @s_to_i(2,anzahl_schluessel%,a$)
    IF schluessel%(0,0,anzahl_schluessel%)<0
      PRINT "N bei SchlÅssel ";
      PRINT anzahl_schluessel%+1;" zu groû"
      PAUSE 100
      END
    ELSE
      INC anzahl_schluessel%
    ENDIF
  LOOP
RETURN
PROCEDURE s_to_i(i2%,i3%,s$)
  LOCAL j%,p%,n%
  j%=INSTR(s$,".")
  WHILE j%>0            !Punkte entfernen
    s$=LEFT$(s$,j%-1)+MID$(s$,j%+1)
    j%=INSTR(s$,".")
  WEND
  n%=VAL?(s$)   !anzahl ziffern
  p%=n% MOD 4
  IF p%=0
    p%=4
  ENDIF
  ARRAYFILL h%(),0
  h%(7)=VAL(LEFT$(s$,p%))
  INC p%
  WHILE p%<n%
    h%(8)=VAL(MID$(s$,p%,4))*&H10000
    FOR j%=7 DOWNTO 0      !stellen hochschieben
      IF h%(j%)<>0
        MUL h%(j%),10000
      ENDIF
      IF h%(j%+1)<>&H10000
        ADD h%(j%),h%(j%+1) DIV &H10000
        h%(j%+1)=h%(j%+1) AND &HFFFF
      ENDIF
    NEXT j%
    ADD p%,4
  WEND
  p%=VARPTR(schluessel%(0,i2%,i3%))
  FOR j%=0 TO 7
    DPOKE p%,h%(j%)
    ADD p%,2
  NEXT j%
RETURN
'
DATA 3.979.429,2153, 0
DATA 3.979.429, 0,7385
'
DATA 22.250.201.032.324.000.568.863.501
DATA 1.347.459.357.773, 99.076.239.608.837
'
DATA 888888.888888.888949.666666.666666.666841
DATA 1.203.761.548.945
DATA 5.168.982.368.373.120.933.359.341
'
DATA 26.944060.708143.888142.656931.565062.692631
DATA 17.279.831.943.378.331.759,0
' hier dekodierschlÅssel geheim
DATA ""
