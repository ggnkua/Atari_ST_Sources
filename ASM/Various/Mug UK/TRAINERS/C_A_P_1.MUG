THIS ARTICLE WAS ORIGINALLY WRITTEN BY MIKE MEE FOR ST APPLICATIONS, BUT
THIS VERSION COMES WITH MUCH MORE EXAMPLE CODE. SO THERE ! -GILES.


Article for ST Applications

Title:  Cheats Always Prosper

Introduction
------------

Welcome to what I hope is the first of a few articles which will involve
a subject not covered in any great detail in ST Applications - GAMES !!

Although, this won't be any  ordinary article on games containing  hints
and tips  etc. but  an article  showing the  methods used  to break  (or
'hack')  into  the  inner-workings  of  almost  any  game  and  write  a
subsequent 'trainer' for them.

If requested, there will be a follow  up article which will be a  little
easier to follow  as it will  concern the alteration  of the saved  game
files used by most strategy or role-playing games.

Article Requirements
--------------------

This article requires:

A rough working knowledge of 68000 (ie MOVE/SUB/ADD & BRA instructions)
Devpac v2 or v3 (I will be using v2)
MONST2 or MONST3 (I will be using v2)
The source code on this months ST Club Disk (saves you typing!)
Multi Depacker v1.5/v2.0 (written by me!) or
Mega/New Depack by Mike Watson
and some common sense ..... and a lot of perseverance.

You will also require a copy of ST Format Cover Disk 59, should you wish
to practice on a documented example. The program you require is Pot Hole
2 and is a fairly typical example of a game written using 68000. I  know
this cover disk is fairly old, but it is the last copy of ST Format that
I bought !

What are Trainers ?
-------------------

At one time  or another, I  daresay everyone reading  this article  has,
*probably*, come across a pirated game. This article does not condone or
glorify this  act, but  without  the perseverance  of the  average  game
hacker, trainers would  not exist. They  have been around,  as far as  I
know, since the Spectrum & Commodore 64 days. Back then, you were either
required to  type in  a  small loader  program,  or, depending  on  your
knowledge of Z80 or 6502 assembly -  you did them yourself ! I am  using
the knowledge gained  in creating  these Atari  ST trainers  to hack  ZX
Spectrum programs using my 486 PC and the superb Z80 Emulator !

More than  likely the  hacker  of (ie.  the  remover of  the  protection
associated with the game) has also added a trainer option - or options !

These options would allow you to cheat at the game. The hacker may allow
you to have infinite  lives/energy/time or a combination  of them all  -
depending on what  they have found  themselves. Some games  I have  seen
have had as  many as  30+ trainer  options - and  this was  on a  Flight
Simulation !

This is what I will hopefully show you how to create. If there was  ever
a game that you own that enfuriates  you so much that you scan over  all
your magazines looking for cheat codes, hints, tips or passwords  hoping
to alleviate your suffering .... and all for nothing.

My solution is to  explain how the hacker  goes about looking for  which
part of the  game to alter  in order to  'train' it. You  will be  using
68000 assembly language in order to perform this task, but the  majority
of the code has already been written - by someone other than myself,  as
I doubt I  would have  attempted writing trainers  if I  hadn't been  in
possession of similar source code from which to learn the 'tricks of the
trade' !

Two types of trainer ......
---------------------------

There are two major  kinds of trainers  that you can  write, one I  will
refer to as the 'bolt-on type' the other being the 'loader-type'. I will
now explain a rough outline of each type.

a) The bolt-on type

This involves you presenting the user  with the various options for  the
cheat, and then patching the program which has been stored at the end of
your patch routine (using Devpacs' INCBIN  command). This is the type  I
use most of the time due to the fact that:-

 i) It doesn't  require  a great  deal  of  memory as  an  overhead.  On
    average, your trainer  mode adds  approximately 1-2K on  top of  the
    original file. Once the user  has made their choices, this  overhead
    is overwritten by the program when it is relocated.

ii) It doesn't take up extra disk space as a seperate executable trainer
    program does. Bolt-on  type trainers are  small, but as  most of  us
    know, that an  extra file on  a disk is  always going to  take up  a
    minimum of a cluster !

The only disadvantage is  that you cannot use  it on compiled GFA  BASIC
programs, which is no great loss as they aren't many good games  written
in GFA BASIC, with the exception of those by Dave Munsie and Terry  King
(although they both use 68000 extensions to achieve it).

b) The loader type

This routine is used as a last resort by me when the bolt-on trainer  is
not a  viable option  (see  GFA BASIC  example)  or that  the  resultant
trainer mode causes program errors (ie. bombs) to proliferate across the
screen !

The file is a simple patch which loads in the original executable  file,
without running it, and then alters the appropriate code before  running
the game. This is performed  in all legal GEMDOS  codes, and takes up  a
few bytes. The  text you display  on screen will  probably take up  more
memory than the loader !

There are several examples on the ST Format disk I mentioned as part  of
the requirements for  this article.  They are  all by  Martin Pugh,  and
follow the general outline of the 'loader type', except his routines are
slightly more polished than the ones I will be using !

Brief explanation of a games' inner workings
--------------------------------------------

Before we delve into the depths of this code belonging to Pot Hole 2, we
need to know how the game uses the 'lives' given to you.

Generally speaking,  when you  lose a  life in  a game,  your number  of
available lives has 1  subtracted from them. The  theory we will use  is
that having  played the  game (you  did  have a  quick play  before  you
started ?), we  know how many  lives you  are given at  the start.  Some
games give you 3, some 5  whilst others are extremely generous and  give
you 9 ! In this case, Pot Hole 2 gives us 4 lives.

With this information, we need to look for tell-tale signs of where  the
program stores this information.  The game itself runs  in a main  loop,
such as ...

         initialise
                play game <-----------------------<-----------<
                test vars                         |           |
                player dead ?                     |           |
                                                  |           |
                if false, continue with game  -----           |
                                                              |
                if true, decrease lives by 1                  |
                        has counter reached 0 or less ?       |
                                if false, continue with game --

                                if true, then GAME OVER

Therefore we can train the game in two ways.

a) set the initial value of 'lives' to a higher than normal number

   or

b) ensure that  the  'life decrease'  NEVER  happens. Sometimes  we  can
   replace the 1 with 0 (eg. subtract 0 from 'lives' if killed) or where
   this is not possible due to the SUBQ instruction, we change it to  an
   ADDQ !! In other words, you gain a life when you die !

We are going to use the second method, and we shall also be implementing
a cheat to stop the  oxygen level disappearing !  For those of you,  for
whom the  last sentence  states that  all the  gameplay for  Pot Hole  2
diminishes, we have a solution !  The trainer we will build, allows  for
your own personal preference, that is, to cheat or not - the choice will
be yours !

This means that when you  have successfully understood the rudiments  of
this article, you should be able to implement your own trainers on other
Public Domain games (or special versions as released on Cover Disks) and
implement the appropriate choices. Not everyone wants to cheat at  every
game they come across, however hard they may be ......

Ready ?  Let's train a game.
----------------------------

The first thing to do is prepare a working disk. I suggest you keep  all
the necessary source code, depackers  and dis/assembling utilities on  a
seperate disk, and have a work disk  with the target game on. Unless  of
course you own a hard-drive, which means you can keep everything  inside
a single partition/folder.

The next task  to perform  after your disks/folders  are set  up, is  to
depack the  main  executable file.  You  will notice  that  the  working
example, PotHole 2 has only one  main file and an accompanying  document
file. This is one of the reasons I have picked this game as its  target,
the other being that is the latest one that I have done.

To depack the main file, you can run either my own Multi Depacker or the
Mega/New Depack by Mike Watson. Both have been included as part of  this
article on the accompanying ST Club disk.

Click  on   the  appropriate   option   to  load   in  the   main   file
('POTHOLE2.PRG') in order to  depack it. You will  be told by  whichever
depacker that the packer used was Ice  v2.40 by Axe. This is one of  the
more popular file  packers in use,  especially when you  consider it  is
also one  of  the few  that  work with  the  Falcon. Once  the  file  is
depacked, save it out as 'POTHOLE2.WRK' to your work disk. '.WRK'  being
the extension I will use to denote working files.

Searching, searching ...
------------------------

Now, you must get MONST2 loaded, along with the program  'POTHOLE2.WRK'.
This is performed by loading up MONST2,  and then typing in the name  of
the file you wish to play about with. If you accidentally press ESC, you
can access the Load  Executable option by pressing  Control & L. DO  NOT
load in  any  program you  want  to train  via  the Binary  Load  option
(pressing B) as the Program, Data,  BSS and possible Symbol tables  will
not be allocated.

Once you have got  POTHOLE2.WRK loaded, the  immediate thing you  should
look at  is the  2nd  window of  MONST2. This  is  where all  the  68000
instructions are displayed in assembly  language. I've picked PotHole  2
for another reason, and that is because  the author has left in all  the
debugging symbols when they assembled their final version that was  sent
to ST Format.

This makes the donkey-work of finding the internal game variables,  such
as lives, oxygen etc. so much easier !

If you press L (on its own, no Control or Shift), you will be  presented
with page after page of symbols that were found by MONST2 when it loaded
in and  examined  'POTHOLE2.WRK'. They  are  sorted into  length  order,
smallest first. If you press  a key to access  each page, you will  come
across the  five  letter symbols  fairly  quickly, check  each  page  of
five-letter symbols for the magic one entitled, 'lives'.

Pressing ESC will bring you back  to the MONST2 main screen. Ensure  you
are in Window 2  (press TAB until your  cursor highlights Window 2)  and
press G (for GOTO),  now enter L  for Longword, and  now enter the  text
'lives'.

After pressing  Enter,  there will  be  screen update  and  MONST2  runs
through the  code  of  'POTHOLE2.WRK'  looking  for  any  occurences  of
'lives'. It does  not look  for any  text contained  within the  program
which spell out 'lives',  but actual addresses  (ie $65432) which  would
normally appear  in  this window,  were  it  not for  the  symbol  table
replacing certain addresses with English representations.

The first occurence it should find fairly quickly, but you will have  to
press the left  arrow once. This  aligns the assembly  window (known  as
'm2' from now on), so that the full instruction can be read and not half
of the instruction which contained the address that 'lives' represents.

You should see the following code appear on the top line of 'm2':-

      SUBQ.B #1,lives

This instruction simply means, subtract 1 from the lives counter,  which
is a single byte in length. The other possibilities you may come  across
in other programs are:

      SUB.B  #1,lives
      SUBQ.W #1,lives
      SUB.W  #1,lives
      SUBQ.L #1,lives 
      SUB.L  #1,lives 

The last two  examples are fairly  rare! Usually due  to SLOPPY or  LAZY
programming. If  found, it  could be  that the  game, for  some  reason,
expects you to  either start with  (or have  at one point  in the  game)
anywhere in  the region  of 1  - 16777215  ($FFFFFF) lives  ! Hence  its
rareness inside most 68000 coded games. Compiled langugages (ie. STOS  &
GFA BASIC)  will  allow  this  kind of  coding,  unless  the  respective
compilers are  told to  force byte  or word  lengths on  all or  certain
variables.

Notice the 'Q' present after the  'SUB', this is the 'Q'uick version  of
the subtract  statement. It  takes up  1  word less  in memory,  and  is
slightly harder to train !!

Getting down to the nitty-gritty
--------------------------------

To train POTHOLE2, we can choose  from 3 methods. The simplest one,  and
the one  used successfully  most of  the  time is  where we  change  the
subtraction into an addition. We will change the program to perform this
instead:-

      ADDQ.B #1,lives

In other words we are going to  change the program so that when you  die
in the game,  you will be  given an  extra life, instead  of losing  the
current one, and possibly  resulting in the  immortal words 'GAME  OVER'
being displayed on the screen.

The two other methods are:-

a) We alter the  SUB instruction for  a TST instruction.  In most  games
   where the SUB has to happen before any TSTing is done. This fools the
   game into never taking any lives away, but merely checking the  value
   of lives and then performing an action. In Pothole 2, the code  would
   now look like:
        
        TST.B  lives
        BMI    game_over

   Test the  lives counter  and  BRA if  MINUS  value to  the  game_over
   routine. In other words,  there is no  subtraction performed at  all.
   The lives will permenantly be set at  4 and will never get altered  -
   unless you gain a life.


b) We  alter  the  code  order  by  jumping  over  the  subtraction  and
   subsequent checks made against the  lives counter by adding a  BRAnch
   instruction. The code will now look like this:

   41140     BRA 41148   ------  Jump to the following line, completely
   41144     BMI game_over    |  ignoring this piece of code !!
   41148     rest of game <----

On to the hacking .....
-----------------------

Now, if you press TAB, the cursor moves to the hexadecimal/ASCII  window
(known as 'm3'). Once inside this window, we need to set the address  to
be exactly the same as the  assembly window ('m2'). Press Alternate &  A
to get an input box asking you for an address (in hex or a label). Enter
the word 'm2' and press  Enter. The 'm3' window  will now have the  same
address as the 'm2' window.

The first 2 hexadecimal  numbers inside the 'm3'  window should read  as
'5339' - if not, then you have done something wrong !
 
We are now going  to alter a  single byte to  change the subtraction  of
'lives' into an addition. Press Alternate & E, now type in the number 52
and then press ESCAPE. You should now  have the number 5239 in 'm3'  and
in 'm2' there should be a slight  alteration of the assembly code !  And
that's it, you have now trained the game !

If you are in  low resolution when you  loaded MONST2 &  'POTHOLE2.WRK',
you should be able to press Control & R to run the game and play to your
hearts content for  as long as  you can  stand it ....  that's the  only
drawback to implementing  trainers for  games -  you will  tire of  them
easily !

Maybe the title of this article should be changed to:-

'Cheats Always Prosper, But Tire Easily Of Always Winning' ?

Now all you need to do is grab  hold of some of your PD/Cover disks  and
practice a  little  more  training.  Try adding  some  of  the  features
outlined above, such as  oxygen depletion being  removed and other  such
options.

You will notice in Figure 1, that  I have included a table with some  of
my previous  trainer efforts  over  the years.  If  you get  stuck  when
attempting a trainer on any of these particular games, then have a  look
at the table and see if you can find where you might be going wrong.

When you run out of PD games, have a go at one of the big boys. Whilst I
am not trying to condone piracy or hacking, there is much pleasure to be
gained from implementing the kind  of trainer options you always  wanted
to be in some of the harder commercial games !

Completing the job
------------------

If you are interested in doing a permenant trainer for each game, as  in
an executable  file with  the  trainer bolted  on  the front,  you  will
require to work out the offsets of  the code you have altered. You  will
also require the source code, which is covered in the next section.

At the address where you found the lives decrement instruction, ensuring
you are at the correct line, press Alternate & O. Now, type in the line

  m2-pc

The resultant number (given in hexadecimal and decimal) is the number of
bytes from the start  of the main program  to where the lives  decrement
instruction is found.  This offset is  entered into the  source code  to
allow the trainer to alter the code at the correct address.

The offset is found  the same way  for the bolt-on  and loader types  of
trainer with one  slight exception.  Due to  the nature  of the  trainer
code, which are  both completely PC-relative,  there is a  limit on  how
much of the offset can  be included in one line  of code. I will try  to
include an example and the appropriate fix for this limitation as a part
of the follow up article. However, if you are fluent in 68000 assembler,
you should be competant enough to add this feature yourself.

Finally, the assembly code !
----------------------------

For those of you  who require to keep  a copy of their  PD games in  its
trainer+game form, you will need to edit the code using a file-editor so
that the game is always trained OR you can use the piece of accompanying
source code to allow you to choose whether you want the trainer  mode(s)
being used when you play the game,  or for when you feel lucky, you  can
opt to play the game properly (and die properly as well!).

The source code has  been enhanced and adapted  from a packer  front-end
which was distributed with the Pompey Pirates Packer v1.9 by JPM.  There
maybe those few readers who may of  heard of this group, but only  those
readers will know the noteriety of  the group, whilst the rest can  only
assume ..... it was  one of this groups'  members who made the  infamous
30+ trainer options for a Flight Simulator !

The source code has been adapted to  work from GENST2, so I will  assume
it will work from most assemblers which allow conditional assembly  code
and inclusion of data files at addresses. The conditional assembly  used
will allow various effects, including fading of text in/out,  displaying
text, forcing low resolution  and much more. But  don't play with  these
options, UNTIL you are sure that your first trainer works properly.

Load up GENST2 and the source code.  What the code does is allow you  to
display some text on the screen, whilst presenting the user with one  or
more options to alter  the code of  the game stored at  the end of  this
little front-end. Once the  user has chosen  their trainer(s), the  code
for the game is altered according to the users selection of the included
trainers and  then  physically moved  to  the start  address  where  the
front-end was loaded in memory - thus fooling the game into thinking you
double-clicked it as per usual from the desktop.

The source code in depth
------------------------

The source code  contains a  number of  features which  have been  coded
using conditional assembly statements found  in Devpac 2. Please do  not
alter these until you are very sure that your trainer works. The options
available are:

Force Low resolution
Force Medium resolution
Fade Palette in/out for text displays in LOW resolution only

For those fluent in 68000 code,  a brief explanation of the source  code
in Figure 2. *I assume the source 'POT+.S' will be Figure 2*

a) The code will display  the text on screen  and present the user  with
   the trainer options.

b) These options are  acted upon immediately,  by altering the  original
   program code which is stored at the end of the trainer front-end.

c) The code will then relocate the original program to the start address
   which it was loaded, overwriting the trainer front-end.

d) Control is now handed back to the original program, with all, some or
   none of the trainer options already implemented for the player.

Here's one I prepared earlier
-----------------------------

If you have a look at my source code for this example ('POT+.S') on this
months ST Club Disk, you will notice  that I have altered the code in  a
different way. This is not to say that ADDQ.B #1 etc. will not work, but
I prefered to try another alteration method!

All I have done is  use the BRA instruction to  jump past the code  that
subtracts 1 from your lives count  and also replace the redundant  'Game
Over' checks with my own 'signature' ! Everyone has an ego of some size,
in my own preferenance I place my 'signature' over redundant code !!

You will also find the 'load and go' source on the disk which will  show
you how to perform the  same task as the  bolt-on trainer, but with  the
extra file being present on  a disk. This source  code is a lot  smaller
and is shown in Figure 3.

Parting is such sweet sorrow
----------------------------

Unfortunately, I  have  no  idea when  I  shall  be able  to  write  the
remainder of  the follow  up to  this article.  This is  due to  several
factors, including a few  contract programming jobs on  the IBM PC,  job
hunting and the  fact that  I rarely  use my  Atari at  all these  days.
Shameful to admit, but it is true.

The follow  up  article, if  requested  by  the readers,  will  be  more
accessible to those people who prefer  to program in other higher  level
lanuguages.

It will contain source code in GFA BASIC as well as STOS. Unfortunately,
I do not possess any  modicum of talent in C,  so you C programmers  out
there will have to convert one of the BASIC variants.

Hopefully, once I  have finished designing  and compiling this  Emulator
CD-ROM which has taken up so much of my spare time, I will blow the dust
from the scribblings I have done so far and finish off this second part.

And remember folks .......

                            CHEATS ALWAYS PROSPER 


Unless Lord Nolan's Committee finds you out !


