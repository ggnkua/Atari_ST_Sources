Techniques and the sprite data structures:

The triple screen technique.

   Most of you will be familiar  with the two screen  technique;  one
screen for building up the image while the other displays it,but this
is not very good if the program cycle takes just over 1  frame to do,
because  it then zaps the speed down to 25 frames per second, because
of the  wait VBL  routine  needed to stop  flickering.  To avoid this
huge slowdown,  you can use three screens, and only wait for a VBL if
one has not  passed  since the  last screen  swap.  This keeps things
running  at a  nice speed, even  if the cycle  just takes that little
bit more  than one frame. The routine obviously uses 32K more memory,
but who's counting?
   The routine 'swap' uses three screens.
   Another technique you may be  familiar with that is not  used here
is the 'blank the sprite,  move then reprint'  principle.  Here,  the
whole background is  copied to the back  screen every cycle,  as this
makes the scrolling routine easier to write.  This last  technique is
used extensively in the finishing sequence.


Two player games:

Two of the programs on this disk are, as I'm sure by now you'll know,
for two players.  A useful thing to do when dealing with games where
the two players' controlling routines are virtually identical is to
pass the address of the relevant player's data structure to the routine,
say in a0, and if needed, the start of the other player's data structure
in, say, a1.  Put any data needed to tell which one you are, if this is
required, at some point in the structure and you're well on the way to
getting 2 players up and running.  This is used in both Tanx and Grav
Battles.


Sprite data structures: 16x16:

  The 16x16 data structure is remarkably straight forward, each spri-
te takes up 160 bytes of memory, 10 bytes per line of the sprite; the
line data is made up as follows:

1 x W	mask data
4 x W	4 bitplanes

