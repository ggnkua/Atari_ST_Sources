Techniques and the sprite data structures:

The triple screen technique.

   Most of you will be familiar  with the two screen  technique;  one
screen for building up the image while the other displays it,but this
is not very good if the program cycle takes just over 1  frame to do,
because  it then zaps the speed down to 25 frames per second, because
of the  wait VBL  routine  needed to stop  flickering.  To avoid this
huge slowdown,  you can use three screens, and only wait for a VBL if
one has not  passed  since the  last screen  swap.  This keeps things
running  at a  nice speed, even  if the cycle  just takes that little
bit more  than one frame. The routine obviously uses 32K more memory,
but who's counting?
   The routine 'swap' uses three screens.
   Another technique you may be  familiar with that is not  used here
is the 'blank the sprite,  move then reprint'  principle.  Here,  the
whole background is  copied to the back  screen every cycle,  as this
makes the scrolling routine easier to write.  This last  technique is
used extensively in the finishing sequence.


The scrolling technique:

   The way the screen is scrolled is simple, but  was a  nightmare to
code the first time I did it, and can easily turn your brain  inside-
out if you think about it too hard.  The area 'scrlbuf' contains  the
background for the current screen,  but its not that simple.  scrlbuf
is realy a circular buffer that is 160*192 + 160*32  bytes long.  The
display is copied from  a window that scrolls  around in this buffer,
which, if it goes off one end of the buffer, comes  back on the other
end.  The buffer is  32  lines  larger than  the screen  to limit the
amount of writing to be done to it, hence the only writing  to it are
during the horizontal scroll  or if the vertical scroll  reveals  two
new rows.
   Scrolling  horizontally is done by  16 pixels,  and is achieved by
simply copying the whole buffer over itself, but two bytes displaced,
and drawing the new column.  


Sprite data structures: 16x16:

  The 16x16 data structure is remarkably straight forward, each spri-
te takes up 160 bytes of memory, 10 bytes per line of the sprite; the
line data is made up as follows:

1 x W	mask data
4 x W	4 bitplanes

32x32:

  The 32x32 data structure is nearly as easy as the 16x16 sprite
format:

2 x W	mask data for whole line
4 x (2 x W)
	bitplane data for whole line ( 4 bitplanes )
