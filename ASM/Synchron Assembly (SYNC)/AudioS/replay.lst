'
' Audio Sculpture Replay Routines
' Dedicated to Johanna!
' Copyright 1991 Synchron Assembly and Expose Software
'
' These sources may be freely used in any software, private or commercial,
' if it is announced that the routines come from Audio Sculpture...
'
RESERVE 100000
a%=MALLOC(100000)
mname$="d:\src\work\*.mod"                          ! Name of module to load...
IF a%>0
  BLOAD "a:\cyber.b",a%                    ! Load the replay routine
  prg_base%=a%+28
  '
  ' Load the desired module!
  '
  OPEN "i",#1,mname$                    ! Find length of Module
  len%=LOF(#1)
  CLOSE #1
  '
  b%=MALLOC(len%)                       ! Request Memory
  '
  IF b%>0
    BLOAD mname$,b%
    '
    {prg_base%+20}=b%       ! Pointer to Start of Module
    {prg_base%+24}=b%+len%  ! Pointer to End of Module
    POKE prg_base%+37,0     ! Output Mode Selector
    POKE prg_base%+38,1     ! Volume Control, 0=Off, 1=On
    POKE prg_base%+39,1     ! STE frequency (0=6.25kHz/1=12.5kHz/2=25kHz/3=50kHz)
    POKE prg_base%+40,49    ! Interrupt Frequency = 614400 divided by this value
    POKE prg_base%+41,0     ! Oversample, 0=Off, 1=On, only output mode 8
    '
    ' Find The Number of samples used and request additional memory needed...
    '
    CALL prg_base%                     ! Relocate Code and find amount of memory needed
    topmem%={prg_base%+28}             ! Pointer to end of bss of the replay routine...
    c%={prg_base%+32}                  ! Number of bytes needed just after the module...
    c%=MALLOC(c%)                      ! Request Memory
    IF c%>0
      '
      ' Start singing!
      '
      ON BREAK GOSUB exit
      OUT 4,18                         ! Turn off mouse to stop interrupt interference
      z%=prg_base%+12
      CALL z%
      '
      ' Waiting for a key or any other thing the dear User, that You,
      ' may think of!
      '
      GRAPHMODE 3
      roonken
      ' REPEAT
      ' PCIRCLE RANDOM(640),RANDOM(400),RANDOM(200)
      ' UNTIL INP?(2)
      '
      ' The end of it all!
      '
      z%=prg_base%+16
      CALL z%
      ~MFREE(c%)                        ! Release After Module Memory
    ENDIF
    ~MFREE(b%)                          ! Release Module Memory
  ENDIF
  ~MFREE(a%)                            ! Release Replay Code Memory
ENDIF
OUT 4,8                                 ! Turn On Mouse
'
> PROCEDURE exit
  z%=prg_base%+16
  CALL z%
  ~MFREE(c%)
  ~MFREE(b%)
  ~MFREE(a%)
  OUT 4,8
RETURN
PROCEDURE roonken
  ord%=400
  CLS
  n%=50
  DIM x%(n%),y%(n%),z%(n%),t%(n%)
  speed%=10
  min_speed%=2
  CLR vx%,vy%,vz%,vt%,p%
  CLR x%,y%,z%,t%
  CLR x0%,y0%,z0%,t0%
  vx%=RANDOM(8)+min_speed%
  vy%=RANDOM(8)+min_speed%
  vz%=RANDOM(8)+min_speed%
  vt%=RANDOM(8)+min_speed%
  PLOT x0%,y0%
  GRAPHMODE 3
  REPEAT
    LINE x0%,y0%,z0%,t0%
    p%=SUCC(p%) MOD n%
    x0%=x%(p%)
    y0%=y%(p%)
    z0%=z%(p%)
    t0%=t%(p%)
    ADD x%,vx%
    ADD y%,vy%
    ADD z%,vz%
    ADD t%,vt%
    LINE x%,y%,z%,t%
    x%(p%)=x%
    y%(p%)=y%
    z%(p%)=z%
    t%(p%)=t%
    IF x%<0
      vx%=RANDOM(speed%)+min_speed%
    ELSE IF x%>639
      vx%=-RANDOM(speed%)-min_speed%
    ENDIF
    IF y%<0
      vy%=RANDOM(speed%)+min_speed%
    ELSE IF y%>(ord%+men%)
      vy%=-RANDOM(speed%)-min_speed%
    ENDIF
    IF z%<0
      vz%=RANDOM(speed%)+min_speed%
    ELSE IF z%>639
      vz%=-RANDOM(speed%)-min_speed%
    ENDIF
    IF t%<0
      vt%=RANDOM(speed%)+min_speed%
    ELSE IF t%>ord%+men%
      vt%=-RANDOM(speed%)-min_speed%
    ENDIF
  UNTIL INP?(2)
  GRAPHMODE 0
  CLS
RETURN
